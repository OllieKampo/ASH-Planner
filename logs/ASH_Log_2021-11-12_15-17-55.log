[12-11-2021_15-17-55] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[12-11-2021_15-17-55] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[12-11-2021_15-17-55] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[12-11-2021_15-17-55] DEBUG :: __main__ >> Command line arguments:
'./test_problems/blocks_world_plus/BWP_system_laws.lp'
'./test_problems/blocks_world_plus/BWP_problem_large_2.lp'
'-conc'
'False'
'-ao'
'simple'
'-strat'
'basic'
'-bound'
'2'

[12-11-2021_15-17-55] DEBUG :: __main__ >> Parsed command line argumenys:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'])
('display_loader', None)
('domain_rules', None)
('domain_structure', None)
('problem_specifics', None)
('load_schema', None)
('plan_file', './solutions/plans/ASH_Plan_2021-11-12_15-17-55.txt')
('log_file', './logs/ASH_Log_2021-11-12_15-17-55.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2021-11-12_15-17-55.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'simple')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'standard')
('experimental_runs', 1)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', None)
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', False)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('top_level', None)
('bottom_level', 1)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', 2)
('bound_type', 'incremental')
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', True)
('save_grounding', False)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)

[12-11-2021_15-18-24] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_large_2.lp]

[12-11-2021_15-18-24] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'initial_state': True, 'entities': True, 'static_state': True, 'goal_state': True}.

[12-11-2021_15-18-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Large Problem :: Version 1                                            %%
%% Nine block setup, with the additional three on the table              %%
%% This problem has longer manipulation plans at all levels              %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%% The other three blocks are placed randomly on the table
holds(1, on((block, 7)), puzzle_room_table_middle, 0).
holds(1, on((block, 8)), puzzle_room_table_middle, 0).
holds(1, on((block, 9)), puzzle_room_table_middle, 0).
% holds(1, on((block, 7)), (block, 8), 0).
% holds(1, on((block, 8)), (block, 9), 0).
% holds(1, on((block, 9)), puzzle_room_table_middle, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..9).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_middle).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_middle).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 357 rules

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.0030617000000034977s

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:600:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:613:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:614:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:618:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:619:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:620:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:624:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:625:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:626:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:630:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:631:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:643:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:644:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:645:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:651:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:652:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:657:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:658:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.010057s.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001059s with result Satisfiable.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.010057s, Solving = 0.001059s, Total = 0.011116s, Memory = (RSS = 82.218750Mb, VMS = 72.285156Mb)
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-18-24] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[12-11-2021_15-18-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Large Problem :: Version 1                                            %%
%% Nine block setup, with the additional three on the table              %%
%% This problem has longer manipulation plans at all levels              %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%% The other three blocks are placed randomly on the table
holds(1, on((block, 7)), puzzle_room_table_middle, 0).
holds(1, on((block, 8)), puzzle_room_table_middle, 0).
holds(1, on((block, 9)), puzzle_room_table_middle, 0).
% holds(1, on((block, 7)), (block, 8), 0).
% holds(1, on((block, 8)), (block, 9), 0).
% holds(1, on((block, 9)), puzzle_room_table_middle, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..9).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_middle).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_middle).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[12-11-2021_15-18-24] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M). [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B).
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#false :- step <= minimum_search_length_bound; query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),FI,SS) :- restart_from(FI,SS); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 6; N <= 9; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
holds(1,on((block,7)),puzzle_room_table_middle,0).
holds(1,on((block,8)),puzzle_room_table_middle,0).
holds(1,on((block,9)),puzzle_room_table_middle,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,unordered_tower(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
final_goal(1,on((block,9)),puzzle_room_table_middle,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..9)).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_middle).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(colour,yellow).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_middle).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[12-11-2021_15-18-24] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[12-11-2021_15-18-24] DEBUG :: ASH Planner Main #1 >> Generating initial states...

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[12-11-2021_15-18-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 357 rules

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.002567899999998957s

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[12-11-2021_15-18-24] WARNING :: Logic Program Main #1 || Generate Initial States #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.160720s.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.036585s with result Satisfiable.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.160720s, Solving = 0.036585s, Total = 0.197305s, Memory = (RSS = 97.437500Mb, VMS = 87.523438Mb)
Final Model :: Total atoms = 3948, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-18-24] DEBUG :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.160720s, Solving = 0.036585s, Total = 0.197305s, Memory = (RSS = 97.437500Mb, VMS = 87.523438Mb)
Final Model :: Total atoms = 3948, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-18-24] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, complete(yellow), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in((block,7)), puzzle_room, 0)
holds(3, in((block,8)), puzzle_room, 0)
holds(3, in((block,9)), puzzle_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,1),(block,7)), false, 0)
holds(3, in_tower((block,1),(block,8)), false, 0)
holds(3, in_tower((block,1),(block,9)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,7)), false, 0)
holds(3, in_tower((block,2),(block,8)), false, 0)
holds(3, in_tower((block,2),(block,9)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,7)), false, 0)
holds(3, in_tower((block,3),(block,8)), false, 0)
holds(3, in_tower((block,3),(block,9)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,7)), false, 0)
holds(3, in_tower((block,4),(block,8)), false, 0)
holds(3, in_tower((block,4),(block,9)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,7)), false, 0)
holds(3, in_tower((block,5),(block,8)), false, 0)
holds(3, in_tower((block,5),(block,9)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,7)), false, 0)
holds(3, in_tower((block,6),(block,8)), false, 0)
holds(3, in_tower((block,6),(block,9)), false, 0)
holds(3, in_tower((block,7),(block,1)), false, 0)
holds(3, in_tower((block,7),(block,2)), false, 0)
holds(3, in_tower((block,7),(block,3)), false, 0)
holds(3, in_tower((block,7),(block,4)), false, 0)
holds(3, in_tower((block,7),(block,5)), false, 0)
holds(3, in_tower((block,7),(block,6)), false, 0)
holds(3, in_tower((block,7),(block,7)), true, 0)
holds(3, in_tower((block,7),(block,8)), false, 0)
holds(3, in_tower((block,7),(block,9)), false, 0)
holds(3, in_tower((block,8),(block,1)), false, 0)
holds(3, in_tower((block,8),(block,2)), false, 0)
holds(3, in_tower((block,8),(block,3)), false, 0)
holds(3, in_tower((block,8),(block,4)), false, 0)
holds(3, in_tower((block,8),(block,5)), false, 0)
holds(3, in_tower((block,8),(block,6)), false, 0)
holds(3, in_tower((block,8),(block,7)), false, 0)
holds(3, in_tower((block,8),(block,8)), true, 0)
holds(3, in_tower((block,8),(block,9)), false, 0)
holds(3, in_tower((block,9),(block,1)), false, 0)
holds(3, in_tower((block,9),(block,2)), false, 0)
holds(3, in_tower((block,9),(block,3)), false, 0)
holds(3, in_tower((block,9),(block,4)), false, 0)
holds(3, in_tower((block,9),(block,5)), false, 0)
holds(3, in_tower((block,9),(block,6)), false, 0)
holds(3, in_tower((block,9),(block,7)), false, 0)
holds(3, in_tower((block,9),(block,8)), false, 0)
holds(3, in_tower((block,9),(block,9)), true, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, on((block,7)), puzzle_room_table, 0)
holds(3, on((block,8)), puzzle_room_table, 0)
holds(3, on((block,9)), puzzle_room_table, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, tower_base((block,7)), true, 0)
holds(3, tower_base((block,8)), true, 0)
holds(3, tower_base((block,9)), true, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), false, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)
holds(3, unordered_tower((block,7)), false, 0)
holds(3, unordered_tower((block,8)), false, 0)
holds(3, unordered_tower((block,9)), false, 0)

[12-11-2021_15-18-24] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, complete(yellow), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in((block,7)), puzzle_room, 0)
holds(2, in((block,8)), puzzle_room, 0)
holds(2, in((block,9)), puzzle_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,1),(block,7)), false, 0)
holds(2, in_tower((block,1),(block,8)), false, 0)
holds(2, in_tower((block,1),(block,9)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,7)), false, 0)
holds(2, in_tower((block,2),(block,8)), false, 0)
holds(2, in_tower((block,2),(block,9)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,7)), false, 0)
holds(2, in_tower((block,3),(block,8)), false, 0)
holds(2, in_tower((block,3),(block,9)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,7)), false, 0)
holds(2, in_tower((block,4),(block,8)), false, 0)
holds(2, in_tower((block,4),(block,9)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,7)), false, 0)
holds(2, in_tower((block,5),(block,8)), false, 0)
holds(2, in_tower((block,5),(block,9)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,7)), false, 0)
holds(2, in_tower((block,6),(block,8)), false, 0)
holds(2, in_tower((block,6),(block,9)), false, 0)
holds(2, in_tower((block,7),(block,1)), false, 0)
holds(2, in_tower((block,7),(block,2)), false, 0)
holds(2, in_tower((block,7),(block,3)), false, 0)
holds(2, in_tower((block,7),(block,4)), false, 0)
holds(2, in_tower((block,7),(block,5)), false, 0)
holds(2, in_tower((block,7),(block,6)), false, 0)
holds(2, in_tower((block,7),(block,7)), true, 0)
holds(2, in_tower((block,7),(block,8)), false, 0)
holds(2, in_tower((block,7),(block,9)), false, 0)
holds(2, in_tower((block,8),(block,1)), false, 0)
holds(2, in_tower((block,8),(block,2)), false, 0)
holds(2, in_tower((block,8),(block,3)), false, 0)
holds(2, in_tower((block,8),(block,4)), false, 0)
holds(2, in_tower((block,8),(block,5)), false, 0)
holds(2, in_tower((block,8),(block,6)), false, 0)
holds(2, in_tower((block,8),(block,7)), false, 0)
holds(2, in_tower((block,8),(block,8)), true, 0)
holds(2, in_tower((block,8),(block,9)), false, 0)
holds(2, in_tower((block,9),(block,1)), false, 0)
holds(2, in_tower((block,9),(block,2)), false, 0)
holds(2, in_tower((block,9),(block,3)), false, 0)
holds(2, in_tower((block,9),(block,4)), false, 0)
holds(2, in_tower((block,9),(block,5)), false, 0)
holds(2, in_tower((block,9),(block,6)), false, 0)
holds(2, in_tower((block,9),(block,7)), false, 0)
holds(2, in_tower((block,9),(block,8)), false, 0)
holds(2, in_tower((block,9),(block,9)), true, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, on((block,7)), puzzle_room_table, 0)
holds(2, on((block,8)), puzzle_room_table, 0)
holds(2, on((block,9)), puzzle_room_table, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, tower_base((block,7)), true, 0)
holds(2, tower_base((block,8)), true, 0)
holds(2, tower_base((block,9)), true, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), false, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)
holds(2, unordered_tower((block,7)), false, 0)
holds(2, unordered_tower((block,8)), false, 0)
holds(2, unordered_tower((block,9)), false, 0)

[12-11-2021_15-18-24] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, complete(yellow), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in((block,7)), (puzzle_room,1), 0)
holds(1, in((block,8)), (puzzle_room,1), 0)
holds(1, in((block,9)), (puzzle_room,1), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,1),(block,7)), false, 0)
holds(1, in_tower((block,1),(block,8)), false, 0)
holds(1, in_tower((block,1),(block,9)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,7)), false, 0)
holds(1, in_tower((block,2),(block,8)), false, 0)
holds(1, in_tower((block,2),(block,9)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,7)), false, 0)
holds(1, in_tower((block,3),(block,8)), false, 0)
holds(1, in_tower((block,3),(block,9)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,7)), false, 0)
holds(1, in_tower((block,4),(block,8)), false, 0)
holds(1, in_tower((block,4),(block,9)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,7)), false, 0)
holds(1, in_tower((block,5),(block,8)), false, 0)
holds(1, in_tower((block,5),(block,9)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,7)), false, 0)
holds(1, in_tower((block,6),(block,8)), false, 0)
holds(1, in_tower((block,6),(block,9)), false, 0)
holds(1, in_tower((block,7),(block,1)), false, 0)
holds(1, in_tower((block,7),(block,2)), false, 0)
holds(1, in_tower((block,7),(block,3)), false, 0)
holds(1, in_tower((block,7),(block,4)), false, 0)
holds(1, in_tower((block,7),(block,5)), false, 0)
holds(1, in_tower((block,7),(block,6)), false, 0)
holds(1, in_tower((block,7),(block,7)), true, 0)
holds(1, in_tower((block,7),(block,8)), false, 0)
holds(1, in_tower((block,7),(block,9)), false, 0)
holds(1, in_tower((block,8),(block,1)), false, 0)
holds(1, in_tower((block,8),(block,2)), false, 0)
holds(1, in_tower((block,8),(block,3)), false, 0)
holds(1, in_tower((block,8),(block,4)), false, 0)
holds(1, in_tower((block,8),(block,5)), false, 0)
holds(1, in_tower((block,8),(block,6)), false, 0)
holds(1, in_tower((block,8),(block,7)), false, 0)
holds(1, in_tower((block,8),(block,8)), true, 0)
holds(1, in_tower((block,8),(block,9)), false, 0)
holds(1, in_tower((block,9),(block,1)), false, 0)
holds(1, in_tower((block,9),(block,2)), false, 0)
holds(1, in_tower((block,9),(block,3)), false, 0)
holds(1, in_tower((block,9),(block,4)), false, 0)
holds(1, in_tower((block,9),(block,5)), false, 0)
holds(1, in_tower((block,9),(block,6)), false, 0)
holds(1, in_tower((block,9),(block,7)), false, 0)
holds(1, in_tower((block,9),(block,8)), false, 0)
holds(1, in_tower((block,9),(block,9)), true, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, on((block,7)), puzzle_room_table_middle, 0)
holds(1, on((block,8)), puzzle_room_table_middle, 0)
holds(1, on((block,9)), puzzle_room_table_middle, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, tower_base((block,7)), true, 0)
holds(1, tower_base((block,8)), true, 0)
holds(1, tower_base((block,9)), true, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), false, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)
holds(1, unordered_tower((block,7)), false, 0)
holds(1, unordered_tower((block,8)), false, 0)
holds(1, unordered_tower((block,9)), false, 0)

[12-11-2021_15-18-24] DEBUG :: ASH Planner Main #1 >> Generating final-goals...

[12-11-2021_15-18-24] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[12-11-2021_15-18-24] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 357 rules

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.004032700000003331s

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[12-11-2021_15-18-24] WARNING :: Logic Program Main #1 || Generate Final Goals #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.103837s.

[12-11-2021_15-18-24] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.051845s with result Satisfiable.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.103837s, Solving = 0.051845s, Total = 0.155681s, Memory = (RSS = 97.316406Mb, VMS = 87.628906Mb)
Final Model :: Total atoms = 5115, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.103837s, Solving = 0.051845s, Total = 0.155681s, Memory = (RSS = 97.316406Mb, VMS = 87.628906Mb)
Final Model :: Total atoms = 5115, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), true, true)
final_goal(3, complete(yellow), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,1),(block,7)), false, true)
final_goal(3, in_tower((block,1),(block,8)), false, true)
final_goal(3, in_tower((block,1),(block,9)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,7)), false, true)
final_goal(3, in_tower((block,2),(block,8)), false, true)
final_goal(3, in_tower((block,2),(block,9)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,7)), false, true)
final_goal(3, in_tower((block,3),(block,8)), false, true)
final_goal(3, in_tower((block,3),(block,9)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,7)), false, true)
final_goal(3, in_tower((block,4),(block,8)), false, true)
final_goal(3, in_tower((block,4),(block,9)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,7)), false, true)
final_goal(3, in_tower((block,5),(block,8)), false, true)
final_goal(3, in_tower((block,5),(block,9)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, in_tower((block,6),(block,7)), false, true)
final_goal(3, in_tower((block,6),(block,8)), false, true)
final_goal(3, in_tower((block,6),(block,9)), false, true)
final_goal(3, in_tower((block,7),(block,1)), false, true)
final_goal(3, in_tower((block,7),(block,2)), false, true)
final_goal(3, in_tower((block,7),(block,3)), false, true)
final_goal(3, in_tower((block,7),(block,4)), false, true)
final_goal(3, in_tower((block,7),(block,5)), false, true)
final_goal(3, in_tower((block,7),(block,6)), false, true)
final_goal(3, in_tower((block,7),(block,7)), false, true)
final_goal(3, in_tower((block,7),(block,8)), false, true)
final_goal(3, in_tower((block,7),(block,9)), false, true)
final_goal(3, in_tower((block,8),(block,1)), false, true)
final_goal(3, in_tower((block,8),(block,2)), false, true)
final_goal(3, in_tower((block,8),(block,3)), false, true)
final_goal(3, in_tower((block,8),(block,4)), false, true)
final_goal(3, in_tower((block,8),(block,5)), false, true)
final_goal(3, in_tower((block,8),(block,6)), false, true)
final_goal(3, in_tower((block,8),(block,7)), false, true)
final_goal(3, in_tower((block,8),(block,8)), false, true)
final_goal(3, in_tower((block,8),(block,9)), false, true)
final_goal(3, in_tower((block,9),(block,1)), false, true)
final_goal(3, in_tower((block,9),(block,2)), false, true)
final_goal(3, in_tower((block,9),(block,3)), false, true)
final_goal(3, in_tower((block,9),(block,4)), false, true)
final_goal(3, in_tower((block,9),(block,5)), false, true)
final_goal(3, in_tower((block,9),(block,6)), false, true)
final_goal(3, in_tower((block,9),(block,7)), true, true)
final_goal(3, in_tower((block,9),(block,8)), true, true)
final_goal(3, in_tower((block,9),(block,9)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, on((block,7)), (block,8), true)
final_goal(3, on((block,8)), (block,9), true)
final_goal(3, on((block,9)), puzzle_room_table, true)
final_goal(3, tower_base((block,1)), false, true)
final_goal(3, tower_base((block,2)), false, true)
final_goal(3, tower_base((block,3)), true, true)
final_goal(3, tower_base((block,4)), false, true)
final_goal(3, tower_base((block,5)), false, true)
final_goal(3, tower_base((block,6)), true, true)
final_goal(3, tower_base((block,7)), false, true)
final_goal(3, tower_base((block,8)), false, true)
final_goal(3, tower_base((block,9)), true, true)
final_goal(3, unordered_tower((block,1)), false, true)
final_goal(3, unordered_tower((block,2)), false, true)
final_goal(3, unordered_tower((block,3)), false, true)
final_goal(3, unordered_tower((block,4)), false, true)
final_goal(3, unordered_tower((block,5)), false, true)
final_goal(3, unordered_tower((block,6)), false, true)
final_goal(3, unordered_tower((block,7)), false, true)
final_goal(3, unordered_tower((block,8)), false, true)
final_goal(3, unordered_tower((block,9)), false, true)

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), false, false)
final_goal(3, complete(red), false, false)
final_goal(3, complete(yellow), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,1),(block,7)), true, false)
final_goal(3, in_tower((block,1),(block,8)), true, false)
final_goal(3, in_tower((block,1),(block,9)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,7)), true, false)
final_goal(3, in_tower((block,2),(block,8)), true, false)
final_goal(3, in_tower((block,2),(block,9)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,7)), true, false)
final_goal(3, in_tower((block,3),(block,8)), true, false)
final_goal(3, in_tower((block,3),(block,9)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,7)), true, false)
final_goal(3, in_tower((block,4),(block,8)), true, false)
final_goal(3, in_tower((block,4),(block,9)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,7)), true, false)
final_goal(3, in_tower((block,5),(block,8)), true, false)
final_goal(3, in_tower((block,5),(block,9)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, in_tower((block,6),(block,7)), true, false)
final_goal(3, in_tower((block,6),(block,8)), true, false)
final_goal(3, in_tower((block,6),(block,9)), true, false)
final_goal(3, in_tower((block,7),(block,1)), true, false)
final_goal(3, in_tower((block,7),(block,2)), true, false)
final_goal(3, in_tower((block,7),(block,3)), true, false)
final_goal(3, in_tower((block,7),(block,4)), true, false)
final_goal(3, in_tower((block,7),(block,5)), true, false)
final_goal(3, in_tower((block,7),(block,6)), true, false)
final_goal(3, in_tower((block,7),(block,7)), true, false)
final_goal(3, in_tower((block,7),(block,8)), true, false)
final_goal(3, in_tower((block,7),(block,9)), true, false)
final_goal(3, in_tower((block,8),(block,1)), true, false)
final_goal(3, in_tower((block,8),(block,2)), true, false)
final_goal(3, in_tower((block,8),(block,3)), true, false)
final_goal(3, in_tower((block,8),(block,4)), true, false)
final_goal(3, in_tower((block,8),(block,5)), true, false)
final_goal(3, in_tower((block,8),(block,6)), true, false)
final_goal(3, in_tower((block,8),(block,7)), true, false)
final_goal(3, in_tower((block,8),(block,8)), true, false)
final_goal(3, in_tower((block,8),(block,9)), true, false)
final_goal(3, in_tower((block,9),(block,1)), true, false)
final_goal(3, in_tower((block,9),(block,2)), true, false)
final_goal(3, in_tower((block,9),(block,3)), true, false)
final_goal(3, in_tower((block,9),(block,4)), true, false)
final_goal(3, in_tower((block,9),(block,5)), true, false)
final_goal(3, in_tower((block,9),(block,6)), true, false)
final_goal(3, in_tower((block,9),(block,7)), false, false)
final_goal(3, in_tower((block,9),(block,8)), false, false)
final_goal(3, in_tower((block,9),(block,9)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), (block,7), false)
final_goal(3, on((block,1)), (block,8), false)
final_goal(3, on((block,1)), (block,9), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), (block,7), false)
final_goal(3, on((block,2)), (block,8), false)
final_goal(3, on((block,2)), (block,9), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), (block,7), false)
final_goal(3, on((block,3)), (block,8), false)
final_goal(3, on((block,3)), (block,9), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), (block,7), false)
final_goal(3, on((block,4)), (block,8), false)
final_goal(3, on((block,4)), (block,9), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), (block,7), false)
final_goal(3, on((block,5)), (block,8), false)
final_goal(3, on((block,5)), (block,9), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), (block,7), false)
final_goal(3, on((block,6)), (block,8), false)
final_goal(3, on((block,6)), (block,9), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,7)), (block,1), false)
final_goal(3, on((block,7)), (block,2), false)
final_goal(3, on((block,7)), (block,3), false)
final_goal(3, on((block,7)), (block,4), false)
final_goal(3, on((block,7)), (block,5), false)
final_goal(3, on((block,7)), (block,6), false)
final_goal(3, on((block,7)), (block,9), false)
final_goal(3, on((block,7)), nothing, false)
final_goal(3, on((block,7)), puzzle_room_table, false)
final_goal(3, on((block,8)), (block,1), false)
final_goal(3, on((block,8)), (block,2), false)
final_goal(3, on((block,8)), (block,3), false)
final_goal(3, on((block,8)), (block,4), false)
final_goal(3, on((block,8)), (block,5), false)
final_goal(3, on((block,8)), (block,6), false)
final_goal(3, on((block,8)), (block,7), false)
final_goal(3, on((block,8)), nothing, false)
final_goal(3, on((block,8)), puzzle_room_table, false)
final_goal(3, on((block,9)), (block,1), false)
final_goal(3, on((block,9)), (block,2), false)
final_goal(3, on((block,9)), (block,3), false)
final_goal(3, on((block,9)), (block,4), false)
final_goal(3, on((block,9)), (block,5), false)
final_goal(3, on((block,9)), (block,6), false)
final_goal(3, on((block,9)), (block,7), false)
final_goal(3, on((block,9)), (block,8), false)
final_goal(3, on((block,9)), nothing, false)
final_goal(3, tower_base((block,1)), true, false)
final_goal(3, tower_base((block,2)), true, false)
final_goal(3, tower_base((block,3)), false, false)
final_goal(3, tower_base((block,4)), true, false)
final_goal(3, tower_base((block,5)), true, false)
final_goal(3, tower_base((block,6)), false, false)
final_goal(3, tower_base((block,7)), true, false)
final_goal(3, tower_base((block,8)), true, false)
final_goal(3, tower_base((block,9)), false, false)
final_goal(3, unordered_tower((block,1)), true, false)
final_goal(3, unordered_tower((block,2)), true, false)
final_goal(3, unordered_tower((block,3)), true, false)
final_goal(3, unordered_tower((block,4)), true, false)
final_goal(3, unordered_tower((block,5)), true, false)
final_goal(3, unordered_tower((block,6)), true, false)
final_goal(3, unordered_tower((block,7)), true, false)
final_goal(3, unordered_tower((block,8)), true, false)
final_goal(3, unordered_tower((block,9)), true, false)

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), true, true)
final_goal(2, complete(yellow), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,7)), false, true)
final_goal(2, in_tower((block,1),(block,8)), false, true)
final_goal(2, in_tower((block,1),(block,9)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,7)), false, true)
final_goal(2, in_tower((block,2),(block,8)), false, true)
final_goal(2, in_tower((block,2),(block,9)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,7)), false, true)
final_goal(2, in_tower((block,3),(block,8)), false, true)
final_goal(2, in_tower((block,3),(block,9)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,7)), false, true)
final_goal(2, in_tower((block,4),(block,8)), false, true)
final_goal(2, in_tower((block,4),(block,9)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,7)), false, true)
final_goal(2, in_tower((block,5),(block,8)), false, true)
final_goal(2, in_tower((block,5),(block,9)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, in_tower((block,6),(block,7)), false, true)
final_goal(2, in_tower((block,6),(block,8)), false, true)
final_goal(2, in_tower((block,6),(block,9)), false, true)
final_goal(2, in_tower((block,7),(block,1)), false, true)
final_goal(2, in_tower((block,7),(block,2)), false, true)
final_goal(2, in_tower((block,7),(block,3)), false, true)
final_goal(2, in_tower((block,7),(block,4)), false, true)
final_goal(2, in_tower((block,7),(block,5)), false, true)
final_goal(2, in_tower((block,7),(block,6)), false, true)
final_goal(2, in_tower((block,7),(block,7)), false, true)
final_goal(2, in_tower((block,7),(block,8)), false, true)
final_goal(2, in_tower((block,7),(block,9)), false, true)
final_goal(2, in_tower((block,8),(block,1)), false, true)
final_goal(2, in_tower((block,8),(block,2)), false, true)
final_goal(2, in_tower((block,8),(block,3)), false, true)
final_goal(2, in_tower((block,8),(block,4)), false, true)
final_goal(2, in_tower((block,8),(block,5)), false, true)
final_goal(2, in_tower((block,8),(block,6)), false, true)
final_goal(2, in_tower((block,8),(block,7)), false, true)
final_goal(2, in_tower((block,8),(block,8)), false, true)
final_goal(2, in_tower((block,8),(block,9)), false, true)
final_goal(2, in_tower((block,9),(block,1)), false, true)
final_goal(2, in_tower((block,9),(block,2)), false, true)
final_goal(2, in_tower((block,9),(block,3)), false, true)
final_goal(2, in_tower((block,9),(block,4)), false, true)
final_goal(2, in_tower((block,9),(block,5)), false, true)
final_goal(2, in_tower((block,9),(block,6)), false, true)
final_goal(2, in_tower((block,9),(block,7)), true, true)
final_goal(2, in_tower((block,9),(block,8)), true, true)
final_goal(2, in_tower((block,9),(block,9)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, on((block,7)), (block,8), true)
final_goal(2, on((block,8)), (block,9), true)
final_goal(2, on((block,9)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, tower_base((block,7)), false, true)
final_goal(2, tower_base((block,8)), false, true)
final_goal(2, tower_base((block,9)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,6)), false, true)
final_goal(2, unordered_tower((block,7)), false, true)
final_goal(2, unordered_tower((block,8)), false, true)
final_goal(2, unordered_tower((block,9)), false, true)

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), false, false)
final_goal(2, complete(red), false, false)
final_goal(2, complete(yellow), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,1),(block,7)), true, false)
final_goal(2, in_tower((block,1),(block,8)), true, false)
final_goal(2, in_tower((block,1),(block,9)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,7)), true, false)
final_goal(2, in_tower((block,2),(block,8)), true, false)
final_goal(2, in_tower((block,2),(block,9)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,7)), true, false)
final_goal(2, in_tower((block,3),(block,8)), true, false)
final_goal(2, in_tower((block,3),(block,9)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,7)), true, false)
final_goal(2, in_tower((block,4),(block,8)), true, false)
final_goal(2, in_tower((block,4),(block,9)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,7)), true, false)
final_goal(2, in_tower((block,5),(block,8)), true, false)
final_goal(2, in_tower((block,5),(block,9)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,7)), true, false)
final_goal(2, in_tower((block,6),(block,8)), true, false)
final_goal(2, in_tower((block,6),(block,9)), true, false)
final_goal(2, in_tower((block,7),(block,1)), true, false)
final_goal(2, in_tower((block,7),(block,2)), true, false)
final_goal(2, in_tower((block,7),(block,3)), true, false)
final_goal(2, in_tower((block,7),(block,4)), true, false)
final_goal(2, in_tower((block,7),(block,5)), true, false)
final_goal(2, in_tower((block,7),(block,6)), true, false)
final_goal(2, in_tower((block,7),(block,7)), true, false)
final_goal(2, in_tower((block,7),(block,8)), true, false)
final_goal(2, in_tower((block,7),(block,9)), true, false)
final_goal(2, in_tower((block,8),(block,1)), true, false)
final_goal(2, in_tower((block,8),(block,2)), true, false)
final_goal(2, in_tower((block,8),(block,3)), true, false)
final_goal(2, in_tower((block,8),(block,4)), true, false)
final_goal(2, in_tower((block,8),(block,5)), true, false)
final_goal(2, in_tower((block,8),(block,6)), true, false)
final_goal(2, in_tower((block,8),(block,7)), true, false)
final_goal(2, in_tower((block,8),(block,8)), true, false)
final_goal(2, in_tower((block,8),(block,9)), true, false)
final_goal(2, in_tower((block,9),(block,1)), true, false)
final_goal(2, in_tower((block,9),(block,2)), true, false)
final_goal(2, in_tower((block,9),(block,3)), true, false)
final_goal(2, in_tower((block,9),(block,4)), true, false)
final_goal(2, in_tower((block,9),(block,5)), true, false)
final_goal(2, in_tower((block,9),(block,6)), true, false)
final_goal(2, in_tower((block,9),(block,7)), false, false)
final_goal(2, in_tower((block,9),(block,8)), false, false)
final_goal(2, in_tower((block,9),(block,9)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), (block,7), false)
final_goal(2, on((block,1)), (block,8), false)
final_goal(2, on((block,1)), (block,9), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), (block,7), false)
final_goal(2, on((block,2)), (block,8), false)
final_goal(2, on((block,2)), (block,9), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), (block,7), false)
final_goal(2, on((block,3)), (block,8), false)
final_goal(2, on((block,3)), (block,9), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), (block,7), false)
final_goal(2, on((block,4)), (block,8), false)
final_goal(2, on((block,4)), (block,9), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,7), false)
final_goal(2, on((block,5)), (block,8), false)
final_goal(2, on((block,5)), (block,9), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), (block,7), false)
final_goal(2, on((block,6)), (block,8), false)
final_goal(2, on((block,6)), (block,9), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,7)), (block,1), false)
final_goal(2, on((block,7)), (block,2), false)
final_goal(2, on((block,7)), (block,3), false)
final_goal(2, on((block,7)), (block,4), false)
final_goal(2, on((block,7)), (block,5), false)
final_goal(2, on((block,7)), (block,6), false)
final_goal(2, on((block,7)), (block,9), false)
final_goal(2, on((block,7)), nothing, false)
final_goal(2, on((block,7)), puzzle_room_table, false)
final_goal(2, on((block,8)), (block,1), false)
final_goal(2, on((block,8)), (block,2), false)
final_goal(2, on((block,8)), (block,3), false)
final_goal(2, on((block,8)), (block,4), false)
final_goal(2, on((block,8)), (block,5), false)
final_goal(2, on((block,8)), (block,6), false)
final_goal(2, on((block,8)), (block,7), false)
final_goal(2, on((block,8)), nothing, false)
final_goal(2, on((block,8)), puzzle_room_table, false)
final_goal(2, on((block,9)), (block,1), false)
final_goal(2, on((block,9)), (block,2), false)
final_goal(2, on((block,9)), (block,3), false)
final_goal(2, on((block,9)), (block,4), false)
final_goal(2, on((block,9)), (block,5), false)
final_goal(2, on((block,9)), (block,6), false)
final_goal(2, on((block,9)), (block,7), false)
final_goal(2, on((block,9)), (block,8), false)
final_goal(2, on((block,9)), nothing, false)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, tower_base((block,7)), true, false)
final_goal(2, tower_base((block,8)), true, false)
final_goal(2, tower_base((block,9)), false, false)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), true, false)
final_goal(2, unordered_tower((block,7)), true, false)
final_goal(2, unordered_tower((block,8)), true, false)
final_goal(2, unordered_tower((block,9)), true, false)

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), true, true)
final_goal(1, complete(yellow), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,9)), puzzle_room_table_middle, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, tower_base((block,7)), false, true)
final_goal(1, tower_base((block,8)), false, true)
final_goal(1, tower_base((block,9)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,6)), false, true)
final_goal(1, unordered_tower((block,7)), false, true)
final_goal(1, unordered_tower((block,8)), false, true)
final_goal(1, unordered_tower((block,9)), false, true)

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), false, false)
final_goal(1, complete(red), false, false)
final_goal(1, complete(yellow), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_middle, false)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,7)), puzzle_room_table_left, false)
final_goal(1, on((block,7)), puzzle_room_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_table_right, false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,8)), puzzle_room_table_left, false)
final_goal(1, on((block,8)), puzzle_room_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_table_right, false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, on((block,9)), puzzle_room_table_left, false)
final_goal(1, on((block,9)), puzzle_room_table_right, false)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, tower_base((block,7)), true, false)
final_goal(1, tower_base((block,8)), true, false)
final_goal(1, tower_base((block,9)), false, false)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), true, false)
final_goal(1, unordered_tower((block,7)), true, false)
final_goal(1, unordered_tower((block,8)), true, false)
final_goal(1, unordered_tower((block,9)), true, false)

[12-11-2021_15-18-25] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-18-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 1 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [3-3]

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 1 by method ground-first: [1-3]

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [3] : Concurrency disabled : Problem type = classical : Minimum search length bound = disabled with value = 0

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[12-11-2021_15-18-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[12-11-2021_15-18-25] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(yellow)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 0})

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 126 rules into program part ash_initial_state:

holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, complete(yellow), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), puzzle_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), false, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), true, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), true, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), puzzle_room_table, 0).
holds(3, on((block,9)), puzzle_room_table, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, tower_base((block,7)), true, 0).
holds(3, tower_base((block,8)), true, 0).
holds(3, tower_base((block,9)), true, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).
holds(3, unordered_tower((block,7)), false, 0).
holds(3, unordered_tower((block,8)), false, 0).
holds(3, unordered_tower((block,9)), false, 0).

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 294 rules into program part ash_goal_state:

final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, complete(yellow), false, false).
final_goal(3, complete(yellow), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, tower_base((block,7)), false, true).
final_goal(3, tower_base((block,7)), true, false).
final_goal(3, tower_base((block,8)), false, true).
final_goal(3, tower_base((block,8)), true, false).
final_goal(3, tower_base((block,9)), false, false).
final_goal(3, tower_base((block,9)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).
final_goal(3, unordered_tower((block,7)), false, true).
final_goal(3, unordered_tower((block,7)), true, false).
final_goal(3, unordered_tower((block,8)), false, true).
final_goal(3, unordered_tower((block,8)), true, false).
final_goal(3, unordered_tower((block,9)), false, true).
final_goal(3, unordered_tower((block,9)), true, false).

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000016E4A2C2160>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=None, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 781 rules

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0054933000000012555s

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026637s.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006827s with result Satisfiable.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016E4A2E1540>

[12-11-2021_15-18-25] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016E4A2E1540>)

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.139284s.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016893s with result Unsatisfiable.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1561766999999996, Incremental time limit = None
Running cumulative time = 0.1561766999999996, Cumulative time limit = 3600
Used memory = (RSS = 99.449219Mb, VMS = 89.984375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108955s.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008693s with result Unsatisfiable.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11764859999999899, Incremental time limit = None
Running cumulative time = 0.2738252999999986, Cumulative time limit = 3600
Used memory = (RSS = 102.878906Mb, VMS = 93.441406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121509s.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015455s with result Unsatisfiable.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13696370000000258, Incremental time limit = None
Running cumulative time = 0.4107890000000012, Cumulative time limit = 3600
Used memory = (RSS = 106.371094Mb, VMS = 97.042969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.127684s.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018486s with result Unsatisfiable.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14616979999999558, Incremental time limit = None
Running cumulative time = 0.5569587999999968, Cumulative time limit = 3600
Used memory = (RSS = 110.882812Mb, VMS = 101.816406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122292s.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019799s with result Unsatisfiable.

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1420905000000019, Incremental time limit = None
Running cumulative time = 0.6990492999999987, Cumulative time limit = 3600
Used memory = (RSS = 117.503906Mb, VMS = 109.289062Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124148s.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018594s with result Unsatisfiable.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1427421000000031, Incremental time limit = None
Running cumulative time = 0.8417914000000017, Cumulative time limit = 3600
Used memory = (RSS = 123.953125Mb, VMS = 115.160156Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124599s.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020771s with result Unsatisfiable.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14536930000000226, Incremental time limit = None
Running cumulative time = 0.987160700000004, Cumulative time limit = 3600
Used memory = (RSS = 130.472656Mb, VMS = 122.937500Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138753s.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022982s with result Unsatisfiable.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16173450000000145, Incremental time limit = None
Running cumulative time = 1.1488952000000054, Cumulative time limit = 3600
Used memory = (RSS = 135.500000Mb, VMS = 127.210938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149596s.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029460s with result Unsatisfiable.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17905580000000043, Incremental time limit = None
Running cumulative time = 1.3279510000000059, Cumulative time limit = 3600
Used memory = (RSS = 139.730469Mb, VMS = 131.167969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133904s.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030532s with result Unsatisfiable.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16443530000000095, Incremental time limit = None
Running cumulative time = 1.4923863000000068, Cumulative time limit = 3600
Used memory = (RSS = 147.933594Mb, VMS = 141.589844Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151853s.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059330s with result Unsatisfiable.

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21118279999999245, Incremental time limit = None
Running cumulative time = 1.7035690999999993, Cumulative time limit = 3600
Used memory = (RSS = 154.214844Mb, VMS = 147.636719Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134904s.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084370s with result Unsatisfiable.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21927430000000214, Incremental time limit = None
Running cumulative time = 1.9228434000000014, Cumulative time limit = 3600
Used memory = (RSS = 157.691406Mb, VMS = 150.511719Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150796s.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.123582s with result Unsatisfiable.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27437839999999625, Incremental time limit = None
Running cumulative time = 2.1972217999999977, Cumulative time limit = 3600
Used memory = (RSS = 162.265625Mb, VMS = 154.464844Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.152475s.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.179998s with result Unsatisfiable.

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3324725000000015, Incremental time limit = None
Running cumulative time = 2.529694299999999, Cumulative time limit = 3600
Used memory = (RSS = 167.375000Mb, VMS = 159.238281Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163966s.

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.263018s with result Unsatisfiable.

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.42698410000000564, Incremental time limit = None
Running cumulative time = 2.956678400000005, Cumulative time limit = 3600
Used memory = (RSS = 175.917969Mb, VMS = 172.742188Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157361s.

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.360007s with result Unsatisfiable.

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5173678000000024, Incremental time limit = None
Running cumulative time = 3.474046200000007, Cumulative time limit = 3600
Used memory = (RSS = 180.542969Mb, VMS = 176.542969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158683s.

[12-11-2021_15-18-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.565882s with result Unsatisfiable.

[12-11-2021_15-18-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7245649999999983, Incremental time limit = None
Running cumulative time = 4.1986112000000055, Cumulative time limit = 3600
Used memory = (RSS = 188.281250Mb, VMS = 183.257812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)])]

[12-11-2021_15-18-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170513s.

[12-11-2021_15-18-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.401863s with result Unsatisfiable.

[12-11-2021_15-18-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.5723754000000056, Incremental time limit = None
Running cumulative time = 5.770986600000011, Cumulative time limit = 3600
Used memory = (RSS = 198.246094Mb, VMS = 192.917969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)])]

[12-11-2021_15-18-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182540s.

[12-11-2021_15-18-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.445901s with result Unsatisfiable.

[12-11-2021_15-18-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.6284412999999986, Incremental time limit = None
Running cumulative time = 8.39942790000001, Cumulative time limit = 3600
Used memory = (RSS = 207.261719Mb, VMS = 201.242188Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)])]

[12-11-2021_15-18-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164288s.

[12-11-2021_15-18-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 4.117932s with result Unsatisfiable.

[12-11-2021_15-18-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.2822201000000035, Incremental time limit = None
Running cumulative time = 12.681648000000013, Cumulative time limit = 3600
Used memory = (RSS = 219.835938Mb, VMS = 213.121094Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)])]

[12-11-2021_15-18-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210427s.

[12-11-2021_15-18-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 6.087173s with result Unsatisfiable.

[12-11-2021_15-18-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 6.297599999999996, Incremental time limit = None
Running cumulative time = 18.97924800000001, Cumulative time limit = 3600
Used memory = (RSS = 231.238281Mb, VMS = 232.234375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)])]

[12-11-2021_15-18-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171486s.

[12-11-2021_15-18-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-18-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 11.351157s with result Unsatisfiable.

[12-11-2021_15-18-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 11.522642999999995, Incremental time limit = None
Running cumulative time = 30.501891000000004, Cumulative time limit = 3600
Used memory = (RSS = 242.515625Mb, VMS = 243.472656Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-18-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-18-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)])]

[12-11-2021_15-18-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199788s.

[12-11-2021_15-18-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-19-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 19.425720s with result Unsatisfiable.

[12-11-2021_15-19-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 19.62550819999999, Incremental time limit = None
Running cumulative time = 50.1273992, Cumulative time limit = 3600
Used memory = (RSS = 260.343750Mb, VMS = 260.664062Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-19-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-19-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)])]

[12-11-2021_15-19-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250745s.

[12-11-2021_15-19-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-19-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 41.074264s with result Unsatisfiable.

[12-11-2021_15-19-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 41.3250089, Incremental time limit = None
Running cumulative time = 91.45240809999999, Cumulative time limit = 3600
Used memory = (RSS = 286.859375Mb, VMS = 286.878906Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-19-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-19-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)])]

[12-11-2021_15-19-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.185254s.

[12-11-2021_15-19-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 79.403624s with result Unsatisfiable.

[12-11-2021_15-21-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 79.5888782, Incremental time limit = None
Running cumulative time = 171.0412863, Cumulative time limit = 3600
Used memory = (RSS = 321.046875Mb, VMS = 321.023438Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)])]

[12-11-2021_15-21-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.236908s.

[12-11-2021_15-21-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.716324s with result Satisfiable.

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9532322999999963, Incremental time limit = None
Running cumulative time = 172.9945186, Cumulative time limit = 3600
Used memory = (RSS = 332.968750Mb, VMS = 332.246094Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.132712s, Solving = 168.861806s, Total = 172.994519s, Memory = (RSS = 332.968750Mb, VMS = 332.246094Mb)), Calls = 26
Final Model :: Total atoms = 24063, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.139284s, Solving = 0.016893s, Total = 0.156177s, Memory = (RSS = 99.449219Mb, VMS = 89.984375Mb)
2 : Statistics :: Grounding = 0.108955s, Solving = 0.008693s, Total = 0.117649s, Memory = (RSS = 102.878906Mb, VMS = 93.441406Mb)
3 : Statistics :: Grounding = 0.121509s, Solving = 0.015455s, Total = 0.136964s, Memory = (RSS = 106.371094Mb, VMS = 97.042969Mb)
4 : Statistics :: Grounding = 0.127684s, Solving = 0.018486s, Total = 0.146170s, Memory = (RSS = 110.882812Mb, VMS = 101.816406Mb)
5 : Statistics :: Grounding = 0.122292s, Solving = 0.019799s, Total = 0.142091s, Memory = (RSS = 117.503906Mb, VMS = 109.289062Mb)
6 : Statistics :: Grounding = 0.124148s, Solving = 0.018594s, Total = 0.142742s, Memory = (RSS = 123.953125Mb, VMS = 115.160156Mb)
7 : Statistics :: Grounding = 0.124599s, Solving = 0.020771s, Total = 0.145369s, Memory = (RSS = 130.472656Mb, VMS = 122.937500Mb)
8 : Statistics :: Grounding = 0.138753s, Solving = 0.022982s, Total = 0.161735s, Memory = (RSS = 135.500000Mb, VMS = 127.210938Mb)
9 : Statistics :: Grounding = 0.149596s, Solving = 0.029460s, Total = 0.179056s, Memory = (RSS = 139.730469Mb, VMS = 131.167969Mb)
10 : Statistics :: Grounding = 0.133904s, Solving = 0.030532s, Total = 0.164435s, Memory = (RSS = 147.933594Mb, VMS = 141.589844Mb)
11 : Statistics :: Grounding = 0.151853s, Solving = 0.059330s, Total = 0.211183s, Memory = (RSS = 154.214844Mb, VMS = 147.636719Mb)
12 : Statistics :: Grounding = 0.134904s, Solving = 0.084370s, Total = 0.219274s, Memory = (RSS = 157.691406Mb, VMS = 150.511719Mb)
13 : Statistics :: Grounding = 0.150796s, Solving = 0.123582s, Total = 0.274378s, Memory = (RSS = 162.265625Mb, VMS = 154.464844Mb)
14 : Statistics :: Grounding = 0.152475s, Solving = 0.179998s, Total = 0.332473s, Memory = (RSS = 167.375000Mb, VMS = 159.238281Mb)
15 : Statistics :: Grounding = 0.163966s, Solving = 0.263018s, Total = 0.426984s, Memory = (RSS = 175.917969Mb, VMS = 172.742188Mb)
16 : Statistics :: Grounding = 0.157361s, Solving = 0.360007s, Total = 0.517368s, Memory = (RSS = 180.542969Mb, VMS = 176.542969Mb)
17 : Statistics :: Grounding = 0.158683s, Solving = 0.565882s, Total = 0.724565s, Memory = (RSS = 188.281250Mb, VMS = 183.257812Mb)
18 : Statistics :: Grounding = 0.170513s, Solving = 1.401863s, Total = 1.572375s, Memory = (RSS = 198.246094Mb, VMS = 192.917969Mb)
19 : Statistics :: Grounding = 0.182540s, Solving = 2.445901s, Total = 2.628441s, Memory = (RSS = 207.261719Mb, VMS = 201.242188Mb)
20 : Statistics :: Grounding = 0.164288s, Solving = 4.117932s, Total = 4.282220s, Memory = (RSS = 219.835938Mb, VMS = 213.121094Mb)
21 : Statistics :: Grounding = 0.210427s, Solving = 6.087173s, Total = 6.297600s, Memory = (RSS = 231.238281Mb, VMS = 232.234375Mb)
22 : Statistics :: Grounding = 0.171486s, Solving = 11.351157s, Total = 11.522643s, Memory = (RSS = 242.515625Mb, VMS = 243.472656Mb)
23 : Statistics :: Grounding = 0.199788s, Solving = 19.425720s, Total = 19.625508s, Memory = (RSS = 260.343750Mb, VMS = 260.664062Mb)
24 : Statistics :: Grounding = 0.250745s, Solving = 41.074264s, Total = 41.325009s, Memory = (RSS = 286.859375Mb, VMS = 286.878906Mb)
25 : Statistics :: Grounding = 0.185254s, Solving = 79.403624s, Total = 79.588878s, Memory = (RSS = 321.046875Mb, VMS = 321.023438Mb)
26 : Statistics :: Grounding = 0.236908s, Solving = 1.716324s, Total = 1.953232s, Memory = (RSS = 332.968750Mb, VMS = 332.246094Mb)

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 172.994519s due to: Stop condition reached.

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-21-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.132712s, Solving = 168.861806s, Total = 172.994519s, Memory = (RSS = 332.968750Mb, VMS = 332.246094Mb)), Calls = 26
Model :: Total atoms = 24063, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 26 :: Actions = 26                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 3:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 4:
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 6:
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 7:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
Step 8:
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
Step 9:
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
Step 10:
    Planned actions:
        talos : move(store_room)
Step 11:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 12:
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 14:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 15:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 16:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 17:
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 18:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 19:
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 20:
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 21:
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 22:
    Planned actions:
        talos : release(manipulator_arm_2,(block,4))
Step 23:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 24:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
Step 25:
    Planned actions:
        talos : put(manipulator_arm_1,(block,7),(block,8))
Step 26:
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=26, step_range=range(0, 27)

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 0, Actions = 0
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  26, Actions =  26 (Com = 1.00), Sgs = 26, Time = 173.028s (Gro =   4.159s, Sea = 168.869s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))

[12-11-2021_15-21-19] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=26, start_step=0, blend=Blend(left=0, right=0)

[12-11-2021_15-21-19] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=13, large_group_size=14

[12-11-2021_15-21-19] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=13, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  26, Actions =  26 (Com = 1.00), Sgs = 26, Time = 173.028s (Gro =   4.159s, Sea = 168.869s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 1:
Divided plan : Level =  3 (classic), Length =  26, Actions =  26 (Com = 1.00), Sgs = 26, Time = 173.028s (Gro =   4.159s, Sea = 168.869s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-13]

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-13], problem number = 1, increment number = 1

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 13)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 13
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 12

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-13] : Minimum search length bound = disabled with value = 12

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[12-11-2021_15-21-19] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[12-11-2021_15-21-19] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(yellow)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 0})

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, complete(yellow), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), puzzle_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), false, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), true, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), true, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), puzzle_room_table, 0).
holds(2, on((block,9)), puzzle_room_table, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, tower_base((block,7)), true, 0).
holds(2, tower_base((block,8)), true, 0).
holds(2, tower_base((block,9)), true, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(2, unordered_tower((block,7)), false, 0).
holds(2, unordered_tower((block,8)), false, 0).
holds(2, unordered_tower((block,9)), false, 0).
holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, complete(yellow), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in((block,7)), puzzle_room, 0).
holds(3, in((block,8)), puzzle_room, 0).
holds(3, in((block,9)), puzzle_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,1),(block,7)), false, 0).
holds(3, in_tower((block,1),(block,8)), false, 0).
holds(3, in_tower((block,1),(block,9)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,7)), false, 0).
holds(3, in_tower((block,2),(block,8)), false, 0).
holds(3, in_tower((block,2),(block,9)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,7)), false, 0).
holds(3, in_tower((block,3),(block,8)), false, 0).
holds(3, in_tower((block,3),(block,9)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,7)), false, 0).
holds(3, in_tower((block,4),(block,8)), false, 0).
holds(3, in_tower((block,4),(block,9)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,7)), false, 0).
holds(3, in_tower((block,5),(block,8)), false, 0).
holds(3, in_tower((block,5),(block,9)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,7)), false, 0).
holds(3, in_tower((block,6),(block,8)), false, 0).
holds(3, in_tower((block,6),(block,9)), false, 0).
holds(3, in_tower((block,7),(block,1)), false, 0).
holds(3, in_tower((block,7),(block,2)), false, 0).
holds(3, in_tower((block,7),(block,3)), false, 0).
holds(3, in_tower((block,7),(block,4)), false, 0).
holds(3, in_tower((block,7),(block,5)), false, 0).
holds(3, in_tower((block,7),(block,6)), false, 0).
holds(3, in_tower((block,7),(block,7)), true, 0).
holds(3, in_tower((block,7),(block,8)), false, 0).
holds(3, in_tower((block,7),(block,9)), false, 0).
holds(3, in_tower((block,8),(block,1)), false, 0).
holds(3, in_tower((block,8),(block,2)), false, 0).
holds(3, in_tower((block,8),(block,3)), false, 0).
holds(3, in_tower((block,8),(block,4)), false, 0).
holds(3, in_tower((block,8),(block,5)), false, 0).
holds(3, in_tower((block,8),(block,6)), false, 0).
holds(3, in_tower((block,8),(block,7)), false, 0).
holds(3, in_tower((block,8),(block,8)), true, 0).
holds(3, in_tower((block,8),(block,9)), false, 0).
holds(3, in_tower((block,9),(block,1)), false, 0).
holds(3, in_tower((block,9),(block,2)), false, 0).
holds(3, in_tower((block,9),(block,3)), false, 0).
holds(3, in_tower((block,9),(block,4)), false, 0).
holds(3, in_tower((block,9),(block,5)), false, 0).
holds(3, in_tower((block,9),(block,6)), false, 0).
holds(3, in_tower((block,9),(block,7)), false, 0).
holds(3, in_tower((block,9),(block,8)), false, 0).
holds(3, in_tower((block,9),(block,9)), true, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, on((block,7)), puzzle_room_table, 0).
holds(3, on((block,8)), puzzle_room_table, 0).
holds(3, on((block,9)), puzzle_room_table, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, tower_base((block,7)), true, 0).
holds(3, tower_base((block,8)), true, 0).
holds(3, tower_base((block,9)), true, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).
holds(3, unordered_tower((block,7)), false, 0).
holds(3, unordered_tower((block,8)), false, 0).
holds(3, unordered_tower((block,9)), false, 0).

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, complete(yellow), false, false).
final_goal(2, complete(yellow), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, tower_base((block,7)), false, true).
final_goal(2, tower_base((block,7)), true, false).
final_goal(2, tower_base((block,8)), false, true).
final_goal(2, tower_base((block,8)), true, false).
final_goal(2, tower_base((block,9)), false, false).
final_goal(2, tower_base((block,9)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(2, unordered_tower((block,7)), false, true).
final_goal(2, unordered_tower((block,7)), true, false).
final_goal(2, unordered_tower((block,8)), false, true).
final_goal(2, unordered_tower((block,8)), true, false).
final_goal(2, unordered_tower((block,9)), false, true).
final_goal(2, unordered_tower((block,9)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, complete(yellow), false, false).
final_goal(3, complete(yellow), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, tower_base((block,7)), false, true).
final_goal(3, tower_base((block,7)), true, false).
final_goal(3, tower_base((block,8)), false, true).
final_goal(3, tower_base((block,8)), true, false).
final_goal(3, tower_base((block,9)), false, false).
final_goal(3, tower_base((block,9)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).
final_goal(3, unordered_tower((block,7)), false, true).
final_goal(3, unordered_tower((block,7)), true, false).
final_goal(3, unordered_tower((block,8)), false, true).
final_goal(3, unordered_tower((block,8)), true, false).
final_goal(3, unordered_tower((block,9)), false, true).
final_goal(3, unordered_tower((block,9)), true, false).

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 13})

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 3).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 6).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 7).
sub_goal(3, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 9).
sub_goal(3, talos, move(store_room), in(talos), store_room, 10).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 11).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 12).
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 13).

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000016E4A2C28B0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=None, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 13, 'sequential', 'true'), range_=None)]

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1221 rules

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0070987999999942986s

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.033023s.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006810s with result Satisfiable.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016E4D6B0180>

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 13)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016E4D6B0180>)

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 13, sequential, true). %* None *%

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178819s.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023541s with result Unsatisfiable.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.20236090000000218, Incremental time limit = None
Running cumulative time = 0.20236090000000218, Cumulative time limit = 3600
Used memory = (RSS = 153.843750Mb, VMS = 149.757812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.17881940000000895, solving_time=0.02354149999999322, total_time=0.20236090000000218, memory=Memory(rss=153.84375, vms=149.7578125), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17881940000000895, solving_time=0.02354149999999322, total_time=0.20236090000000218, memory=Memory(rss=153.84375, vms=149.7578125), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 14775.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 46581.0, 'bodies_tr': 46581.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 367.0, 'count_bodies_tr': 367.0, 'sccs': 38.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1198.0, 'rules': 92248.0, 'rules_normal': 91670.0, 'rules_choice': 559.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 92246.0, 'rules_tr_normal': 91670.0, 'rules_tr_choice': 559.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 18627.0, 'eqs_atom': 5471.0, 'eqs_body': 1719.0, 'eqs_other': 11437.0}, 'lpStep': {'atoms': 7896.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 44825.0, 'bodies_tr': 44825.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 367.0, 'count_bodies_tr': 367.0, 'sccs': 38.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1198.0, 'rules': 84785.0, 'rules_normal': 84207.0, 'rules_choice': 559.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 84783.0, 'rules_tr_normal': 84207.0, 'rules_tr_choice': 559.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 9753.0, 'eqs_atom': 2202.0, 'eqs_body': 606.0, 'eqs_other': 6945.0}, 'generator': {'vars': 4665.0, 'vars_eliminated': 0.0, 'vars_frozen': 2773.0, 'constraints': 38.0, 'constraints_binary': 1868.0, 'constraints_ternary': 307.0, 'acyc_edges': 0.0, 'complexity': 2227.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 5.0, 'lits_learnt': 6.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 93.0, 'guiding_paths': 3.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 5.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.20245933532714844, 'cpu': 0.203125, 'solve': 0.002960205078125, 'unsat': 0.002960205078125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.25034332275390625, 'cpu': 0.25, 'solve': 0.007940292358398438, 'unsat': 0.002960205078125, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 5.0, 'lits_learnt': 6.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 101.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 5.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129620s.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010471s with result Unsatisfiable.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.14009090000001834, Incremental time limit = None
Running cumulative time = 0.3424518000000205, Cumulative time limit = 3600
Used memory = (RSS = 158.890625Mb, VMS = 155.359375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.30843980000000215, solving_time=0.03401200000001836, total_time=0.3424518000000205, memory=Memory(rss=158.890625, vms=155.359375), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1296203999999932, solving_time=0.01047050000002514, total_time=0.14009090000001834, memory=Memory(rss=158.890625, vms=155.359375), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 17836.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84967.0, 'bodies_tr': 84967.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 676.0, 'count_bodies_tr': 676.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1250.0, 'rules': 165709.0, 'rules_normal': 164852.0, 'rules_choice': 819.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 165689.0, 'rules_tr_normal': 164852.0, 'rules_tr_choice': 819.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 24103.0, 'eqs_atom': 6871.0, 'eqs_body': 2564.0, 'eqs_other': 14668.0}, 'lpStep': {'atoms': 3061.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38386.0, 'bodies_tr': 38386.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 73461.0, 'rules_normal': 73182.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 73443.0, 'rules_tr_normal': 73182.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5476.0, 'eqs_atom': 1400.0, 'eqs_body': 845.0, 'eqs_other': 3231.0}, 'generator': {'vars': 4816.0, 'vars_eliminated': 0.0, 'vars_frozen': 2914.0, 'constraints': 88.0, 'constraints_binary': 2621.0, 'constraints_ternary': 357.0, 'acyc_edges': 0.0, 'complexity': 3098.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 10.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 8.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 13.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 322.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 4.0, 'lits_loop': 9.0, 'lits_other': 0.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 0.0, 'levels': 4.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.140625, 'cpu': 0.140625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.39096832275390625, 'cpu': 0.390625, 'solve': 0.009935379028320312, 'unsat': 0.004955291748046875, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 10.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 10.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 19.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 423.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 4.0, 'lits_loop': 15.0, 'lits_other': 0.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 0.0, 'levels': 4.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136445s.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010965s with result Unsatisfiable.

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1474100000000078, Incremental time limit = None
Running cumulative time = 0.4898618000000283, Cumulative time limit = 3600
Used memory = (RSS = 160.996094Mb, VMS = 156.800781Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.44488430000001244, solving_time=0.04497750000001588, total_time=0.4898618000000283, memory=Memory(rss=160.99609375, vms=156.80078125), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1364445000000103, solving_time=0.010965499999997519, total_time=0.1474100000000078, memory=Memory(rss=160.99609375, vms=156.80078125), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 21278.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 123513.0, 'bodies_tr': 123513.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 985.0, 'count_bodies_tr': 985.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1326.0, 'rules': 239768.0, 'rules_normal': 238632.0, 'rules_choice': 1079.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 54.0, 'rules_tr': 239730.0, 'rules_tr_normal': 238632.0, 'rules_tr_choice': 1079.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 31306.0, 'eqs_atom': 8665.0, 'eqs_body': 3456.0, 'eqs_other': 19185.0}, 'lpStep': {'atoms': 3442.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38546.0, 'bodies_tr': 38546.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 74059.0, 'rules_normal': 73780.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 74041.0, 'rules_tr_normal': 73780.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7203.0, 'eqs_atom': 1794.0, 'eqs_body': 892.0, 'eqs_other': 4517.0}, 'generator': {'vars': 5203.0, 'vars_eliminated': 0.0, 'vars_frozen': 3174.0, 'constraints': 166.0, 'constraints_binary': 4762.0, 'constraints_ternary': 540.0, 'acyc_edges': 0.0, 'complexity': 5534.0}}, 'solving': {'solvers': {'choices': 173.0, 'conflicts': 22.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 17.0, 'integrated': 79.0, 'lemmas': 86.0, 'lits_learnt': 137.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 68.0, 'integrated_jumps': 57.0, 'guiding_paths_lits': 427.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 4.0, 'lemmas_other': 68.0, 'lits_conflict': 23.0, 'lits_loop': 24.0, 'lits_other': 90.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 9.0, 'levels': 667.0, 'levels_bounded': 549.0, 'max': 78.0, 'max_executed': 78.0, 'max_bounded': 61.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1486053466796875, 'cpu': 0.140625, 'solve': 0.002964019775390625, 'unsat': 0.002964019775390625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5395736694335938, 'cpu': 0.53125, 'solve': 0.012899398803710938, 'unsat': 0.0079193115234375, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 173.0, 'conflicts': 32.0, 'conflicts_analyzed': 18.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 27.0, 'integrated': 79.0, 'lemmas': 98.0, 'lits_learnt': 156.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 68.0, 'integrated_jumps': 57.0, 'guiding_paths_lits': 850.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 18.0, 'lemmas_loop': 12.0, 'lemmas_other': 68.0, 'lits_conflict': 27.0, 'lits_loop': 39.0, 'lits_other': 90.0, 'jumps': {'jumps': 18.0, 'jumps_bounded': 9.0, 'levels': 671.0, 'levels_bounded': 549.0, 'max': 78.0, 'max_executed': 78.0, 'max_bounded': 61.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.142017s.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013747s with result Unsatisfiable.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1557637000000227, Incremental time limit = None
Running cumulative time = 0.645625500000051, Cumulative time limit = 3600
Used memory = (RSS = 164.332031Mb, VMS = 160.210938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5869014000000163, solving_time=0.058724100000034696, total_time=0.645625500000051, memory=Memory(rss=164.33203125, vms=160.2109375), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1420171000000039, solving_time=0.013746600000018816, total_time=0.1557637000000227, memory=Memory(rss=164.33203125, vms=160.2109375), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 24944.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 162157.0, 'bodies_tr': 162157.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1294.0, 'count_bodies_tr': 1294.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1402.0, 'rules': 314005.0, 'rules_normal': 312590.0, 'rules_choice': 1339.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 313949.0, 'rules_tr_normal': 312590.0, 'rules_tr_choice': 1339.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 39029.0, 'eqs_atom': 10474.0, 'eqs_body': 4363.0, 'eqs_other': 24192.0}, 'lpStep': {'atoms': 3666.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38644.0, 'bodies_tr': 38644.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 74237.0, 'rules_normal': 73958.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 74219.0, 'rules_tr_normal': 73958.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7723.0, 'eqs_atom': 1809.0, 'eqs_body': 907.0, 'eqs_other': 5007.0}, 'generator': {'vars': 5599.0, 'vars_eliminated': 0.0, 'vars_frozen': 3440.0, 'constraints': 213.0, 'constraints_binary': 6041.0, 'constraints_ternary': 617.0, 'acyc_edges': 0.0, 'complexity': 6955.0}}, 'solving': {'solvers': {'choices': 128.0, 'conflicts': 27.0, 'conflicts_analyzed': 20.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 34.0, 'integrated': 56.0, 'lemmas': 87.0, 'lits_learnt': 252.0, 'lemmas_binary': 21.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.0, 'integrated_imps': 23.0, 'integrated_jumps': 31.0, 'guiding_paths_lits': 532.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 18.0, 'lemmas_loop': 13.0, 'lemmas_other': 56.0, 'lits_conflict': 45.0, 'lits_loop': 50.0, 'lits_other': 157.0, 'jumps': {'jumps': 20.0, 'jumps_bounded': 8.0, 'levels': 696.0, 'levels_bounded': 608.0, 'max': 82.0, 'max_executed': 82.0, 'max_bounded': 76.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1574230194091797, 'cpu': 0.15625, 'solve': 0.001972198486328125, 'unsat': 0.001972198486328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6969966888427734, 'cpu': 0.6875, 'solve': 0.014871597290039062, 'unsat': 0.009891510009765625, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 301.0, 'conflicts': 59.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 61.0, 'integrated': 135.0, 'lemmas': 185.0, 'lits_learnt': 408.0, 'lemmas_binary': 27.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.015625, 'integrated_imps': 91.0, 'integrated_jumps': 88.0, 'guiding_paths_lits': 1382.0, 'guiding_paths': 32.0, 'splits': 0.0, 'lemmas_conflict': 36.0, 'lemmas_loop': 25.0, 'lemmas_other': 124.0, 'lits_conflict': 72.0, 'lits_loop': 89.0, 'lits_other': 247.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 17.0, 'levels': 1367.0, 'levels_bounded': 1157.0, 'max': 82.0, 'max_executed': 82.0, 'max_bounded': 76.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168197s.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018895s with result Unsatisfiable.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18709249999997724, Incremental time limit = None
Running cumulative time = 0.8327180000000283, Cumulative time limit = 3600
Used memory = (RSS = 169.335938Mb, VMS = 164.425781Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.7550984000000085, solving_time=0.07761960000001977, total_time=0.8327180000000283, memory=Memory(rss=169.3359375, vms=164.42578125), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16819699999999216, solving_time=0.018895499999985077, total_time=0.18709249999997724, memory=Memory(rss=169.3359375, vms=164.42578125), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 28610.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 201439.0, 'bodies_tr': 201439.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1603.0, 'count_bodies_tr': 1603.0, 'sccs': 80.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1726.0, 'rules': 388958.0, 'rules_normal': 387264.0, 'rules_choice': 1599.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 90.0, 'rules_tr': 388894.0, 'rules_tr_normal': 387264.0, 'rules_tr_choice': 1599.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 26.0, 'eqs': 46779.0, 'eqs_atom': 12159.0, 'eqs_body': 5048.0, 'eqs_other': 29572.0}, 'lpStep': {'atoms': 3666.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 39282.0, 'bodies_tr': 39282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 324.0, 'rules': 74953.0, 'rules_normal': 74674.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 74945.0, 'rules_tr_normal': 74674.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 7750.0, 'eqs_atom': 1685.0, 'eqs_body': 685.0, 'eqs_other': 5380.0}, 'generator': {'vars': 6988.0, 'vars_eliminated': 0.0, 'vars_frozen': 4373.0, 'constraints': 528.0, 'constraints_binary': 17136.0, 'constraints_ternary': 1583.0, 'acyc_edges': 0.0, 'complexity': 19393.0}}, 'solving': {'solvers': {'choices': 147.0, 'conflicts': 80.0, 'conflicts_analyzed': 73.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 57.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 49.0, 'distributed_sum_lbd': 69.0, 'integrated': 237.0, 'lemmas': 301.0, 'lits_learnt': 683.0, 'lemmas_binary': 52.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 178.0, 'integrated_jumps': 19.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 49.0, 'lemmas_loop': 45.0, 'lemmas_other': 207.0, 'lits_conflict': 124.0, 'lits_loop': 237.0, 'lits_other': 322.0, 'jumps': {'jumps': 73.0, 'jumps_bounded': 52.0, 'levels': 2880.0, 'levels_bounded': 2752.0, 'max': 95.0, 'max_executed': 92.0, 'max_bounded': 91.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.1873340606689453, 'cpu': 0.1875, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8843307495117188, 'cpu': 0.875, 'solve': 0.018861770629882812, 'unsat': 0.013881683349609375, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 448.0, 'conflicts': 139.0, 'conflicts_analyzed': 111.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 57.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 89.0, 'distributed_sum_lbd': 130.0, 'integrated': 372.0, 'lemmas': 486.0, 'lits_learnt': 1091.0, 'lemmas_binary': 79.0, 'lemmas_ternary': 2.0, 'cpu_time': 0.015625, 'integrated_imps': 269.0, 'integrated_jumps': 107.0, 'guiding_paths_lits': 2019.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 85.0, 'lemmas_loop': 70.0, 'lemmas_other': 331.0, 'lits_conflict': 196.0, 'lits_loop': 326.0, 'lits_other': 569.0, 'jumps': {'jumps': 111.0, 'jumps_bounded': 69.0, 'levels': 4247.0, 'levels_bounded': 3909.0, 'max': 95.0, 'max_executed': 92.0, 'max_bounded': 91.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.142107s.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021320s with result Unsatisfiable.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16342740000001754, Incremental time limit = None
Running cumulative time = 0.9961454000000458, Cumulative time limit = 3600
Used memory = (RSS = 175.371094Mb, VMS = 171.324219Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8972055000000125, solving_time=0.09893990000003328, total_time=0.9961454000000458, memory=Memory(rss=175.37109375, vms=171.32421875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14210710000000404, solving_time=0.021320300000013503, total_time=0.16342740000001754, memory=Memory(rss=175.37109375, vms=171.32421875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 32628.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 241359.0, 'bodies_tr': 241359.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1912.0, 'count_bodies_tr': 1912.0, 'sccs': 100.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2058.0, 'rules': 464777.0, 'rules_normal': 462804.0, 'rules_choice': 1859.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 464705.0, 'rules_tr_normal': 462804.0, 'rules_tr_choice': 1859.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 36.0, 'eqs': 55504.0, 'eqs_atom': 14067.0, 'eqs_body': 5719.0, 'eqs_other': 35718.0}, 'lpStep': {'atoms': 4018.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 39920.0, 'bodies_tr': 39920.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 332.0, 'rules': 75819.0, 'rules_normal': 75540.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 75811.0, 'rules_tr_normal': 75540.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8725.0, 'eqs_atom': 1908.0, 'eqs_body': 671.0, 'eqs_other': 6146.0}, 'generator': {'vars': 8513.0, 'vars_eliminated': 0.0, 'vars_frozen': 5352.0, 'constraints': 705.0, 'constraints_binary': 24424.0, 'constraints_ternary': 2656.0, 'acyc_edges': 0.0, 'complexity': 27977.0}}, 'solving': {'solvers': {'choices': 380.0, 'conflicts': 158.0, 'conflicts_analyzed': 150.0, 'restarts': 0.0, 'restarts_last': 25.0, 'extra': {'domain_choices': 88.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 93.0, 'distributed_sum_lbd': 190.0, 'integrated': 468.0, 'lemmas': 432.0, 'lits_learnt': 1360.0, 'lemmas_binary': 127.0, 'lemmas_ternary': 12.0, 'cpu_time': 0.0, 'integrated_imps': 216.0, 'integrated_jumps': 130.0, 'guiding_paths_lits': 742.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 108.0, 'lemmas_loop': 36.0, 'lemmas_other': 288.0, 'lits_conflict': 541.0, 'lits_loop': 196.0, 'lits_other': 623.0, 'jumps': {'jumps': 150.0, 'jumps_bounded': 62.0, 'levels': 2308.0, 'levels_bounded': 2057.0, 'max': 107.0, 'max_executed': 107.0, 'max_bounded': 106.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1655559539794922, 'cpu': 0.15625, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.049886703491211, 'cpu': 1.03125, 'solve': 0.023847579956054688, 'unsat': 0.01886749267578125, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 828.0, 'conflicts': 297.0, 'conflicts_analyzed': 261.0, 'restarts': 0.0, 'restarts_last': 25.0, 'extra': {'domain_choices': 145.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 182.0, 'distributed_sum_lbd': 320.0, 'integrated': 840.0, 'lemmas': 918.0, 'lits_learnt': 2451.0, 'lemmas_binary': 206.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.015625, 'integrated_imps': 485.0, 'integrated_jumps': 237.0, 'guiding_paths_lits': 2761.0, 'guiding_paths': 46.0, 'splits': 0.0, 'lemmas_conflict': 193.0, 'lemmas_loop': 106.0, 'lemmas_other': 619.0, 'lits_conflict': 737.0, 'lits_loop': 522.0, 'lits_other': 1192.0, 'jumps': {'jumps': 261.0, 'jumps_bounded': 131.0, 'levels': 6555.0, 'levels_bounded': 5966.0, 'max': 107.0, 'max_executed': 107.0, 'max_bounded': 106.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.161076s.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048181s with result Satisfiable.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20925660000000335, Incremental time limit = None
Running cumulative time = 1.2054020000000492, Cumulative time limit = 3600
Used memory = (RSS = 186.121094Mb, VMS = 183.628906Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.058281s, Solving = 0.147121s, Total = 1.205402s, Memory = (RSS = 186.121094Mb, VMS = 183.628906Mb)), Calls = 7
Final Model :: Total atoms = 10301, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.058281400000027, solving_time=0.14712060000002225, total_time=1.2054020000000492, memory=Memory(rss=186.12109375, vms=183.62890625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16107590000001437, solving_time=0.048180699999988974, total_time=0.20925660000000335, memory=Memory(rss=186.12109375, vms=183.62890625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 36658.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 282093.0, 'bodies_tr': 282093.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2221.0, 'count_bodies_tr': 2221.0, 'sccs': 126.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3146.0, 'rules': 541737.0, 'rules_normal': 539485.0, 'rules_choice': 2119.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 126.0, 'rules_tr': 541663.0, 'rules_tr_normal': 539485.0, 'rules_tr_choice': 2119.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 52.0, 'eqs': 65556.0, 'eqs_atom': 16122.0, 'eqs_body': 6103.0, 'eqs_other': 43331.0}, 'lpStep': {'atoms': 4030.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 40734.0, 'bodies_tr': 40734.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1088.0, 'rules': 76960.0, 'rules_normal': 76681.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 76958.0, 'rules_tr_normal': 76681.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 10052.0, 'eqs_atom': 2055.0, 'eqs_body': 384.0, 'eqs_other': 7613.0}, 'generator': {'vars': 11772.0, 'vars_eliminated': 0.0, 'vars_frozen': 7445.0, 'constraints': 1484.0, 'constraints_binary': 56832.0, 'constraints_ternary': 5426.0, 'acyc_edges': 0.0, 'complexity': 63992.0}}, 'solving': {'solvers': {'choices': 1287.0, 'conflicts': 281.0, 'conflicts_analyzed': 281.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 181.0, 'models': 1.0, 'models_level': 169.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 156.0, 'distributed_sum_lbd': 321.0, 'integrated': 934.0, 'lemmas': 1716.0, 'lits_learnt': 13719.0, 'lemmas_binary': 331.0, 'lemmas_ternary': 100.0, 'cpu_time': 0.03125, 'integrated_imps': 500.0, 'integrated_jumps': 421.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 176.0, 'lemmas_loop': 795.0, 'lemmas_other': 745.0, 'lits_conflict': 1029.0, 'lits_loop': 9685.0, 'lits_other': 3005.0, 'jumps': {'jumps': 281.0, 'jumps_bounded': 119.0, 'levels': 3659.0, 'levels_bounded': 3119.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.21201515197753906, 'cpu': 0.21875, 'solve': 0.021942138671875, 'unsat': 0.0, 'sat': 0.011968612670898438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.26190185546875, 'cpu': 1.25, 'solve': 0.04578971862792969, 'unsat': 0.01886749267578125, 'sat': 0.013935089111328125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2115.0, 'conflicts': 578.0, 'conflicts_analyzed': 542.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 326.0, 'models': 2.0, 'models_level': 170.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 338.0, 'distributed_sum_lbd': 641.0, 'integrated': 1774.0, 'lemmas': 2634.0, 'lits_learnt': 16170.0, 'lemmas_binary': 537.0, 'lemmas_ternary': 114.0, 'cpu_time': 0.046875, 'integrated_imps': 985.0, 'integrated_jumps': 658.0, 'guiding_paths_lits': 3608.0, 'guiding_paths': 53.0, 'splits': 0.0, 'lemmas_conflict': 369.0, 'lemmas_loop': 901.0, 'lemmas_other': 1364.0, 'lits_conflict': 1766.0, 'lits_loop': 10207.0, 'lits_other': 4197.0, 'jumps': {'jumps': 542.0, 'jumps_bounded': 250.0, 'levels': 10214.0, 'levels_bounded': 9085.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7}

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 2 ( 15.38% solved)

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None)

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 7]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2)

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.143332s.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(2,7).

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021454s with result Unsatisfiable.

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16478560000001607, Incremental time limit = None
Running cumulative time = 1.3701876000000652, Cumulative time limit = 3600
Used memory = (RSS = 188.300781Mb, VMS = 184.914062Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.2016130000000373, solving_time=0.16857460000002789, total_time=1.3701876000000652, memory=Memory(rss=188.30078125, vms=184.9140625), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14333160000001044, solving_time=0.021454000000005635, total_time=0.16478560000001607, memory=Memory(rss=188.30078125, vms=184.9140625), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 40781.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 322347.0, 'bodies_tr': 322347.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2530.0, 'count_bodies_tr': 2530.0, 'sccs': 146.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3478.0, 'rules': 618148.0, 'rules_normal': 615617.0, 'rules_choice': 2379.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 618066.0, 'rules_tr_normal': 615617.0, 'rules_tr_choice': 2379.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 62.0, 'eqs': 75067.0, 'eqs_atom': 18229.0, 'eqs_body': 6834.0, 'eqs_other': 50004.0}, 'lpStep': {'atoms': 4123.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 40254.0, 'bodies_tr': 40254.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 332.0, 'rules': 76411.0, 'rules_normal': 76132.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 76403.0, 'rules_tr_normal': 76132.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9511.0, 'eqs_atom': 2107.0, 'eqs_body': 731.0, 'eqs_other': 6673.0}, 'generator': {'vars': 13347.0, 'vars_eliminated': 0.0, 'vars_frozen': 8434.0, 'constraints': 977.0, 'constraints_binary': 33736.0, 'constraints_ternary': 3510.0, 'acyc_edges': 0.0, 'complexity': 63992.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 816.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.171112060546875, 'cpu': 0.171875, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.433013916015625, 'cpu': 1.421875, 'solve': 0.04878044128417969, 'unsat': 0.02185821533203125, 'sat': 0.013935089111328125}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2115.0, 'conflicts': 584.0, 'conflicts_analyzed': 542.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 326.0, 'models': 2.0, 'models_level': 170.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 338.0, 'distributed_sum_lbd': 641.0, 'integrated': 1774.0, 'lemmas': 2634.0, 'lits_learnt': 16170.0, 'lemmas_binary': 537.0, 'lemmas_ternary': 114.0, 'cpu_time': 0.046875, 'integrated_imps': 985.0, 'integrated_jumps': 658.0, 'guiding_paths_lits': 4424.0, 'guiding_paths': 59.0, 'splits': 0.0, 'lemmas_conflict': 369.0, 'lemmas_loop': 901.0, 'lemmas_other': 1364.0, 'lits_conflict': 1766.0, 'lits_loop': 10207.0, 'lits_other': 4197.0, 'jumps': {'jumps': 542.0, 'jumps_bounded': 250.0, 'levels': 10214.0, 'levels_bounded': 9085.0, 'max': 124.0, 'max_executed': 124.0, 'max_bounded': 121.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153300s.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044943s with result Satisfiable.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19824220000000992, Incremental time limit = None
Running cumulative time = 1.5684298000000751, Cumulative time limit = 3600
Used memory = (RSS = 202.746094Mb, VMS = 202.742188Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.354913s, Solving = 0.213517s, Total = 1.568430s, Memory = (RSS = 202.746094Mb, VMS = 202.742188Mb)), Calls = 9
Final Model :: Total atoms = 11584, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3549125000000402, solving_time=0.213517300000035, total_time=1.5684298000000751, memory=Memory(rss=202.74609375, vms=202.7421875), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1532995000000028, solving_time=0.04494270000000711, total_time=0.19824220000000992, memory=Memory(rss=202.74609375, vms=202.7421875), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 44811.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 363367.0, 'bodies_tr': 363367.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2839.0, 'count_bodies_tr': 2839.0, 'sccs': 172.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4826.0, 'rules': 695550.0, 'rules_normal': 692740.0, 'rules_choice': 2639.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 162.0, 'rules_tr': 695468.0, 'rules_tr_normal': 692740.0, 'rules_tr_choice': 2639.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 80.0, 'eqs': 83525.0, 'eqs_atom': 20249.0, 'eqs_body': 7137.0, 'eqs_other': 56139.0}, 'lpStep': {'atoms': 4030.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 41020.0, 'bodies_tr': 41020.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1348.0, 'rules': 77402.0, 'rules_normal': 77123.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 77402.0, 'rules_tr_normal': 77123.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8458.0, 'eqs_atom': 2020.0, 'eqs_body': 303.0, 'eqs_other': 6135.0}, 'generator': {'vars': 17148.0, 'vars_eliminated': 0.0, 'vars_frozen': 10889.0, 'constraints': 2071.0, 'constraints_binary': 78968.0, 'constraints_ternary': 7833.0, 'acyc_edges': 0.0, 'complexity': 89210.0}}, 'solving': {'solvers': {'choices': 715.0, 'conflicts': 211.0, 'conflicts_analyzed': 211.0, 'restarts': 0.0, 'restarts_last': 32.0, 'extra': {'domain_choices': 197.0, 'models': 1.0, 'models_level': 213.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 186.0, 'distributed_sum_lbd': 347.0, 'integrated': 1104.0, 'lemmas': 1678.0, 'lits_learnt': 11100.0, 'lemmas_binary': 125.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 760.0, 'integrated_jumps': 61.0, 'guiding_paths_lits': 1057.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 186.0, 'lemmas_loop': 461.0, 'lemmas_other': 1031.0, 'lits_conflict': 696.0, 'lits_loop': 6890.0, 'lits_other': 3514.0, 'jumps': {'jumps': 211.0, 'jumps_bounded': 121.0, 'levels': 8301.0, 'levels_bounded': 8071.0, 'max': 152.0, 'max_executed': 152.0, 'max_bounded': 151.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.20000267028808594, 'cpu': 0.296875, 'solve': 0.019947052001953125, 'unsat': 0.0, 'sat': 0.008977890014648438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.633016586303711, 'cpu': 1.71875, 'solve': 0.06872749328613281, 'unsat': 0.02185821533203125, 'sat': 0.022912979125976562}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2830.0, 'conflicts': 795.0, 'conflicts_analyzed': 753.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 523.0, 'models': 3.0, 'models_level': 383.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 524.0, 'distributed_sum_lbd': 988.0, 'integrated': 2878.0, 'lemmas': 4312.0, 'lits_learnt': 27270.0, 'lemmas_binary': 662.0, 'lemmas_ternary': 114.0, 'cpu_time': 0.171875, 'integrated_imps': 1745.0, 'integrated_jumps': 719.0, 'guiding_paths_lits': 5481.0, 'guiding_paths': 66.0, 'splits': 0.0, 'lemmas_conflict': 555.0, 'lemmas_loop': 1362.0, 'lemmas_other': 2395.0, 'lits_conflict': 2462.0, 'lits_loop': 17097.0, 'lits_other': 7711.0, 'jumps': {'jumps': 753.0, 'jumps_bounded': 371.0, 'levels': 18515.0, 'levels_bounded': 17156.0, 'max': 152.0, 'max_executed': 152.0, 'max_bounded': 151.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9}

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 3 ( 23.08% solved)

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None)

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 9]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 3)

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149572s.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(3,9).

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031494s with result Unsatisfiable.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18106599999998707, Incremental time limit = None
Running cumulative time = 1.7494958000000622, Cumulative time limit = 3600
Used memory = (RSS = 206.906250Mb, VMS = 204.382812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.5044840000000477, solving_time=0.24501180000001455, total_time=1.7494958000000622, memory=Memory(rss=206.90625, vms=204.3828125), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14957150000000752, solving_time=0.03149449999997955, total_time=0.18106599999998707, memory=Memory(rss=206.90625, vms=204.3828125), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 49012.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 405360.0, 'bodies_tr': 405360.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3148.0, 'count_bodies_tr': 3148.0, 'sccs': 198.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6198.0, 'rules': 774004.0, 'rules_normal': 770915.0, 'rules_choice': 2899.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 773922.0, 'rules_tr_normal': 770915.0, 'rules_tr_choice': 2899.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 98.0, 'eqs': 92257.0, 'eqs_atom': 22246.0, 'eqs_body': 7309.0, 'eqs_other': 62702.0}, 'lpStep': {'atoms': 4201.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 41993.0, 'bodies_tr': 41993.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78454.0, 'rules_normal': 78175.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78454.0, 'rules_tr_normal': 78175.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8732.0, 'eqs_atom': 1997.0, 'eqs_body': 172.0, 'eqs_other': 6563.0}, 'generator': {'vars': 21108.0, 'vars_eliminated': 0.0, 'vars_frozen': 13412.0, 'constraints': 2708.0, 'constraints_binary': 105031.0, 'constraints_ternary': 10175.0, 'acyc_edges': 0.0, 'complexity': 118294.0}}, 'solving': {'solvers': {'choices': 7.0, 'conflicts': 15.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 7.0, 'levels': 14.0, 'levels_bounded': 7.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.18650245666503906, 'cpu': 0.1875, 'solve': 0.0059833526611328125, 'unsat': 0.0059833526611328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.81951904296875, 'cpu': 1.90625, 'solve': 0.07471084594726562, 'unsat': 0.027841567993164062, 'sat': 0.022912979125976562}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2837.0, 'conflicts': 810.0, 'conflicts_analyzed': 760.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 530.0, 'models': 3.0, 'models_level': 383.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 525.0, 'distributed_sum_lbd': 990.0, 'integrated': 2878.0, 'lemmas': 4313.0, 'lits_learnt': 27272.0, 'lemmas_binary': 663.0, 'lemmas_ternary': 114.0, 'cpu_time': 0.171875, 'integrated_imps': 1745.0, 'integrated_jumps': 719.0, 'guiding_paths_lits': 6643.0, 'guiding_paths': 73.0, 'splits': 0.0, 'lemmas_conflict': 556.0, 'lemmas_loop': 1362.0, 'lemmas_other': 2395.0, 'lits_conflict': 2464.0, 'lits_loop': 17097.0, 'lits_other': 7711.0, 'jumps': {'jumps': 760.0, 'jumps_bounded': 378.0, 'levels': 18529.0, 'levels_bounded': 17163.0, 'max': 152.0, 'max_executed': 152.0, 'max_bounded': 151.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153483s.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070495s with result Satisfiable.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22397789999999418, Incremental time limit = None
Running cumulative time = 1.9734737000000564, Cumulative time limit = 3600
Used memory = (RSS = 214.878906Mb, VMS = 215.773438Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.657967s, Solving = 0.315507s, Total = 1.973474s, Memory = (RSS = 214.878906Mb, VMS = 215.773438Mb)), Calls = 11
Final Model :: Total atoms = 12869, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6579668000000538, solving_time=0.3155069000000026, total_time=1.9734737000000564, memory=Memory(rss=214.87890625, vms=215.7734375), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15348280000000614, solving_time=0.07049509999998804, total_time=0.22397789999999418, memory=Memory(rss=214.87890625, vms=215.7734375), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 53223.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 447569.0, 'bodies_tr': 447569.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3457.0, 'count_bodies_tr': 3457.0, 'sccs': 224.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7570.0, 'rules': 852803.0, 'rules_normal': 849435.0, 'rules_choice': 3159.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 198.0, 'rules_tr': 852721.0, 'rules_tr_normal': 849435.0, 'rules_tr_choice': 3159.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 116.0, 'eqs': 101182.0, 'eqs_atom': 24303.0, 'eqs_body': 7474.0, 'eqs_other': 69405.0}, 'lpStep': {'atoms': 4211.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42209.0, 'bodies_tr': 42209.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78799.0, 'rules_normal': 78520.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78799.0, 'rules_tr_normal': 78520.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8925.0, 'eqs_atom': 2057.0, 'eqs_body': 165.0, 'eqs_other': 6703.0}, 'generator': {'vars': 25112.0, 'vars_eliminated': 0.0, 'vars_frozen': 15948.0, 'constraints': 3861.0, 'constraints_binary': 151820.0, 'constraints_ternary': 14676.0, 'acyc_edges': 0.0, 'complexity': 170831.0}}, 'solving': {'solvers': {'choices': 939.0, 'conflicts': 235.0, 'conflicts_analyzed': 235.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 350.0, 'models': 1.0, 'models_level': 254.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 196.0, 'distributed_sum_lbd': 417.0, 'integrated': 1178.0, 'lemmas': 2293.0, 'lits_learnt': 22924.0, 'lemmas_binary': 207.0, 'lemmas_ternary': 49.0, 'cpu_time': 0.234375, 'integrated_imps': 802.0, 'integrated_jumps': 158.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 197.0, 'lemmas_loop': 1054.0, 'lemmas_other': 1042.0, 'lits_conflict': 1285.0, 'lits_loop': 15613.0, 'lits_other': 6026.0, 'jumps': {'jumps': 235.0, 'jumps_bounded': 126.0, 'levels': 1648.0, 'levels_bounded': 1386.0, 'max': 183.0, 'max_executed': 183.0, 'max_bounded': 181.0}}}}, 'summary': {'call': 11.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.2263965606689453, 'cpu': 0.421875, 'solve': 0.045879364013671875, 'unsat': 0.0, 'sat': 0.030918121337890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.0459156036376953, 'cpu': 2.328125, 'solve': 0.1205902099609375, 'unsat': 0.027841567993164062, 'sat': 0.05383110046386719}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3776.0, 'conflicts': 1045.0, 'conflicts_analyzed': 995.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 880.0, 'models': 4.0, 'models_level': 637.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 721.0, 'distributed_sum_lbd': 1407.0, 'integrated': 4056.0, 'lemmas': 6606.0, 'lits_learnt': 50196.0, 'lemmas_binary': 870.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.40625, 'integrated_imps': 2547.0, 'integrated_jumps': 877.0, 'guiding_paths_lits': 7910.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 753.0, 'lemmas_loop': 2416.0, 'lemmas_other': 3437.0, 'lits_conflict': 3749.0, 'lits_loop': 32710.0, 'lits_other': 13737.0, 'jumps': {'jumps': 995.0, 'jumps_bounded': 504.0, 'levels': 20177.0, 'levels_bounded': 18549.0, 'max': 183.0, 'max_executed': 183.0, 'max_bounded': 181.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11}

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 4 ( 30.77% solved)

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 11)', truth=True, inc_range=None)

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 11]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4)

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.157928s.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 12: original = External(symbol='current_last_sgoals(4, 11)', truth=True, inc_range=None), conversion = current_last_sgoals(4,11).

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051467s with result Unsatisfiable.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.20939570000001595, Incremental time limit = None
Running cumulative time = 2.1828694000000723, Cumulative time limit = 3600
Used memory = (RSS = 219.632812Mb, VMS = 218.289062Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.8158952000000568, solving_time=0.36697420000001557, total_time=2.1828694000000723, memory=Memory(rss=219.6328125, vms=218.2890625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15792840000000297, solving_time=0.05146730000001298, total_time=0.20939570000001595, memory=Memory(rss=219.6328125, vms=218.2890625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 57445.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 489805.0, 'bodies_tr': 489805.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3766.0, 'count_bodies_tr': 3766.0, 'sccs': 250.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8942.0, 'rules': 931708.0, 'rules_normal': 928061.0, 'rules_choice': 3419.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 931626.0, 'rules_tr_normal': 928061.0, 'rules_tr_choice': 3419.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 134.0, 'eqs': 110161.0, 'eqs_atom': 26367.0, 'eqs_body': 7639.0, 'eqs_other': 76155.0}, 'lpStep': {'atoms': 4222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42236.0, 'bodies_tr': 42236.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78905.0, 'rules_normal': 78626.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78905.0, 'rules_tr_normal': 78626.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8979.0, 'eqs_atom': 2064.0, 'eqs_body': 165.0, 'eqs_other': 6750.0}, 'generator': {'vars': 29123.0, 'vars_eliminated': 0.0, 'vars_frozen': 18488.0, 'constraints': 4773.0, 'constraints_binary': 188008.0, 'constraints_ternary': 18276.0, 'acyc_edges': 0.0, 'complexity': 211617.0}}, 'solving': {'solvers': {'choices': 131.0, 'conflicts': 124.0, 'conflicts_analyzed': 122.0, 'restarts': 0.0, 'restarts_last': 21.0, 'extra': {'domain_choices': 114.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 116.0, 'distributed_sum_lbd': 239.0, 'integrated': 696.0, 'lemmas': 534.0, 'lits_learnt': 6725.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 40.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 1372.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 116.0, 'lemmas_loop': 363.0, 'lemmas_other': 55.0, 'lits_conflict': 1200.0, 'lits_loop': 5178.0, 'lits_other': 347.0, 'jumps': {'jumps': 122.0, 'jumps_bounded': 6.0, 'levels': 128.0, 'levels_bounded': 6.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.21445465087890625, 'cpu': 0.328125, 'solve': 0.023950576782226562, 'unsat': 0.023950576782226562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.2603702545166016, 'cpu': 2.65625, 'solve': 0.14454078674316406, 'unsat': 0.051792144775390625, 'sat': 0.05383110046386719}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3907.0, 'conflicts': 1169.0, 'conflicts_analyzed': 1117.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 994.0, 'models': 4.0, 'models_level': 637.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 837.0, 'distributed_sum_lbd': 1646.0, 'integrated': 4752.0, 'lemmas': 7140.0, 'lits_learnt': 56921.0, 'lemmas_binary': 890.0, 'lemmas_ternary': 163.0, 'cpu_time': 0.53125, 'integrated_imps': 2587.0, 'integrated_jumps': 886.0, 'guiding_paths_lits': 9282.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 869.0, 'lemmas_loop': 2779.0, 'lemmas_other': 3492.0, 'lits_conflict': 4949.0, 'lits_loop': 37888.0, 'lits_other': 14084.0, 'jumps': {'jumps': 1117.0, 'jumps_bounded': 510.0, 'levels': 20305.0, 'levels_bounded': 18555.0, 'max': 183.0, 'max_executed': 183.0, 'max_bounded': 181.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158872s.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.098234s with result Unsatisfiable.

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25710609999998724, Incremental time limit = None
Running cumulative time = 2.4399755000000596, Cumulative time limit = 3600
Used memory = (RSS = 224.109375Mb, VMS = 220.679688Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.9747673000000532, solving_time=0.4652082000000064, total_time=2.4399755000000596, memory=Memory(rss=224.109375, vms=220.6796875), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1588720999999964, solving_time=0.09823399999999083, total_time=0.25710609999998724, memory=Memory(rss=224.109375, vms=220.6796875), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 61679.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 532069.0, 'bodies_tr': 532069.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4075.0, 'count_bodies_tr': 4075.0, 'sccs': 276.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10314.0, 'rules': 1010720.0, 'rules_normal': 1006794.0, 'rules_choice': 3679.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 234.0, 'rules_tr': 1010638.0, 'rules_tr_normal': 1006794.0, 'rules_tr_choice': 3679.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 152.0, 'eqs': 119199.0, 'eqs_atom': 28439.0, 'eqs_body': 7806.0, 'eqs_other': 82954.0}, 'lpStep': {'atoms': 4234.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42264.0, 'bodies_tr': 42264.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79012.0, 'rules_normal': 78733.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79012.0, 'rules_tr_normal': 78733.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9038.0, 'eqs_atom': 2072.0, 'eqs_body': 167.0, 'eqs_other': 6799.0}, 'generator': {'vars': 33141.0, 'vars_eliminated': 0.0, 'vars_frozen': 21032.0, 'constraints': 5928.0, 'constraints_binary': 235014.0, 'constraints_ternary': 22755.0, 'acyc_edges': 0.0, 'complexity': 264351.0}}, 'solving': {'solvers': {'choices': 845.0, 'conflicts': 466.0, 'conflicts_analyzed': 461.0, 'restarts': 1.0, 'restarts_last': 89.0, 'extra': {'domain_choices': 698.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 445.0, 'distributed_sum_lbd': 1091.0, 'integrated': 2614.0, 'lemmas': 4296.0, 'lits_learnt': 51606.0, 'lemmas_binary': 582.0, 'lemmas_ternary': 99.0, 'cpu_time': 0.46875, 'integrated_imps': 839.0, 'integrated_jumps': 307.0, 'guiding_paths_lits': 1477.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 451.0, 'lemmas_loop': 1468.0, 'lemmas_other': 2377.0, 'lits_conflict': 4892.0, 'lits_loop': 22120.0, 'lits_other': 24594.0, 'jumps': {'jumps': 461.0, 'jumps_bounded': 99.0, 'levels': 2316.0, 'levels_bounded': 1779.0, 'max': 215.0, 'max_executed': 215.0, 'max_bounded': 211.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.25984954833984375, 'cpu': 0.65625, 'solve': 0.06979942321777344, 'unsat': 0.06979942321777344, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5202198028564453, 'cpu': 3.3125, 'solve': 0.2143402099609375, 'unsat': 0.12159156799316406, 'sat': 0.05383110046386719}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4752.0, 'conflicts': 1635.0, 'conflicts_analyzed': 1578.0, 'restarts': 1.0, 'restarts_last': 89.0, 'extra': {'domain_choices': 1692.0, 'models': 4.0, 'models_level': 637.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1282.0, 'distributed_sum_lbd': 2737.0, 'integrated': 7366.0, 'lemmas': 11436.0, 'lits_learnt': 108527.0, 'lemmas_binary': 1472.0, 'lemmas_ternary': 262.0, 'cpu_time': 1.0, 'integrated_imps': 3426.0, 'integrated_jumps': 1193.0, 'guiding_paths_lits': 10759.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 1320.0, 'lemmas_loop': 4247.0, 'lemmas_other': 5869.0, 'lits_conflict': 9841.0, 'lits_loop': 60008.0, 'lits_other': 38678.0, 'jumps': {'jumps': 1578.0, 'jumps_bounded': 609.0, 'levels': 22621.0, 'levels_bounded': 20334.0, 'max': 215.0, 'max_executed': 215.0, 'max_bounded': 211.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182094s.

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.169975s with result Unsatisfiable.

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3520690000000002, Incremental time limit = None
Running cumulative time = 2.7920445000000598, Cumulative time limit = 3600
Used memory = (RSS = 234.207031Mb, VMS = 239.050781Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.156861000000049, solving_time=0.6351835000000108, total_time=2.7920445000000598, memory=Memory(rss=234.20703125, vms=239.05078125), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1820936999999958, solving_time=0.16997530000000438, total_time=0.3520690000000002, memory=Memory(rss=234.20703125, vms=239.05078125), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 65926.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 574362.0, 'bodies_tr': 574362.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4384.0, 'count_bodies_tr': 4384.0, 'sccs': 302.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11686.0, 'rules': 1089840.0, 'rules_normal': 1085635.0, 'rules_choice': 3939.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 1089758.0, 'rules_tr_normal': 1085635.0, 'rules_tr_choice': 3939.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 170.0, 'eqs': 128297.0, 'eqs_atom': 30520.0, 'eqs_body': 7973.0, 'eqs_other': 89804.0}, 'lpStep': {'atoms': 4247.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42293.0, 'bodies_tr': 42293.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79120.0, 'rules_normal': 78841.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79120.0, 'rules_tr_normal': 78841.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9098.0, 'eqs_atom': 2081.0, 'eqs_body': 167.0, 'eqs_other': 6850.0}, 'generator': {'vars': 37166.0, 'vars_eliminated': 0.0, 'vars_frozen': 23580.0, 'constraints': 6808.0, 'constraints_binary': 274621.0, 'constraints_ternary': 26536.0, 'acyc_edges': 0.0, 'complexity': 308705.0}}, 'solving': {'solvers': {'choices': 1716.0, 'conflicts': 955.0, 'conflicts_analyzed': 949.0, 'restarts': 6.0, 'restarts_last': 145.0, 'extra': {'domain_choices': 1420.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 912.0, 'distributed_sum_lbd': 2561.0, 'integrated': 5261.0, 'lemmas': 7788.0, 'lits_learnt': 110789.0, 'lemmas_binary': 757.0, 'lemmas_ternary': 187.0, 'cpu_time': 0.953125, 'integrated_imps': 1275.0, 'integrated_jumps': 595.0, 'guiding_paths_lits': 1582.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 941.0, 'lemmas_loop': 1675.0, 'lemmas_other': 5172.0, 'lits_conflict': 13717.0, 'lits_loop': 24525.0, 'lits_other': 72547.0, 'jumps': {'jumps': 949.0, 'jumps_bounded': 128.0, 'levels': 2146.0, 'levels_bounded': 1028.0, 'max': 231.0, 'max_executed': 231.0, 'max_bounded': 226.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.3569202423095703, 'cpu': 1.171875, 'solve': 0.13763427734375, 'unsat': 0.13763427734375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.8771400451660156, 'cpu': 4.484375, 'solve': 0.3519744873046875, 'unsat': 0.25922584533691406, 'sat': 0.05383110046386719}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6468.0, 'conflicts': 2590.0, 'conflicts_analyzed': 2527.0, 'restarts': 7.0, 'restarts_last': 145.0, 'extra': {'domain_choices': 3112.0, 'models': 4.0, 'models_level': 637.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2194.0, 'distributed_sum_lbd': 5298.0, 'integrated': 12627.0, 'lemmas': 19224.0, 'lits_learnt': 219316.0, 'lemmas_binary': 2229.0, 'lemmas_ternary': 449.0, 'cpu_time': 1.953125, 'integrated_imps': 4701.0, 'integrated_jumps': 1788.0, 'guiding_paths_lits': 12341.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 2261.0, 'lemmas_loop': 5922.0, 'lemmas_other': 11041.0, 'lits_conflict': 23558.0, 'lits_loop': 84533.0, 'lits_other': 111225.0, 'jumps': {'jumps': 2527.0, 'jumps_bounded': 737.0, 'levels': 24767.0, 'levels_bounded': 21362.0, 'max': 231.0, 'max_executed': 231.0, 'max_bounded': 226.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.179576s.

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.311349s with result Unsatisfiable.

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.4909253999999805, Incremental time limit = None
Running cumulative time = 3.2829699000000403, Cumulative time limit = 3600
Used memory = (RSS = 240.761719Mb, VMS = 243.695312Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.336437400000051, solving_time=0.9465324999999893, total_time=3.2829699000000403, memory=Memory(rss=240.76171875, vms=243.6953125), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17957640000000197, solving_time=0.31134899999997856, total_time=0.4909253999999805, memory=Memory(rss=240.76171875, vms=243.6953125), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 70186.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 616677.0, 'bodies_tr': 616677.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4693.0, 'count_bodies_tr': 4693.0, 'sccs': 328.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13058.0, 'rules': 1169061.0, 'rules_normal': 1164577.0, 'rules_choice': 4199.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 270.0, 'rules_tr': 1168979.0, 'rules_tr_normal': 1164577.0, 'rules_tr_choice': 4199.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 188.0, 'eqs': 137430.0, 'eqs_atom': 32603.0, 'eqs_body': 8141.0, 'eqs_other': 96686.0}, 'lpStep': {'atoms': 4260.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42315.0, 'bodies_tr': 42315.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79221.0, 'rules_normal': 78942.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79221.0, 'rules_tr_normal': 78942.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9133.0, 'eqs_atom': 2083.0, 'eqs_body': 168.0, 'eqs_other': 6882.0}, 'generator': {'vars': 41191.0, 'vars_eliminated': 0.0, 'vars_frozen': 26128.0, 'constraints': 7956.0, 'constraints_binary': 321337.0, 'constraints_ternary': 30971.0, 'acyc_edges': 0.0, 'complexity': 361098.0}}, 'solving': {'solvers': {'choices': 3322.0, 'conflicts': 1875.0, 'conflicts_analyzed': 1867.0, 'restarts': 9.0, 'restarts_last': 265.0, 'extra': {'domain_choices': 2533.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 1035.0, 'distributed': 1800.0, 'distributed_sum_lbd': 5377.0, 'integrated': 10769.0, 'lemmas': 14577.0, 'lits_learnt': 246791.0, 'lemmas_binary': 1072.0, 'lemmas_ternary': 490.0, 'cpu_time': 1.90625, 'integrated_imps': 1606.0, 'integrated_jumps': 1058.0, 'guiding_paths_lits': 1687.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1857.0, 'lemmas_loop': 2220.0, 'lemmas_other': 10500.0, 'lits_conflict': 32713.0, 'lits_loop': 31957.0, 'lits_other': 182121.0, 'jumps': {'jumps': 1867.0, 'jumps_bounded': 118.0, 'levels': 2618.0, 'levels_bounded': 358.0, 'max': 243.0, 'max_executed': 243.0, 'max_bounded': 241.0}}}}, 'summary': {'call': 15.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.49569129943847656, 'cpu': 2.125, 'solve': 0.28324127197265625, 'unsat': 0.28324127197265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.372831344604492, 'cpu': 6.609375, 'solve': 0.6352157592773438, 'unsat': 0.5424671173095703, 'sat': 0.05383110046386719}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9790.0, 'conflicts': 4465.0, 'conflicts_analyzed': 4394.0, 'restarts': 16.0, 'restarts_last': 265.0, 'extra': {'domain_choices': 5645.0, 'models': 4.0, 'models_level': 637.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 1035.0, 'distributed': 3994.0, 'distributed_sum_lbd': 10675.0, 'integrated': 23396.0, 'lemmas': 33801.0, 'lits_learnt': 466107.0, 'lemmas_binary': 3301.0, 'lemmas_ternary': 939.0, 'cpu_time': 3.859375, 'integrated_imps': 6307.0, 'integrated_jumps': 2846.0, 'guiding_paths_lits': 14028.0, 'guiding_paths': 108.0, 'splits': 0.0, 'lemmas_conflict': 4118.0, 'lemmas_loop': 8142.0, 'lemmas_other': 21541.0, 'lits_conflict': 56271.0, 'lits_loop': 116490.0, 'lits_other': 293346.0, 'jumps': {'jumps': 4394.0, 'jumps_bounded': 855.0, 'levels': 27385.0, 'levels_bounded': 21720.0, 'max': 243.0, 'max_executed': 243.0, 'max_bounded': 241.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172148s.

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.550640s with result Unsatisfiable.

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.7227876000000322, Incremental time limit = None
Running cumulative time = 4.0057575000000725, Cumulative time limit = 3600
Used memory = (RSS = 245.566406Mb, VMS = 244.652344Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.5085854000000722, solving_time=1.4971721000000002, total_time=4.0057575000000725, memory=Memory(rss=245.56640625, vms=244.65234375), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17214800000002128, solving_time=0.5506396000000109, total_time=0.7227876000000322, memory=Memory(rss=245.56640625, vms=244.65234375), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 74449.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 659016.0, 'bodies_tr': 659016.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5002.0, 'count_bodies_tr': 5002.0, 'sccs': 354.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14430.0, 'rules': 1248384.0, 'rules_normal': 1243621.0, 'rules_choice': 4459.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 1248302.0, 'rules_tr_normal': 1243621.0, 'rules_tr_choice': 4459.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 206.0, 'eqs': 146626.0, 'eqs_atom': 34696.0, 'eqs_body': 8309.0, 'eqs_other': 103621.0}, 'lpStep': {'atoms': 4263.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42339.0, 'bodies_tr': 42339.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79323.0, 'rules_normal': 79044.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79323.0, 'rules_tr_normal': 79044.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9196.0, 'eqs_atom': 2093.0, 'eqs_body': 168.0, 'eqs_other': 6935.0}, 'generator': {'vars': 45223.0, 'vars_eliminated': 0.0, 'vars_frozen': 28680.0, 'constraints': 8976.0, 'constraints_binary': 361889.0, 'constraints_ternary': 34965.0, 'acyc_edges': 0.0, 'complexity': 406750.0}}, 'solving': {'solvers': {'choices': 6712.0, 'conflicts': 3805.0, 'conflicts_analyzed': 3798.0, 'restarts': 19.0, 'restarts_last': 594.0, 'extra': {'domain_choices': 4461.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 4703.0, 'distributed': 3441.0, 'distributed_sum_lbd': 10773.0, 'integrated': 20623.0, 'lemmas': 27487.0, 'lits_learnt': 565686.0, 'lemmas_binary': 1706.0, 'lemmas_ternary': 1177.0, 'cpu_time': 3.734375, 'integrated_imps': 1957.0, 'integrated_jumps': 1912.0, 'guiding_paths_lits': 1792.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3787.0, 'lemmas_loop': 3361.0, 'lemmas_other': 20339.0, 'lits_conflict': 85135.0, 'lits_loop': 49164.0, 'lits_other': 431387.0, 'jumps': {'jumps': 3798.0, 'jumps_bounded': 82.0, 'levels': 6392.0, 'levels_bounded': 1612.0, 'max': 262.0, 'max_executed': 262.0, 'max_bounded': 256.0}}}}, 'summary': {'call': 16.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.7290763854980469, 'cpu': 3.953125, 'solve': 0.5206317901611328, 'unsat': 0.5206317901611328, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.101907730102539, 'cpu': 10.5625, 'solve': 1.1558475494384766, 'unsat': 1.0630989074707031, 'sat': 0.05383110046386719}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 16502.0, 'conflicts': 8270.0, 'conflicts_analyzed': 8192.0, 'restarts': 35.0, 'restarts_last': 594.0, 'extra': {'domain_choices': 10106.0, 'models': 4.0, 'models_level': 637.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 5738.0, 'distributed': 7435.0, 'distributed_sum_lbd': 21448.0, 'integrated': 44019.0, 'lemmas': 61288.0, 'lits_learnt': 1031793.0, 'lemmas_binary': 5007.0, 'lemmas_ternary': 2116.0, 'cpu_time': 7.59375, 'integrated_imps': 8264.0, 'integrated_jumps': 4758.0, 'guiding_paths_lits': 15820.0, 'guiding_paths': 115.0, 'splits': 0.0, 'lemmas_conflict': 7905.0, 'lemmas_loop': 11503.0, 'lemmas_other': 41880.0, 'lits_conflict': 141406.0, 'lits_loop': 165654.0, 'lits_other': 724733.0, 'jumps': {'jumps': 8192.0, 'jumps_bounded': 937.0, 'levels': 33777.0, 'levels_bounded': 23332.0, 'max': 262.0, 'max_executed': 262.0, 'max_bounded': 256.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.175302s.

[12-11-2021_15-21-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.625463s with result Unsatisfiable.

[12-11-2021_15-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.8007651000000351, Incremental time limit = None
Running cumulative time = 4.806522600000108, Cumulative time limit = 3600
Used memory = (RSS = 251.929688Mb, VMS = 248.695312Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.683887800000093, solving_time=2.1226348000000144, total_time=4.806522600000108, memory=Memory(rss=251.9296875, vms=248.6953125), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17530240000002095, solving_time=0.6254627000000141, total_time=0.8007651000000351, memory=Memory(rss=251.9296875, vms=248.6953125), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 78726.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 701386.0, 'bodies_tr': 701386.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5311.0, 'count_bodies_tr': 5311.0, 'sccs': 380.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15802.0, 'rules': 1327817.0, 'rules_normal': 1322775.0, 'rules_choice': 4719.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 306.0, 'rules_tr': 1327735.0, 'rules_tr_normal': 1322775.0, 'rules_tr_choice': 4719.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 224.0, 'eqs': 155887.0, 'eqs_atom': 36798.0, 'eqs_body': 8479.0, 'eqs_other': 110610.0}, 'lpStep': {'atoms': 4277.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42370.0, 'bodies_tr': 42370.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79433.0, 'rules_normal': 79154.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79433.0, 'rules_tr_normal': 79154.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9261.0, 'eqs_atom': 2102.0, 'eqs_body': 170.0, 'eqs_other': 6989.0}, 'generator': {'vars': 49263.0, 'vars_eliminated': 0.0, 'vars_frozen': 31237.0, 'constraints': 10030.0, 'constraints_binary': 407525.0, 'constraints_ternary': 39186.0, 'acyc_edges': 0.0, 'complexity': 457755.0}}, 'solving': {'solvers': {'choices': 6777.0, 'conflicts': 4046.0, 'conflicts_analyzed': 4039.0, 'restarts': 17.0, 'restarts_last': 555.0, 'extra': {'domain_choices': 4536.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 5212.0, 'distributed': 3692.0, 'distributed_sum_lbd': 11274.0, 'integrated': 22176.0, 'lemmas': 28996.0, 'lits_learnt': 638102.0, 'lemmas_binary': 2100.0, 'lemmas_ternary': 1098.0, 'cpu_time': 4.265625, 'integrated_imps': 2826.0, 'integrated_jumps': 1845.0, 'guiding_paths_lits': 1897.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 4030.0, 'lemmas_loop': 3110.0, 'lemmas_other': 21856.0, 'lits_conflict': 95648.0, 'lits_loop': 48754.0, 'lits_other': 493700.0, 'jumps': {'jumps': 4039.0, 'jumps_bounded': 89.0, 'levels': 6986.0, 'levels_bounded': 1979.0, 'max': 283.0, 'max_executed': 283.0, 'max_bounded': 271.0}}}}, 'summary': {'call': 17.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.8088836669921875, 'cpu': 4.484375, 'solve': 0.5924739837646484, 'unsat': 0.5924739837646484, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.910791397094727, 'cpu': 15.046875, 'solve': 1.748321533203125, 'unsat': 1.6555728912353516, 'sat': 0.05383110046386719}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 23279.0, 'conflicts': 12316.0, 'conflicts_analyzed': 12231.0, 'restarts': 52.0, 'restarts_last': 594.0, 'extra': {'domain_choices': 14642.0, 'models': 4.0, 'models_level': 637.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 10950.0, 'distributed': 11127.0, 'distributed_sum_lbd': 32722.0, 'integrated': 66195.0, 'lemmas': 90284.0, 'lits_learnt': 1669895.0, 'lemmas_binary': 7107.0, 'lemmas_ternary': 3214.0, 'cpu_time': 11.859375, 'integrated_imps': 11090.0, 'integrated_jumps': 6603.0, 'guiding_paths_lits': 17717.0, 'guiding_paths': 122.0, 'splits': 0.0, 'lemmas_conflict': 11935.0, 'lemmas_loop': 14613.0, 'lemmas_other': 63736.0, 'lits_conflict': 237054.0, 'lits_loop': 214408.0, 'lits_other': 1218433.0, 'jumps': {'jumps': 12231.0, 'jumps_bounded': 1026.0, 'levels': 40763.0, 'levels_bounded': 25311.0, 'max': 283.0, 'max_executed': 283.0, 'max_bounded': 271.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177164s.

[12-11-2021_15-21-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.958045s with result Satisfiable.

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 1.1352091999999914, Incremental time limit = None
Running cumulative time = 5.941731800000099, Cumulative time limit = 3600
Used memory = (RSS = 269.937500Mb, VMS = 279.507812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.861052s, Solving = 3.080680s, Total = 5.941732s, Memory = (RSS = 269.937500Mb, VMS = 279.507812Mb)), Calls = 18
Final Model :: Total atoms = 17370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-21-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.861051800000098, solving_time=3.080680000000001, total_time=5.941731800000099, memory=Memory(rss=269.9375, vms=279.5078125), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17716400000000476, solving_time=0.9580451999999866, total_time=1.1352091999999914, memory=Memory(rss=269.9375, vms=279.5078125), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 83018.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 743787.0, 'bodies_tr': 743787.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5620.0, 'count_bodies_tr': 5620.0, 'sccs': 406.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17174.0, 'rules': 1407360.0, 'rules_normal': 1402039.0, 'rules_choice': 4979.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 1407278.0, 'rules_tr_normal': 1402039.0, 'rules_tr_choice': 4979.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 242.0, 'eqs': 165214.0, 'eqs_atom': 38911.0, 'eqs_body': 8649.0, 'eqs_other': 117654.0}, 'lpStep': {'atoms': 4292.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42401.0, 'bodies_tr': 42401.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79543.0, 'rules_normal': 79264.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79543.0, 'rules_tr_normal': 79264.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9327.0, 'eqs_atom': 2113.0, 'eqs_body': 170.0, 'eqs_other': 7044.0}, 'generator': {'vars': 53310.0, 'vars_eliminated': 0.0, 'vars_frozen': 33798.0, 'constraints': 9724.0, 'constraints_binary': 396126.0, 'constraints_ternary': 37859.0, 'acyc_edges': 0.0, 'complexity': 457755.0}}, 'solving': {'solvers': {'choices': 10718.0, 'conflicts': 5890.0, 'conflicts_analyzed': 5890.0, 'restarts': 22.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 6558.0, 'models': 1.0, 'models_level': 418.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 11653.0, 'distributed': 5303.0, 'distributed_sum_lbd': 17029.0, 'integrated': 31541.0, 'lemmas': 41239.0, 'lits_learnt': 1092779.0, 'lemmas_binary': 2347.0, 'lemmas_ternary': 1207.0, 'cpu_time': 6.578125, 'integrated_imps': 3167.0, 'integrated_jumps': 2534.0, 'guiding_paths_lits': 2002.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5880.0, 'lemmas_loop': 4062.0, 'lemmas_other': 31297.0, 'lits_conflict': 164443.0, 'lits_loop': 66937.0, 'lits_other': 861399.0, 'jumps': {'jumps': 5890.0, 'jumps_bounded': 136.0, 'levels': 8921.0, 'levels_bounded': 1561.0, 'max': 290.0, 'max_executed': 290.0, 'max_bounded': 286.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 1.1579532623291016, 'cpu': 6.8125, 'solve': 0.9235477447509766, 'unsat': 0.0, 'sat': 0.8455963134765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.068744659423828, 'cpu': 21.859375, 'solve': 2.6718692779541016, 'unsat': 1.6555728912353516, 'sat': 0.8994274139404297}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 33997.0, 'conflicts': 18206.0, 'conflicts_analyzed': 18121.0, 'restarts': 74.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 21200.0, 'models': 5.0, 'models_level': 1055.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 22603.0, 'distributed': 16430.0, 'distributed_sum_lbd': 49751.0, 'integrated': 97736.0, 'lemmas': 131523.0, 'lits_learnt': 2762674.0, 'lemmas_binary': 9454.0, 'lemmas_ternary': 4421.0, 'cpu_time': 18.4375, 'integrated_imps': 14257.0, 'integrated_jumps': 9137.0, 'guiding_paths_lits': 19719.0, 'guiding_paths': 129.0, 'splits': 0.0, 'lemmas_conflict': 17815.0, 'lemmas_loop': 18675.0, 'lemmas_other': 95033.0, 'lits_conflict': 401497.0, 'lits_loop': 281345.0, 'lits_other': 2079832.0, 'jumps': {'jumps': 18121.0, 'jumps_bounded': 1162.0, 'levels': 49684.0, 'levels_bounded': 26872.0, 'max': 290.0, 'max_executed': 290.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-25] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18}

[12-11-2021_15-21-25] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 5 ( 38.46% solved)

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 18)', truth=True, inc_range=None)

[12-11-2021_15-21-25] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 18]:
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5)

[12-11-2021_15-21-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177671s.

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(5, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(5,18).

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047144s with result Unsatisfiable.

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.22481529999998884, Incremental time limit = None
Running cumulative time = 6.166547100000088, Cumulative time limit = 3600
Used memory = (RSS = 273.699219Mb, VMS = 279.957031Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.0387226000001135, solving_time=3.1278244999999743, total_time=6.166547100000088, memory=Memory(rss=273.69921875, vms=279.95703125), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17767080000001556, solving_time=0.04714449999997328, total_time=0.22481529999998884, memory=Memory(rss=273.69921875, vms=279.95703125), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 87325.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 786211.0, 'bodies_tr': 786211.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5929.0, 'count_bodies_tr': 5929.0, 'sccs': 432.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18546.0, 'rules': 1487005.0, 'rules_normal': 1481405.0, 'rules_choice': 5239.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 342.0, 'rules_tr': 1486923.0, 'rules_tr_normal': 1481405.0, 'rules_tr_choice': 5239.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 260.0, 'eqs': 174580.0, 'eqs_atom': 41027.0, 'eqs_body': 8820.0, 'eqs_other': 124733.0}, 'lpStep': {'atoms': 4307.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42424.0, 'bodies_tr': 42424.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79645.0, 'rules_normal': 79366.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79645.0, 'rules_tr_normal': 79366.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9366.0, 'eqs_atom': 2116.0, 'eqs_body': 171.0, 'eqs_other': 7079.0}, 'generator': {'vars': 57357.0, 'vars_eliminated': 0.0, 'vars_frozen': 36359.0, 'constraints': 10439.0, 'constraints_binary': 428515.0, 'constraints_ternary': 41042.0, 'acyc_edges': 0.0, 'complexity': 481078.0}}, 'solving': {'solvers': {'choices': 47.0, 'conflicts': 29.0, 'conflicts_analyzed': 22.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 22.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 46.0, 'integrated': 76.0, 'lemmas': 126.0, 'lits_learnt': 1971.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 23.0, 'cpu_time': 0.125, 'integrated_imps': 25.0, 'integrated_jumps': 9.0, 'guiding_paths_lits': 2107.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 48.0, 'lemmas_other': 58.0, 'lits_conflict': 412.0, 'lits_loop': 726.0, 'lits_other': 833.0, 'jumps': {'jumps': 22.0, 'jumps_bounded': 9.0, 'levels': 43.0, 'levels_bounded': 9.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 19.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.23989295959472656, 'cpu': 0.359375, 'solve': 0.012960433959960938, 'unsat': 0.012960433959960938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.308637619018555, 'cpu': 22.21875, 'solve': 2.6848297119140625, 'unsat': 1.6685333251953125, 'sat': 0.8994274139404297}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 34044.0, 'conflicts': 18235.0, 'conflicts_analyzed': 18143.0, 'restarts': 74.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 21222.0, 'models': 5.0, 'models_level': 1055.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 22603.0, 'distributed': 16450.0, 'distributed_sum_lbd': 49797.0, 'integrated': 97812.0, 'lemmas': 131649.0, 'lits_learnt': 2764645.0, 'lemmas_binary': 9465.0, 'lemmas_ternary': 4444.0, 'cpu_time': 18.5625, 'integrated_imps': 14282.0, 'integrated_jumps': 9146.0, 'guiding_paths_lits': 21826.0, 'guiding_paths': 136.0, 'splits': 0.0, 'lemmas_conflict': 17835.0, 'lemmas_loop': 18723.0, 'lemmas_other': 95091.0, 'lits_conflict': 401909.0, 'lits_loop': 282071.0, 'lits_other': 2080665.0, 'jumps': {'jumps': 18143.0, 'jumps_bounded': 1171.0, 'levels': 49727.0, 'levels_bounded': 26881.0, 'max': 290.0, 'max_executed': 290.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.181094s.

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.666065s with result Satisfiable.

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.8471590000000049, Incremental time limit = None
Running cumulative time = 7.013706100000093, Cumulative time limit = 3600
Used memory = (RSS = 278.601562Mb, VMS = 281.886719Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.219816s, Solving = 3.793890s, Total = 7.013706s, Memory = (RSS = 278.601562Mb, VMS = 281.886719Mb)), Calls = 20
Final Model :: Total atoms = 18659, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-21-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.2198163000001045, solving_time=3.793889799999988, total_time=7.013706100000093, memory=Memory(rss=278.6015625, vms=281.88671875), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18109369999999103, solving_time=0.6660653000000138, total_time=0.8471590000000049, memory=Memory(rss=278.6015625, vms=281.88671875), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 91635.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 828661.0, 'bodies_tr': 828661.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6238.0, 'count_bodies_tr': 6238.0, 'sccs': 458.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19918.0, 'rules': 1566754.0, 'rules_normal': 1560875.0, 'rules_choice': 5499.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 1566672.0, 'rules_tr_normal': 1560875.0, 'rules_tr_choice': 5499.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 278.0, 'eqs': 184012.0, 'eqs_atom': 43153.0, 'eqs_body': 8991.0, 'eqs_other': 131868.0}, 'lpStep': {'atoms': 4310.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42450.0, 'bodies_tr': 42450.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79749.0, 'rules_normal': 79470.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79749.0, 'rules_tr_normal': 79470.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9432.0, 'eqs_atom': 2126.0, 'eqs_body': 171.0, 'eqs_other': 7135.0}, 'generator': {'vars': 61412.0, 'vars_eliminated': 0.0, 'vars_frozen': 38925.0, 'constraints': 11599.0, 'constraints_binary': 476254.0, 'constraints_ternary': 45544.0, 'acyc_edges': 0.0, 'complexity': 534573.0}}, 'solving': {'solvers': {'choices': 7235.0, 'conflicts': 3436.0, 'conflicts_analyzed': 3436.0, 'restarts': 15.0, 'restarts_last': 550.0, 'extra': {'domain_choices': 5571.0, 'models': 1.0, 'models_level': 470.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 5626.0, 'distributed': 2977.0, 'distributed_sum_lbd': 9701.0, 'integrated': 17766.0, 'lemmas': 22915.0, 'lits_learnt': 641306.0, 'lemmas_binary': 1066.0, 'lemmas_ternary': 505.0, 'cpu_time': 4.515625, 'integrated_imps': 1818.0, 'integrated_jumps': 1536.0, 'guiding_paths_lits': 2212.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3435.0, 'lemmas_loop': 1999.0, 'lemmas_other': 17481.0, 'lits_conflict': 101830.0, 'lits_loop': 32803.0, 'lits_other': 506673.0, 'jumps': {'jumps': 3436.0, 'jumps_bounded': 70.0, 'levels': 5284.0, 'levels_bounded': 563.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.8577194213867188, 'cpu': 4.75, 'solve': 0.6313114166259766, 'unsat': 0.0, 'sat': 0.6043834686279297}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.166357040405273, 'cpu': 26.96875, 'solve': 3.316141128540039, 'unsat': 1.6685333251953125, 'sat': 1.5038108825683594}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 41279.0, 'conflicts': 21671.0, 'conflicts_analyzed': 21579.0, 'restarts': 89.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 26793.0, 'models': 6.0, 'models_level': 1525.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 28229.0, 'distributed': 19427.0, 'distributed_sum_lbd': 59498.0, 'integrated': 115578.0, 'lemmas': 154564.0, 'lits_learnt': 3405951.0, 'lemmas_binary': 10531.0, 'lemmas_ternary': 4949.0, 'cpu_time': 23.078125, 'integrated_imps': 16100.0, 'integrated_jumps': 10682.0, 'guiding_paths_lits': 24038.0, 'guiding_paths': 143.0, 'splits': 0.0, 'lemmas_conflict': 21270.0, 'lemmas_loop': 20722.0, 'lemmas_other': 112572.0, 'lits_conflict': 503739.0, 'lits_loop': 314874.0, 'lits_other': 2587338.0, 'jumps': {'jumps': 21579.0, 'jumps_bounded': 1241.0, 'levels': 55011.0, 'levels_bounded': 27444.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20}

[12-11-2021_15-21-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 6 ( 46.15% solved)

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 20)', truth=True, inc_range=None)

[12-11-2021_15-21-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 20]:
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 6)

[12-11-2021_15-21-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.184828s.

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(6, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(6,20).

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084136s with result Satisfiable.

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.26896370000000047, Incremental time limit = None
Running cumulative time = 7.282669800000093, Cumulative time limit = 3600
Used memory = (RSS = 290.085938Mb, VMS = 292.609375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.404644s, Solving = 3.878025s, Total = 7.282670s, Memory = (RSS = 290.085938Mb, VMS = 292.609375Mb)), Calls = 21
Final Model :: Total atoms = 19306, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-21-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.404644400000109, solving_time=3.8780253999999843, total_time=7.282669800000093, memory=Memory(rss=290.0859375, vms=292.609375), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18482810000000427, solving_time=0.0841355999999962, total_time=0.26896370000000047, memory=Memory(rss=290.0859375, vms=292.609375), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 95961.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 871142.0, 'bodies_tr': 871142.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6547.0, 'count_bodies_tr': 6547.0, 'sccs': 484.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21290.0, 'rules': 1646613.0, 'rules_normal': 1640455.0, 'rules_choice': 5759.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 378.0, 'rules_tr': 1646531.0, 'rules_tr_normal': 1640455.0, 'rules_tr_choice': 5759.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 296.0, 'eqs': 193515.0, 'eqs_atom': 45291.0, 'eqs_body': 9164.0, 'eqs_other': 139060.0}, 'lpStep': {'atoms': 4326.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42481.0, 'bodies_tr': 42481.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79859.0, 'rules_normal': 79580.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79859.0, 'rules_tr_normal': 79580.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9503.0, 'eqs_atom': 2138.0, 'eqs_body': 173.0, 'eqs_other': 7192.0}, 'generator': {'vars': 65473.0, 'vars_eliminated': 0.0, 'vars_frozen': 41495.0, 'constraints': 12658.0, 'constraints_binary': 522591.0, 'constraints_ternary': 49679.0, 'acyc_edges': 0.0, 'complexity': 586198.0}}, 'solving': {'solvers': {'choices': 1265.0, 'conflicts': 39.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 12.0, 'models': 1.0, 'models_level': 488.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 92.0, 'integrated': 191.0, 'lemmas': 410.0, 'lits_learnt': 4456.0, 'lemmas_binary': 49.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.21875, 'integrated_imps': 37.0, 'integrated_jumps': 197.0, 'guiding_paths_lits': 2317.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 187.0, 'lemmas_other': 185.0, 'lits_conflict': 495.0, 'lits_loop': 2256.0, 'lits_other': 1705.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 5.0, 'levels': 66.0, 'levels_bounded': 5.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2838478088378906, 'cpu': 0.453125, 'solve': 0.047870635986328125, 'unsat': 0.0, 'sat': 0.02294158935546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.450204849243164, 'cpu': 27.421875, 'solve': 3.364011764526367, 'unsat': 1.6685333251953125, 'sat': 1.5267524719238281}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 42544.0, 'conflicts': 21710.0, 'conflicts_analyzed': 21618.0, 'restarts': 89.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 26805.0, 'models': 7.0, 'models_level': 2013.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 28229.0, 'distributed': 19459.0, 'distributed_sum_lbd': 59590.0, 'integrated': 115769.0, 'lemmas': 154974.0, 'lits_learnt': 3410407.0, 'lemmas_binary': 10580.0, 'lemmas_ternary': 4970.0, 'cpu_time': 23.296875, 'integrated_imps': 16137.0, 'integrated_jumps': 10879.0, 'guiding_paths_lits': 26355.0, 'guiding_paths': 150.0, 'splits': 0.0, 'lemmas_conflict': 21308.0, 'lemmas_loop': 20909.0, 'lemmas_other': 112757.0, 'lits_conflict': 504234.0, 'lits_loop': 317130.0, 'lits_other': 2589043.0, 'jumps': {'jumps': 21618.0, 'jumps_bounded': 1246.0, 'levels': 55077.0, 'levels_bounded': 27449.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21}

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 7 ( 53.85% solved)

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 21)', truth=True, inc_range=None)

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 21]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 7)

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.191258s.

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(7, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(7,21).

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.090284s with result Satisfiable.

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.28154170000001955, Incremental time limit = None
Running cumulative time = 7.564211500000113, Cumulative time limit = 3600
Used memory = (RSS = 301.632812Mb, VMS = 301.867188Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.595902s, Solving = 3.968309s, Total = 7.564212s, Memory = (RSS = 301.632812Mb, VMS = 301.867188Mb)), Calls = 22
Final Model :: Total atoms = 19954, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.5959024000001136, solving_time=3.968309099999999, total_time=7.564211500000113, memory=Memory(rss=301.6328125, vms=301.8671875), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1912580000000048, solving_time=0.09028370000001473, total_time=0.28154170000001955, memory=Memory(rss=301.6328125, vms=301.8671875), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 100298.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 913649.0, 'bodies_tr': 913649.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6856.0, 'count_bodies_tr': 6856.0, 'sccs': 510.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22662.0, 'rules': 1726576.0, 'rules_normal': 1720139.0, 'rules_choice': 6019.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 1726494.0, 'rules_tr_normal': 1720139.0, 'rules_tr_choice': 6019.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 314.0, 'eqs': 203076.0, 'eqs_atom': 47440.0, 'eqs_body': 9336.0, 'eqs_other': 146300.0}, 'lpStep': {'atoms': 4337.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42507.0, 'bodies_tr': 42507.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79963.0, 'rules_normal': 79684.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79963.0, 'rules_tr_normal': 79684.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9561.0, 'eqs_atom': 2149.0, 'eqs_body': 172.0, 'eqs_other': 7240.0}, 'generator': {'vars': 69536.0, 'vars_eliminated': 0.0, 'vars_frozen': 44065.0, 'constraints': 13819.0, 'constraints_binary': 570531.0, 'constraints_ternary': 54190.0, 'acyc_edges': 0.0, 'complexity': 639904.0}}, 'solving': {'solvers': {'choices': 1357.0, 'conflicts': 77.0, 'conflicts_analyzed': 77.0, 'restarts': 0.0, 'restarts_last': 77.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 509.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 148.0, 'integrated': 147.0, 'lemmas': 506.0, 'lits_learnt': 7439.0, 'lemmas_binary': 50.0, 'lemmas_ternary': 51.0, 'cpu_time': 0.296875, 'integrated_imps': 12.0, 'integrated_jumps': 162.0, 'guiding_paths_lits': 2422.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 77.0, 'lemmas_loop': 282.0, 'lemmas_other': 147.0, 'lits_conflict': 1952.0, 'lits_loop': 4452.0, 'lits_other': 1035.0, 'jumps': {'jumps': 77.0, 'jumps_bounded': 1.0, 'levels': 145.0, 'levels_bounded': 1.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2942161560058594, 'cpu': 0.53125, 'solve': 0.052829742431640625, 'unsat': 0.0, 'sat': 0.02590179443359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.744421005249023, 'cpu': 27.953125, 'solve': 3.416841506958008, 'unsat': 1.6685333251953125, 'sat': 1.5526542663574219}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 43901.0, 'conflicts': 21787.0, 'conflicts_analyzed': 21695.0, 'restarts': 89.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 26805.0, 'models': 8.0, 'models_level': 2522.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 28229.0, 'distributed': 19509.0, 'distributed_sum_lbd': 59738.0, 'integrated': 115916.0, 'lemmas': 155480.0, 'lits_learnt': 3417846.0, 'lemmas_binary': 10630.0, 'lemmas_ternary': 5021.0, 'cpu_time': 23.59375, 'integrated_imps': 16149.0, 'integrated_jumps': 11041.0, 'guiding_paths_lits': 28777.0, 'guiding_paths': 157.0, 'splits': 0.0, 'lemmas_conflict': 21385.0, 'lemmas_loop': 21191.0, 'lemmas_other': 112904.0, 'lits_conflict': 506186.0, 'lits_loop': 321582.0, 'lits_other': 2590078.0, 'jumps': {'jumps': 21695.0, 'jumps_bounded': 1247.0, 'levels': 55222.0, 'levels_bounded': 27450.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21, 7: 22}

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 8 ( 61.54% solved)

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 22)', truth=True, inc_range=None)

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 22]:
sub_goal(3, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 8)

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.191053s.

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(8, 22)', truth=True, inc_range=None), conversion = current_last_sgoals(8,22).

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.165911s with result Satisfiable.

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.35696419999999307, Incremental time limit = None
Running cumulative time = 7.921175700000106, Cumulative time limit = 3600
Used memory = (RSS = 310.691406Mb, VMS = 308.312500Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.786956s, Solving = 4.134220s, Total = 7.921176s, Memory = (RSS = 310.691406Mb, VMS = 308.312500Mb)), Calls = 23
Final Model :: Total atoms = 20603, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.7869556000001126, solving_time=4.134220099999993, total_time=7.921175700000106, memory=Memory(rss=310.69140625, vms=308.3125), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19105319999999892, solving_time=0.16591099999999415, total_time=0.35696419999999307, memory=Memory(rss=310.69140625, vms=308.3125), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 104646.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 956181.0, 'bodies_tr': 956181.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7165.0, 'count_bodies_tr': 7165.0, 'sccs': 536.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24034.0, 'rules': 1806642.0, 'rules_normal': 1799926.0, 'rules_choice': 6279.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 414.0, 'rules_tr': 1806560.0, 'rules_tr_normal': 1799926.0, 'rules_tr_choice': 6279.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 332.0, 'eqs': 212699.0, 'eqs_atom': 49600.0, 'eqs_body': 9509.0, 'eqs_other': 153590.0}, 'lpStep': {'atoms': 4348.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42532.0, 'bodies_tr': 42532.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80066.0, 'rules_normal': 79787.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80066.0, 'rules_tr_normal': 79787.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9623.0, 'eqs_atom': 2160.0, 'eqs_body': 173.0, 'eqs_other': 7290.0}, 'generator': {'vars': 73599.0, 'vars_eliminated': 0.0, 'vars_frozen': 46635.0, 'constraints': 14980.0, 'constraints_binary': 618563.0, 'constraints_ternary': 58692.0, 'acyc_edges': 0.0, 'complexity': 693693.0}}, 'solving': {'solvers': {'choices': 1854.0, 'conflicts': 25.0, 'conflicts_analyzed': 25.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 16.0, 'models': 1.0, 'models_level': 518.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 52.0, 'integrated': 103.0, 'lemmas': 440.0, 'lits_learnt': 9622.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.234375, 'integrated_imps': 39.0, 'integrated_jumps': 735.0, 'guiding_paths_lits': 2527.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 329.0, 'lemmas_other': 88.0, 'lits_conflict': 1014.0, 'lits_loop': 5471.0, 'lits_other': 3137.0, 'jumps': {'jumps': 25.0, 'jumps_bounded': 8.0, 'levels': 42.0, 'levels_bounded': 8.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.3720073699951172, 'cpu': 0.5, 'solve': 0.0767974853515625, 'unsat': 0.0, 'sat': 0.034908294677734375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.11642837524414, 'cpu': 28.453125, 'solve': 3.4936389923095703, 'unsat': 1.6685333251953125, 'sat': 1.5875625610351562}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 45755.0, 'conflicts': 21812.0, 'conflicts_analyzed': 21720.0, 'restarts': 89.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 26821.0, 'models': 9.0, 'models_level': 3040.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 28229.0, 'distributed': 19527.0, 'distributed_sum_lbd': 59790.0, 'integrated': 116019.0, 'lemmas': 155920.0, 'lits_learnt': 3427468.0, 'lemmas_binary': 10644.0, 'lemmas_ternary': 5041.0, 'cpu_time': 23.828125, 'integrated_imps': 16188.0, 'integrated_jumps': 11776.0, 'guiding_paths_lits': 31304.0, 'guiding_paths': 164.0, 'splits': 0.0, 'lemmas_conflict': 21408.0, 'lemmas_loop': 21520.0, 'lemmas_other': 112992.0, 'lits_conflict': 507200.0, 'lits_loop': 327053.0, 'lits_other': 2593215.0, 'jumps': {'jumps': 21720.0, 'jumps_bounded': 1255.0, 'levels': 55264.0, 'levels_bounded': 27458.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23}

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 9 ( 69.23% solved)

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 23)', truth=True, inc_range=None)

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 23]:
sub_goal(3, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 9)

[12-11-2021_15-21-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.193759s.

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(9, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(9,23).

[12-11-2021_15-21-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.141671s with result Satisfiable.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3354305000000011, Incremental time limit = None
Running cumulative time = 8.256606200000107, Cumulative time limit = 3600
Used memory = (RSS = 322.437500Mb, VMS = 318.507812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.980715s, Solving = 4.275891s, Total = 8.256606s, Memory = (RSS = 322.437500Mb, VMS = 318.507812Mb)), Calls = 24
Final Model :: Total atoms = 21253, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.9807150000001172, solving_time=4.27589119999999, total_time=8.256606200000107, memory=Memory(rss=322.4375, vms=318.5078125), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1937594000000047, solving_time=0.14167109999999639, total_time=0.3354305000000011, memory=Memory(rss=322.4375, vms=318.5078125), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 109005.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 998738.0, 'bodies_tr': 998738.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7474.0, 'count_bodies_tr': 7474.0, 'sccs': 562.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25406.0, 'rules': 1886811.0, 'rules_normal': 1879816.0, 'rules_choice': 6539.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 1886729.0, 'rules_tr_normal': 1879816.0, 'rules_tr_choice': 6539.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 350.0, 'eqs': 222382.0, 'eqs_atom': 51771.0, 'eqs_body': 9681.0, 'eqs_other': 160930.0}, 'lpStep': {'atoms': 4359.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42557.0, 'bodies_tr': 42557.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80169.0, 'rules_normal': 79890.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80169.0, 'rules_tr_normal': 79890.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9683.0, 'eqs_atom': 2171.0, 'eqs_body': 172.0, 'eqs_other': 7340.0}, 'generator': {'vars': 77662.0, 'vars_eliminated': 0.0, 'vars_frozen': 49205.0, 'constraints': 16141.0, 'constraints_binary': 666687.0, 'constraints_ternary': 63194.0, 'acyc_edges': 0.0, 'complexity': 747574.0}}, 'solving': {'solvers': {'choices': 1177.0, 'conflicts': 29.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 534.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 60.0, 'integrated': 59.0, 'lemmas': 448.0, 'lits_learnt': 8753.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.296875, 'integrated_imps': 6.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 2632.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 360.0, 'lemmas_other': 59.0, 'lits_conflict': 668.0, 'lits_loop': 6192.0, 'lits_other': 1893.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 1.0, 'levels': 49.0, 'levels_bounded': 1.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 24.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.3510551452636719, 'cpu': 0.546875, 'solve': 0.10072135925292969, 'unsat': 0.0, 'sat': 0.021942138671875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.467483520507812, 'cpu': 29.0, 'solve': 3.5943603515625, 'unsat': 1.6685333251953125, 'sat': 1.6095046997070312}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 46932.0, 'conflicts': 21841.0, 'conflicts_analyzed': 21749.0, 'restarts': 89.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 26821.0, 'models': 10.0, 'models_level': 3574.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 28229.0, 'distributed': 19548.0, 'distributed_sum_lbd': 59850.0, 'integrated': 116078.0, 'lemmas': 156368.0, 'lits_learnt': 3436221.0, 'lemmas_binary': 10645.0, 'lemmas_ternary': 5051.0, 'cpu_time': 24.125, 'integrated_imps': 16194.0, 'integrated_jumps': 11783.0, 'guiding_paths_lits': 33936.0, 'guiding_paths': 171.0, 'splits': 0.0, 'lemmas_conflict': 21437.0, 'lemmas_loop': 21880.0, 'lemmas_other': 113051.0, 'lits_conflict': 507868.0, 'lits_loop': 333245.0, 'lits_other': 2595108.0, 'jumps': {'jumps': 21749.0, 'jumps_bounded': 1256.0, 'levels': 55313.0, 'levels_bounded': 27459.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24}

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 10 ( 76.92% solved)

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 24)', truth=True, inc_range=None)

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 24]:
sub_goal(3, talos, move(store_room), in(talos), store_room, 10)

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.209798s.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 25: original = External(symbol='current_last_sgoals(10, 24)', truth=True, inc_range=None), conversion = current_last_sgoals(10,24).

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068666s with result Unsatisfiable.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.27846320000000446, Incremental time limit = None
Running cumulative time = 8.535069400000111, Cumulative time limit = 3600
Used memory = (RSS = 337.867188Mb, VMS = 354.609375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.190512500000125, solving_time=4.344556899999986, total_time=8.535069400000111, memory=Memory(rss=337.8671875, vms=354.609375), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20979750000000763, solving_time=0.06866569999999683, total_time=0.27846320000000446, memory=Memory(rss=337.8671875, vms=354.609375), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 113375.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1041320.0, 'bodies_tr': 1041320.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7783.0, 'count_bodies_tr': 7783.0, 'sccs': 588.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26778.0, 'rules': 1967083.0, 'rules_normal': 1959809.0, 'rules_choice': 6799.0, 'rules_minimize': 25.0, 'rules_acyc': 0.0, 'rules_heuristic': 450.0, 'rules_tr': 1967001.0, 'rules_tr_normal': 1959809.0, 'rules_tr_choice': 6799.0, 'rules_tr_minimize': 25.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 368.0, 'eqs': 232127.0, 'eqs_atom': 53953.0, 'eqs_body': 9854.0, 'eqs_other': 168320.0}, 'lpStep': {'atoms': 4370.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42582.0, 'bodies_tr': 42582.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80272.0, 'rules_normal': 79993.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80272.0, 'rules_tr_normal': 79993.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9745.0, 'eqs_atom': 2182.0, 'eqs_body': 173.0, 'eqs_other': 7390.0}, 'generator': {'vars': 81725.0, 'vars_eliminated': 0.0, 'vars_frozen': 51775.0, 'constraints': 17302.0, 'constraints_binary': 714903.0, 'constraints_ternary': 67696.0, 'acyc_edges': 0.0, 'complexity': 801547.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2346.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 25.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.2932453155517578, 'cpu': 0.34375, 'solve': 0.022939682006835938, 'unsat': 0.022939682006835938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.76072883605957, 'cpu': 29.34375, 'solve': 3.617300033569336, 'unsat': 1.6914730072021484, 'sat': 1.6095046997070312}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 46932.0, 'conflicts': 21846.0, 'conflicts_analyzed': 21749.0, 'restarts': 89.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 26821.0, 'models': 10.0, 'models_level': 3574.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 28229.0, 'distributed': 19548.0, 'distributed_sum_lbd': 59850.0, 'integrated': 116078.0, 'lemmas': 156368.0, 'lits_learnt': 3436221.0, 'lemmas_binary': 10645.0, 'lemmas_ternary': 5051.0, 'cpu_time': 24.234375, 'integrated_imps': 16194.0, 'integrated_jumps': 11783.0, 'guiding_paths_lits': 36282.0, 'guiding_paths': 177.0, 'splits': 0.0, 'lemmas_conflict': 21437.0, 'lemmas_loop': 21880.0, 'lemmas_other': 113051.0, 'lits_conflict': 507868.0, 'lits_loop': 333245.0, 'lits_other': 2595108.0, 'jumps': {'jumps': 21749.0, 'jumps_bounded': 1256.0, 'levels': 55313.0, 'levels_bounded': 27459.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210726s.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.293077s with result Unsatisfiable.

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.5038023999999837, Incremental time limit = None
Running cumulative time = 9.038871800000095, Cumulative time limit = 3600
Used memory = (RSS = 347.679688Mb, VMS = 362.816406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.401238200000108, solving_time=4.637633599999987, total_time=9.038871800000095, memory=Memory(rss=347.6796875, vms=362.81640625), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21072569999998336, solving_time=0.2930767000000003, total_time=0.5038023999999837, memory=Memory(rss=347.6796875, vms=362.81640625), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 117756.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1083927.0, 'bodies_tr': 1083927.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8092.0, 'count_bodies_tr': 8092.0, 'sccs': 614.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 28150.0, 'rules': 2047458.0, 'rules_normal': 2039905.0, 'rules_choice': 7059.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 2047376.0, 'rules_tr_normal': 2039905.0, 'rules_tr_choice': 7059.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 386.0, 'eqs': 241932.0, 'eqs_atom': 56146.0, 'eqs_body': 10026.0, 'eqs_other': 175760.0}, 'lpStep': {'atoms': 4381.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42607.0, 'bodies_tr': 42607.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80375.0, 'rules_normal': 80096.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80375.0, 'rules_tr_normal': 80096.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9805.0, 'eqs_atom': 2193.0, 'eqs_body': 172.0, 'eqs_other': 7440.0}, 'generator': {'vars': 85788.0, 'vars_eliminated': 0.0, 'vars_frozen': 54345.0, 'constraints': 18463.0, 'constraints_binary': 763211.0, 'constraints_ternary': 72198.0, 'acyc_edges': 0.0, 'complexity': 855612.0}}, 'solving': {'solvers': {'choices': 1626.0, 'conflicts': 1058.0, 'conflicts_analyzed': 1053.0, 'restarts': 6.0, 'restarts_last': 166.0, 'extra': {'domain_choices': 1625.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 878.0, 'distributed_sum_lbd': 2804.0, 'integrated': 5227.0, 'lemmas': 8745.0, 'lits_learnt': 182973.0, 'lemmas_binary': 483.0, 'lemmas_ternary': 189.0, 'cpu_time': 1.78125, 'integrated_imps': 371.0, 'integrated_jumps': 247.0, 'guiding_paths_lits': 2842.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1053.0, 'lemmas_loop': 2486.0, 'lemmas_other': 5206.0, 'lits_conflict': 26337.0, 'lits_loop': 40450.0, 'lits_other': 116186.0, 'jumps': {'jumps': 1053.0, 'jumps_bounded': 20.0, 'levels': 1659.0, 'levels_bounded': 288.0, 'max': 271.0, 'max_executed': 271.0, 'max_bounded': 269.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.5181217193603516, 'cpu': 2.03125, 'solve': 0.25232505798339844, 'unsat': 0.25232505798339844, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.278850555419922, 'cpu': 31.375, 'solve': 3.8696250915527344, 'unsat': 1.9437980651855469, 'sat': 1.6095046997070312}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 48558.0, 'conflicts': 22904.0, 'conflicts_analyzed': 22802.0, 'restarts': 95.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 28446.0, 'models': 10.0, 'models_level': 3574.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 28229.0, 'distributed': 20426.0, 'distributed_sum_lbd': 62654.0, 'integrated': 121305.0, 'lemmas': 165113.0, 'lits_learnt': 3619194.0, 'lemmas_binary': 11128.0, 'lemmas_ternary': 5240.0, 'cpu_time': 26.015625, 'integrated_imps': 16565.0, 'integrated_jumps': 12030.0, 'guiding_paths_lits': 39124.0, 'guiding_paths': 184.0, 'splits': 0.0, 'lemmas_conflict': 22490.0, 'lemmas_loop': 24366.0, 'lemmas_other': 118257.0, 'lits_conflict': 534205.0, 'lits_loop': 373695.0, 'lits_other': 2711294.0, 'jumps': {'jumps': 22802.0, 'jumps_bounded': 1276.0, 'levels': 56972.0, 'levels_bounded': 27747.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-28] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.206201s.

[12-11-2021_15-21-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.973466s with result Satisfiable.

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 1.1796673999999996, Incremental time limit = None
Running cumulative time = 10.218539200000095, Cumulative time limit = 3600
Used memory = (RSS = 358.300781Mb, VMS = 370.445312Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.607440s, Solving = 5.611100s, Total = 10.218539s, Memory = (RSS = 358.300781Mb, VMS = 370.445312Mb)), Calls = 27
Final Model :: Total atoms = 23201, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-21-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.607439600000106, solving_time=5.611099599999989, total_time=10.218539200000095, memory=Memory(rss=358.30078125, vms=370.4453125), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20620139999999765, solving_time=0.9734660000000019, total_time=1.1796673999999996, memory=Memory(rss=358.30078125, vms=370.4453125), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 122148.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1126559.0, 'bodies_tr': 1126559.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8401.0, 'count_bodies_tr': 8401.0, 'sccs': 640.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 29522.0, 'rules': 2127936.0, 'rules_normal': 2120104.0, 'rules_choice': 7319.0, 'rules_minimize': 27.0, 'rules_acyc': 0.0, 'rules_heuristic': 486.0, 'rules_tr': 2127854.0, 'rules_tr_normal': 2120104.0, 'rules_tr_choice': 7319.0, 'rules_tr_minimize': 27.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 404.0, 'eqs': 251799.0, 'eqs_atom': 58350.0, 'eqs_body': 10199.0, 'eqs_other': 183250.0}, 'lpStep': {'atoms': 4392.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42632.0, 'bodies_tr': 42632.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80478.0, 'rules_normal': 80199.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80478.0, 'rules_tr_normal': 80199.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9867.0, 'eqs_atom': 2204.0, 'eqs_body': 173.0, 'eqs_other': 7490.0}, 'generator': {'vars': 89851.0, 'vars_eliminated': 0.0, 'vars_frozen': 56915.0, 'constraints': 19624.0, 'constraints_binary': 811611.0, 'constraints_ternary': 76700.0, 'acyc_edges': 0.0, 'complexity': 909769.0}}, 'solving': {'solvers': {'choices': 7124.0, 'conflicts': 3431.0, 'conflicts_analyzed': 3431.0, 'restarts': 13.0, 'restarts_last': 554.0, 'extra': {'domain_choices': 6678.0, 'models': 1.0, 'models_level': 609.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 10014.0, 'distributed': 2374.0, 'distributed_sum_lbd': 8099.0, 'integrated': 14149.0, 'lemmas': 21841.0, 'lits_learnt': 605530.0, 'lemmas_binary': 1246.0, 'lemmas_ternary': 602.0, 'cpu_time': 6.53125, 'integrated_imps': 1237.0, 'integrated_jumps': 1394.0, 'guiding_paths_lits': 2947.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3427.0, 'lemmas_loop': 4276.0, 'lemmas_other': 14138.0, 'lits_conflict': 120555.0, 'lits_loop': 68274.0, 'lits_other': 416701.0, 'jumps': {'jumps': 3431.0, 'jumps_bounded': 8.0, 'levels': 5509.0, 'levels_bounded': 8.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 27.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 1.1948413848876953, 'cpu': 6.78125, 'solve': 0.9295501708984375, 'unsat': 0.0, 'sat': 0.8806838989257812}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 10.473691940307617, 'cpu': 38.15625, 'solve': 4.799175262451172, 'unsat': 1.9437980651855469, 'sat': 2.4901885986328125}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 55682.0, 'conflicts': 26335.0, 'conflicts_analyzed': 26233.0, 'restarts': 108.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 35124.0, 'models': 11.0, 'models_level': 4183.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 38243.0, 'distributed': 22800.0, 'distributed_sum_lbd': 70753.0, 'integrated': 135454.0, 'lemmas': 186954.0, 'lits_learnt': 4224724.0, 'lemmas_binary': 12374.0, 'lemmas_ternary': 5842.0, 'cpu_time': 32.546875, 'integrated_imps': 17802.0, 'integrated_jumps': 13424.0, 'guiding_paths_lits': 42071.0, 'guiding_paths': 191.0, 'splits': 0.0, 'lemmas_conflict': 25917.0, 'lemmas_loop': 28642.0, 'lemmas_other': 132395.0, 'lits_conflict': 654760.0, 'lits_loop': 441969.0, 'lits_other': 3127995.0, 'jumps': {'jumps': 26233.0, 'jumps_bounded': 1284.0, 'levels': 62481.0, 'levels_bounded': 27755.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27}

[12-11-2021_15-21-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 11 ( 84.62% solved)

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 27)', truth=True, inc_range=None)

[12-11-2021_15-21-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 27]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 11)

[12-11-2021_15-21-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218187s.

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 28: original = External(symbol='current_last_sgoals(11, 27)', truth=True, inc_range=None), conversion = current_last_sgoals(11,27).

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.550488s with result Unsatisfiable.

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.7686743999999806, Incremental time limit = None
Running cumulative time = 10.987213600000075, Cumulative time limit = 3600
Used memory = (RSS = 364.898438Mb, VMS = 374.476562Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.825626200000102, solving_time=6.1615873999999735, total_time=10.987213600000075, memory=Memory(rss=364.8984375, vms=374.4765625), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21818659999999568, solving_time=0.5504877999999849, total_time=0.7686743999999806, memory=Memory(rss=364.8984375, vms=374.4765625), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 126551.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1169216.0, 'bodies_tr': 1169216.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8710.0, 'count_bodies_tr': 8710.0, 'sccs': 666.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 30894.0, 'rules': 2208517.0, 'rules_normal': 2200406.0, 'rules_choice': 7579.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 504.0, 'rules_tr': 2208435.0, 'rules_tr_normal': 2200406.0, 'rules_tr_choice': 7579.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 422.0, 'eqs': 261726.0, 'eqs_atom': 60565.0, 'eqs_body': 10371.0, 'eqs_other': 190790.0}, 'lpStep': {'atoms': 4403.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42657.0, 'bodies_tr': 42657.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80581.0, 'rules_normal': 80302.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80581.0, 'rules_tr_normal': 80302.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9927.0, 'eqs_atom': 2215.0, 'eqs_body': 172.0, 'eqs_other': 7540.0}, 'generator': {'vars': 93914.0, 'vars_eliminated': 0.0, 'vars_frozen': 59485.0, 'constraints': 20785.0, 'constraints_binary': 860103.0, 'constraints_ternary': 81202.0, 'acyc_edges': 0.0, 'complexity': 964018.0}}, 'solving': {'solvers': {'choices': 2827.0, 'conflicts': 1480.0, 'conflicts_analyzed': 1472.0, 'restarts': 7.0, 'restarts_last': 267.0, 'extra': {'domain_choices': 2792.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1182.0, 'distributed_sum_lbd': 3952.0, 'integrated': 7040.0, 'lemmas': 9894.0, 'lits_learnt': 346665.0, 'lemmas_binary': 391.0, 'lemmas_ternary': 154.0, 'cpu_time': 3.578125, 'integrated_imps': 1632.0, 'integrated_jumps': 963.0, 'guiding_paths_lits': 3052.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1469.0, 'lemmas_loop': 1549.0, 'lemmas_other': 6876.0, 'lits_conflict': 59525.0, 'lits_loop': 23640.0, 'lits_other': 263500.0, 'jumps': {'jumps': 1472.0, 'jumps_bounded': 7.0, 'levels': 2162.0, 'levels_bounded': 305.0, 'max': 301.0, 'max_executed': 301.0, 'max_bounded': 299.0}}}}, 'summary': {'call': 28.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.7852153778076172, 'cpu': 3.84375, 'solve': 0.5049343109130859, 'unsat': 0.5049343109130859, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.258907318115234, 'cpu': 42.0, 'solve': 5.304109573364258, 'unsat': 2.448732376098633, 'sat': 2.4901885986328125}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 58509.0, 'conflicts': 27815.0, 'conflicts_analyzed': 27705.0, 'restarts': 115.0, 'restarts_last': 906.0, 'extra': {'domain_choices': 37916.0, 'models': 11.0, 'models_level': 4183.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 38243.0, 'distributed': 23982.0, 'distributed_sum_lbd': 74705.0, 'integrated': 142494.0, 'lemmas': 196848.0, 'lits_learnt': 4571389.0, 'lemmas_binary': 12765.0, 'lemmas_ternary': 5996.0, 'cpu_time': 36.125, 'integrated_imps': 19434.0, 'integrated_jumps': 14387.0, 'guiding_paths_lits': 45123.0, 'guiding_paths': 198.0, 'splits': 0.0, 'lemmas_conflict': 27386.0, 'lemmas_loop': 30191.0, 'lemmas_other': 139271.0, 'lits_conflict': 714285.0, 'lits_loop': 465609.0, 'lits_other': 3391495.0, 'jumps': {'jumps': 27705.0, 'jumps_bounded': 1291.0, 'levels': 64643.0, 'levels_bounded': 28060.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.216915s.

[12-11-2021_15-21-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.692314s with result Satisfiable.

[12-11-2021_15-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 1.9092290000000105, Incremental time limit = None
Running cumulative time = 12.896442600000086, Cumulative time limit = 3600
Used memory = (RSS = 381.449219Mb, VMS = 388.707031Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.042541s, Solving = 7.853901s, Total = 12.896443s, Memory = (RSS = 381.449219Mb, VMS = 388.707031Mb)), Calls = 29
Final Model :: Total atoms = 24502, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[12-11-2021_15-21-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.042541200000102, solving_time=7.853901399999984, total_time=12.896442600000086, memory=Memory(rss=381.44921875, vms=388.70703125), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2169150000000002, solving_time=1.6923140000000103, total_time=1.9092290000000105, memory=Memory(rss=381.44921875, vms=388.70703125), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 130965.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1211898.0, 'bodies_tr': 1211898.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9019.0, 'count_bodies_tr': 9019.0, 'sccs': 692.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 32266.0, 'rules': 2289201.0, 'rules_normal': 2280811.0, 'rules_choice': 7839.0, 'rules_minimize': 29.0, 'rules_acyc': 0.0, 'rules_heuristic': 522.0, 'rules_tr': 2289119.0, 'rules_tr_normal': 2280811.0, 'rules_tr_choice': 7839.0, 'rules_tr_minimize': 29.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 440.0, 'eqs': 271715.0, 'eqs_atom': 62791.0, 'eqs_body': 10544.0, 'eqs_other': 198380.0}, 'lpStep': {'atoms': 4414.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42682.0, 'bodies_tr': 42682.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80684.0, 'rules_normal': 80405.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80684.0, 'rules_tr_normal': 80405.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9989.0, 'eqs_atom': 2226.0, 'eqs_body': 173.0, 'eqs_other': 7590.0}, 'generator': {'vars': 97977.0, 'vars_eliminated': 0.0, 'vars_frozen': 62055.0, 'constraints': 21946.0, 'constraints_binary': 908687.0, 'constraints_ternary': 85704.0, 'acyc_edges': 0.0, 'complexity': 1018359.0}}, 'solving': {'solvers': {'choices': 12639.0, 'conflicts': 6384.0, 'conflicts_analyzed': 6384.0, 'restarts': 22.0, 'restarts_last': 1083.0, 'extra': {'domain_choices': 10243.0, 'models': 1.0, 'models_level': 648.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 23152.0, 'distributed': 4251.0, 'distributed_sum_lbd': 14796.0, 'integrated': 25291.0, 'lemmas': 39248.0, 'lits_learnt': 1394049.0, 'lemmas_binary': 1872.0, 'lemmas_ternary': 1153.0, 'cpu_time': 11.5625, 'integrated_imps': 1819.0, 'integrated_jumps': 2383.0, 'guiding_paths_lits': 3157.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 6383.0, 'lemmas_loop': 7685.0, 'lemmas_other': 25180.0, 'lits_conflict': 287921.0, 'lits_loop': 117139.0, 'lits_other': 988989.0, 'jumps': {'jumps': 6384.0, 'jumps_bounded': 1.0, 'levels': 9054.0, 'levels_bounded': 1.0, 'max': 14.0, 'max_executed': 14.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 29.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 1.9279193878173828, 'cpu': 11.84375, 'solve': 1.6438121795654297, 'unsat': 0.0, 'sat': 1.5918464660644531}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 13.186826705932617, 'cpu': 53.84375, 'solve': 6.9479217529296875, 'unsat': 2.448732376098633, 'sat': 4.082035064697266}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 71148.0, 'conflicts': 34199.0, 'conflicts_analyzed': 34089.0, 'restarts': 137.0, 'restarts_last': 1083.0, 'extra': {'domain_choices': 48159.0, 'models': 12.0, 'models_level': 4831.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 61395.0, 'distributed': 28233.0, 'distributed_sum_lbd': 89501.0, 'integrated': 167785.0, 'lemmas': 236096.0, 'lits_learnt': 5965438.0, 'lemmas_binary': 14637.0, 'lemmas_ternary': 7149.0, 'cpu_time': 47.6875, 'integrated_imps': 21253.0, 'integrated_jumps': 16770.0, 'guiding_paths_lits': 48280.0, 'guiding_paths': 205.0, 'splits': 0.0, 'lemmas_conflict': 33769.0, 'lemmas_loop': 37876.0, 'lemmas_other': 164451.0, 'lits_conflict': 1002206.0, 'lits_loop': 582748.0, 'lits_other': 4380484.0, 'jumps': {'jumps': 34089.0, 'jumps_bounded': 1292.0, 'levels': 73697.0, 'levels_bounded': 28061.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-32] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29}

[12-11-2021_15-21-32] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 12 ( 92.31% solved)

[12-11-2021_15-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 29)', truth=True, inc_range=None)

[12-11-2021_15-21-32] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 29]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 12)

[12-11-2021_15-21-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.222497s.

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(12, 29)', truth=True, inc_range=None), conversion = current_last_sgoals(12,29).

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.221969s with result Unsatisfiable.

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.44446659999996996, Incremental time limit = None
Running cumulative time = 13.340909200000056, Cumulative time limit = 3600
Used memory = (RSS = 393.355469Mb, VMS = 398.949219Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.265038400000094, solving_time=8.075870799999961, total_time=13.340909200000056, memory=Memory(rss=393.35546875, vms=398.94921875), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2224971999999923, solving_time=0.22196939999997767, total_time=0.44446659999996996, memory=Memory(rss=393.35546875, vms=398.94921875), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 135390.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1254599.0, 'bodies_tr': 1254599.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9328.0, 'count_bodies_tr': 9328.0, 'sccs': 718.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 33638.0, 'rules': 2369982.0, 'rules_normal': 2361313.0, 'rules_choice': 8099.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 540.0, 'rules_tr': 2369900.0, 'rules_tr_normal': 2361313.0, 'rules_tr_choice': 8099.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 458.0, 'eqs': 281746.0, 'eqs_atom': 65022.0, 'eqs_body': 10716.0, 'eqs_other': 206008.0}, 'lpStep': {'atoms': 4425.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42701.0, 'bodies_tr': 42701.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80781.0, 'rules_normal': 80502.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80781.0, 'rules_tr_normal': 80502.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 10031.0, 'eqs_atom': 2231.0, 'eqs_body': 172.0, 'eqs_other': 7628.0}, 'generator': {'vars': 102040.0, 'vars_eliminated': 0.0, 'vars_frozen': 64625.0, 'constraints': 23098.0, 'constraints_binary': 955835.0, 'constraints_ternary': 90107.0, 'acyc_edges': 0.0, 'complexity': 1071156.0}}, 'solving': {'solvers': {'choices': 959.0, 'conflicts': 363.0, 'conflicts_analyzed': 355.0, 'restarts': 1.0, 'restarts_last': 74.0, 'extra': {'domain_choices': 928.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 352.0, 'distributed_sum_lbd': 957.0, 'integrated': 2090.0, 'lemmas': 2657.0, 'lits_learnt': 79273.0, 'lemmas_binary': 121.0, 'lemmas_ternary': 0.0, 'cpu_time': 1.140625, 'integrated_imps': 548.0, 'integrated_jumps': 449.0, 'guiding_paths_lits': 3262.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 352.0, 'lemmas_loop': 479.0, 'lemmas_other': 1826.0, 'lits_conflict': 11972.0, 'lits_loop': 7172.0, 'lits_other': 60129.0, 'jumps': {'jumps': 355.0, 'jumps_bounded': 3.0, 'levels': 513.0, 'levels_bounded': 3.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 30.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.46484375, 'cpu': 1.4375, 'solve': 0.1730518341064453, 'unsat': 0.1730518341064453, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 13.651670455932617, 'cpu': 55.28125, 'solve': 7.120973587036133, 'unsat': 2.621784210205078, 'sat': 4.082035064697266}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 72107.0, 'conflicts': 34562.0, 'conflicts_analyzed': 34444.0, 'restarts': 138.0, 'restarts_last': 1083.0, 'extra': {'domain_choices': 49087.0, 'models': 12.0, 'models_level': 4831.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 61395.0, 'distributed': 28585.0, 'distributed_sum_lbd': 90458.0, 'integrated': 169875.0, 'lemmas': 238753.0, 'lits_learnt': 6044711.0, 'lemmas_binary': 14758.0, 'lemmas_ternary': 7149.0, 'cpu_time': 48.828125, 'integrated_imps': 21801.0, 'integrated_jumps': 17219.0, 'guiding_paths_lits': 51542.0, 'guiding_paths': 212.0, 'splits': 0.0, 'lemmas_conflict': 34121.0, 'lemmas_loop': 38355.0, 'lemmas_other': 166277.0, 'lits_conflict': 1014178.0, 'lits_loop': 589920.0, 'lits_other': 4440613.0, 'jumps': {'jumps': 34444.0, 'jumps_bounded': 1295.0, 'levels': 74210.0, 'levels_bounded': 28064.0, 'max': 317.0, 'max_executed': 317.0, 'max_bounded': 316.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274922s.

[12-11-2021_15-21-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 4.364018s with result Unsatisfiable.

[12-11-2021_15-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 4.6389408, Incremental time limit = None
Running cumulative time = 17.979850000000056, Cumulative time limit = 3600
Used memory = (RSS = 404.320312Mb, VMS = 408.207031Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=31, start_step=30, end_step=31, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.539960700000108, solving_time=12.439889299999948, total_time=17.979850000000056, memory=Memory(rss=404.3203125, vms=408.20703125), step_range=range(0, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2749223000000143, solving_time=4.364018499999986, total_time=4.6389408, memory=Memory(rss=404.3203125, vms=408.20703125), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 139820.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1297325.0, 'bodies_tr': 1297325.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9637.0, 'count_bodies_tr': 9637.0, 'sccs': 744.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 35010.0, 'rules': 2450866.0, 'rules_normal': 2441918.0, 'rules_choice': 8359.0, 'rules_minimize': 31.0, 'rules_acyc': 0.0, 'rules_heuristic': 558.0, 'rules_tr': 2450784.0, 'rules_tr_normal': 2441918.0, 'rules_tr_choice': 8359.0, 'rules_tr_minimize': 31.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 476.0, 'eqs': 291839.0, 'eqs_atom': 67264.0, 'eqs_body': 10889.0, 'eqs_other': 213686.0}, 'lpStep': {'atoms': 4430.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42726.0, 'bodies_tr': 42726.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80884.0, 'rules_normal': 80605.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80884.0, 'rules_tr_normal': 80605.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 10093.0, 'eqs_atom': 2242.0, 'eqs_body': 173.0, 'eqs_other': 7678.0}, 'generator': {'vars': 106103.0, 'vars_eliminated': 0.0, 'vars_frozen': 67195.0, 'constraints': 24259.0, 'constraints_binary': 1004603.0, 'constraints_ternary': 94609.0, 'acyc_edges': 0.0, 'complexity': 1125681.0}}, 'solving': {'solvers': {'choices': 26762.0, 'conflicts': 15331.0, 'conflicts_analyzed': 15324.0, 'restarts': 42.0, 'restarts_last': 2494.0, 'extra': {'domain_choices': 21599.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 29573.0, 'distributed': 8161.0, 'distributed_sum_lbd': 29022.0, 'integrated': 48909.0, 'lemmas': 84318.0, 'lits_learnt': 3282148.0, 'lemmas_binary': 3003.0, 'lemmas_ternary': 1722.0, 'cpu_time': 30.09375, 'integrated_imps': 3281.0, 'integrated_jumps': 4706.0, 'guiding_paths_lits': 3367.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 15320.0, 'lemmas_loop': 20164.0, 'lemmas_other': 48834.0, 'lits_conflict': 776660.0, 'lits_loop': 307982.0, 'lits_other': 2197506.0, 'jumps': {'jumps': 15324.0, 'jumps_bounded': 3.0, 'levels': 22413.0, 'levels_bounded': 483.0, 'max': 486.0, 'max_executed': 486.0, 'max_bounded': 481.0}}}}, 'summary': {'call': 31.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 4.662010192871094, 'cpu': 30.453125, 'solve': 4.304536819458008, 'unsat': 4.304536819458008, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 18.31368064880371, 'cpu': 85.734375, 'solve': 11.42551040649414, 'unsat': 6.926321029663086, 'sat': 4.082035064697266}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 98869.0, 'conflicts': 49893.0, 'conflicts_analyzed': 49768.0, 'restarts': 180.0, 'restarts_last': 2494.0, 'extra': {'domain_choices': 70686.0, 'models': 12.0, 'models_level': 4831.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 90968.0, 'distributed': 36746.0, 'distributed_sum_lbd': 119480.0, 'integrated': 218784.0, 'lemmas': 323071.0, 'lits_learnt': 9326859.0, 'lemmas_binary': 17761.0, 'lemmas_ternary': 8871.0, 'cpu_time': 78.921875, 'integrated_imps': 25082.0, 'integrated_jumps': 21925.0, 'guiding_paths_lits': 54909.0, 'guiding_paths': 219.0, 'splits': 0.0, 'lemmas_conflict': 49441.0, 'lemmas_loop': 58519.0, 'lemmas_other': 215111.0, 'lits_conflict': 1790838.0, 'lits_loop': 897902.0, 'lits_other': 6638119.0, 'jumps': {'jumps': 49768.0, 'jumps_bounded': 1298.0, 'levels': 96623.0, 'levels_bounded': 28547.0, 'max': 486.0, 'max_executed': 486.0, 'max_bounded': 481.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.284231s.

[12-11-2021_15-21-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 6.911641s with result Satisfiable.

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 7.195872400000013, Incremental time limit = None
Running cumulative time = 25.17572240000007, Cumulative time limit = 3600
Used memory = (RSS = 426.023438Mb, VMS = 427.539062Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.824192s, Solving = 19.351530s, Total = 25.175722s, Memory = (RSS = 426.023438Mb, VMS = 427.539062Mb)), Calls = 32
Final Model :: Total atoms = 26456, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[12-11-2021_15-21-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=32, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.82419190000013, solving_time=19.35153049999994, total_time=25.17572240000007, memory=Memory(rss=426.0234375, vms=427.5390625), step_range=range(0, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.284231200000022, solving_time=6.911641199999991, total_time=7.195872400000013, memory=Memory(rss=426.0234375, vms=427.5390625), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 144261.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1340075.0, 'bodies_tr': 1340075.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9946.0, 'count_bodies_tr': 9946.0, 'sccs': 770.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 36382.0, 'rules': 2531852.0, 'rules_normal': 2522625.0, 'rules_choice': 8619.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 576.0, 'rules_tr': 2531770.0, 'rules_tr_normal': 2522625.0, 'rules_tr_choice': 8619.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 494.0, 'eqs': 301989.0, 'eqs_atom': 69516.0, 'eqs_body': 11061.0, 'eqs_other': 221412.0}, 'lpStep': {'atoms': 4441.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42750.0, 'bodies_tr': 42750.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 80986.0, 'rules_normal': 80707.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 80986.0, 'rules_tr_normal': 80707.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 10150.0, 'eqs_atom': 2252.0, 'eqs_body': 172.0, 'eqs_other': 7726.0}, 'generator': {'vars': 110166.0, 'vars_eliminated': 0.0, 'vars_frozen': 69765.0, 'constraints': 25417.0, 'constraints_binary': 1050166.0, 'constraints_ternary': 99091.0, 'acyc_edges': 0.0, 'complexity': 1176978.0}}, 'solving': {'solvers': {'choices': 39356.0, 'conflicts': 21753.0, 'conflicts_analyzed': 21753.0, 'restarts': 51.0, 'restarts_last': 1088.0, 'extra': {'domain_choices': 32873.0, 'models': 1.0, 'models_level': 711.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 92573.0, 'distributed': 10957.0, 'distributed_sum_lbd': 39665.0, 'integrated': 65569.0, 'lemmas': 98315.0, 'lits_learnt': 5274120.0, 'lemmas_binary': 3183.0, 'lemmas_ternary': 1666.0, 'cpu_time': 47.421875, 'integrated_imps': 4182.0, 'integrated_jumps': 6251.0, 'guiding_paths_lits': 3472.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 21750.0, 'lemmas_loop': 11023.0, 'lemmas_other': 65542.0, 'lits_conflict': 1403271.0, 'lits_loop': 175496.0, 'lits_other': 3695353.0, 'jumps': {'jumps': 21753.0, 'jumps_bounded': 4.0, 'levels': 33384.0, 'levels_bounded': 857.0, 'max': 499.0, 'max_executed': 499.0, 'max_bounded': 496.0}}}}, 'summary': {'call': 32.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 7.2276458740234375, 'cpu': 47.796875, 'solve': 6.856992721557617, 'unsat': 0.0, 'sat': 6.790992736816406}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 25.54132652282715, 'cpu': 133.53125, 'solve': 18.282503128051758, 'unsat': 6.926321029663086, 'sat': 10.873027801513672}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 138225.0, 'conflicts': 71646.0, 'conflicts_analyzed': 71521.0, 'restarts': 231.0, 'restarts_last': 2494.0, 'extra': {'domain_choices': 103559.0, 'models': 13.0, 'models_level': 5542.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 183541.0, 'distributed': 47703.0, 'distributed_sum_lbd': 159145.0, 'integrated': 284353.0, 'lemmas': 421386.0, 'lits_learnt': 14600979.0, 'lemmas_binary': 20944.0, 'lemmas_ternary': 10537.0, 'cpu_time': 126.34375, 'integrated_imps': 29264.0, 'integrated_jumps': 28176.0, 'guiding_paths_lits': 58381.0, 'guiding_paths': 226.0, 'splits': 0.0, 'lemmas_conflict': 71191.0, 'lemmas_loop': 69542.0, 'lemmas_other': 280653.0, 'lits_conflict': 3194109.0, 'lits_loop': 1073398.0, 'lits_other': 10333472.0, 'jumps': {'jumps': 71521.0, 'jumps_bounded': 1302.0, 'levels': 130007.0, 'levels_bounded': 29404.0, 'max': 499.0, 'max_executed': 499.0, 'max_bounded': 496.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-45] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32}

[12-11-2021_15-21-45] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 13 (100.00% solved)

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 32)', truth=True, inc_range=None)

[12-11-2021_15-21-45] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 32]:
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 13)

[12-11-2021_15-21-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.238695s.

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(13, 32)', truth=True, inc_range=None), conversion = current_last_sgoals(13,32).

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.342279s with result Unsatisfiable.

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.5809744999999964, Incremental time limit = None
Running cumulative time = 25.756696900000065, Cumulative time limit = 3600
Used memory = (RSS = 436.054688Mb, VMS = 435.007812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-45] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=33, start_step=32, end_step=33, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.062886900000137, solving_time=19.693809999999928, total_time=25.756696900000065, memory=Memory(rss=436.0546875, vms=435.0078125), step_range=range(0, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23869500000000698, solving_time=0.3422794999999894, total_time=0.5809744999999964, memory=Memory(rss=436.0546875, vms=435.0078125), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 148712.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1382850.0, 'bodies_tr': 1382850.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10255.0, 'count_bodies_tr': 10255.0, 'sccs': 796.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37754.0, 'rules': 2612941.0, 'rules_normal': 2603435.0, 'rules_choice': 8879.0, 'rules_minimize': 33.0, 'rules_acyc': 0.0, 'rules_heuristic': 594.0, 'rules_tr': 2612859.0, 'rules_tr_normal': 2603435.0, 'rules_tr_choice': 8879.0, 'rules_tr_minimize': 33.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 512.0, 'eqs': 312201.0, 'eqs_atom': 71779.0, 'eqs_body': 11234.0, 'eqs_other': 229188.0}, 'lpStep': {'atoms': 4451.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42775.0, 'bodies_tr': 42775.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 81089.0, 'rules_normal': 80810.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 81089.0, 'rules_tr_normal': 80810.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 10212.0, 'eqs_atom': 2263.0, 'eqs_body': 173.0, 'eqs_other': 7776.0}, 'generator': {'vars': 114229.0, 'vars_eliminated': 0.0, 'vars_frozen': 72335.0, 'constraints': 26540.0, 'constraints_binary': 1095761.0, 'constraints_ternary': 103220.0, 'acyc_edges': 0.0, 'complexity': 1227919.0}}, 'solving': {'solvers': {'choices': 1310.0, 'conflicts': 752.0, 'conflicts_analyzed': 747.0, 'restarts': 2.0, 'restarts_last': 117.0, 'extra': {'domain_choices': 1242.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 10000.0, 'distributed': 649.0, 'distributed_sum_lbd': 2224.0, 'integrated': 3875.0, 'lemmas': 4937.0, 'lits_learnt': 392847.0, 'lemmas_binary': 85.0, 'lemmas_ternary': 49.0, 'cpu_time': 1.921875, 'integrated_imps': 446.0, 'integrated_jumps': 328.0, 'guiding_paths_lits': 3577.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 747.0, 'lemmas_loop': 417.0, 'lemmas_other': 3773.0, 'lits_conflict': 65074.0, 'lits_loop': 5917.0, 'lits_other': 321856.0, 'jumps': {'jumps': 747.0, 'jumps_bounded': 7.0, 'levels': 1358.0, 'levels_bounded': 380.0, 'max': 376.0, 'max_executed': 376.0, 'max_bounded': 374.0}}}}, 'summary': {'call': 33.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.6127758026123047, 'cpu': 2.25, 'solve': 0.2872333526611328, 'unsat': 0.2872333526611328, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 26.154102325439453, 'cpu': 135.78125, 'solve': 18.56973648071289, 'unsat': 7.213554382324219, 'sat': 10.873027801513672}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 139535.0, 'conflicts': 72398.0, 'conflicts_analyzed': 72268.0, 'restarts': 233.0, 'restarts_last': 2494.0, 'extra': {'domain_choices': 104801.0, 'models': 13.0, 'models_level': 5542.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 193541.0, 'distributed': 48352.0, 'distributed_sum_lbd': 161369.0, 'integrated': 288228.0, 'lemmas': 426323.0, 'lits_learnt': 14993826.0, 'lemmas_binary': 21029.0, 'lemmas_ternary': 10586.0, 'cpu_time': 128.265625, 'integrated_imps': 29710.0, 'integrated_jumps': 28504.0, 'guiding_paths_lits': 61958.0, 'guiding_paths': 233.0, 'splits': 0.0, 'lemmas_conflict': 71938.0, 'lemmas_loop': 69959.0, 'lemmas_other': 284426.0, 'lits_conflict': 3259183.0, 'lits_loop': 1079315.0, 'lits_other': 10655328.0, 'jumps': {'jumps': 72268.0, 'jumps_bounded': 1309.0, 'levels': 131365.0, 'levels_bounded': 29784.0, 'max': 499.0, 'max_executed': 499.0, 'max_bounded': 496.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-45] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Number(13), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258207s.

[12-11-2021_15-21-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.944996s with result Satisfiable.

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 3.2032025000000033, Incremental time limit = None
Running cumulative time = 28.95989940000007, Cumulative time limit = 3600
Used memory = (RSS = 454.859375Mb, VMS = 454.941406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.321094s, Solving = 22.638806s, Total = 28.959899s, Memory = (RSS = 454.859375Mb, VMS = 454.941406Mb)), Calls = 34
Final Model :: Total atoms = 27761, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-21-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=34, start_step=33, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.321093800000142, solving_time=22.638805599999927, total_time=28.95989940000007, memory=Memory(rss=454.859375, vms=454.94140625), step_range=range(0, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2582069000000047, solving_time=2.9449955999999986, total_time=3.2032025000000033, memory=Memory(rss=454.859375, vms=454.94140625), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 153174.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1425650.0, 'bodies_tr': 1425650.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10564.0, 'count_bodies_tr': 10564.0, 'sccs': 822.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 39126.0, 'rules': 2694133.0, 'rules_normal': 2684348.0, 'rules_choice': 9139.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 612.0, 'rules_tr': 2694051.0, 'rules_tr_normal': 2684348.0, 'rules_tr_choice': 9139.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 530.0, 'eqs': 322473.0, 'eqs_atom': 74053.0, 'eqs_body': 11406.0, 'eqs_other': 237014.0}, 'lpStep': {'atoms': 4462.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42800.0, 'bodies_tr': 42800.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 81192.0, 'rules_normal': 80913.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 81192.0, 'rules_tr_normal': 80913.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 10272.0, 'eqs_atom': 2274.0, 'eqs_body': 172.0, 'eqs_other': 7826.0}, 'generator': {'vars': 118292.0, 'vars_eliminated': 0.0, 'vars_frozen': 74905.0, 'constraints': 27701.0, 'constraints_binary': 1144805.0, 'constraints_ternary': 107746.0, 'acyc_edges': 0.0, 'complexity': 1282744.0}}, 'solving': {'solvers': {'choices': 18321.0, 'conflicts': 10805.0, 'conflicts_analyzed': 10805.0, 'restarts': 27.0, 'restarts_last': 1973.0, 'extra': {'domain_choices': 17451.0, 'models': 1.0, 'models_level': 740.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 30687.0, 'distributed': 5704.0, 'distributed_sum_lbd': 20639.0, 'integrated': 33077.0, 'lemmas': 47881.0, 'lits_learnt': 3513943.0, 'lemmas_binary': 1532.0, 'lemmas_ternary': 974.0, 'cpu_time': 19.6875, 'integrated_imps': 1431.0, 'integrated_jumps': 1527.0, 'guiding_paths_lits': 3682.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 10803.0, 'lemmas_loop': 4047.0, 'lemmas_other': 33031.0, 'lits_conflict': 936087.0, 'lits_loop': 65902.0, 'lits_other': 2511954.0, 'jumps': {'jumps': 10805.0, 'jumps_bounded': 1.0, 'levels': 16033.0, 'levels_bounded': 1.0, 'max': 22.0, 'max_executed': 22.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 34.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 3.232654571533203, 'cpu': 20.03125, 'solve': 2.890035629272461, 'unsat': 0.0, 'sat': 2.662874221801758}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 29.386756896972656, 'cpu': 155.8125, 'solve': 21.45977210998535, 'unsat': 7.213554382324219, 'sat': 13.53590202331543}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 157856.0, 'conflicts': 83203.0, 'conflicts_analyzed': 83073.0, 'restarts': 260.0, 'restarts_last': 2494.0, 'extra': {'domain_choices': 122252.0, 'models': 14.0, 'models_level': 6282.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 224228.0, 'distributed': 54056.0, 'distributed_sum_lbd': 182008.0, 'integrated': 321305.0, 'lemmas': 474204.0, 'lits_learnt': 18507769.0, 'lemmas_binary': 22561.0, 'lemmas_ternary': 11560.0, 'cpu_time': 147.953125, 'integrated_imps': 31141.0, 'integrated_jumps': 30031.0, 'guiding_paths_lits': 65640.0, 'guiding_paths': 240.0, 'splits': 0.0, 'lemmas_conflict': 82741.0, 'lemmas_loop': 74006.0, 'lemmas_other': 317457.0, 'lits_conflict': 4195270.0, 'lits_loop': 1145217.0, 'lits_other': 13167282.0, 'jumps': {'jumps': 83073.0, 'jumps_bounded': 1310.0, 'levels': 147398.0, 'levels_bounded': 29785.0, 'max': 499.0, 'max_executed': 499.0, 'max_bounded': 496.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 11, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34}

[12-11-2021_15-21-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 14 (107.69% solved)

[12-11-2021_15-21-49] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 13 was achieved successfully.

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.178819s, Solving = 0.023541s, Total = 0.202361s, Memory = (RSS = 153.843750Mb, VMS = 149.757812Mb)
2 : Statistics :: Grounding = 0.129620s, Solving = 0.010471s, Total = 0.140091s, Memory = (RSS = 158.890625Mb, VMS = 155.359375Mb)
3 : Statistics :: Grounding = 0.136445s, Solving = 0.010965s, Total = 0.147410s, Memory = (RSS = 160.996094Mb, VMS = 156.800781Mb)
4 : Statistics :: Grounding = 0.142017s, Solving = 0.013747s, Total = 0.155764s, Memory = (RSS = 164.332031Mb, VMS = 160.210938Mb)
5 : Statistics :: Grounding = 0.168197s, Solving = 0.018895s, Total = 0.187092s, Memory = (RSS = 169.335938Mb, VMS = 164.425781Mb)
6 : Statistics :: Grounding = 0.142107s, Solving = 0.021320s, Total = 0.163427s, Memory = (RSS = 175.371094Mb, VMS = 171.324219Mb)
7 : Statistics :: Grounding = 0.161076s, Solving = 0.048181s, Total = 0.209257s, Memory = (RSS = 186.121094Mb, VMS = 183.628906Mb)
8 : Statistics :: Grounding = 0.143332s, Solving = 0.021454s, Total = 0.164786s, Memory = (RSS = 188.300781Mb, VMS = 184.914062Mb)
9 : Statistics :: Grounding = 0.153300s, Solving = 0.044943s, Total = 0.198242s, Memory = (RSS = 202.746094Mb, VMS = 202.742188Mb)
10 : Statistics :: Grounding = 0.149572s, Solving = 0.031494s, Total = 0.181066s, Memory = (RSS = 206.906250Mb, VMS = 204.382812Mb)
11 : Statistics :: Grounding = 0.153483s, Solving = 0.070495s, Total = 0.223978s, Memory = (RSS = 214.878906Mb, VMS = 215.773438Mb)
12 : Statistics :: Grounding = 0.157928s, Solving = 0.051467s, Total = 0.209396s, Memory = (RSS = 219.632812Mb, VMS = 218.289062Mb)
13 : Statistics :: Grounding = 0.158872s, Solving = 0.098234s, Total = 0.257106s, Memory = (RSS = 224.109375Mb, VMS = 220.679688Mb)
14 : Statistics :: Grounding = 0.182094s, Solving = 0.169975s, Total = 0.352069s, Memory = (RSS = 234.207031Mb, VMS = 239.050781Mb)
15 : Statistics :: Grounding = 0.179576s, Solving = 0.311349s, Total = 0.490925s, Memory = (RSS = 240.761719Mb, VMS = 243.695312Mb)
16 : Statistics :: Grounding = 0.172148s, Solving = 0.550640s, Total = 0.722788s, Memory = (RSS = 245.566406Mb, VMS = 244.652344Mb)
17 : Statistics :: Grounding = 0.175302s, Solving = 0.625463s, Total = 0.800765s, Memory = (RSS = 251.929688Mb, VMS = 248.695312Mb)
18 : Statistics :: Grounding = 0.177164s, Solving = 0.958045s, Total = 1.135209s, Memory = (RSS = 269.937500Mb, VMS = 279.507812Mb)
19 : Statistics :: Grounding = 0.177671s, Solving = 0.047144s, Total = 0.224815s, Memory = (RSS = 273.699219Mb, VMS = 279.957031Mb)
20 : Statistics :: Grounding = 0.181094s, Solving = 0.666065s, Total = 0.847159s, Memory = (RSS = 278.601562Mb, VMS = 281.886719Mb)
21 : Statistics :: Grounding = 0.184828s, Solving = 0.084136s, Total = 0.268964s, Memory = (RSS = 290.085938Mb, VMS = 292.609375Mb)
22 : Statistics :: Grounding = 0.191258s, Solving = 0.090284s, Total = 0.281542s, Memory = (RSS = 301.632812Mb, VMS = 301.867188Mb)
23 : Statistics :: Grounding = 0.191053s, Solving = 0.165911s, Total = 0.356964s, Memory = (RSS = 310.691406Mb, VMS = 308.312500Mb)
24 : Statistics :: Grounding = 0.193759s, Solving = 0.141671s, Total = 0.335431s, Memory = (RSS = 322.437500Mb, VMS = 318.507812Mb)
25 : Statistics :: Grounding = 0.209798s, Solving = 0.068666s, Total = 0.278463s, Memory = (RSS = 337.867188Mb, VMS = 354.609375Mb)
26 : Statistics :: Grounding = 0.210726s, Solving = 0.293077s, Total = 0.503802s, Memory = (RSS = 347.679688Mb, VMS = 362.816406Mb)
27 : Statistics :: Grounding = 0.206201s, Solving = 0.973466s, Total = 1.179667s, Memory = (RSS = 358.300781Mb, VMS = 370.445312Mb)
28 : Statistics :: Grounding = 0.218187s, Solving = 0.550488s, Total = 0.768674s, Memory = (RSS = 364.898438Mb, VMS = 374.476562Mb)
29 : Statistics :: Grounding = 0.216915s, Solving = 1.692314s, Total = 1.909229s, Memory = (RSS = 381.449219Mb, VMS = 388.707031Mb)
30 : Statistics :: Grounding = 0.222497s, Solving = 0.221969s, Total = 0.444467s, Memory = (RSS = 393.355469Mb, VMS = 398.949219Mb)
31 : Statistics :: Grounding = 0.274922s, Solving = 4.364018s, Total = 4.638941s, Memory = (RSS = 404.320312Mb, VMS = 408.207031Mb)
32 : Statistics :: Grounding = 0.284231s, Solving = 6.911641s, Total = 7.195872s, Memory = (RSS = 426.023438Mb, VMS = 427.539062Mb)
33 : Statistics :: Grounding = 0.238695s, Solving = 0.342279s, Total = 0.580974s, Memory = (RSS = 436.054688Mb, VMS = 435.007812Mb)
34 : Statistics :: Grounding = 0.258207s, Solving = 2.944996s, Total = 3.203203s, Memory = (RSS = 454.859375Mb, VMS = 454.941406Mb)

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 28.959899s due to: External generator exit.

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-21-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 13, Last requested goal index = 13 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.321094s, Solving = 22.638806s, Total = 28.959899s, Memory = (RSS = 454.859375Mb, VMS = 454.941406Mb)), Calls = 34
Model :: Total atoms = 27761, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 34 :: Actions = 34                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
Step 25:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 27:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 29:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 33:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 34:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=34, step_range=range(0, 35)

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 34, Actions = 34
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  34, Actions =  34 (Com = 1.00), Sgs = 34, Time =  29.000s (Gro =   6.354s, Sea =  22.646s), Expan (2.62, 2.62) (Dev = (2.43, 2.43), Bal = (0.93, 0.93))

[12-11-2021_15-21-50] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=34, start_step=0, blend=Blend(left=0, right=0)

[12-11-2021_15-21-50] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=17, large_group_size=18

[12-11-2021_15-21-50] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=17, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  34, Actions =  34 (Com = 1.00), Sgs = 34, Time =  29.000s (Gro =   6.354s, Sea =  22.646s), Expan (2.62, 2.62) (Dev = (2.43, 2.43), Bal = (0.93, 0.93))
Division points [total=1] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 1:
Divided plan : Level =  2 (par-ref), Length =  34, Actions =  34 (Com = 1.00), Sgs = 34, Time =  29.000s (Gro =   6.354s, Sea =  22.646s), Expan (2.62, 2.62) (Dev = (2.43, 2.43), Bal = (0.93, 0.93))
Division points [total=1] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-17]

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-17], problem number = 1, increment number = 1

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 17
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 16

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-17] : Minimum search length bound = disabled with value = 16

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[12-11-2021_15-21-50] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[12-11-2021_15-21-50] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 0})

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete(blue), false, 0).
holds(1, complete(red), false, 0).
holds(1, complete(yellow), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in((block,7)), (puzzle_room,1), 0).
holds(1, in((block,8)), (puzzle_room,1), 0).
holds(1, in((block,9)), (puzzle_room,1), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,1),(block,7)), false, 0).
holds(1, in_tower((block,1),(block,8)), false, 0).
holds(1, in_tower((block,1),(block,9)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,7)), false, 0).
holds(1, in_tower((block,2),(block,8)), false, 0).
holds(1, in_tower((block,2),(block,9)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,7)), false, 0).
holds(1, in_tower((block,3),(block,8)), false, 0).
holds(1, in_tower((block,3),(block,9)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,7)), false, 0).
holds(1, in_tower((block,4),(block,8)), false, 0).
holds(1, in_tower((block,4),(block,9)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,7)), false, 0).
holds(1, in_tower((block,5),(block,8)), false, 0).
holds(1, in_tower((block,5),(block,9)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,7)), false, 0).
holds(1, in_tower((block,6),(block,8)), false, 0).
holds(1, in_tower((block,6),(block,9)), false, 0).
holds(1, in_tower((block,7),(block,1)), false, 0).
holds(1, in_tower((block,7),(block,2)), false, 0).
holds(1, in_tower((block,7),(block,3)), false, 0).
holds(1, in_tower((block,7),(block,4)), false, 0).
holds(1, in_tower((block,7),(block,5)), false, 0).
holds(1, in_tower((block,7),(block,6)), false, 0).
holds(1, in_tower((block,7),(block,7)), true, 0).
holds(1, in_tower((block,7),(block,8)), false, 0).
holds(1, in_tower((block,7),(block,9)), false, 0).
holds(1, in_tower((block,8),(block,1)), false, 0).
holds(1, in_tower((block,8),(block,2)), false, 0).
holds(1, in_tower((block,8),(block,3)), false, 0).
holds(1, in_tower((block,8),(block,4)), false, 0).
holds(1, in_tower((block,8),(block,5)), false, 0).
holds(1, in_tower((block,8),(block,6)), false, 0).
holds(1, in_tower((block,8),(block,7)), false, 0).
holds(1, in_tower((block,8),(block,8)), true, 0).
holds(1, in_tower((block,8),(block,9)), false, 0).
holds(1, in_tower((block,9),(block,1)), false, 0).
holds(1, in_tower((block,9),(block,2)), false, 0).
holds(1, in_tower((block,9),(block,3)), false, 0).
holds(1, in_tower((block,9),(block,4)), false, 0).
holds(1, in_tower((block,9),(block,5)), false, 0).
holds(1, in_tower((block,9),(block,6)), false, 0).
holds(1, in_tower((block,9),(block,7)), false, 0).
holds(1, in_tower((block,9),(block,8)), false, 0).
holds(1, in_tower((block,9),(block,9)), true, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, on((block,7)), puzzle_room_table_middle, 0).
holds(1, on((block,8)), puzzle_room_table_middle, 0).
holds(1, on((block,9)), puzzle_room_table_middle, 0).
holds(1, tower_base((block,1)), true, 0).
holds(1, tower_base((block,2)), true, 0).
holds(1, tower_base((block,3)), false, 0).
holds(1, tower_base((block,4)), false, 0).
holds(1, tower_base((block,5)), false, 0).
holds(1, tower_base((block,6)), false, 0).
holds(1, tower_base((block,7)), true, 0).
holds(1, tower_base((block,8)), true, 0).
holds(1, tower_base((block,9)), true, 0).
holds(1, unordered_tower((block,1)), true, 0).
holds(1, unordered_tower((block,2)), false, 0).
holds(1, unordered_tower((block,3)), false, 0).
holds(1, unordered_tower((block,4)), false, 0).
holds(1, unordered_tower((block,5)), false, 0).
holds(1, unordered_tower((block,6)), false, 0).
holds(1, unordered_tower((block,7)), false, 0).
holds(1, unordered_tower((block,8)), false, 0).
holds(1, unordered_tower((block,9)), false, 0).
holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, complete(yellow), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in((block,7)), puzzle_room, 0).
holds(2, in((block,8)), puzzle_room, 0).
holds(2, in((block,9)), puzzle_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,1),(block,7)), false, 0).
holds(2, in_tower((block,1),(block,8)), false, 0).
holds(2, in_tower((block,1),(block,9)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,7)), false, 0).
holds(2, in_tower((block,2),(block,8)), false, 0).
holds(2, in_tower((block,2),(block,9)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,7)), false, 0).
holds(2, in_tower((block,3),(block,8)), false, 0).
holds(2, in_tower((block,3),(block,9)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,7)), false, 0).
holds(2, in_tower((block,4),(block,8)), false, 0).
holds(2, in_tower((block,4),(block,9)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,7)), false, 0).
holds(2, in_tower((block,5),(block,8)), false, 0).
holds(2, in_tower((block,5),(block,9)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,7)), false, 0).
holds(2, in_tower((block,6),(block,8)), false, 0).
holds(2, in_tower((block,6),(block,9)), false, 0).
holds(2, in_tower((block,7),(block,1)), false, 0).
holds(2, in_tower((block,7),(block,2)), false, 0).
holds(2, in_tower((block,7),(block,3)), false, 0).
holds(2, in_tower((block,7),(block,4)), false, 0).
holds(2, in_tower((block,7),(block,5)), false, 0).
holds(2, in_tower((block,7),(block,6)), false, 0).
holds(2, in_tower((block,7),(block,7)), true, 0).
holds(2, in_tower((block,7),(block,8)), false, 0).
holds(2, in_tower((block,7),(block,9)), false, 0).
holds(2, in_tower((block,8),(block,1)), false, 0).
holds(2, in_tower((block,8),(block,2)), false, 0).
holds(2, in_tower((block,8),(block,3)), false, 0).
holds(2, in_tower((block,8),(block,4)), false, 0).
holds(2, in_tower((block,8),(block,5)), false, 0).
holds(2, in_tower((block,8),(block,6)), false, 0).
holds(2, in_tower((block,8),(block,7)), false, 0).
holds(2, in_tower((block,8),(block,8)), true, 0).
holds(2, in_tower((block,8),(block,9)), false, 0).
holds(2, in_tower((block,9),(block,1)), false, 0).
holds(2, in_tower((block,9),(block,2)), false, 0).
holds(2, in_tower((block,9),(block,3)), false, 0).
holds(2, in_tower((block,9),(block,4)), false, 0).
holds(2, in_tower((block,9),(block,5)), false, 0).
holds(2, in_tower((block,9),(block,6)), false, 0).
holds(2, in_tower((block,9),(block,7)), false, 0).
holds(2, in_tower((block,9),(block,8)), false, 0).
holds(2, in_tower((block,9),(block,9)), true, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, on((block,7)), puzzle_room_table, 0).
holds(2, on((block,8)), puzzle_room_table, 0).
holds(2, on((block,9)), puzzle_room_table, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, tower_base((block,7)), true, 0).
holds(2, tower_base((block,8)), true, 0).
holds(2, tower_base((block,9)), true, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(2, unordered_tower((block,7)), false, 0).
holds(2, unordered_tower((block,8)), false, 0).
holds(2, unordered_tower((block,9)), false, 0).

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, complete(yellow), false, false).
final_goal(1, complete(yellow), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, tower_base((block,7)), false, true).
final_goal(1, tower_base((block,7)), true, false).
final_goal(1, tower_base((block,8)), false, true).
final_goal(1, tower_base((block,8)), true, false).
final_goal(1, tower_base((block,9)), false, false).
final_goal(1, tower_base((block,9)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(1, unordered_tower((block,7)), false, true).
final_goal(1, unordered_tower((block,7)), true, false).
final_goal(1, unordered_tower((block,8)), false, true).
final_goal(1, unordered_tower((block,8)), true, false).
final_goal(1, unordered_tower((block,9)), false, true).
final_goal(1, unordered_tower((block,9)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, complete(yellow), false, false).
final_goal(2, complete(yellow), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, tower_base((block,7)), false, true).
final_goal(2, tower_base((block,7)), true, false).
final_goal(2, tower_base((block,8)), false, true).
final_goal(2, tower_base((block,8)), true, false).
final_goal(2, tower_base((block,9)), false, false).
final_goal(2, tower_base((block,9)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(2, unordered_tower((block,7)), false, true).
final_goal(2, unordered_tower((block,7)), true, false).
final_goal(2, unordered_tower((block,8)), false, true).
final_goal(2, unordered_tower((block,8)), true, false).
final_goal(2, unordered_tower((block,9)), false, true).
final_goal(2, unordered_tower((block,9)), true, false).

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'store_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17})

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 17 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, grasp(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), store_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_arm_1,store_room_door), configuration(store_room_door), open, 7).
sub_goal(2, talos, release(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 8).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 11).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 14).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 15).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 16).
sub_goal(2, talos, move(hallway), in(talos), hallway, 17).

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000016E4A2C21F0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=None, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 17, 'sequential', 'true'), range_=None)]

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1259 rules

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00830299999998374s

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.038712s.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009075s with result Satisfiable.

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016E4F35D770>

[12-11-2021_15-21-50] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016E4F35D770>)

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 17, sequential, true). %* None *%

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274573s.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038363s with result Unsatisfiable.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.31293689999998264, Incremental time limit = None
Running cumulative time = 0.31293689999998264, Cumulative time limit = 3600
Used memory = (RSS = 201.941406Mb, VMS = 195.871094Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.2745734000000084, solving_time=0.03836349999997424, total_time=0.31293689999998264, memory=Memory(rss=201.94140625, vms=195.87109375), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2745734000000084, solving_time=0.03836349999997424, total_time=0.31293689999998264, memory=Memory(rss=201.94140625, vms=195.87109375), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 21103.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 75739.0, 'bodies_tr': 75739.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1459.0, 'rules': 148151.0, 'rules_normal': 147284.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 148133.0, 'rules_tr_normal': 147284.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35978.0, 'eqs_atom': 11909.0, 'eqs_body': 2894.0, 'eqs_other': 21175.0}, 'lpStep': {'atoms': 11302.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71677.0, 'bodies_tr': 71677.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1459.0, 'rules': 136955.0, 'rules_normal': 136088.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 136937.0, 'rules_tr_normal': 136088.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 15920.0, 'eqs_atom': 4393.0, 'eqs_body': 587.0, 'eqs_other': 10940.0}, 'generator': {'vars': 6024.0, 'vars_eliminated': 0.0, 'vars_frozen': 3401.0, 'constraints': 46.0, 'constraints_binary': 2304.0, 'constraints_ternary': 354.0, 'acyc_edges': 0.0, 'complexity': 2720.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 3.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 13.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 195.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 11.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 12.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3120136260986328, 'cpu': 0.3125, 'solve': 0.0029926300048828125, 'unsat': 0.0029926300048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.36786460876464844, 'cpu': 0.375, 'solve': 0.0079803466796875, 'unsat': 0.0029926300048828125, 'sat': 0.001979827880859375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 3.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 13.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 203.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 11.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 12.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.223861s.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023532s with result Satisfiable.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24739280000000008, Incremental time limit = None
Running cumulative time = 0.5603296999999827, Cumulative time limit = 3600
Used memory = (RSS = 207.320312Mb, VMS = 202.265625Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.498434s, Solving = 0.061895s, Total = 0.560330s, Memory = (RSS = 207.320312Mb, VMS = 202.265625Mb)), Calls = 2
Final Model :: Total atoms = 7985, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4984344000000078, solving_time=0.061895299999974895, total_time=0.5603296999999827, memory=Memory(rss=207.3203125, vms=202.265625), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22386099999999942, solving_time=0.023531800000000658, total_time=0.24739280000000008, memory=Memory(rss=207.3203125, vms=202.265625), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 24375.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 136915.0, 'bodies_tr': 136915.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 735.0, 'count_bodies_tr': 735.0, 'sccs': 65.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1635.0, 'rules': 266215.0, 'rules_normal': 264996.0, 'rules_choice': 1181.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 266179.0, 'rules_tr_normal': 264996.0, 'rules_tr_choice': 1181.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 42265.0, 'eqs_atom': 13417.0, 'eqs_body': 3733.0, 'eqs_other': 25115.0}, 'lpStep': {'atoms': 3272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61176.0, 'bodies_tr': 61176.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 118064.0, 'rules_normal': 117712.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 118046.0, 'rules_tr_normal': 117712.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6287.0, 'eqs_atom': 1508.0, 'eqs_body': 839.0, 'eqs_other': 3940.0}, 'generator': {'vars': 6300.0, 'vars_eliminated': 0.0, 'vars_frozen': 3645.0, 'constraints': 142.0, 'constraints_binary': 4817.0, 'constraints_ternary': 443.0, 'acyc_edges': 0.0, 'complexity': 5444.0}}, 'solving': {'solvers': {'choices': 209.0, 'conflicts': 32.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 77.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 39.0, 'distributed_sum_lbd': 46.0, 'integrated': 108.0, 'lemmas': 123.0, 'lits_learnt': 180.0, 'lemmas_binary': 28.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 59.0, 'integrated_jumps': 50.0, 'guiding_paths_lits': 464.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 11.0, 'lemmas_other': 80.0, 'lits_conflict': 32.0, 'lits_loop': 47.0, 'lits_other': 101.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 4.0, 'levels': 268.0, 'levels_bounded': 232.0, 'max': 60.0, 'max_executed': 2.0, 'max_bounded': 58.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.24736785888671875, 'cpu': 0.21875, 'solve': 0.00897979736328125, 'unsat': 0.0, 'sat': 0.0019683837890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6152324676513672, 'cpu': 0.59375, 'solve': 0.01696014404296875, 'unsat': 0.0029926300048828125, 'sat': 0.003948211669921875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 209.0, 'conflicts': 33.0, 'conflicts_analyzed': 33.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 78.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 41.0, 'distributed_sum_lbd': 49.0, 'integrated': 108.0, 'lemmas': 135.0, 'lits_learnt': 193.0, 'lemmas_binary': 29.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 59.0, 'integrated_jumps': 50.0, 'guiding_paths_lits': 667.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 33.0, 'lemmas_loop': 22.0, 'lemmas_other': 80.0, 'lits_conflict': 33.0, 'lits_loop': 59.0, 'lits_other': 101.0, 'jumps': {'jumps': 33.0, 'jumps_bounded': 4.0, 'levels': 269.0, 'levels_bounded': 232.0, 'max': 60.0, 'max_executed': 2.0, 'max_bounded': 58.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 2 ( 11.76% solved)

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2)

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.208687s.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029252s with result Satisfiable.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.23793869999997241, Incremental time limit = None
Running cumulative time = 0.7982683999999551, Cumulative time limit = 3600
Used memory = (RSS = 208.964844Mb, VMS = 203.566406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.707121s, Solving = 0.091147s, Total = 0.798268s, Memory = (RSS = 208.964844Mb, VMS = 203.566406Mb)), Calls = 3
Final Model :: Total atoms = 8716, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7071211999999889, solving_time=0.09114719999996623, total_time=0.7982683999999551, memory=Memory(rss=208.96484375, vms=203.56640625), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20868679999998108, solving_time=0.029251899999991338, total_time=0.23793869999997241, memory=Memory(rss=208.96484375, vms=203.56640625), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 29250.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 198199.0, 'bodies_tr': 198199.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 78.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1821.0, 'rules': 384744.0, 'rules_normal': 383173.0, 'rules_choice': 1514.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 54.0, 'rules_tr': 384690.0, 'rules_tr_normal': 383173.0, 'rules_tr_choice': 1514.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 49711.0, 'eqs_atom': 15133.0, 'eqs_body': 4576.0, 'eqs_other': 30002.0}, 'lpStep': {'atoms': 4875.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61284.0, 'bodies_tr': 61284.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 118529.0, 'rules_normal': 118177.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 118511.0, 'rules_tr_normal': 118177.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7446.0, 'eqs_atom': 1716.0, 'eqs_body': 843.0, 'eqs_other': 4887.0}, 'generator': {'vars': 6574.0, 'vars_eliminated': 0.0, 'vars_frozen': 3909.0, 'constraints': 194.0, 'constraints_binary': 5125.0, 'constraints_ternary': 143.0, 'acyc_edges': 0.0, 'complexity': 5526.0}}, 'solving': {'solvers': {'choices': 192.0, 'conflicts': 37.0, 'conflicts_analyzed': 37.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 101.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 43.0, 'distributed_sum_lbd': 49.0, 'integrated': 42.0, 'lemmas': 63.0, 'lits_learnt': 229.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 616.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 26.0, 'lemmas_other': 0.0, 'lits_conflict': 37.0, 'lits_loop': 192.0, 'lits_other': 0.0, 'jumps': {'jumps': 37.0, 'jumps_bounded': 0.0, 'levels': 37.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.23836326599121094, 'cpu': 0.25, 'solve': 0.012935638427734375, 'unsat': 0.0, 'sat': 0.0019664764404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8535957336425781, 'cpu': 0.84375, 'solve': 0.029895782470703125, 'unsat': 0.0029926300048828125, 'sat': 0.0059146881103515625}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 401.0, 'conflicts': 70.0, 'conflicts_analyzed': 70.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 179.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 84.0, 'distributed_sum_lbd': 98.0, 'integrated': 150.0, 'lemmas': 198.0, 'lits_learnt': 422.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 59.0, 'integrated_jumps': 50.0, 'guiding_paths_lits': 1283.0, 'guiding_paths': 29.0, 'splits': 0.0, 'lemmas_conflict': 70.0, 'lemmas_loop': 48.0, 'lemmas_other': 80.0, 'lits_conflict': 70.0, 'lits_loop': 251.0, 'lits_other': 101.0, 'jumps': {'jumps': 70.0, 'jumps_bounded': 4.0, 'levels': 306.0, 'levels_bounded': 232.0, 'max': 60.0, 'max_executed': 2.0, 'max_bounded': 58.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3}

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 3 ( 17.65% solved)

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None)

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 3]:
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.271828s.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 4: original = External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None), conversion = current_last_sgoals(3,3).

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017531s with result Unsatisfiable.

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.28935880000000225, Incremental time limit = None
Running cumulative time = 1.0876271999999574, Cumulative time limit = 3600
Used memory = (RSS = 213.679688Mb, VMS = 208.066406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9789487999999835, solving_time=0.10867839999997386, total_time=1.0876271999999574, memory=Memory(rss=213.6796875, vms=208.06640625), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2718275999999946, solving_time=0.01753120000000763, total_time=0.28935880000000225, memory=Memory(rss=213.6796875, vms=208.06640625), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 34133.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 259555.0, 'bodies_tr': 259555.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1395.0, 'count_bodies_tr': 1395.0, 'sccs': 91.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2021.0, 'rules': 503914.0, 'rules_normal': 501991.0, 'rules_choice': 1847.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 503842.0, 'rules_tr_normal': 501991.0, 'rules_tr_choice': 1847.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 58193.0, 'eqs_atom': 17283.0, 'eqs_body': 5415.0, 'eqs_other': 35495.0}, 'lpStep': {'atoms': 4883.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61356.0, 'bodies_tr': 61356.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 200.0, 'rules': 119170.0, 'rules_normal': 118818.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 119152.0, 'rules_tr_normal': 118818.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 8482.0, 'eqs_atom': 2150.0, 'eqs_body': 839.0, 'eqs_other': 5493.0}, 'generator': {'vars': 6894.0, 'vars_eliminated': 0.0, 'vars_frozen': 4210.0, 'constraints': 289.0, 'constraints_binary': 6728.0, 'constraints_ternary': 285.0, 'acyc_edges': 0.0, 'complexity': 7404.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 672.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.29022789001464844, 'cpu': 0.28125, 'solve': 0.0010013580322265625, 'unsat': 0.0010013580322265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1438236236572266, 'cpu': 1.125, 'solve': 0.030897140502929688, 'unsat': 0.003993988037109375, 'sat': 0.0059146881103515625}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 401.0, 'conflicts': 72.0, 'conflicts_analyzed': 70.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 179.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 84.0, 'distributed_sum_lbd': 98.0, 'integrated': 150.0, 'lemmas': 198.0, 'lits_learnt': 422.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 59.0, 'integrated_jumps': 50.0, 'guiding_paths_lits': 1955.0, 'guiding_paths': 36.0, 'splits': 0.0, 'lemmas_conflict': 70.0, 'lemmas_loop': 48.0, 'lemmas_other': 80.0, 'lits_conflict': 70.0, 'lits_loop': 251.0, 'lits_other': 101.0, 'jumps': {'jumps': 70.0, 'jumps_bounded': 4.0, 'levels': 306.0, 'levels_bounded': 232.0, 'max': 60.0, 'max_executed': 2.0, 'max_bounded': 58.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.203985s.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021242s with result Unsatisfiable.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2252275000000452, Incremental time limit = None
Running cumulative time = 1.3128547000000026, Cumulative time limit = 3600
Used memory = (RSS = 216.351562Mb, VMS = 210.398438Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1829341000000113, solving_time=0.12992059999999128, total_time=1.3128547000000026, memory=Memory(rss=216.3515625, vms=210.3984375), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2039853000000278, solving_time=0.02124220000001742, total_time=0.2252275000000452, memory=Memory(rss=216.3515625, vms=210.3984375), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 39038.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 321338.0, 'bodies_tr': 321338.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1725.0, 'count_bodies_tr': 1725.0, 'sccs': 104.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2255.0, 'rules': 624500.0, 'rules_normal': 622225.0, 'rules_choice': 2180.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 90.0, 'rules_tr': 624410.0, 'rules_tr_normal': 622225.0, 'rules_tr_choice': 2180.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 70234.0, 'eqs_atom': 20333.0, 'eqs_body': 6570.0, 'eqs_other': 43331.0}, 'lpStep': {'atoms': 4905.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61783.0, 'bodies_tr': 61783.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 120586.0, 'rules_normal': 120234.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 120568.0, 'rules_tr_normal': 120234.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12041.0, 'eqs_atom': 3050.0, 'eqs_body': 1155.0, 'eqs_other': 7836.0}, 'generator': {'vars': 7680.0, 'vars_eliminated': 0.0, 'vars_frozen': 4717.0, 'constraints': 463.0, 'constraints_binary': 13259.0, 'constraints_ternary': 772.0, 'acyc_edges': 0.0, 'complexity': 14646.0}}, 'solving': {'solvers': {'choices': 40.0, 'conflicts': 14.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 18.0, 'lemmas': 26.0, 'lits_learnt': 156.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 18.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 805.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 3.0, 'lemmas_other': 18.0, 'lits_conflict': 30.0, 'lits_loop': 12.0, 'lits_other': 114.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 4.0, 'levels': 39.0, 'levels_bounded': 4.0, 'max': 12.0, 'max_executed': 12.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.2263965606689453, 'cpu': 0.21875, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3702201843261719, 'cpu': 1.34375, 'solve': 0.03289222717285156, 'unsat': 0.00598907470703125, 'sat': 0.0059146881103515625}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 441.0, 'conflicts': 86.0, 'conflicts_analyzed': 77.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 179.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 89.0, 'distributed_sum_lbd': 108.0, 'integrated': 168.0, 'lemmas': 224.0, 'lits_learnt': 578.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.046875, 'integrated_imps': 77.0, 'integrated_jumps': 55.0, 'guiding_paths_lits': 2760.0, 'guiding_paths': 43.0, 'splits': 0.0, 'lemmas_conflict': 75.0, 'lemmas_loop': 51.0, 'lemmas_other': 98.0, 'lits_conflict': 100.0, 'lits_loop': 263.0, 'lits_other': 215.0, 'jumps': {'jumps': 77.0, 'jumps_bounded': 8.0, 'levels': 345.0, 'levels_bounded': 236.0, 'max': 60.0, 'max_executed': 12.0, 'max_bounded': 58.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.207441s.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053208s with result Satisfiable.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.26064890000000673, Incremental time limit = None
Running cumulative time = 1.5735036000000093, Cumulative time limit = 3600
Used memory = (RSS = 226.050781Mb, VMS = 221.292969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.390375s, Solving = 0.183129s, Total = 1.573504s, Memory = (RSS = 226.050781Mb, VMS = 221.292969Mb)), Calls = 6
Final Model :: Total atoms = 10909, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3903751, solving_time=0.18312850000000935, total_time=1.5735036000000093, memory=Memory(rss=226.05078125, vms=221.29296875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20744099999998866, solving_time=0.05320790000001807, total_time=0.26064890000000673, memory=Memory(rss=226.05078125, vms=221.29296875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 44489.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 385608.0, 'bodies_tr': 385608.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2055.0, 'count_bodies_tr': 2055.0, 'sccs': 135.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3515.0, 'rules': 748115.0, 'rules_normal': 745488.0, 'rules_choice': 2513.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 748023.0, 'rules_tr_normal': 745488.0, 'rules_tr_choice': 2513.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 83360.0, 'eqs_atom': 23300.0, 'eqs_body': 6942.0, 'eqs_other': 53118.0}, 'lpStep': {'atoms': 5451.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 64270.0, 'bodies_tr': 64270.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1260.0, 'rules': 123615.0, 'rules_normal': 123263.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 123613.0, 'rules_tr_normal': 123263.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 13126.0, 'eqs_atom': 2967.0, 'eqs_body': 372.0, 'eqs_other': 9787.0}, 'generator': {'vars': 11586.0, 'vars_eliminated': 0.0, 'vars_frozen': 7146.0, 'constraints': 1489.0, 'constraints_binary': 67366.0, 'constraints_ternary': 5124.0, 'acyc_edges': 0.0, 'complexity': 74233.0}}, 'solving': {'solvers': {'choices': 507.0, 'conflicts': 197.0, 'conflicts_analyzed': 197.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 83.0, 'models': 1.0, 'models_level': 176.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 203.0, 'distributed_sum_lbd': 247.0, 'integrated': 610.0, 'lemmas': 934.0, 'lits_learnt': 3451.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.03125, 'integrated_imps': 516.0, 'integrated_jumps': 46.0, 'guiding_paths_lits': 1072.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 194.0, 'lemmas_loop': 166.0, 'lemmas_other': 574.0, 'lits_conflict': 395.0, 'lits_loop': 1676.0, 'lits_other': 1380.0, 'jumps': {'jumps': 197.0, 'jumps_bounded': 82.0, 'levels': 10719.0, 'levels_bounded': 10456.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.26185035705566406, 'cpu': 0.265625, 'solve': 0.017953872680664062, 'unsat': 0.0, 'sat': 0.005985260009765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.632070541381836, 'cpu': 1.609375, 'solve': 0.050846099853515625, 'unsat': 0.00598907470703125, 'sat': 0.011899948120117188}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 948.0, 'conflicts': 283.0, 'conflicts_analyzed': 274.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 83.0, 'models': 4.0, 'models_level': 355.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 292.0, 'distributed_sum_lbd': 355.0, 'integrated': 778.0, 'lemmas': 1158.0, 'lits_learnt': 4029.0, 'lemmas_binary': 74.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.078125, 'integrated_imps': 593.0, 'integrated_jumps': 101.0, 'guiding_paths_lits': 3832.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 269.0, 'lemmas_loop': 217.0, 'lemmas_other': 672.0, 'lits_conflict': 495.0, 'lits_loop': 1939.0, 'lits_other': 1595.0, 'jumps': {'jumps': 274.0, 'jumps_bounded': 90.0, 'levels': 11064.0, 'levels_bounded': 10692.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6}

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 4 ( 23.53% solved)

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None)

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 6]:
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4)

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.226207s.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 7: original = External(symbol='current_last_sgoals(4, 6)', truth=True, inc_range=None), conversion = current_last_sgoals(4,6).

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065421s with result Satisfiable.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2916277000000207, Incremental time limit = None
Running cumulative time = 1.86513130000003, Cumulative time limit = 3600
Used memory = (RSS = 228.523438Mb, VMS = 223.472656Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.616582s, Solving = 0.248549s, Total = 1.865131s, Memory = (RSS = 228.523438Mb, VMS = 223.472656Mb)), Calls = 7
Final Model :: Total atoms = 11642, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.6165823000000046, solving_time=0.24854900000002544, total_time=1.86513130000003, memory=Memory(rss=228.5234375, vms=223.47265625), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2262072000000046, solving_time=0.06542050000001609, total_time=0.2916277000000207, memory=Memory(rss=228.5234375, vms=223.47265625), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 50872.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 447467.0, 'bodies_tr': 447467.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2385.0, 'count_bodies_tr': 2385.0, 'sccs': 148.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3715.0, 'rules': 868191.0, 'rules_normal': 865212.0, 'rules_choice': 2846.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 126.0, 'rules_tr': 868081.0, 'rules_tr_normal': 865212.0, 'rules_tr_choice': 2846.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 93566.0, 'eqs_atom': 25744.0, 'eqs_body': 8062.0, 'eqs_other': 59760.0}, 'lpStep': {'atoms': 6383.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61859.0, 'bodies_tr': 61859.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 200.0, 'rules': 120076.0, 'rules_normal': 119724.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 120058.0, 'rules_tr_normal': 119724.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10206.0, 'eqs_atom': 2444.0, 'eqs_body': 1120.0, 'eqs_other': 6642.0}, 'generator': {'vars': 12007.0, 'vars_eliminated': 0.0, 'vars_frozen': 7493.0, 'constraints': 629.0, 'constraints_binary': 15451.0, 'constraints_ternary': 963.0, 'acyc_edges': 0.0, 'complexity': 74233.0}}, 'solving': {'solvers': {'choices': 343.0, 'conflicts': 29.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 200.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 33.0, 'distributed_sum_lbd': 40.0, 'integrated': 46.0, 'lemmas': 86.0, 'lits_learnt': 406.0, 'lemmas_binary': 23.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 12.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 1224.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 41.0, 'lemmas_other': 16.0, 'lits_conflict': 32.0, 'lits_loop': 342.0, 'lits_other': 32.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 1.0, 'levels': 36.0, 'levels_bounded': 1.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.29879188537597656, 'cpu': 0.34375, 'solve': 0.04588127136230469, 'unsat': 0.0, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9308624267578125, 'cpu': 1.953125, 'solve': 0.09672737121582031, 'unsat': 0.00598907470703125, 'sat': 0.013896942138671875}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1291.0, 'conflicts': 312.0, 'conflicts_analyzed': 303.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 83.0, 'models': 5.0, 'models_level': 555.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 325.0, 'distributed_sum_lbd': 395.0, 'integrated': 824.0, 'lemmas': 1244.0, 'lits_learnt': 4435.0, 'lemmas_binary': 97.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.171875, 'integrated_imps': 605.0, 'integrated_jumps': 106.0, 'guiding_paths_lits': 5056.0, 'guiding_paths': 59.0, 'splits': 0.0, 'lemmas_conflict': 298.0, 'lemmas_loop': 258.0, 'lemmas_other': 688.0, 'lits_conflict': 527.0, 'lits_loop': 2281.0, 'lits_other': 1627.0, 'jumps': {'jumps': 303.0, 'jumps_bounded': 91.0, 'levels': 11100.0, 'levels_bounded': 10693.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7}

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 5 ( 29.41% solved)

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 7)', truth=True, inc_range=None)

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 7]:
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5)

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.211322s.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(5, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(5,7).

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036197s with result Satisfiable.

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24751829999999586, Incremental time limit = None
Running cumulative time = 2.112649600000026, Cumulative time limit = 3600
Used memory = (RSS = 230.832031Mb, VMS = 225.765625Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.827904s, Solving = 0.284746s, Total = 2.112650s, Memory = (RSS = 230.832031Mb, VMS = 225.765625Mb)), Calls = 8
Final Model :: Total atoms = 12376, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8279038999999955, solving_time=0.2847457000000304, total_time=2.112649600000026, memory=Memory(rss=230.83203125, vms=225.765625), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2113215999999909, solving_time=0.03619670000000497, total_time=0.24751829999999586, memory=Memory(rss=230.83203125, vms=225.765625), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 55804.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 509073.0, 'bodies_tr': 509073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2715.0, 'count_bodies_tr': 2715.0, 'sccs': 161.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3925.0, 'rules': 988363.0, 'rules_normal': 985032.0, 'rules_choice': 3179.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 988235.0, 'rules_tr_normal': 985032.0, 'rules_tr_choice': 3179.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 103147.0, 'eqs_atom': 28119.0, 'eqs_body': 8887.0, 'eqs_other': 66141.0}, 'lpStep': {'atoms': 4932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61606.0, 'bodies_tr': 61606.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 210.0, 'rules': 120172.0, 'rules_normal': 119820.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 120154.0, 'rules_tr_normal': 119820.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 9581.0, 'eqs_atom': 2375.0, 'eqs_body': 825.0, 'eqs_other': 6381.0}, 'generator': {'vars': 12453.0, 'vars_eliminated': 0.0, 'vars_frozen': 7854.0, 'constraints': 758.0, 'constraints_binary': 18692.0, 'constraints_ternary': 1212.0, 'acyc_edges': 0.0, 'complexity': 74233.0}}, 'solving': {'solvers': {'choices': 371.0, 'conflicts': 22.0, 'conflicts_analyzed': 22.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 225.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 28.0, 'integrated': 18.0, 'lemmas': 70.0, 'lits_learnt': 437.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1204.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 22.0, 'lemmas_loop': 48.0, 'lemmas_other': 0.0, 'lits_conflict': 22.0, 'lits_loop': 415.0, 'lits_other': 0.0, 'jumps': {'jumps': 22.0, 'jumps_bounded': 0.0, 'levels': 22.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2498035430908203, 'cpu': 0.359375, 'solve': 0.014987945556640625, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.180665969848633, 'cpu': 2.3125, 'solve': 0.11171531677246094, 'unsat': 0.00598907470703125, 'sat': 0.01589202880859375}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1662.0, 'conflicts': 334.0, 'conflicts_analyzed': 325.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 83.0, 'models': 6.0, 'models_level': 780.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 350.0, 'distributed_sum_lbd': 423.0, 'integrated': 842.0, 'lemmas': 1314.0, 'lits_learnt': 4872.0, 'lemmas_binary': 100.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.296875, 'integrated_imps': 605.0, 'integrated_jumps': 106.0, 'guiding_paths_lits': 6260.0, 'guiding_paths': 66.0, 'splits': 0.0, 'lemmas_conflict': 320.0, 'lemmas_loop': 306.0, 'lemmas_other': 688.0, 'lits_conflict': 549.0, 'lits_loop': 2696.0, 'lits_other': 1627.0, 'jumps': {'jumps': 325.0, 'jumps_bounded': 91.0, 'levels': 11122.0, 'levels_bounded': 10693.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8}

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 6 ( 35.29% solved)

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 8)', truth=True, inc_range=None)

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 8]:
sub_goal(2, talos, grasp(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), store_room_door_handle_outer, 6)

[12-11-2021_15-21-52] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.210057s.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 9: original = External(symbol='current_last_sgoals(6, 8)', truth=True, inc_range=None), conversion = current_last_sgoals(6,8).

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020314s with result Unsatisfiable.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.23037089999999694, Incremental time limit = None
Running cumulative time = 2.343020500000023, Cumulative time limit = 3600
Used memory = (RSS = 232.718750Mb, VMS = 227.445312Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.0379610999999898, solving_time=0.30505940000003307, total_time=2.343020500000023, memory=Memory(rss=232.71875, vms=227.4453125), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21005719999999428, solving_time=0.020313700000002655, total_time=0.23037089999999694, memory=Memory(rss=232.71875, vms=227.4453125), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 60747.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 570752.0, 'bodies_tr': 570752.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3045.0, 'count_bodies_tr': 3045.0, 'sccs': 174.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4152.0, 'rules': 1109176.0, 'rules_normal': 1105493.0, 'rules_choice': 3512.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 162.0, 'rules_tr': 1109030.0, 'rules_tr_normal': 1105493.0, 'rules_tr_choice': 3512.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 113721.0, 'eqs_atom': 30938.0, 'eqs_body': 9717.0, 'eqs_other': 73066.0}, 'lpStep': {'atoms': 4943.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61679.0, 'bodies_tr': 61679.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 227.0, 'rules': 120813.0, 'rules_normal': 120461.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 120795.0, 'rules_tr_normal': 120461.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10574.0, 'eqs_atom': 2819.0, 'eqs_body': 830.0, 'eqs_other': 6925.0}, 'generator': {'vars': 12929.0, 'vars_eliminated': 0.0, 'vars_frozen': 8240.0, 'constraints': 908.0, 'constraints_binary': 22576.0, 'constraints_ternary': 1477.0, 'acyc_edges': 0.0, 'complexity': 74233.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1337.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.23139572143554688, 'cpu': 0.21875, 'solve': 0.001983642578125, 'unsat': 0.001983642578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.4120616912841797, 'cpu': 2.53125, 'solve': 0.11369895935058594, 'unsat': 0.00797271728515625, 'sat': 0.01589202880859375}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1662.0, 'conflicts': 342.0, 'conflicts_analyzed': 325.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 83.0, 'models': 6.0, 'models_level': 780.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 350.0, 'distributed_sum_lbd': 423.0, 'integrated': 842.0, 'lemmas': 1314.0, 'lits_learnt': 4872.0, 'lemmas_binary': 100.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.296875, 'integrated_imps': 605.0, 'integrated_jumps': 106.0, 'guiding_paths_lits': 7597.0, 'guiding_paths': 73.0, 'splits': 0.0, 'lemmas_conflict': 320.0, 'lemmas_loop': 306.0, 'lemmas_other': 688.0, 'lits_conflict': 549.0, 'lits_loop': 2696.0, 'lits_other': 1627.0, 'jumps': {'jumps': 325.0, 'jumps_bounded': 91.0, 'levels': 11122.0, 'levels_bounded': 10693.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218036s.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026225s with result Unsatisfiable.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.24426139999997076, Incremental time limit = None
Running cumulative time = 2.5872818999999936, Cumulative time limit = 3600
Used memory = (RSS = 242.089844Mb, VMS = 241.910156Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.255997499999978, solving_time=0.33128440000001547, total_time=2.5872818999999936, memory=Memory(rss=242.08984375, vms=241.91015625), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21803639999998836, solving_time=0.0262249999999824, total_time=0.24426139999997076, memory=Memory(rss=242.08984375, vms=241.91015625), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 65708.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 632712.0, 'bodies_tr': 632712.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3375.0, 'count_bodies_tr': 3375.0, 'sccs': 187.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4386.0, 'rules': 1230622.0, 'rules_normal': 1226587.0, 'rules_choice': 3845.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 1230458.0, 'rules_tr_normal': 1226587.0, 'rules_tr_choice': 3845.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 126556.0, 'eqs_atom': 33997.0, 'eqs_body': 10863.0, 'eqs_other': 81696.0}, 'lpStep': {'atoms': 4961.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61960.0, 'bodies_tr': 61960.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 121446.0, 'rules_normal': 121094.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 121428.0, 'rules_tr_normal': 121094.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 12835.0, 'eqs_atom': 3059.0, 'eqs_body': 1146.0, 'eqs_other': 8630.0}, 'generator': {'vars': 13779.0, 'vars_eliminated': 0.0, 'vars_frozen': 8783.0, 'constraints': 1091.0, 'constraints_binary': 30527.0, 'constraints_ternary': 2019.0, 'acyc_edges': 0.0, 'complexity': 74233.0}}, 'solving': {'solvers': {'choices': 110.0, 'conflicts': 19.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 37.0, 'integrated': 79.0, 'lemmas': 114.0, 'lits_learnt': 1046.0, 'lemmas_binary': 21.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0, 'integrated_imps': 28.0, 'integrated_jumps': 63.0, 'guiding_paths_lits': 1470.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 33.0, 'lemmas_other': 65.0, 'lits_conflict': 163.0, 'lits_loop': 295.0, 'lits_other': 588.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 2.0, 'levels': 49.0, 'levels_bounded': 2.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2463397979736328, 'cpu': 0.25, 'solve': 0.00299072265625, 'unsat': 0.00299072265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.6584014892578125, 'cpu': 2.78125, 'solve': 0.11668968200683594, 'unsat': 0.01096343994140625, 'sat': 0.01589202880859375}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1772.0, 'conflicts': 361.0, 'conflicts_analyzed': 341.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 83.0, 'models': 6.0, 'models_level': 780.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 366.0, 'distributed_sum_lbd': 460.0, 'integrated': 921.0, 'lemmas': 1428.0, 'lits_learnt': 5918.0, 'lemmas_binary': 121.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.296875, 'integrated_imps': 633.0, 'integrated_jumps': 169.0, 'guiding_paths_lits': 9067.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 336.0, 'lemmas_loop': 339.0, 'lemmas_other': 753.0, 'lits_conflict': 712.0, 'lits_loop': 2991.0, 'lits_other': 2215.0, 'jumps': {'jumps': 341.0, 'jumps_bounded': 93.0, 'levels': 11171.0, 'levels_bounded': 10695.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.228997s.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049298s with result Unsatisfiable.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.27829570000000103, Incremental time limit = None
Running cumulative time = 2.8655775999999946, Cumulative time limit = 3600
Used memory = (RSS = 248.292969Mb, VMS = 245.941406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-53] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.4849949999999694, solving_time=0.3805826000000252, total_time=2.8655775999999946, memory=Memory(rss=248.29296875, vms=245.94140625), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2289974999999913, solving_time=0.04929820000000973, total_time=0.27829570000000103, memory=Memory(rss=248.29296875, vms=245.94140625), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 71201.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 697120.0, 'bodies_tr': 697120.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3705.0, 'count_bodies_tr': 3705.0, 'sccs': 218.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5646.0, 'rules': 1355058.0, 'rules_normal': 1350671.0, 'rules_choice': 4178.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 198.0, 'rules_tr': 1354892.0, 'rules_tr_normal': 1350671.0, 'rules_tr_choice': 4178.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 32.0, 'eqs': 140069.0, 'eqs_atom': 36994.0, 'eqs_body': 11238.0, 'eqs_other': 91837.0}, 'lpStep': {'atoms': 5493.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 64408.0, 'bodies_tr': 64408.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1260.0, 'rules': 124436.0, 'rules_normal': 124084.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 124434.0, 'rules_tr_normal': 124084.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 13513.0, 'eqs_atom': 2997.0, 'eqs_body': 375.0, 'eqs_other': 10141.0}, 'generator': {'vars': 17706.0, 'vars_eliminated': 0.0, 'vars_frozen': 11224.0, 'constraints': 2120.0, 'constraints_binary': 85455.0, 'constraints_ternary': 6389.0, 'acyc_edges': 0.0, 'complexity': 94408.0}}, 'solving': {'solvers': {'choices': 207.0, 'conflicts': 129.0, 'conflicts_analyzed': 125.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 93.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 106.0, 'distributed_sum_lbd': 167.0, 'integrated': 546.0, 'lemmas': 666.0, 'lits_learnt': 3998.0, 'lemmas_binary': 23.0, 'lemmas_ternary': 23.0, 'cpu_time': 0.0, 'integrated_imps': 440.0, 'integrated_jumps': 42.0, 'guiding_paths_lits': 1603.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 111.0, 'lemmas_loop': 56.0, 'lemmas_other': 499.0, 'lits_conflict': 851.0, 'lits_loop': 671.0, 'lits_other': 2476.0, 'jumps': {'jumps': 125.0, 'jumps_bounded': 72.0, 'levels': 13907.0, 'levels_bounded': 13752.0, 'max': 230.0, 'max_executed': 230.0, 'max_bounded': 229.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.28025054931640625, 'cpu': 0.28125, 'solve': 0.0059566497802734375, 'unsat': 0.0059566497802734375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.9386520385742188, 'cpu': 3.0625, 'solve': 0.12264633178710938, 'unsat': 0.016920089721679688, 'sat': 0.01589202880859375}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1979.0, 'conflicts': 490.0, 'conflicts_analyzed': 466.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 176.0, 'models': 6.0, 'models_level': 780.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 472.0, 'distributed_sum_lbd': 627.0, 'integrated': 1467.0, 'lemmas': 2094.0, 'lits_learnt': 9916.0, 'lemmas_binary': 144.0, 'lemmas_ternary': 34.0, 'cpu_time': 0.296875, 'integrated_imps': 1073.0, 'integrated_jumps': 211.0, 'guiding_paths_lits': 10670.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 447.0, 'lemmas_loop': 395.0, 'lemmas_other': 1252.0, 'lits_conflict': 1563.0, 'lits_loop': 3662.0, 'lits_other': 4691.0, 'jumps': {'jumps': 466.0, 'jumps_bounded': 165.0, 'levels': 25078.0, 'levels_bounded': 24447.0, 'max': 230.0, 'max_executed': 230.0, 'max_bounded': 229.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-53] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.232825s.

[12-11-2021_15-21-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065687s with result Unsatisfiable.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.29851229999999873, Incremental time limit = None
Running cumulative time = 3.1640898999999933, Cumulative time limit = 3600
Used memory = (RSS = 261.445312Mb, VMS = 262.023438Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.7178198999999665, solving_time=0.4462700000000268, total_time=3.1640898999999933, memory=Memory(rss=261.4453125, vms=262.0234375), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23282489999999711, solving_time=0.06568740000000162, total_time=0.29851229999999873, memory=Memory(rss=261.4453125, vms=262.0234375), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 77629.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 762835.0, 'bodies_tr': 762835.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4035.0, 'count_bodies_tr': 4035.0, 'sccs': 249.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6906.0, 'rules': 1480938.0, 'rules_normal': 1476199.0, 'rules_choice': 4511.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 1480770.0, 'rules_tr_normal': 1476199.0, 'rules_tr_choice': 4511.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 48.0, 'eqs': 154608.0, 'eqs_atom': 40028.0, 'eqs_body': 11543.0, 'eqs_other': 103037.0}, 'lpStep': {'atoms': 6428.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 65715.0, 'bodies_tr': 65715.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1260.0, 'rules': 125880.0, 'rules_normal': 125528.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 125878.0, 'rules_tr_normal': 125528.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 14539.0, 'eqs_atom': 3034.0, 'eqs_body': 305.0, 'eqs_other': 11200.0}, 'generator': {'vars': 21717.0, 'vars_eliminated': 0.0, 'vars_frozen': 13686.0, 'constraints': 2500.0, 'constraints_binary': 105873.0, 'constraints_ternary': 8249.0, 'acyc_edges': 0.0, 'complexity': 117128.0}}, 'solving': {'solvers': {'choices': 283.0, 'conflicts': 153.0, 'conflicts_analyzed': 150.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 108.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 146.0, 'distributed_sum_lbd': 320.0, 'integrated': 798.0, 'lemmas': 1159.0, 'lits_learnt': 23481.0, 'lemmas_binary': 50.0, 'lemmas_ternary': 42.0, 'cpu_time': 0.0, 'integrated_imps': 619.0, 'integrated_jumps': 89.0, 'guiding_paths_lits': 1736.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 149.0, 'lemmas_loop': 231.0, 'lemmas_other': 779.0, 'lits_conflict': 3261.0, 'lits_loop': 2368.0, 'lits_other': 17852.0, 'jumps': {'jumps': 150.0, 'jumps_bounded': 97.0, 'levels': 1525.0, 'levels_bounded': 1332.0, 'max': 249.0, 'max_executed': 249.0, 'max_bounded': 248.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3061847686767578, 'cpu': 0.296875, 'solve': 0.014959335327148438, 'unsat': 0.014959335327148438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.2448368072509766, 'cpu': 3.359375, 'solve': 0.1376056671142578, 'unsat': 0.031879425048828125, 'sat': 0.01589202880859375}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2262.0, 'conflicts': 643.0, 'conflicts_analyzed': 616.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 284.0, 'models': 6.0, 'models_level': 780.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 618.0, 'distributed_sum_lbd': 947.0, 'integrated': 2265.0, 'lemmas': 3253.0, 'lits_learnt': 33397.0, 'lemmas_binary': 194.0, 'lemmas_ternary': 76.0, 'cpu_time': 0.296875, 'integrated_imps': 1692.0, 'integrated_jumps': 300.0, 'guiding_paths_lits': 12406.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 596.0, 'lemmas_loop': 626.0, 'lemmas_other': 2031.0, 'lits_conflict': 4824.0, 'lits_loop': 6030.0, 'lits_other': 22543.0, 'jumps': {'jumps': 616.0, 'jumps_bounded': 262.0, 'levels': 26603.0, 'levels_bounded': 25779.0, 'max': 249.0, 'max_executed': 249.0, 'max_bounded': 248.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242803s.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075915s with result Unsatisfiable.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3187178999999958, Incremental time limit = None
Running cumulative time = 3.482807799999989, Cumulative time limit = 3600
Used memory = (RSS = 267.031250Mb, VMS = 265.003906Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.960623299999952, solving_time=0.5221845000000371, total_time=3.482807799999989, memory=Memory(rss=267.03125, vms=265.00390625), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24280339999998546, solving_time=0.07591450000001032, total_time=0.3187178999999958, memory=Memory(rss=267.03125, vms=265.00390625), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 84072.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 829683.0, 'bodies_tr': 829683.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4365.0, 'count_bodies_tr': 4365.0, 'sccs': 280.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8173.0, 'rules': 1608763.0, 'rules_normal': 1603672.0, 'rules_choice': 4844.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 234.0, 'rules_tr': 1608593.0, 'rules_tr_normal': 1603672.0, 'rules_tr_choice': 4844.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 64.0, 'eqs': 176525.0, 'eqs_atom': 43809.0, 'eqs_body': 11806.0, 'eqs_other': 120910.0}, 'lpStep': {'atoms': 6443.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 66848.0, 'bodies_tr': 66848.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1267.0, 'rules': 127825.0, 'rules_normal': 127473.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 127823.0, 'rules_tr_normal': 127473.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 21917.0, 'eqs_atom': 3781.0, 'eqs_body': 263.0, 'eqs_other': 17873.0}, 'generator': {'vars': 26026.0, 'vars_eliminated': 0.0, 'vars_frozen': 16233.0, 'constraints': 3612.0, 'constraints_binary': 166796.0, 'constraints_ternary': 14322.0, 'acyc_edges': 0.0, 'complexity': 185338.0}}, 'solving': {'solvers': {'choices': 298.0, 'conflicts': 165.0, 'conflicts_analyzed': 159.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 133.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 141.0, 'distributed_sum_lbd': 304.0, 'integrated': 819.0, 'lemmas': 1252.0, 'lits_learnt': 27244.0, 'lemmas_binary': 34.0, 'lemmas_ternary': 58.0, 'cpu_time': 0.140625, 'integrated_imps': 503.0, 'integrated_jumps': 79.0, 'guiding_paths_lits': 1869.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 157.0, 'lemmas_loop': 408.0, 'lemmas_other': 687.0, 'lits_conflict': 4070.0, 'lits_loop': 5195.0, 'lits_other': 17979.0, 'jumps': {'jumps': 159.0, 'jumps_bounded': 73.0, 'levels': 819.0, 'levels_bounded': 605.0, 'max': 268.0, 'max_executed': 268.0, 'max_bounded': 267.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3218269348144531, 'cpu': 0.4375, 'solve': 0.020944595336914062, 'unsat': 0.020944595336914062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.5666637420654297, 'cpu': 3.796875, 'solve': 0.15855026245117188, 'unsat': 0.05282402038574219, 'sat': 0.01589202880859375}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2560.0, 'conflicts': 808.0, 'conflicts_analyzed': 775.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 417.0, 'models': 6.0, 'models_level': 780.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 759.0, 'distributed_sum_lbd': 1251.0, 'integrated': 3084.0, 'lemmas': 4505.0, 'lits_learnt': 60641.0, 'lemmas_binary': 228.0, 'lemmas_ternary': 134.0, 'cpu_time': 0.4375, 'integrated_imps': 2195.0, 'integrated_jumps': 379.0, 'guiding_paths_lits': 14275.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 753.0, 'lemmas_loop': 1034.0, 'lemmas_other': 2718.0, 'lits_conflict': 8894.0, 'lits_loop': 11225.0, 'lits_other': 40522.0, 'jumps': {'jumps': 775.0, 'jumps_bounded': 335.0, 'levels': 27422.0, 'levels_bounded': 26384.0, 'max': 268.0, 'max_executed': 268.0, 'max_bounded': 267.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.252319s.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.111521s with result Satisfiable.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3638393000000235, Incremental time limit = None
Running cumulative time = 3.8466471000000126, Cumulative time limit = 3600
Used memory = (RSS = 280.828125Mb, VMS = 285.871094Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.212942s, Solving = 0.633705s, Total = 3.846647s, Memory = (RSS = 280.828125Mb, VMS = 285.871094Mb)), Calls = 14
Final Model :: Total atoms = 16776, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.212942099999964, solving_time=0.6337050000000488, total_time=3.8466471000000126, memory=Memory(rss=280.828125, vms=285.87109375), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25231880000001183, solving_time=0.11152050000001168, total_time=0.3638393000000235, memory=Memory(rss=280.828125, vms=285.87109375), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 90551.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 897117.0, 'bodies_tr': 897117.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4695.0, 'count_bodies_tr': 4695.0, 'sccs': 311.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9703.0, 'rules': 1737311.0, 'rules_normal': 1731868.0, 'rules_choice': 5177.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 1737141.0, 'rules_tr_normal': 1731868.0, 'rules_tr_choice': 5177.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 82.0, 'eqs': 190390.0, 'eqs_atom': 47538.0, 'eqs_body': 11913.0, 'eqs_other': 130939.0}, 'lpStep': {'atoms': 6479.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67434.0, 'bodies_tr': 67434.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 128548.0, 'rules_normal': 128196.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 128548.0, 'rules_tr_normal': 128196.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13865.0, 'eqs_atom': 3729.0, 'eqs_body': 107.0, 'eqs_other': 10029.0}, 'generator': {'vars': 30950.0, 'vars_eliminated': 0.0, 'vars_frozen': 19168.0, 'constraints': 4950.0, 'constraints_binary': 238923.0, 'constraints_ternary': 21350.0, 'acyc_edges': 0.0, 'complexity': 265941.0}}, 'solving': {'solvers': {'choices': 1305.0, 'conflicts': 278.0, 'conflicts_analyzed': 278.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 296.0, 'models': 1.0, 'models_level': 375.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 261.0, 'distributed_sum_lbd': 608.0, 'integrated': 1482.0, 'lemmas': 2912.0, 'lits_learnt': 60608.0, 'lemmas_binary': 272.0, 'lemmas_ternary': 118.0, 'cpu_time': 0.296875, 'integrated_imps': 645.0, 'integrated_jumps': 332.0, 'guiding_paths_lits': 2002.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 267.0, 'lemmas_loop': 1261.0, 'lemmas_other': 1384.0, 'lits_conflict': 6836.0, 'lits_loop': 18278.0, 'lits_other': 35494.0, 'jumps': {'jumps': 278.0, 'jumps_bounded': 76.0, 'levels': 1277.0, 'levels_bounded': 931.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3670177459716797, 'cpu': 0.59375, 'solve': 0.06978416442871094, 'unsat': 0.0, 'sat': 0.04684638977050781}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.9336814880371094, 'cpu': 4.390625, 'solve': 0.2283344268798828, 'unsat': 0.05282402038574219, 'sat': 0.06273841857910156}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3865.0, 'conflicts': 1086.0, 'conflicts_analyzed': 1053.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 713.0, 'models': 7.0, 'models_level': 1155.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1020.0, 'distributed_sum_lbd': 1859.0, 'integrated': 4566.0, 'lemmas': 7417.0, 'lits_learnt': 121249.0, 'lemmas_binary': 500.0, 'lemmas_ternary': 252.0, 'cpu_time': 0.734375, 'integrated_imps': 2840.0, 'integrated_jumps': 711.0, 'guiding_paths_lits': 16277.0, 'guiding_paths': 108.0, 'splits': 0.0, 'lemmas_conflict': 1020.0, 'lemmas_loop': 2295.0, 'lemmas_other': 4102.0, 'lits_conflict': 15730.0, 'lits_loop': 29503.0, 'lits_other': 76016.0, 'jumps': {'jumps': 1053.0, 'jumps_bounded': 411.0, 'levels': 28699.0, 'levels_bounded': 27315.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14}

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 7 ( 41.18% solved)

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 14)', truth=True, inc_range=None)

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 14]:
sub_goal(2, talos, actuate(manipulator_arm_1,store_room_door), configuration(store_room_door), open, 7)

[12-11-2021_15-21-54] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.259027s.

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(7, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(7,14).

[12-11-2021_15-21-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073011s with result Satisfiable.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3320370000000139, Incremental time limit = None
Running cumulative time = 4.1786841000000265, Cumulative time limit = 3600
Used memory = (RSS = 291.273438Mb, VMS = 293.878906Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.471969s, Solving = 0.706716s, Total = 4.178684s, Memory = (RSS = 291.273438Mb, VMS = 293.878906Mb)), Calls = 15
Final Model :: Total atoms = 17512, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.4719685999999683, solving_time=0.7067155000000582, total_time=4.1786841000000265, memory=Memory(rss=291.2734375, vms=293.87890625), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2590265000000045, solving_time=0.07301050000000942, total_time=0.3320370000000139, memory=Memory(rss=291.2734375, vms=293.87890625), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 97222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 964965.0, 'bodies_tr': 964965.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5025.0, 'count_bodies_tr': 5025.0, 'sccs': 342.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11233.0, 'rules': 1866545.0, 'rules_normal': 1860750.0, 'rules_choice': 5510.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 270.0, 'rules_tr': 1866375.0, 'rules_tr_normal': 1860750.0, 'rules_tr_choice': 5510.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 100.0, 'eqs': 204776.0, 'eqs_atom': 51433.0, 'eqs_body': 12021.0, 'eqs_other': 141322.0}, 'lpStep': {'atoms': 6671.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67848.0, 'bodies_tr': 67848.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129234.0, 'rules_normal': 128882.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129234.0, 'rules_tr_normal': 128882.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14386.0, 'eqs_atom': 3895.0, 'eqs_body': 108.0, 'eqs_other': 10383.0}, 'generator': {'vars': 35925.0, 'vars_eliminated': 0.0, 'vars_frozen': 22116.0, 'constraints': 6206.0, 'constraints_binary': 306328.0, 'constraints_ternary': 28168.0, 'acyc_edges': 0.0, 'complexity': 341522.0}}, 'solving': {'solvers': {'choices': 728.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 4.0, 'models': 1.0, 'models_level': 404.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 8.0, 'integrated': 18.0, 'lemmas': 69.0, 'lits_learnt': 528.0, 'lemmas_binary': 11.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 8.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 2135.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 56.0, 'lemmas_other': 8.0, 'lits_conflict': 8.0, 'lits_loop': 504.0, 'lits_other': 16.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 4.0, 'levels': 28.0, 'levels_bounded': 4.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3370990753173828, 'cpu': 0.375, 'solve': 0.030918121337890625, 'unsat': 0.0, 'sat': 0.0109710693359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.270780563354492, 'cpu': 4.765625, 'solve': 0.25925254821777344, 'unsat': 0.05282402038574219, 'sat': 0.07370948791503906}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4593.0, 'conflicts': 1094.0, 'conflicts_analyzed': 1061.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 717.0, 'models': 8.0, 'models_level': 1559.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1025.0, 'distributed_sum_lbd': 1867.0, 'integrated': 4584.0, 'lemmas': 7486.0, 'lits_learnt': 121777.0, 'lemmas_binary': 511.0, 'lemmas_ternary': 252.0, 'cpu_time': 0.796875, 'integrated_imps': 2848.0, 'integrated_jumps': 714.0, 'guiding_paths_lits': 18412.0, 'guiding_paths': 115.0, 'splits': 0.0, 'lemmas_conflict': 1025.0, 'lemmas_loop': 2351.0, 'lemmas_other': 4110.0, 'lits_conflict': 15738.0, 'lits_loop': 30007.0, 'lits_other': 76032.0, 'jumps': {'jumps': 1061.0, 'jumps_bounded': 415.0, 'levels': 28727.0, 'levels_bounded': 27319.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15}

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 8 ( 47.06% solved)

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 15)', truth=True, inc_range=None)

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 15]:
sub_goal(2, talos, release(manipulator_arm_1,store_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 8)

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257438s.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(8, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(8,15).

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079005s with result Satisfiable.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3364426999999921, Incremental time limit = None
Running cumulative time = 4.515126800000019, Cumulative time limit = 3600
Used memory = (RSS = 299.531250Mb, VMS = 298.500000Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.729406s, Solving = 0.785720s, Total = 4.515127s, Memory = (RSS = 299.531250Mb, VMS = 298.500000Mb)), Calls = 16
Final Model :: Total atoms = 18249, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.7294064999999534, solving_time=0.7857203000000652, total_time=4.515126800000019, memory=Memory(rss=299.53125, vms=298.5), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2574378999999851, solving_time=0.07900480000000698, total_time=0.3364426999999921, memory=Memory(rss=299.53125, vms=298.5), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 103910.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1032851.0, 'bodies_tr': 1032851.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5355.0, 'count_bodies_tr': 5355.0, 'sccs': 373.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12763.0, 'rules': 1995954.0, 'rules_normal': 1989807.0, 'rules_choice': 5843.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 1995784.0, 'rules_tr_normal': 1989807.0, 'rules_tr_choice': 5843.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 118.0, 'eqs': 219244.0, 'eqs_atom': 55340.0, 'eqs_body': 12130.0, 'eqs_other': 151774.0}, 'lpStep': {'atoms': 6688.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67886.0, 'bodies_tr': 67886.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129409.0, 'rules_normal': 129057.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129409.0, 'rules_tr_normal': 129057.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14468.0, 'eqs_atom': 3907.0, 'eqs_body': 109.0, 'eqs_other': 10452.0}, 'generator': {'vars': 40908.0, 'vars_eliminated': 0.0, 'vars_frozen': 25069.0, 'constraints': 7561.0, 'constraints_binary': 379002.0, 'constraints_ternary': 35613.0, 'acyc_edges': 0.0, 'complexity': 423106.0}}, 'solving': {'solvers': {'choices': 780.0, 'conflicts': 6.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 424.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 14.0, 'integrated': 36.0, 'lemmas': 101.0, 'lits_learnt': 1305.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.125, 'integrated_imps': 21.0, 'integrated_jumps': 40.0, 'guiding_paths_lits': 2268.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 68.0, 'lemmas_other': 27.0, 'lits_conflict': 117.0, 'lits_loop': 630.0, 'lits_other': 558.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 4.0, 'levels': 32.0, 'levels_bounded': 4.0, 'max': 8.0, 'max_executed': 7.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.34027862548828125, 'cpu': 0.4375, 'solve': 0.03188514709472656, 'unsat': 0.0, 'sat': 0.010942459106445312}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.611059188842773, 'cpu': 5.203125, 'solve': 0.2911376953125, 'unsat': 0.05282402038574219, 'sat': 0.08465194702148438}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5373.0, 'conflicts': 1100.0, 'conflicts_analyzed': 1067.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 717.0, 'models': 9.0, 'models_level': 1983.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1031.0, 'distributed_sum_lbd': 1881.0, 'integrated': 4620.0, 'lemmas': 7587.0, 'lits_learnt': 123082.0, 'lemmas_binary': 511.0, 'lemmas_ternary': 258.0, 'cpu_time': 0.921875, 'integrated_imps': 2869.0, 'integrated_jumps': 754.0, 'guiding_paths_lits': 20680.0, 'guiding_paths': 122.0, 'splits': 0.0, 'lemmas_conflict': 1031.0, 'lemmas_loop': 2419.0, 'lemmas_other': 4137.0, 'lits_conflict': 15855.0, 'lits_loop': 30637.0, 'lits_other': 76590.0, 'jumps': {'jumps': 1067.0, 'jumps_bounded': 419.0, 'levels': 28759.0, 'levels_bounded': 27323.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16}

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 9 ( 52.94% solved)

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None)

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 16]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 9)

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.275174s.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(9, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(9,16).

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.091487s with result Satisfiable.

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3666614999999922, Incremental time limit = None
Running cumulative time = 4.881788300000011, Cumulative time limit = 3600
Used memory = (RSS = 318.789062Mb, VMS = 329.042969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.004581s, Solving = 0.877207s, Total = 4.881788s, Memory = (RSS = 318.789062Mb, VMS = 329.042969Mb)), Calls = 17
Final Model :: Total atoms = 18988, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.004580999999945, solving_time=0.877207300000066, total_time=4.881788300000011, memory=Memory(rss=318.7890625, vms=329.04296875), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27517449999999144, solving_time=0.09148700000000076, total_time=0.3666614999999922, memory=Memory(rss=318.7890625, vms=329.04296875), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 110616.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1100775.0, 'bodies_tr': 1100775.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5685.0, 'count_bodies_tr': 5685.0, 'sccs': 404.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14293.0, 'rules': 2125538.0, 'rules_normal': 2119039.0, 'rules_choice': 6176.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 306.0, 'rules_tr': 2125368.0, 'rules_tr_normal': 2119039.0, 'rules_tr_choice': 6176.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 136.0, 'eqs': 233796.0, 'eqs_atom': 59261.0, 'eqs_body': 12240.0, 'eqs_other': 162295.0}, 'lpStep': {'atoms': 6706.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67924.0, 'bodies_tr': 67924.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129584.0, 'rules_normal': 129232.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129584.0, 'rules_tr_normal': 129232.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14552.0, 'eqs_atom': 3921.0, 'eqs_body': 110.0, 'eqs_other': 10521.0}, 'generator': {'vars': 45898.0, 'vars_eliminated': 0.0, 'vars_frozen': 28026.0, 'constraints': 8917.0, 'constraints_binary': 451910.0, 'constraints_ternary': 42996.0, 'acyc_edges': 0.0, 'complexity': 504863.0}}, 'solving': {'solvers': {'choices': 754.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 453.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 56.0, 'lits_learnt': 504.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2401.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 56.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 504.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3714275360107422, 'cpu': 0.40625, 'solve': 0.04089164733886719, 'unsat': 0.0, 'sat': 0.015958786010742188}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.982486724853516, 'cpu': 5.609375, 'solve': 0.3320293426513672, 'unsat': 0.05282402038574219, 'sat': 0.10061073303222656}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6127.0, 'conflicts': 1100.0, 'conflicts_analyzed': 1067.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 717.0, 'models': 10.0, 'models_level': 2436.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1031.0, 'distributed_sum_lbd': 1881.0, 'integrated': 4620.0, 'lemmas': 7643.0, 'lits_learnt': 123586.0, 'lemmas_binary': 511.0, 'lemmas_ternary': 258.0, 'cpu_time': 1.015625, 'integrated_imps': 2869.0, 'integrated_jumps': 754.0, 'guiding_paths_lits': 23081.0, 'guiding_paths': 129.0, 'splits': 0.0, 'lemmas_conflict': 1031.0, 'lemmas_loop': 2475.0, 'lemmas_other': 4137.0, 'lits_conflict': 15855.0, 'lits_loop': 31141.0, 'lits_other': 76590.0, 'jumps': {'jumps': 1067.0, 'jumps_bounded': 419.0, 'levels': 28759.0, 'levels_bounded': 27323.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17}

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 10 ( 58.82% solved)

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 17)', truth=True, inc_range=None)

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 17]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 10)

[12-11-2021_15-21-55] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270878s.

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(10, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(10,17).

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.151971s with result Satisfiable.

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4228485999999805, Incremental time limit = None
Running cumulative time = 5.304636899999991, Cumulative time limit = 3600
Used memory = (RSS = 333.160156Mb, VMS = 341.253906Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.275459s, Solving = 1.029178s, Total = 5.304637s, Memory = (RSS = 333.160156Mb, VMS = 341.253906Mb)), Calls = 18
Final Model :: Total atoms = 19728, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.275458699999945, solving_time=1.0291782000000467, total_time=5.304636899999991, memory=Memory(rss=333.16015625, vms=341.25390625), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2708776999999998, solving_time=0.1519708999999807, total_time=0.4228485999999805, memory=Memory(rss=333.16015625, vms=341.25390625), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 117341.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1168738.0, 'bodies_tr': 1168738.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6015.0, 'count_bodies_tr': 6015.0, 'sccs': 435.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15823.0, 'rules': 2255298.0, 'rules_normal': 2248447.0, 'rules_choice': 6509.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 2255128.0, 'rules_tr_normal': 2248447.0, 'rules_tr_choice': 6509.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 154.0, 'eqs': 248435.0, 'eqs_atom': 63197.0, 'eqs_body': 12351.0, 'eqs_other': 172887.0}, 'lpStep': {'atoms': 6725.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67963.0, 'bodies_tr': 67963.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129760.0, 'rules_normal': 129408.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129760.0, 'rules_tr_normal': 129408.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14639.0, 'eqs_atom': 3936.0, 'eqs_body': 111.0, 'eqs_other': 10592.0}, 'generator': {'vars': 50895.0, 'vars_eliminated': 0.0, 'vars_frozen': 30987.0, 'constraints': 10274.0, 'constraints_binary': 524989.0, 'constraints_ternary': 50385.0, 'acyc_edges': 0.0, 'complexity': 586798.0}}, 'solving': {'solvers': {'choices': 866.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 488.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 1.0, 'integrated': 0.0, 'lemmas': 114.0, 'lits_learnt': 1851.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.265625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2534.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 113.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 1850.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.4278564453125, 'cpu': 0.59375, 'solve': 0.10372161865234375, 'unsat': 0.0, 'sat': 0.014959335327148438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.410343170166016, 'cpu': 6.203125, 'solve': 0.43575096130371094, 'unsat': 0.05282402038574219, 'sat': 0.115570068359375}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 6993.0, 'conflicts': 1101.0, 'conflicts_analyzed': 1068.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 717.0, 'models': 11.0, 'models_level': 2924.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1032.0, 'distributed_sum_lbd': 1882.0, 'integrated': 4620.0, 'lemmas': 7757.0, 'lits_learnt': 125437.0, 'lemmas_binary': 511.0, 'lemmas_ternary': 258.0, 'cpu_time': 1.28125, 'integrated_imps': 2869.0, 'integrated_jumps': 754.0, 'guiding_paths_lits': 25615.0, 'guiding_paths': 136.0, 'splits': 0.0, 'lemmas_conflict': 1032.0, 'lemmas_loop': 2588.0, 'lemmas_other': 4137.0, 'lits_conflict': 15856.0, 'lits_loop': 32991.0, 'lits_other': 76590.0, 'jumps': {'jumps': 1068.0, 'jumps_bounded': 419.0, 'levels': 28760.0, 'levels_bounded': 27323.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18}

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 11 ( 64.71% solved)

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None)

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 11)

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.276742s.

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(11, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(11,18).

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.095318s with result Satisfiable.

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3720605999999975, Incremental time limit = None
Running cumulative time = 5.676697499999989, Cumulative time limit = 3600
Used memory = (RSS = 345.250000Mb, VMS = 349.746094Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.552201s, Solving = 1.124497s, Total = 5.676697s, Memory = (RSS = 345.250000Mb, VMS = 349.746094Mb)), Calls = 19
Final Model :: Total atoms = 20469, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.552200899999946, solving_time=1.1244966000000431, total_time=5.676697499999989, memory=Memory(rss=345.25, vms=349.74609375), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27674220000000105, solving_time=0.09531839999999647, total_time=0.3720605999999975, memory=Memory(rss=345.25, vms=349.74609375), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 124085.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1236731.0, 'bodies_tr': 1236731.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6345.0, 'count_bodies_tr': 6345.0, 'sccs': 466.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17353.0, 'rules': 2385225.0, 'rules_normal': 2378022.0, 'rules_choice': 6842.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 342.0, 'rules_tr': 2385055.0, 'rules_tr_normal': 2378022.0, 'rules_tr_choice': 6842.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 172.0, 'eqs': 263129.0, 'eqs_atom': 67139.0, 'eqs_body': 12462.0, 'eqs_other': 183528.0}, 'lpStep': {'atoms': 6744.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67993.0, 'bodies_tr': 67993.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129927.0, 'rules_normal': 129575.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129927.0, 'rules_tr_normal': 129575.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14694.0, 'eqs_atom': 3942.0, 'eqs_body': 111.0, 'eqs_other': 10641.0}, 'generator': {'vars': 55892.0, 'vars_eliminated': 0.0, 'vars_frozen': 33948.0, 'constraints': 11622.0, 'constraints_binary': 598032.0, 'constraints_ternary': 57719.0, 'acyc_edges': 0.0, 'complexity': 668633.0}}, 'solving': {'solvers': {'choices': 1360.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 499.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 13.0, 'integrated': 30.0, 'lemmas': 94.0, 'lits_learnt': 839.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.1875, 'integrated_imps': 18.0, 'integrated_jumps': 318.0, 'guiding_paths_lits': 2667.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 70.0, 'lemmas_other': 19.0, 'lits_conflict': 38.0, 'lits_loop': 672.0, 'lits_other': 129.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 5.0, 'levels': 209.0, 'levels_bounded': 5.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.37799072265625, 'cpu': 0.515625, 'solve': 0.044879913330078125, 'unsat': 0.0, 'sat': 0.014963150024414062}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.788333892822266, 'cpu': 6.71875, 'solve': 0.48063087463378906, 'unsat': 0.05282402038574219, 'sat': 0.13053321838378906}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8353.0, 'conflicts': 1109.0, 'conflicts_analyzed': 1076.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 717.0, 'models': 12.0, 'models_level': 3423.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1037.0, 'distributed_sum_lbd': 1895.0, 'integrated': 4650.0, 'lemmas': 7851.0, 'lits_learnt': 126276.0, 'lemmas_binary': 518.0, 'lemmas_ternary': 258.0, 'cpu_time': 1.46875, 'integrated_imps': 2887.0, 'integrated_jumps': 1072.0, 'guiding_paths_lits': 28282.0, 'guiding_paths': 143.0, 'splits': 0.0, 'lemmas_conflict': 1037.0, 'lemmas_loop': 2658.0, 'lemmas_other': 4156.0, 'lits_conflict': 15894.0, 'lits_loop': 33663.0, 'lits_other': 76719.0, 'jumps': {'jumps': 1076.0, 'jumps_bounded': 424.0, 'levels': 28969.0, 'levels_bounded': 27328.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19}

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 12 ( 70.59% solved)

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None)

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 19]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12)

[12-11-2021_15-21-56] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.299533s.

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(12, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(12,19).

[12-11-2021_15-21-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075887s with result Unsatisfiable.

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.37542019999997933, Incremental time limit = None
Running cumulative time = 6.052117699999968, Cumulative time limit = 3600
Used memory = (RSS = 349.871094Mb, VMS = 350.281250Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.851733599999932, solving_time=1.2003841000000364, total_time=6.052117699999968, memory=Memory(rss=349.87109375, vms=350.28125), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2995326999999861, solving_time=0.07588749999999322, total_time=0.37542019999997933, memory=Memory(rss=349.87109375, vms=350.28125), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 130835.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1304758.0, 'bodies_tr': 1304758.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6675.0, 'count_bodies_tr': 6675.0, 'sccs': 497.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18883.0, 'rules': 2515322.0, 'rules_normal': 2507767.0, 'rules_choice': 7175.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 2515152.0, 'rules_tr_normal': 2507767.0, 'rules_tr_choice': 7175.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 190.0, 'eqs': 277910.0, 'eqs_atom': 71095.0, 'eqs_body': 12574.0, 'eqs_other': 194241.0}, 'lpStep': {'atoms': 6750.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68027.0, 'bodies_tr': 68027.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130097.0, 'rules_normal': 129745.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130097.0, 'rules_tr_normal': 129745.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14781.0, 'eqs_atom': 3956.0, 'eqs_body': 112.0, 'eqs_other': 10713.0}, 'generator': {'vars': 60897.0, 'vars_eliminated': 0.0, 'vars_frozen': 36914.0, 'constraints': 12980.0, 'constraints_binary': 671438.0, 'constraints_ternary': 65121.0, 'acyc_edges': 0.0, 'complexity': 750909.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2800.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3806896209716797, 'cpu': 0.421875, 'solve': 0.022937774658203125, 'unsat': 0.022937774658203125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.169023513793945, 'cpu': 7.140625, 'solve': 0.5035686492919922, 'unsat': 0.07576179504394531, 'sat': 0.13053321838378906}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 8353.0, 'conflicts': 1117.0, 'conflicts_analyzed': 1076.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 717.0, 'models': 12.0, 'models_level': 3423.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1037.0, 'distributed_sum_lbd': 1895.0, 'integrated': 4650.0, 'lemmas': 7851.0, 'lits_learnt': 126276.0, 'lemmas_binary': 518.0, 'lemmas_ternary': 258.0, 'cpu_time': 1.5625, 'integrated_imps': 2887.0, 'integrated_jumps': 1072.0, 'guiding_paths_lits': 31082.0, 'guiding_paths': 150.0, 'splits': 0.0, 'lemmas_conflict': 1037.0, 'lemmas_loop': 2658.0, 'lemmas_other': 4156.0, 'lits_conflict': 15894.0, 'lits_loop': 33663.0, 'lits_other': 76719.0, 'jumps': {'jumps': 1076.0, 'jumps_bounded': 424.0, 'levels': 28969.0, 'levels_bounded': 27328.0, 'max': 287.0, 'max_executed': 287.0, 'max_bounded': 286.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.283429s.

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.404481s with result Unsatisfiable.

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.6879093000000012, Incremental time limit = None
Running cumulative time = 6.740026999999969, Cumulative time limit = 3600
Used memory = (RSS = 354.511719Mb, VMS = 351.722656Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-57] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.135162399999928, solving_time=1.6048646000000417, total_time=6.740026999999969, memory=Memory(rss=354.51171875, vms=351.72265625), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2834287999999958, solving_time=0.40448050000000535, total_time=0.6879093000000012, memory=Memory(rss=354.51171875, vms=351.72265625), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 137604.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1372824.0, 'bodies_tr': 1372824.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7005.0, 'count_bodies_tr': 7005.0, 'sccs': 528.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 20413.0, 'rules': 2645595.0, 'rules_normal': 2637688.0, 'rules_choice': 7508.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 378.0, 'rules_tr': 2645425.0, 'rules_tr_normal': 2637688.0, 'rules_tr_choice': 7508.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 208.0, 'eqs': 292778.0, 'eqs_atom': 75065.0, 'eqs_body': 12687.0, 'eqs_other': 205026.0}, 'lpStep': {'atoms': 6769.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68066.0, 'bodies_tr': 68066.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130273.0, 'rules_normal': 129921.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130273.0, 'rules_tr_normal': 129921.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14868.0, 'eqs_atom': 3970.0, 'eqs_body': 113.0, 'eqs_other': 10785.0}, 'generator': {'vars': 65909.0, 'vars_eliminated': 0.0, 'vars_frozen': 39885.0, 'constraints': 14339.0, 'constraints_binary': 745014.0, 'constraints_ternary': 72523.0, 'acyc_edges': 0.0, 'complexity': 833356.0}}, 'solving': {'solvers': {'choices': 2017.0, 'conflicts': 812.0, 'conflicts_analyzed': 807.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 1333.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 764.0, 'distributed_sum_lbd': 1940.0, 'integrated': 4495.0, 'lemmas': 11314.0, 'lits_learnt': 360135.0, 'lemmas_binary': 863.0, 'lemmas_ternary': 118.0, 'cpu_time': 2.40625, 'integrated_imps': 1645.0, 'integrated_jumps': 849.0, 'guiding_paths_lits': 2933.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 795.0, 'lemmas_loop': 6355.0, 'lemmas_other': 4164.0, 'lits_conflict': 47075.0, 'lits_loop': 90941.0, 'lits_other': 222119.0, 'jumps': {'jumps': 807.0, 'jumps_bounded': 159.0, 'levels': 2996.0, 'levels_bounded': 1831.0, 'max': 425.0, 'max_executed': 425.0, 'max_bounded': 419.0}}}}, 'summary': {'call': 21.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.6945819854736328, 'cpu': 2.734375, 'solve': 0.3550987243652344, 'unsat': 0.3550987243652344, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.863605499267578, 'cpu': 9.875, 'solve': 0.8586673736572266, 'unsat': 0.4308605194091797, 'sat': 0.13053321838378906}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 10370.0, 'conflicts': 1929.0, 'conflicts_analyzed': 1883.0, 'restarts': 4.0, 'restarts_last': 113.0, 'extra': {'domain_choices': 2050.0, 'models': 12.0, 'models_level': 3423.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1801.0, 'distributed_sum_lbd': 3835.0, 'integrated': 9145.0, 'lemmas': 19165.0, 'lits_learnt': 486411.0, 'lemmas_binary': 1381.0, 'lemmas_ternary': 376.0, 'cpu_time': 3.96875, 'integrated_imps': 4532.0, 'integrated_jumps': 1921.0, 'guiding_paths_lits': 34015.0, 'guiding_paths': 157.0, 'splits': 0.0, 'lemmas_conflict': 1832.0, 'lemmas_loop': 9013.0, 'lemmas_other': 8320.0, 'lits_conflict': 62969.0, 'lits_loop': 124604.0, 'lits_other': 298838.0, 'jumps': {'jumps': 1883.0, 'jumps_bounded': 583.0, 'levels': 31965.0, 'levels_bounded': 29159.0, 'max': 425.0, 'max_executed': 425.0, 'max_bounded': 419.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-57] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289789s.

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.857424s with result Satisfiable.

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 1.1472129999999936, Incremental time limit = None
Running cumulative time = 7.887239999999963, Cumulative time limit = 3600
Used memory = (RSS = 370.558594Mb, VMS = 383.191406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.424951s, Solving = 2.462289s, Total = 7.887240s, Memory = (RSS = 370.558594Mb, VMS = 383.191406Mb)), Calls = 22
Final Model :: Total atoms = 22686, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-21-58] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.424951299999918, solving_time=2.4622887000000446, total_time=7.887239999999963, memory=Memory(rss=370.55859375, vms=383.19140625), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2897888999999907, solving_time=0.8574241000000029, total_time=1.1472129999999936, memory=Memory(rss=370.55859375, vms=383.19140625), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 144387.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1440923.0, 'bodies_tr': 1440923.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7335.0, 'count_bodies_tr': 7335.0, 'sccs': 559.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21943.0, 'rules': 2776037.0, 'rules_normal': 2767778.0, 'rules_choice': 7841.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 2775867.0, 'rules_tr_normal': 2767778.0, 'rules_tr_choice': 7841.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 226.0, 'eqs': 307722.0, 'eqs_atom': 79049.0, 'eqs_body': 12800.0, 'eqs_other': 215873.0}, 'lpStep': {'atoms': 6783.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68099.0, 'bodies_tr': 68099.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130442.0, 'rules_normal': 130090.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130442.0, 'rules_tr_normal': 130090.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14944.0, 'eqs_atom': 3984.0, 'eqs_body': 113.0, 'eqs_other': 10847.0}, 'generator': {'vars': 70923.0, 'vars_eliminated': 0.0, 'vars_frozen': 42856.0, 'constraints': 15697.0, 'constraints_binary': 818001.0, 'constraints_ternary': 79852.0, 'acyc_edges': 0.0, 'complexity': 915140.0}}, 'solving': {'solvers': {'choices': 5293.0, 'conflicts': 1912.0, 'conflicts_analyzed': 1912.0, 'restarts': 10.0, 'restarts_last': 151.0, 'extra': {'domain_choices': 2644.0, 'models': 1.0, 'models_level': 587.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1642.0, 'distributed_sum_lbd': 4474.0, 'integrated': 9796.0, 'lemmas': 15404.0, 'lits_learnt': 757850.0, 'lemmas_binary': 2034.0, 'lemmas_ternary': 279.0, 'cpu_time': 5.40625, 'integrated_imps': 2111.0, 'integrated_jumps': 1867.0, 'guiding_paths_lits': 3066.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1911.0, 'lemmas_loop': 3936.0, 'lemmas_other': 9557.0, 'lits_conflict': 146687.0, 'lits_loop': 59650.0, 'lits_other': 551513.0, 'jumps': {'jumps': 1912.0, 'jumps_bounded': 138.0, 'levels': 3419.0, 'levels_bounded': 138.0, 'max': 86.0, 'max_executed': 86.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 1.1549110412597656, 'cpu': 5.765625, 'solve': 0.7948722839355469, 'unsat': 0.0, 'sat': 0.7280540466308594}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.018516540527344, 'cpu': 15.640625, 'solve': 1.6535396575927734, 'unsat': 0.4308605194091797, 'sat': 0.8585872650146484}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 15663.0, 'conflicts': 3841.0, 'conflicts_analyzed': 3795.0, 'restarts': 14.0, 'restarts_last': 151.0, 'extra': {'domain_choices': 4694.0, 'models': 13.0, 'models_level': 4010.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3443.0, 'distributed_sum_lbd': 8309.0, 'integrated': 18941.0, 'lemmas': 34569.0, 'lits_learnt': 1244261.0, 'lemmas_binary': 3415.0, 'lemmas_ternary': 655.0, 'cpu_time': 9.375, 'integrated_imps': 6643.0, 'integrated_jumps': 3788.0, 'guiding_paths_lits': 37081.0, 'guiding_paths': 164.0, 'splits': 0.0, 'lemmas_conflict': 3743.0, 'lemmas_loop': 12949.0, 'lemmas_other': 17877.0, 'lits_conflict': 209656.0, 'lits_loop': 184254.0, 'lits_other': 850351.0, 'jumps': {'jumps': 3795.0, 'jumps_bounded': 721.0, 'levels': 35384.0, 'levels_bounded': 29297.0, 'max': 425.0, 'max_executed': 425.0, 'max_bounded': 419.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-58] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 22}

[12-11-2021_15-21-58] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 13 ( 76.47% solved)

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 22)', truth=True, inc_range=None)

[12-11-2021_15-21-58] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 22]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13)

[12-11-2021_15-21-58] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.300288s.

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(13, 22)', truth=True, inc_range=None), conversion = current_last_sgoals(13,22).

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.314992s with result Satisfiable.

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6152797999999962, Incremental time limit = None
Running cumulative time = 8.502519799999959, Cumulative time limit = 3600
Used memory = (RSS = 383.496094Mb, VMS = 393.210938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.725240s, Solving = 2.777280s, Total = 8.502520s, Memory = (RSS = 383.496094Mb, VMS = 393.210938Mb)), Calls = 23
Final Model :: Total atoms = 23427, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[12-11-2021_15-21-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.725239599999895, solving_time=2.777280200000064, total_time=8.502519799999959, memory=Memory(rss=383.49609375, vms=393.2109375), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30028829999997697, solving_time=0.3149915000000192, total_time=0.6152797999999962, memory=Memory(rss=383.49609375, vms=393.2109375), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 151184.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1509054.0, 'bodies_tr': 1509054.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7665.0, 'count_bodies_tr': 7665.0, 'sccs': 590.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23473.0, 'rules': 2906647.0, 'rules_normal': 2898036.0, 'rules_choice': 8174.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 414.0, 'rules_tr': 2906477.0, 'rules_tr_normal': 2898036.0, 'rules_tr_choice': 8174.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 244.0, 'eqs': 322744.0, 'eqs_atom': 83047.0, 'eqs_body': 12913.0, 'eqs_other': 226784.0}, 'lpStep': {'atoms': 6797.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68131.0, 'bodies_tr': 68131.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130610.0, 'rules_normal': 130258.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130610.0, 'rules_tr_normal': 130258.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15022.0, 'eqs_atom': 3998.0, 'eqs_body': 113.0, 'eqs_other': 10911.0}, 'generator': {'vars': 75937.0, 'vars_eliminated': 0.0, 'vars_frozen': 45827.0, 'constraints': 17013.0, 'constraints_binary': 884916.0, 'constraints_ternary': 86935.0, 'acyc_edges': 0.0, 'complexity': 990556.0}}, 'solving': {'solvers': {'choices': 1623.0, 'conflicts': 446.0, 'conflicts_analyzed': 446.0, 'restarts': 0.0, 'restarts_last': 87.0, 'extra': {'domain_choices': 115.0, 'models': 1.0, 'models_level': 601.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 325.0, 'distributed_sum_lbd': 906.0, 'integrated': 1763.0, 'lemmas': 2928.0, 'lits_learnt': 203323.0, 'lemmas_binary': 208.0, 'lemmas_ternary': 144.0, 'cpu_time': 1.6875, 'integrated_imps': 430.0, 'integrated_jumps': 388.0, 'guiding_paths_lits': 3199.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 439.0, 'lemmas_loop': 1073.0, 'lemmas_other': 1416.0, 'lits_conflict': 52085.0, 'lits_loop': 15972.0, 'lits_other': 135266.0, 'jumps': {'jumps': 446.0, 'jumps_bounded': 33.0, 'levels': 796.0, 'levels_bounded': 33.0, 'max': 21.0, 'max_executed': 21.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.6262836456298828, 'cpu': 2.0625, 'solve': 0.2562427520751953, 'unsat': 0.0, 'sat': 0.2059345245361328}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 8.644800186157227, 'cpu': 17.703125, 'solve': 1.9097824096679688, 'unsat': 0.4308605194091797, 'sat': 1.0645217895507812}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 17286.0, 'conflicts': 4287.0, 'conflicts_analyzed': 4241.0, 'restarts': 14.0, 'restarts_last': 151.0, 'extra': {'domain_choices': 4809.0, 'models': 14.0, 'models_level': 4611.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3768.0, 'distributed_sum_lbd': 9215.0, 'integrated': 20704.0, 'lemmas': 37497.0, 'lits_learnt': 1447584.0, 'lemmas_binary': 3623.0, 'lemmas_ternary': 799.0, 'cpu_time': 11.0625, 'integrated_imps': 7073.0, 'integrated_jumps': 4176.0, 'guiding_paths_lits': 40280.0, 'guiding_paths': 171.0, 'splits': 0.0, 'lemmas_conflict': 4182.0, 'lemmas_loop': 14022.0, 'lemmas_other': 19293.0, 'lits_conflict': 261741.0, 'lits_loop': 200226.0, 'lits_other': 985617.0, 'jumps': {'jumps': 4241.0, 'jumps_bounded': 754.0, 'levels': 36180.0, 'levels_bounded': 29330.0, 'max': 425.0, 'max_executed': 425.0, 'max_bounded': 419.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-59] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 22, 13: 23}

[12-11-2021_15-21-59] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 14 ( 82.35% solved)

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 23)', truth=True, inc_range=None)

[12-11-2021_15-21-59] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 23]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 14)

[12-11-2021_15-21-59] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.304367s.

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(14, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(14,23).

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084026s with result Unsatisfiable.

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3883931999999959, Incremental time limit = None
Running cumulative time = 8.890912999999955, Cumulative time limit = 3600
Used memory = (RSS = 398.253906Mb, VMS = 408.210938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-21-59] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.029606599999909, solving_time=2.8613064000000463, total_time=8.890912999999955, memory=Memory(rss=398.25390625, vms=408.2109375), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3043670000000134, solving_time=0.08402619999998251, total_time=0.3883931999999959, memory=Memory(rss=398.25390625, vms=408.2109375), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 157995.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1577217.0, 'bodies_tr': 1577217.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7995.0, 'count_bodies_tr': 7995.0, 'sccs': 621.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25003.0, 'rules': 3037425.0, 'rules_normal': 3028462.0, 'rules_choice': 8507.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 3037255.0, 'rules_tr_normal': 3028462.0, 'rules_tr_choice': 8507.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 262.0, 'eqs': 337844.0, 'eqs_atom': 87059.0, 'eqs_body': 13026.0, 'eqs_other': 237759.0}, 'lpStep': {'atoms': 6811.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68163.0, 'bodies_tr': 68163.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130778.0, 'rules_normal': 130426.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130778.0, 'rules_tr_normal': 130426.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15100.0, 'eqs_atom': 4012.0, 'eqs_body': 113.0, 'eqs_other': 10975.0}, 'generator': {'vars': 80951.0, 'vars_eliminated': 0.0, 'vars_frozen': 48798.0, 'constraints': 18372.0, 'constraints_binary': 958958.0, 'constraints_ternary': 94339.0, 'acyc_edges': 0.0, 'complexity': 1073471.0}}, 'solving': {'solvers': {'choices': 34.0, 'conflicts': 32.0, 'conflicts_analyzed': 27.0, 'restarts': 0.0, 'restarts_last': 12.0, 'extra': {'domain_choices': 17.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 57.0, 'integrated': 22.0, 'lemmas': 92.0, 'lits_learnt': 3438.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.09375, 'integrated_imps': 12.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3332.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 51.0, 'lemmas_other': 16.0, 'lits_conflict': 1906.0, 'lits_loop': 484.0, 'lits_other': 1048.0, 'jumps': {'jumps': 27.0, 'jumps_bounded': 14.0, 'levels': 47.0, 'levels_bounded': 14.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.39925575256347656, 'cpu': 0.46875, 'solve': 0.029916763305664062, 'unsat': 0.029916763305664062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.044055938720703, 'cpu': 18.171875, 'solve': 1.9396991729736328, 'unsat': 0.46077728271484375, 'sat': 1.0645217895507812}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 17320.0, 'conflicts': 4319.0, 'conflicts_analyzed': 4268.0, 'restarts': 14.0, 'restarts_last': 151.0, 'extra': {'domain_choices': 4826.0, 'models': 14.0, 'models_level': 4611.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3793.0, 'distributed_sum_lbd': 9272.0, 'integrated': 20726.0, 'lemmas': 37589.0, 'lits_learnt': 1451022.0, 'lemmas_binary': 3630.0, 'lemmas_ternary': 803.0, 'cpu_time': 11.15625, 'integrated_imps': 7085.0, 'integrated_jumps': 4176.0, 'guiding_paths_lits': 43612.0, 'guiding_paths': 178.0, 'splits': 0.0, 'lemmas_conflict': 4207.0, 'lemmas_loop': 14073.0, 'lemmas_other': 19309.0, 'lits_conflict': 263647.0, 'lits_loop': 200710.0, 'lits_other': 986665.0, 'jumps': {'jumps': 4268.0, 'jumps_bounded': 768.0, 'levels': 36227.0, 'levels_bounded': 29344.0, 'max': 425.0, 'max_executed': 425.0, 'max_bounded': 419.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-21-59] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-21-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.321493s.

[12-11-2021_15-22-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.823850s with result Satisfiable.

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 2.145342200000016, Incremental time limit = None
Running cumulative time = 11.036255199999971, Cumulative time limit = 3600
Used memory = (RSS = 411.175781Mb, VMS = 418.250000Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 15
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.351099s, Solving = 4.685156s, Total = 11.036255s, Memory = (RSS = 411.175781Mb, VMS = 418.250000Mb)), Calls = 25
Final Model :: Total atoms = 24908, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.351099099999914, solving_time=4.685156100000057, total_time=11.036255199999971, memory=Memory(rss=411.17578125, vms=418.25), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32149250000000507, solving_time=1.823849700000011, total_time=2.145342200000016, memory=Memory(rss=411.17578125, vms=418.25), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 164820.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1645412.0, 'bodies_tr': 1645412.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8325.0, 'count_bodies_tr': 8325.0, 'sccs': 652.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26533.0, 'rules': 3168371.0, 'rules_normal': 3159056.0, 'rules_choice': 8840.0, 'rules_minimize': 25.0, 'rules_acyc': 0.0, 'rules_heuristic': 450.0, 'rules_tr': 3168201.0, 'rules_tr_normal': 3159056.0, 'rules_tr_choice': 8840.0, 'rules_tr_minimize': 25.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 280.0, 'eqs': 353022.0, 'eqs_atom': 91085.0, 'eqs_body': 13139.0, 'eqs_other': 248798.0}, 'lpStep': {'atoms': 6825.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68195.0, 'bodies_tr': 68195.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130946.0, 'rules_normal': 130594.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130946.0, 'rules_tr_normal': 130594.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15178.0, 'eqs_atom': 4026.0, 'eqs_body': 113.0, 'eqs_other': 11039.0}, 'generator': {'vars': 85965.0, 'vars_eliminated': 0.0, 'vars_frozen': 51769.0, 'constraints': 19731.0, 'constraints_binary': 1033154.0, 'constraints_ternary': 101743.0, 'acyc_edges': 0.0, 'complexity': 1156540.0}}, 'solving': {'solvers': {'choices': 11333.0, 'conflicts': 4241.0, 'conflicts_analyzed': 4241.0, 'restarts': 20.0, 'restarts_last': 505.0, 'extra': {'domain_choices': 5801.0, 'models': 1.0, 'models_level': 656.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3557.0, 'distributed_sum_lbd': 10252.0, 'integrated': 21005.0, 'lemmas': 31075.0, 'lits_learnt': 1862396.0, 'lemmas_binary': 2876.0, 'lemmas_ternary': 770.0, 'cpu_time': 12.21875, 'integrated_imps': 3712.0, 'integrated_jumps': 3952.0, 'guiding_paths_lits': 3465.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 4235.0, 'lemmas_loop': 6327.0, 'lemmas_other': 20513.0, 'lits_conflict': 353539.0, 'lits_loop': 96425.0, 'lits_other': 1412432.0, 'jumps': {'jumps': 4241.0, 'jumps_bounded': 153.0, 'levels': 7760.0, 'levels_bounded': 1141.0, 'max': 500.0, 'max_executed': 500.0, 'max_bounded': 495.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 2.155101776123047, 'cpu': 12.609375, 'solve': 1.765584945678711, 'unsat': 0.0, 'sat': 1.622671127319336}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.19915771484375, 'cpu': 30.78125, 'solve': 3.7052841186523438, 'unsat': 0.46077728271484375, 'sat': 2.687192916870117}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 28653.0, 'conflicts': 8560.0, 'conflicts_analyzed': 8509.0, 'restarts': 34.0, 'restarts_last': 505.0, 'extra': {'domain_choices': 10627.0, 'models': 15.0, 'models_level': 5267.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7350.0, 'distributed_sum_lbd': 19524.0, 'integrated': 41731.0, 'lemmas': 68664.0, 'lits_learnt': 3313418.0, 'lemmas_binary': 6506.0, 'lemmas_ternary': 1573.0, 'cpu_time': 23.375, 'integrated_imps': 10797.0, 'integrated_jumps': 8128.0, 'guiding_paths_lits': 47077.0, 'guiding_paths': 185.0, 'splits': 0.0, 'lemmas_conflict': 8442.0, 'lemmas_loop': 20400.0, 'lemmas_other': 39822.0, 'lits_conflict': 617186.0, 'lits_loop': 297135.0, 'lits_other': 2399097.0, 'jumps': {'jumps': 8509.0, 'jumps_bounded': 921.0, 'levels': 43987.0, 'levels_bounded': 30485.0, 'max': 500.0, 'max_executed': 500.0, 'max_bounded': 495.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 22, 13: 23, 14: 25}

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 15 ( 88.24% solved)

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 25)', truth=True, inc_range=None)

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 25]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 15)

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.308825s.

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(15, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(15,25).

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.214402s with result Satisfiable.

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5232268000000033, Incremental time limit = None
Running cumulative time = 11.559481999999974, Cumulative time limit = 3600
Used memory = (RSS = 424.851562Mb, VMS = 428.949219Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.659924s, Solving = 4.899558s, Total = 11.559482s, Memory = (RSS = 424.851562Mb, VMS = 428.949219Mb)), Calls = 26
Final Model :: Total atoms = 25650, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.659923699999922, solving_time=4.899558300000052, total_time=11.559481999999974, memory=Memory(rss=424.8515625, vms=428.94921875), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30882460000000833, solving_time=0.214402199999995, total_time=0.5232268000000033, memory=Memory(rss=424.8515625, vms=428.94921875), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 171659.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1713639.0, 'bodies_tr': 1713639.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8655.0, 'count_bodies_tr': 8655.0, 'sccs': 683.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 28063.0, 'rules': 3299485.0, 'rules_normal': 3289818.0, 'rules_choice': 9173.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 3299315.0, 'rules_tr_normal': 3289818.0, 'rules_tr_choice': 9173.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 298.0, 'eqs': 368278.0, 'eqs_atom': 95125.0, 'eqs_body': 13252.0, 'eqs_other': 259901.0}, 'lpStep': {'atoms': 6839.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68227.0, 'bodies_tr': 68227.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131114.0, 'rules_normal': 130762.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131114.0, 'rules_tr_normal': 130762.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15256.0, 'eqs_atom': 4040.0, 'eqs_body': 113.0, 'eqs_other': 11103.0}, 'generator': {'vars': 90979.0, 'vars_eliminated': 0.0, 'vars_frozen': 54740.0, 'constraints': 20108.0, 'constraints_binary': 1060789.0, 'constraints_ternary': 104998.0, 'acyc_edges': 0.0, 'complexity': 1187897.0}}, 'solving': {'solvers': {'choices': 1323.0, 'conflicts': 124.0, 'conflicts_analyzed': 124.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 89.0, 'models': 1.0, 'models_level': 677.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 112.0, 'distributed_sum_lbd': 261.0, 'integrated': 641.0, 'lemmas': 746.0, 'lits_learnt': 59066.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 17.0, 'cpu_time': 0.875, 'integrated_imps': 288.0, 'integrated_jumps': 18.0, 'guiding_paths_lits': 3598.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 124.0, 'lemmas_loop': 175.0, 'lemmas_other': 447.0, 'lits_conflict': 13000.0, 'lits_loop': 2151.0, 'lits_other': 43915.0, 'jumps': {'jumps': 124.0, 'jumps_bounded': 64.0, 'levels': 203.0, 'levels_bounded': 64.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 26.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.5486812591552734, 'cpu': 1.265625, 'solve': 0.15308189392089844, 'unsat': 0.0, 'sat': 0.116180419921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.747838973999023, 'cpu': 32.046875, 'solve': 3.858366012573242, 'unsat': 0.46077728271484375, 'sat': 2.803373336791992}, 'models': {'enumerated': 16.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 29976.0, 'conflicts': 8684.0, 'conflicts_analyzed': 8633.0, 'restarts': 34.0, 'restarts_last': 505.0, 'extra': {'domain_choices': 10716.0, 'models': 16.0, 'models_level': 5944.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7462.0, 'distributed_sum_lbd': 19785.0, 'integrated': 42372.0, 'lemmas': 69410.0, 'lits_learnt': 3372484.0, 'lemmas_binary': 6514.0, 'lemmas_ternary': 1590.0, 'cpu_time': 24.25, 'integrated_imps': 11085.0, 'integrated_jumps': 8146.0, 'guiding_paths_lits': 50675.0, 'guiding_paths': 192.0, 'splits': 0.0, 'lemmas_conflict': 8566.0, 'lemmas_loop': 20575.0, 'lemmas_other': 40269.0, 'lits_conflict': 630186.0, 'lits_loop': 299286.0, 'lits_other': 2443012.0, 'jumps': {'jumps': 8633.0, 'jumps_bounded': 985.0, 'levels': 44190.0, 'levels_bounded': 30549.0, 'max': 500.0, 'max_executed': 500.0, 'max_bounded': 495.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 22, 13: 23, 14: 25, 15: 26}

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 16 ( 94.12% solved)

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 26)', truth=True, inc_range=None)

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 26]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 16)

[12-11-2021_15-22-02] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.325129s.

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 27: original = External(symbol='current_last_sgoals(16, 26)', truth=True, inc_range=None), conversion = current_last_sgoals(16,26).

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.189906s with result Satisfiable.

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5150347000000295, Incremental time limit = None
Running cumulative time = 12.074516700000004, Cumulative time limit = 3600
Used memory = (RSS = 442.351562Mb, VMS = 443.847656Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.985052s, Solving = 5.089464s, Total = 12.074517s, Memory = (RSS = 442.351562Mb, VMS = 443.847656Mb)), Calls = 27
Final Model :: Total atoms = 26393, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.985052499999938, solving_time=5.089464200000066, total_time=12.074516700000004, memory=Memory(rss=442.3515625, vms=443.84765625), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32512880000001587, solving_time=0.18990590000001362, total_time=0.5150347000000295, memory=Memory(rss=442.3515625, vms=443.84765625), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 178512.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1781898.0, 'bodies_tr': 1781898.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8985.0, 'count_bodies_tr': 8985.0, 'sccs': 714.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 29593.0, 'rules': 3430767.0, 'rules_normal': 3420748.0, 'rules_choice': 9506.0, 'rules_minimize': 27.0, 'rules_acyc': 0.0, 'rules_heuristic': 486.0, 'rules_tr': 3430597.0, 'rules_tr_normal': 3420748.0, 'rules_tr_choice': 9506.0, 'rules_tr_minimize': 27.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 316.0, 'eqs': 383612.0, 'eqs_atom': 99179.0, 'eqs_body': 13365.0, 'eqs_other': 271068.0}, 'lpStep': {'atoms': 6853.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68259.0, 'bodies_tr': 68259.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131282.0, 'rules_normal': 130930.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131282.0, 'rules_tr_normal': 130930.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15334.0, 'eqs_atom': 4054.0, 'eqs_body': 113.0, 'eqs_other': 11167.0}, 'generator': {'vars': 95993.0, 'vars_eliminated': 0.0, 'vars_frozen': 57711.0, 'constraints': 21467.0, 'constraints_binary': 1135293.0, 'constraints_ternary': 112417.0, 'acyc_edges': 0.0, 'complexity': 1271289.0}}, 'solving': {'solvers': {'choices': 1074.0, 'conflicts': 141.0, 'conflicts_analyzed': 141.0, 'restarts': 0.0, 'restarts_last': 40.0, 'extra': {'domain_choices': 95.0, 'models': 1.0, 'models_level': 703.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 140.0, 'distributed_sum_lbd': 335.0, 'integrated': 717.0, 'lemmas': 883.0, 'lits_learnt': 96213.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.796875, 'integrated_imps': 431.0, 'integrated_jumps': 23.0, 'guiding_paths_lits': 3731.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 141.0, 'lemmas_loop': 145.0, 'lemmas_other': 597.0, 'lits_conflict': 20474.0, 'lits_loop': 1586.0, 'lits_other': 74153.0, 'jumps': {'jumps': 141.0, 'jumps_bounded': 91.0, 'levels': 274.0, 'levels_bounded': 91.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 27.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.5325775146484375, 'cpu': 1.203125, 'solve': 0.1326160430908203, 'unsat': 0.0, 'sat': 0.084747314453125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 12.280416488647461, 'cpu': 33.25, 'solve': 3.9909820556640625, 'unsat': 0.46077728271484375, 'sat': 2.888120651245117}, 'models': {'enumerated': 17.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 31050.0, 'conflicts': 8825.0, 'conflicts_analyzed': 8774.0, 'restarts': 34.0, 'restarts_last': 505.0, 'extra': {'domain_choices': 10811.0, 'models': 17.0, 'models_level': 6647.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7602.0, 'distributed_sum_lbd': 20120.0, 'integrated': 43089.0, 'lemmas': 70293.0, 'lits_learnt': 3468697.0, 'lemmas_binary': 6544.0, 'lemmas_ternary': 1590.0, 'cpu_time': 25.046875, 'integrated_imps': 11516.0, 'integrated_jumps': 8169.0, 'guiding_paths_lits': 54406.0, 'guiding_paths': 199.0, 'splits': 0.0, 'lemmas_conflict': 8707.0, 'lemmas_loop': 20720.0, 'lemmas_other': 40866.0, 'lits_conflict': 650660.0, 'lits_loop': 300872.0, 'lits_other': 2517165.0, 'jumps': {'jumps': 8774.0, 'jumps_bounded': 1076.0, 'levels': 44464.0, 'levels_bounded': 30640.0, 'max': 500.0, 'max_executed': 500.0, 'max_bounded': 495.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-03] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27}

[12-11-2021_15-22-03] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 17 (100.00% solved)

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 27)', truth=True, inc_range=None)

[12-11-2021_15-22-03] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 27]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 17)

[12-11-2021_15-22-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.337525s.

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 28: original = External(symbol='current_last_sgoals(17, 27)', truth=True, inc_range=None), conversion = current_last_sgoals(17,27).

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.351030s with result Unsatisfiable.

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.6885549999999796, Incremental time limit = None
Running cumulative time = 12.763071699999983, Cumulative time limit = 3600
Used memory = (RSS = 451.132812Mb, VMS = 449.613281Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-03] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.3225776999999255, solving_time=5.440494000000058, total_time=12.763071699999983, memory=Memory(rss=451.1328125, vms=449.61328125), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.33752519999998754, solving_time=0.35102979999999206, total_time=0.6885549999999796, memory=Memory(rss=451.1328125, vms=449.61328125), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 185379.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1850189.0, 'bodies_tr': 1850189.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9315.0, 'count_bodies_tr': 9315.0, 'sccs': 745.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 31123.0, 'rules': 3562217.0, 'rules_normal': 3551846.0, 'rules_choice': 9839.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 504.0, 'rules_tr': 3562047.0, 'rules_tr_normal': 3551846.0, 'rules_tr_choice': 9839.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 334.0, 'eqs': 399024.0, 'eqs_atom': 103247.0, 'eqs_body': 13478.0, 'eqs_other': 282299.0}, 'lpStep': {'atoms': 6867.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68291.0, 'bodies_tr': 68291.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131450.0, 'rules_normal': 131098.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131450.0, 'rules_tr_normal': 131098.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15412.0, 'eqs_atom': 4068.0, 'eqs_body': 113.0, 'eqs_other': 11231.0}, 'generator': {'vars': 101007.0, 'vars_eliminated': 0.0, 'vars_frozen': 60682.0, 'constraints': 22826.0, 'constraints_binary': 1209951.0, 'constraints_ternary': 119821.0, 'acyc_edges': 0.0, 'complexity': 1354820.0}}, 'solving': {'solvers': {'choices': 1387.0, 'conflicts': 449.0, 'conflicts_analyzed': 446.0, 'restarts': 0.0, 'restarts_last': 82.0, 'extra': {'domain_choices': 83.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 259.0, 'distributed_sum_lbd': 701.0, 'integrated': 1525.0, 'lemmas': 3087.0, 'lits_learnt': 339325.0, 'lemmas_binary': 145.0, 'lemmas_ternary': 84.0, 'cpu_time': 2.03125, 'integrated_imps': 494.0, 'integrated_jumps': 327.0, 'guiding_paths_lits': 3864.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 444.0, 'lemmas_loop': 1326.0, 'lemmas_other': 1317.0, 'lits_conflict': 91863.0, 'lits_loop': 19888.0, 'lits_other': 227574.0, 'jumps': {'jumps': 446.0, 'jumps_bounded': 70.0, 'levels': 1113.0, 'levels_bounded': 70.0, 'max': 132.0, 'max_executed': 132.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 28.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.7035331726074219, 'cpu': 2.453125, 'solve': 0.29024505615234375, 'unsat': 0.29024505615234375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 12.983949661254883, 'cpu': 35.703125, 'solve': 4.281227111816406, 'unsat': 0.7510223388671875, 'sat': 2.888120651245117}, 'models': {'enumerated': 17.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 32437.0, 'conflicts': 9274.0, 'conflicts_analyzed': 9220.0, 'restarts': 34.0, 'restarts_last': 505.0, 'extra': {'domain_choices': 10894.0, 'models': 17.0, 'models_level': 6647.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7861.0, 'distributed_sum_lbd': 20821.0, 'integrated': 44614.0, 'lemmas': 73380.0, 'lits_learnt': 3808022.0, 'lemmas_binary': 6689.0, 'lemmas_ternary': 1674.0, 'cpu_time': 27.078125, 'integrated_imps': 12010.0, 'integrated_jumps': 8496.0, 'guiding_paths_lits': 58270.0, 'guiding_paths': 206.0, 'splits': 0.0, 'lemmas_conflict': 9151.0, 'lemmas_loop': 22046.0, 'lemmas_other': 42183.0, 'lits_conflict': 742523.0, 'lits_loop': 320760.0, 'lits_other': 2744739.0, 'jumps': {'jumps': 9220.0, 'jumps_bounded': 1146.0, 'levels': 45577.0, 'levels_bounded': 30710.0, 'max': 500.0, 'max_executed': 500.0, 'max_bounded': 495.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-03] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(17), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.334904s.

[12-11-2021_15-22-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 5.085827s with result Satisfiable.

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 5.420730899999995, Incremental time limit = None
Running cumulative time = 18.18380259999998, Cumulative time limit = 3600
Used memory = (RSS = 483.468750Mb, VMS = 507.421875Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 18
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.657482s, Solving = 10.526321s, Total = 18.183803s, Memory = (RSS = 483.468750Mb, VMS = 507.421875Mb)), Calls = 29
Final Model :: Total atoms = 27882, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-22-09] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.657481799999914, solving_time=10.526320800000065, total_time=18.18380259999998, memory=Memory(rss=483.46875, vms=507.421875), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3349040999999886, solving_time=5.085826800000007, total_time=5.420730899999995, memory=Memory(rss=483.46875, vms=507.421875), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 192260.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1918512.0, 'bodies_tr': 1918512.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9645.0, 'count_bodies_tr': 9645.0, 'sccs': 776.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 32653.0, 'rules': 3693835.0, 'rules_normal': 3683112.0, 'rules_choice': 10172.0, 'rules_minimize': 29.0, 'rules_acyc': 0.0, 'rules_heuristic': 522.0, 'rules_tr': 3693665.0, 'rules_tr_normal': 3683112.0, 'rules_tr_choice': 10172.0, 'rules_tr_minimize': 29.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 352.0, 'eqs': 414514.0, 'eqs_atom': 107329.0, 'eqs_body': 13591.0, 'eqs_other': 293594.0}, 'lpStep': {'atoms': 6881.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68323.0, 'bodies_tr': 68323.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131618.0, 'rules_normal': 131266.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131618.0, 'rules_tr_normal': 131266.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15490.0, 'eqs_atom': 4082.0, 'eqs_body': 113.0, 'eqs_other': 11295.0}, 'generator': {'vars': 106021.0, 'vars_eliminated': 0.0, 'vars_frozen': 63653.0, 'constraints': 24185.0, 'constraints_binary': 1284763.0, 'constraints_ternary': 127225.0, 'acyc_edges': 0.0, 'complexity': 1438505.0}}, 'solving': {'solvers': {'choices': 33923.0, 'conflicts': 13985.0, 'conflicts_analyzed': 13985.0, 'restarts': 64.0, 'restarts_last': 741.0, 'extra': {'domain_choices': 12058.0, 'models': 1.0, 'models_level': 762.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 10887.0, 'distributed': 7703.0, 'distributed_sum_lbd': 24384.0, 'integrated': 46107.0, 'lemmas': 83101.0, 'lits_learnt': 6301735.0, 'lemmas_binary': 4777.0, 'lemmas_ternary': 1651.0, 'cpu_time': 35.15625, 'integrated_imps': 4404.0, 'integrated_jumps': 8922.0, 'guiding_paths_lits': 3997.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 13973.0, 'lemmas_loop': 23549.0, 'lemmas_other': 45579.0, 'lits_conflict': 1519579.0, 'lits_loop': 370801.0, 'lits_other': 4411355.0, 'jumps': {'jumps': 13985.0, 'jumps_bounded': 136.0, 'levels': 23819.0, 'levels_bounded': 706.0, 'max': 586.0, 'max_executed': 586.0, 'max_bounded': 571.0}}}}, 'summary': {'call': 29.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 5.435941696166992, 'cpu': 35.5625, 'solve': 5.0227203369140625, 'unsat': 0.0, 'sat': 4.785688400268555}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 18.419891357421875, 'cpu': 71.265625, 'solve': 9.303947448730469, 'unsat': 0.7510223388671875, 'sat': 7.673809051513672}, 'models': {'enumerated': 18.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 66360.0, 'conflicts': 23259.0, 'conflicts_analyzed': 23205.0, 'restarts': 98.0, 'restarts_last': 741.0, 'extra': {'domain_choices': 22952.0, 'models': 18.0, 'models_level': 7409.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 10887.0, 'distributed': 15564.0, 'distributed_sum_lbd': 45205.0, 'integrated': 90721.0, 'lemmas': 156481.0, 'lits_learnt': 10109757.0, 'lemmas_binary': 11466.0, 'lemmas_ternary': 3325.0, 'cpu_time': 62.234375, 'integrated_imps': 16414.0, 'integrated_jumps': 17418.0, 'guiding_paths_lits': 62267.0, 'guiding_paths': 213.0, 'splits': 0.0, 'lemmas_conflict': 23124.0, 'lemmas_loop': 45595.0, 'lemmas_other': 87762.0, 'lits_conflict': 2262102.0, 'lits_loop': 691561.0, 'lits_other': 7156094.0, 'jumps': {'jumps': 23205.0, 'jumps_bounded': 1282.0, 'levels': 69396.0, 'levels_bounded': 31416.0, 'max': 586.0, 'max_executed': 586.0, 'max_bounded': 571.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-09] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 19, 12: 22, 13: 23, 14: 25, 15: 26, 16: 27, 17: 29}

[12-11-2021_15-22-09] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 18 (105.88% solved)

[12-11-2021_15-22-09] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.274573s, Solving = 0.038363s, Total = 0.312937s, Memory = (RSS = 201.941406Mb, VMS = 195.871094Mb)
2 : Statistics :: Grounding = 0.223861s, Solving = 0.023532s, Total = 0.247393s, Memory = (RSS = 207.320312Mb, VMS = 202.265625Mb)
3 : Statistics :: Grounding = 0.208687s, Solving = 0.029252s, Total = 0.237939s, Memory = (RSS = 208.964844Mb, VMS = 203.566406Mb)
4 : Statistics :: Grounding = 0.271828s, Solving = 0.017531s, Total = 0.289359s, Memory = (RSS = 213.679688Mb, VMS = 208.066406Mb)
5 : Statistics :: Grounding = 0.203985s, Solving = 0.021242s, Total = 0.225228s, Memory = (RSS = 216.351562Mb, VMS = 210.398438Mb)
6 : Statistics :: Grounding = 0.207441s, Solving = 0.053208s, Total = 0.260649s, Memory = (RSS = 226.050781Mb, VMS = 221.292969Mb)
7 : Statistics :: Grounding = 0.226207s, Solving = 0.065421s, Total = 0.291628s, Memory = (RSS = 228.523438Mb, VMS = 223.472656Mb)
8 : Statistics :: Grounding = 0.211322s, Solving = 0.036197s, Total = 0.247518s, Memory = (RSS = 230.832031Mb, VMS = 225.765625Mb)
9 : Statistics :: Grounding = 0.210057s, Solving = 0.020314s, Total = 0.230371s, Memory = (RSS = 232.718750Mb, VMS = 227.445312Mb)
10 : Statistics :: Grounding = 0.218036s, Solving = 0.026225s, Total = 0.244261s, Memory = (RSS = 242.089844Mb, VMS = 241.910156Mb)
11 : Statistics :: Grounding = 0.228997s, Solving = 0.049298s, Total = 0.278296s, Memory = (RSS = 248.292969Mb, VMS = 245.941406Mb)
12 : Statistics :: Grounding = 0.232825s, Solving = 0.065687s, Total = 0.298512s, Memory = (RSS = 261.445312Mb, VMS = 262.023438Mb)
13 : Statistics :: Grounding = 0.242803s, Solving = 0.075915s, Total = 0.318718s, Memory = (RSS = 267.031250Mb, VMS = 265.003906Mb)
14 : Statistics :: Grounding = 0.252319s, Solving = 0.111521s, Total = 0.363839s, Memory = (RSS = 280.828125Mb, VMS = 285.871094Mb)
15 : Statistics :: Grounding = 0.259027s, Solving = 0.073011s, Total = 0.332037s, Memory = (RSS = 291.273438Mb, VMS = 293.878906Mb)
16 : Statistics :: Grounding = 0.257438s, Solving = 0.079005s, Total = 0.336443s, Memory = (RSS = 299.531250Mb, VMS = 298.500000Mb)
17 : Statistics :: Grounding = 0.275174s, Solving = 0.091487s, Total = 0.366661s, Memory = (RSS = 318.789062Mb, VMS = 329.042969Mb)
18 : Statistics :: Grounding = 0.270878s, Solving = 0.151971s, Total = 0.422849s, Memory = (RSS = 333.160156Mb, VMS = 341.253906Mb)
19 : Statistics :: Grounding = 0.276742s, Solving = 0.095318s, Total = 0.372061s, Memory = (RSS = 345.250000Mb, VMS = 349.746094Mb)
20 : Statistics :: Grounding = 0.299533s, Solving = 0.075887s, Total = 0.375420s, Memory = (RSS = 349.871094Mb, VMS = 350.281250Mb)
21 : Statistics :: Grounding = 0.283429s, Solving = 0.404481s, Total = 0.687909s, Memory = (RSS = 354.511719Mb, VMS = 351.722656Mb)
22 : Statistics :: Grounding = 0.289789s, Solving = 0.857424s, Total = 1.147213s, Memory = (RSS = 370.558594Mb, VMS = 383.191406Mb)
23 : Statistics :: Grounding = 0.300288s, Solving = 0.314992s, Total = 0.615280s, Memory = (RSS = 383.496094Mb, VMS = 393.210938Mb)
24 : Statistics :: Grounding = 0.304367s, Solving = 0.084026s, Total = 0.388393s, Memory = (RSS = 398.253906Mb, VMS = 408.210938Mb)
25 : Statistics :: Grounding = 0.321493s, Solving = 1.823850s, Total = 2.145342s, Memory = (RSS = 411.175781Mb, VMS = 418.250000Mb)
26 : Statistics :: Grounding = 0.308825s, Solving = 0.214402s, Total = 0.523227s, Memory = (RSS = 424.851562Mb, VMS = 428.949219Mb)
27 : Statistics :: Grounding = 0.325129s, Solving = 0.189906s, Total = 0.515035s, Memory = (RSS = 442.351562Mb, VMS = 443.847656Mb)
28 : Statistics :: Grounding = 0.337525s, Solving = 0.351030s, Total = 0.688555s, Memory = (RSS = 451.132812Mb, VMS = 449.613281Mb)
29 : Statistics :: Grounding = 0.334904s, Solving = 5.085827s, Total = 5.420731s, Memory = (RSS = 483.468750Mb, VMS = 507.421875Mb)

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 18.183803s due to: External generator exit.

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-22-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.657482s, Solving = 10.526321s, Total = 18.183803s, Memory = (RSS = 483.468750Mb, VMS = 507.421875Mb)), Calls = 29
Model :: Total atoms = 27882, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 29 :: Actions = 29                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 26 : Achieved sgoals = 13 : Unachieved sgoals = 13
Level = 1 : Solved problems = 1 : Total constraining sgoals = 34 : Achieved sgoals = 17 : Unachieved sgoals = 17

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [1-2]

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 2 by method ground-first: [1-1]

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 2:
Divided plan : Level =  2 (par-ref), Length =  34, Actions =  34 (Com = 1.00), Sgs = 34, Time =  29.000s (Gro =   6.354s, Sea =  22.646s), Expan (2.62, 2.62) (Dev = (2.43, 2.43), Bal = (0.93, 0.93))
Division points [total=1] : [(Index = 17, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-34]

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-34], problem number = 2, increment number = 2

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 34)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 34
start_step = 29
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 45

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [18-34] : Minimum search length bound = disabled with value = 45

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[12-11-2021_15-22-10] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[12-11-2021_15-22-10] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 29 as problem start state.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,6))', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 29})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,6)', 'S': 29})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 29})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,0)', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'S': 29})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,8))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 29})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'S': 29})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 29})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 29})
Fluent({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 29})

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete(blue), false, 29).
holds(1, complete(red), false, 29).
holds(1, complete(yellow), false, 29).
holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 29).
holds(1, configuration(manipulator_limb_1), retracted, 29).
holds(1, configuration(manipulator_limb_2), retracted, 29).
holds(1, configuration(puzzle_room_door), open, 29).
holds(1, configuration(starting_room_door), closed, 29).
holds(1, configuration(store_room_door), open, 29).
holds(1, grasping(manipulator_arm_1), (block,6), 29).
holds(1, grasping(manipulator_arm_2), (block,4), 29).
holds(1, grasping(manipulator_end_1), (block,6), 29).
holds(1, grasping(manipulator_end_2), (block,4), 29).
holds(1, in((block,1)), (puzzle_room,1), 29).
holds(1, in((block,2)), (puzzle_room,1), 29).
holds(1, in((block,3)), (puzzle_room,1), 29).
holds(1, in((block,4)), (hallway,0), 29).
holds(1, in((block,5)), (store_room,0), 29).
holds(1, in((block,6)), (hallway,0), 29).
holds(1, in((block,7)), (puzzle_room,1), 29).
holds(1, in((block,8)), (puzzle_room,1), 29).
holds(1, in((block,9)), (puzzle_room,1), 29).
holds(1, in(manipulator_arm_1), (hallway,0), 29).
holds(1, in(manipulator_arm_2), (hallway,0), 29).
holds(1, in(manipulator_end_1), (hallway,0), 29).
holds(1, in(manipulator_end_2), (hallway,0), 29).
holds(1, in(manipulator_limb_1), (hallway,0), 29).
holds(1, in(manipulator_limb_2), (hallway,0), 29).
holds(1, in(puzzle_room_table), (puzzle_room,1), 29).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 29).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29).
holds(1, in(talos), (hallway,0), 29).
holds(1, in_tower((block,1),(block,1)), true, 29).
holds(1, in_tower((block,1),(block,2)), false, 29).
holds(1, in_tower((block,1),(block,3)), true, 29).
holds(1, in_tower((block,1),(block,4)), false, 29).
holds(1, in_tower((block,1),(block,5)), false, 29).
holds(1, in_tower((block,1),(block,6)), false, 29).
holds(1, in_tower((block,1),(block,7)), false, 29).
holds(1, in_tower((block,1),(block,8)), false, 29).
holds(1, in_tower((block,1),(block,9)), false, 29).
holds(1, in_tower((block,2),(block,1)), false, 29).
holds(1, in_tower((block,2),(block,2)), true, 29).
holds(1, in_tower((block,2),(block,3)), false, 29).
holds(1, in_tower((block,2),(block,4)), false, 29).
holds(1, in_tower((block,2),(block,5)), false, 29).
holds(1, in_tower((block,2),(block,6)), false, 29).
holds(1, in_tower((block,2),(block,7)), false, 29).
holds(1, in_tower((block,2),(block,8)), false, 29).
holds(1, in_tower((block,2),(block,9)), false, 29).
holds(1, in_tower((block,3),(block,1)), false, 29).
holds(1, in_tower((block,3),(block,2)), false, 29).
holds(1, in_tower((block,3),(block,3)), false, 29).
holds(1, in_tower((block,3),(block,4)), false, 29).
holds(1, in_tower((block,3),(block,5)), false, 29).
holds(1, in_tower((block,3),(block,6)), false, 29).
holds(1, in_tower((block,3),(block,7)), false, 29).
holds(1, in_tower((block,3),(block,8)), false, 29).
holds(1, in_tower((block,3),(block,9)), false, 29).
holds(1, in_tower((block,4),(block,1)), false, 29).
holds(1, in_tower((block,4),(block,2)), false, 29).
holds(1, in_tower((block,4),(block,3)), false, 29).
holds(1, in_tower((block,4),(block,4)), false, 29).
holds(1, in_tower((block,4),(block,5)), false, 29).
holds(1, in_tower((block,4),(block,6)), false, 29).
holds(1, in_tower((block,4),(block,7)), false, 29).
holds(1, in_tower((block,4),(block,8)), false, 29).
holds(1, in_tower((block,4),(block,9)), false, 29).
holds(1, in_tower((block,5),(block,1)), false, 29).
holds(1, in_tower((block,5),(block,2)), false, 29).
holds(1, in_tower((block,5),(block,3)), false, 29).
holds(1, in_tower((block,5),(block,4)), false, 29).
holds(1, in_tower((block,5),(block,5)), false, 29).
holds(1, in_tower((block,5),(block,6)), false, 29).
holds(1, in_tower((block,5),(block,7)), false, 29).
holds(1, in_tower((block,5),(block,8)), false, 29).
holds(1, in_tower((block,5),(block,9)), false, 29).
holds(1, in_tower((block,6),(block,1)), false, 29).
holds(1, in_tower((block,6),(block,2)), false, 29).
holds(1, in_tower((block,6),(block,3)), false, 29).
holds(1, in_tower((block,6),(block,4)), false, 29).
holds(1, in_tower((block,6),(block,5)), false, 29).
holds(1, in_tower((block,6),(block,6)), false, 29).
holds(1, in_tower((block,6),(block,7)), false, 29).
holds(1, in_tower((block,6),(block,8)), false, 29).
holds(1, in_tower((block,6),(block,9)), false, 29).
holds(1, in_tower((block,7),(block,1)), false, 29).
holds(1, in_tower((block,7),(block,2)), false, 29).
holds(1, in_tower((block,7),(block,3)), false, 29).
holds(1, in_tower((block,7),(block,4)), false, 29).
holds(1, in_tower((block,7),(block,5)), false, 29).
holds(1, in_tower((block,7),(block,6)), false, 29).
holds(1, in_tower((block,7),(block,7)), true, 29).
holds(1, in_tower((block,7),(block,8)), false, 29).
holds(1, in_tower((block,7),(block,9)), false, 29).
holds(1, in_tower((block,8),(block,1)), false, 29).
holds(1, in_tower((block,8),(block,2)), false, 29).
holds(1, in_tower((block,8),(block,3)), false, 29).
holds(1, in_tower((block,8),(block,4)), false, 29).
holds(1, in_tower((block,8),(block,5)), false, 29).
holds(1, in_tower((block,8),(block,6)), false, 29).
holds(1, in_tower((block,8),(block,7)), false, 29).
holds(1, in_tower((block,8),(block,8)), true, 29).
holds(1, in_tower((block,8),(block,9)), false, 29).
holds(1, in_tower((block,9),(block,1)), false, 29).
holds(1, in_tower((block,9),(block,2)), false, 29).
holds(1, in_tower((block,9),(block,3)), false, 29).
holds(1, in_tower((block,9),(block,4)), false, 29).
holds(1, in_tower((block,9),(block,5)), false, 29).
holds(1, in_tower((block,9),(block,6)), false, 29).
holds(1, in_tower((block,9),(block,7)), false, 29).
holds(1, in_tower((block,9),(block,8)), false, 29).
holds(1, in_tower((block,9),(block,9)), true, 29).
holds(1, on((block,1)), puzzle_room_table_left, 29).
holds(1, on((block,2)), puzzle_room_table_right, 29).
holds(1, on((block,3)), (block,1), 29).
holds(1, on((block,4)), nothing, 29).
holds(1, on((block,5)), nothing, 29).
holds(1, on((block,6)), nothing, 29).
holds(1, on((block,7)), puzzle_room_table_middle, 29).
holds(1, on((block,8)), puzzle_room_table_middle, 29).
holds(1, on((block,9)), puzzle_room_table_middle, 29).
holds(1, tower_base((block,1)), true, 29).
holds(1, tower_base((block,2)), true, 29).
holds(1, tower_base((block,3)), false, 29).
holds(1, tower_base((block,4)), false, 29).
holds(1, tower_base((block,5)), false, 29).
holds(1, tower_base((block,6)), false, 29).
holds(1, tower_base((block,7)), true, 29).
holds(1, tower_base((block,8)), true, 29).
holds(1, tower_base((block,9)), true, 29).
holds(1, unordered_tower((block,1)), true, 29).
holds(1, unordered_tower((block,2)), false, 29).
holds(1, unordered_tower((block,3)), false, 29).
holds(1, unordered_tower((block,4)), false, 29).
holds(1, unordered_tower((block,5)), false, 29).
holds(1, unordered_tower((block,6)), false, 29).
holds(1, unordered_tower((block,7)), false, 29).
holds(1, unordered_tower((block,8)), false, 29).
holds(1, unordered_tower((block,9)), false, 29).
holds(2, complete(blue), false, 29).
holds(2, complete(red), false, 29).
holds(2, complete(yellow), false, 29).
holds(2, configuration(manipulator_arm_1), retracted, 29).
holds(2, configuration(manipulator_arm_2), retracted, 29).
holds(2, configuration(puzzle_room_door), open, 29).
holds(2, configuration(starting_room_door), closed, 29).
holds(2, configuration(store_room_door), open, 29).
holds(2, grasping(manipulator_arm_1), (block,6), 29).
holds(2, grasping(manipulator_arm_2), (block,4), 29).
holds(2, in((block,1)), puzzle_room, 29).
holds(2, in((block,2)), puzzle_room, 29).
holds(2, in((block,3)), puzzle_room, 29).
holds(2, in((block,4)), hallway, 29).
holds(2, in((block,5)), store_room, 29).
holds(2, in((block,6)), hallway, 29).
holds(2, in((block,7)), puzzle_room, 29).
holds(2, in((block,8)), puzzle_room, 29).
holds(2, in((block,9)), puzzle_room, 29).
holds(2, in(manipulator_arm_1), hallway, 29).
holds(2, in(manipulator_arm_2), hallway, 29).
holds(2, in(puzzle_room_table), puzzle_room, 29).
holds(2, in(talos), hallway, 29).
holds(2, in_tower((block,1),(block,1)), true, 29).
holds(2, in_tower((block,1),(block,2)), false, 29).
holds(2, in_tower((block,1),(block,3)), true, 29).
holds(2, in_tower((block,1),(block,4)), false, 29).
holds(2, in_tower((block,1),(block,5)), false, 29).
holds(2, in_tower((block,1),(block,6)), false, 29).
holds(2, in_tower((block,1),(block,7)), false, 29).
holds(2, in_tower((block,1),(block,8)), false, 29).
holds(2, in_tower((block,1),(block,9)), false, 29).
holds(2, in_tower((block,2),(block,1)), false, 29).
holds(2, in_tower((block,2),(block,2)), true, 29).
holds(2, in_tower((block,2),(block,3)), false, 29).
holds(2, in_tower((block,2),(block,4)), false, 29).
holds(2, in_tower((block,2),(block,5)), false, 29).
holds(2, in_tower((block,2),(block,6)), false, 29).
holds(2, in_tower((block,2),(block,7)), false, 29).
holds(2, in_tower((block,2),(block,8)), false, 29).
holds(2, in_tower((block,2),(block,9)), false, 29).
holds(2, in_tower((block,3),(block,1)), false, 29).
holds(2, in_tower((block,3),(block,2)), false, 29).
holds(2, in_tower((block,3),(block,3)), false, 29).
holds(2, in_tower((block,3),(block,4)), false, 29).
holds(2, in_tower((block,3),(block,5)), false, 29).
holds(2, in_tower((block,3),(block,6)), false, 29).
holds(2, in_tower((block,3),(block,7)), false, 29).
holds(2, in_tower((block,3),(block,8)), false, 29).
holds(2, in_tower((block,3),(block,9)), false, 29).
holds(2, in_tower((block,4),(block,1)), false, 29).
holds(2, in_tower((block,4),(block,2)), false, 29).
holds(2, in_tower((block,4),(block,3)), false, 29).
holds(2, in_tower((block,4),(block,4)), false, 29).
holds(2, in_tower((block,4),(block,5)), false, 29).
holds(2, in_tower((block,4),(block,6)), false, 29).
holds(2, in_tower((block,4),(block,7)), false, 29).
holds(2, in_tower((block,4),(block,8)), false, 29).
holds(2, in_tower((block,4),(block,9)), false, 29).
holds(2, in_tower((block,5),(block,1)), false, 29).
holds(2, in_tower((block,5),(block,2)), false, 29).
holds(2, in_tower((block,5),(block,3)), false, 29).
holds(2, in_tower((block,5),(block,4)), false, 29).
holds(2, in_tower((block,5),(block,5)), false, 29).
holds(2, in_tower((block,5),(block,6)), false, 29).
holds(2, in_tower((block,5),(block,7)), false, 29).
holds(2, in_tower((block,5),(block,8)), false, 29).
holds(2, in_tower((block,5),(block,9)), false, 29).
holds(2, in_tower((block,6),(block,1)), false, 29).
holds(2, in_tower((block,6),(block,2)), false, 29).
holds(2, in_tower((block,6),(block,3)), false, 29).
holds(2, in_tower((block,6),(block,4)), false, 29).
holds(2, in_tower((block,6),(block,5)), false, 29).
holds(2, in_tower((block,6),(block,6)), false, 29).
holds(2, in_tower((block,6),(block,7)), false, 29).
holds(2, in_tower((block,6),(block,8)), false, 29).
holds(2, in_tower((block,6),(block,9)), false, 29).
holds(2, in_tower((block,7),(block,1)), false, 29).
holds(2, in_tower((block,7),(block,2)), false, 29).
holds(2, in_tower((block,7),(block,3)), false, 29).
holds(2, in_tower((block,7),(block,4)), false, 29).
holds(2, in_tower((block,7),(block,5)), false, 29).
holds(2, in_tower((block,7),(block,6)), false, 29).
holds(2, in_tower((block,7),(block,7)), true, 29).
holds(2, in_tower((block,7),(block,8)), false, 29).
holds(2, in_tower((block,7),(block,9)), false, 29).
holds(2, in_tower((block,8),(block,1)), false, 29).
holds(2, in_tower((block,8),(block,2)), false, 29).
holds(2, in_tower((block,8),(block,3)), false, 29).
holds(2, in_tower((block,8),(block,4)), false, 29).
holds(2, in_tower((block,8),(block,5)), false, 29).
holds(2, in_tower((block,8),(block,6)), false, 29).
holds(2, in_tower((block,8),(block,7)), false, 29).
holds(2, in_tower((block,8),(block,8)), true, 29).
holds(2, in_tower((block,8),(block,9)), false, 29).
holds(2, in_tower((block,9),(block,1)), false, 29).
holds(2, in_tower((block,9),(block,2)), false, 29).
holds(2, in_tower((block,9),(block,3)), false, 29).
holds(2, in_tower((block,9),(block,4)), false, 29).
holds(2, in_tower((block,9),(block,5)), false, 29).
holds(2, in_tower((block,9),(block,6)), false, 29).
holds(2, in_tower((block,9),(block,7)), false, 29).
holds(2, in_tower((block,9),(block,8)), false, 29).
holds(2, in_tower((block,9),(block,9)), true, 29).
holds(2, on((block,1)), puzzle_room_table, 29).
holds(2, on((block,2)), puzzle_room_table, 29).
holds(2, on((block,3)), (block,1), 29).
holds(2, on((block,4)), nothing, 29).
holds(2, on((block,5)), nothing, 29).
holds(2, on((block,6)), nothing, 29).
holds(2, on((block,7)), puzzle_room_table, 29).
holds(2, on((block,8)), puzzle_room_table, 29).
holds(2, on((block,9)), puzzle_room_table, 29).
holds(2, tower_base((block,1)), true, 29).
holds(2, tower_base((block,2)), true, 29).
holds(2, tower_base((block,3)), false, 29).
holds(2, tower_base((block,4)), false, 29).
holds(2, tower_base((block,5)), false, 29).
holds(2, tower_base((block,6)), false, 29).
holds(2, tower_base((block,7)), true, 29).
holds(2, tower_base((block,8)), true, 29).
holds(2, tower_base((block,9)), true, 29).
holds(2, unordered_tower((block,1)), true, 29).
holds(2, unordered_tower((block,2)), false, 29).
holds(2, unordered_tower((block,3)), false, 29).
holds(2, unordered_tower((block,4)), false, 29).
holds(2, unordered_tower((block,5)), false, 29).
holds(2, unordered_tower((block,6)), false, 29).
holds(2, unordered_tower((block,7)), false, 29).
holds(2, unordered_tower((block,8)), false, 29).
holds(2, unordered_tower((block,9)), false, 29).

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, complete(yellow), false, false).
final_goal(1, complete(yellow), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, tower_base((block,7)), false, true).
final_goal(1, tower_base((block,7)), true, false).
final_goal(1, tower_base((block,8)), false, true).
final_goal(1, tower_base((block,8)), true, false).
final_goal(1, tower_base((block,9)), false, false).
final_goal(1, tower_base((block,9)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(1, unordered_tower((block,7)), false, true).
final_goal(1, unordered_tower((block,7)), true, false).
final_goal(1, unordered_tower((block,8)), false, true).
final_goal(1, unordered_tower((block,8)), true, false).
final_goal(1, unordered_tower((block,9)), false, true).
final_goal(1, unordered_tower((block,9)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, complete(yellow), false, false).
final_goal(2, complete(yellow), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, tower_base((block,7)), false, true).
final_goal(2, tower_base((block,7)), true, false).
final_goal(2, tower_base((block,8)), false, true).
final_goal(2, tower_base((block,8)), true, false).
final_goal(2, tower_base((block,9)), false, false).
final_goal(2, tower_base((block,9)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(2, unordered_tower((block,7)), false, true).
final_goal(2, unordered_tower((block,7)), true, false).
final_goal(2, unordered_tower((block,8)), false, true).
final_goal(2, unordered_tower((block,8)), true, false).
final_goal(2, unordered_tower((block,9)), false, true).
final_goal(2, unordered_tower((block,9)), true, false).

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,8)', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,8),(block,9))', 'F': 'on((block,8))', 'V': '(block,9)', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,8))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 34})

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 17 rules into program part base:

sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 19).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 21).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 22).
sub_goal(2, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 23).
sub_goal(2, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 24).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 25).
sub_goal(2, talos, move(hallway), in(talos), hallway, 26).
sub_goal(2, talos, move(store_room), in(talos), store_room, 27).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 28).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 29).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 30).
sub_goal(2, talos, move(hallway), in(talos), hallway, 31).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 32).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 33).
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 34).

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000016E4A2C2B80>]
	incrementor = SolveIncrementor(step_start=29, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=None, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 29), range_=None), IncPart(name='plan_module', args=('#inc', 29, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 29, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 29, 18, 34, 'sequential', 'true'), range_=None)]

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1259 rules

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006437800000014704s

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.040328s.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008998s with result Satisfiable.

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016E52EF9860>

[12-11-2021_15-22-10] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))
	('level', 1)
	('start_step', 29)
	('last_sgoals', 34)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016E52EF9860>)

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 30)', truth=True, inc_range=None)

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 29). %* None *%
#program plan_module(#inc, 29, false, false). %* None *%
#program optimisation_module(#inc, 29, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 29, 18, 34, sequential, true). %* None *%

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     28 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(29), Number(29)]), ('plan_module', [Number(29), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(30), Number(29)]), ('plan_module', [Number(30), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289263s.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(18, 30)', truth=True, inc_range=None), conversion = current_last_sgoals(18,30).

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(18, 30)', truth=True, inc_range=None), conversion = current_last_sgoals(18,30).

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036328s with result Unsatisfiable.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3255901000000563, Incremental time limit = None
Running cumulative time = 0.3255901000000563, Cumulative time limit = 3600
Used memory = (RSS = 247.457031Mb, VMS = 245.156250Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=28, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.28926250000000664, solving_time=0.03632760000004964, total_time=0.3255901000000563, memory=Memory(rss=247.45703125, vms=245.15625), step_range=range(29, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28926250000000664, solving_time=0.03632760000004964, total_time=0.3255901000000563, memory=Memory(rss=247.45703125, vms=245.15625), step_range=range(29, 31), clingo_stats={'problem': {'lp': {'atoms': 21103.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 75380.0, 'bodies_tr': 75380.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1460.0, 'rules': 147835.0, 'rules_normal': 146968.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 147817.0, 'rules_tr_normal': 146968.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36042.0, 'eqs_atom': 11912.0, 'eqs_body': 2942.0, 'eqs_other': 21188.0}, 'lpStep': {'atoms': 11302.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71318.0, 'bodies_tr': 71318.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1460.0, 'rules': 136639.0, 'rules_normal': 135772.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 136621.0, 'rules_tr_normal': 135772.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 15984.0, 'eqs_atom': 4396.0, 'eqs_body': 635.0, 'eqs_other': 10953.0}, 'generator': {'vars': 6001.0, 'vars_eliminated': 0.0, 'vars_frozen': 3404.0, 'constraints': 61.0, 'constraints_binary': 2470.0, 'constraints_ternary': 371.0, 'acyc_edges': 0.0, 'complexity': 2932.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 5.0, 'integrated': 0.0, 'lemmas': 11.0, 'lits_learnt': 13.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 273.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 12.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3250999450683594, 'cpu': 0.3125, 'solve': 0.001964569091796875, 'unsat': 0.001964569091796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3819141387939453, 'cpu': 0.375, 'solve': 0.0069522857666015625, 'unsat': 0.001964569091796875, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 1.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 5.0, 'integrated': 0.0, 'lemmas': 11.0, 'lits_learnt': 13.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 281.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 1.0, 'lits_loop': 12.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 0.0, 'levels': 1.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(29)]), ('plan_module', [Number(31), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.203725s.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015980s with result Unsatisfiable.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2197052999999869, Incremental time limit = None
Running cumulative time = 0.5452954000000432, Cumulative time limit = 3600
Used memory = (RSS = 252.199219Mb, VMS = 250.960938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=30, end_step=31, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.4929879000000028, solving_time=0.05230750000004036, total_time=0.5452954000000432, memory=Memory(rss=252.19921875, vms=250.9609375), step_range=range(29, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20372539999999617, solving_time=0.01597989999999072, total_time=0.2197052999999869, memory=Memory(rss=252.19921875, vms=250.9609375), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 24679.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 136557.0, 'bodies_tr': 136557.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 735.0, 'count_bodies_tr': 735.0, 'sccs': 65.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1646.0, 'rules': 266179.0, 'rules_normal': 264960.0, 'rules_choice': 1181.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 266143.0, 'rules_tr_normal': 264960.0, 'rules_tr_choice': 1181.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43030.0, 'eqs_atom': 13702.0, 'eqs_body': 3763.0, 'eqs_other': 25565.0}, 'lpStep': {'atoms': 3576.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61177.0, 'bodies_tr': 61177.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 118344.0, 'rules_normal': 117992.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 118326.0, 'rules_tr_normal': 117992.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6988.0, 'eqs_atom': 1790.0, 'eqs_body': 821.0, 'eqs_other': 4377.0}, 'generator': {'vars': 6394.0, 'vars_eliminated': 0.0, 'vars_frozen': 3693.0, 'constraints': 196.0, 'constraints_binary': 4044.0, 'constraints_ternary': 591.0, 'acyc_edges': 0.0, 'complexity': 4891.0}}, 'solving': {'solvers': {'choices': 2.0, 'conflicts': 6.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 14.0, 'integrated': 19.0, 'lemmas': 19.0, 'lits_learnt': 59.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 406.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 10.0, 'lemmas_other': 7.0, 'lits_conflict': 2.0, 'lits_loop': 44.0, 'lits_other': 13.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 118.0, 'levels_bounded': 116.0, 'max': 59.0, 'max_executed': 1.0, 'max_bounded': 58.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2208099365234375, 'cpu': 0.25, 'solve': 0.0029621124267578125, 'unsat': 0.0029621124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6027240753173828, 'cpu': 0.625, 'solve': 0.009914398193359375, 'unsat': 0.0049266815185546875, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2.0, 'conflicts': 7.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 19.0, 'integrated': 19.0, 'lemmas': 30.0, 'lits_learnt': 72.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 687.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 20.0, 'lemmas_other': 7.0, 'lits_conflict': 3.0, 'lits_loop': 56.0, 'lits_other': 13.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 2.0, 'levels': 119.0, 'levels_bounded': 116.0, 'max': 59.0, 'max_executed': 1.0, 'max_bounded': 58.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(29)]), ('plan_module', [Number(32), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.214694s.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026328s with result Satisfiable.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2410220999999524, Incremental time limit = None
Running cumulative time = 0.7863174999999956, Cumulative time limit = 3600
Used memory = (RSS = 255.433594Mb, VMS = 253.656250Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.707682s, Solving = 0.078635s, Total = 0.786317s, Memory = (RSS = 255.433594Mb, VMS = 253.656250Mb)), Calls = 3
Final Model :: Total atoms = 8708, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7076820999999995, solving_time=0.07863539999999603, total_time=0.7863174999999956, memory=Memory(rss=255.43359375, vms=253.65625), step_range=range(29, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21469419999999673, solving_time=0.026327899999955662, total_time=0.2410220999999524, memory=Memory(rss=255.43359375, vms=253.65625), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 29842.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 198295.0, 'bodies_tr': 198295.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 88.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1923.0, 'rules': 386466.0, 'rules_normal': 384895.0, 'rules_choice': 1514.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 54.0, 'rules_tr': 386413.0, 'rules_tr_normal': 384895.0, 'rules_tr_choice': 1514.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 53832.0, 'eqs_atom': 16671.0, 'eqs_body': 4482.0, 'eqs_other': 32679.0}, 'lpStep': {'atoms': 5163.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61738.0, 'bodies_tr': 61738.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 277.0, 'rules': 120287.0, 'rules_normal': 119935.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 120270.0, 'rules_tr_normal': 119935.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 10802.0, 'eqs_atom': 2969.0, 'eqs_body': 719.0, 'eqs_other': 7114.0}, 'generator': {'vars': 7155.0, 'vars_eliminated': 0.0, 'vars_frozen': 4248.0, 'constraints': 377.0, 'constraints_binary': 9432.0, 'constraints_ternary': 1154.0, 'acyc_edges': 0.0, 'complexity': 11065.0}}, 'solving': {'solvers': {'choices': 208.0, 'conflicts': 54.0, 'conflicts_analyzed': 54.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 101.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 64.0, 'distributed_sum_lbd': 85.0, 'integrated': 197.0, 'lemmas': 216.0, 'lits_learnt': 751.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.0, 'integrated_imps': 96.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 616.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 53.0, 'lemmas_loop': 44.0, 'lemmas_other': 119.0, 'lits_conflict': 116.0, 'lits_loop': 255.0, 'lits_other': 380.0, 'jumps': {'jumps': 54.0, 'jumps_bounded': 7.0, 'levels': 604.0, 'levels_bounded': 539.0, 'max': 78.0, 'max_executed': 78.0, 'max_bounded': 77.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.24235153198242188, 'cpu': 0.234375, 'solve': 0.009960174560546875, 'unsat': 0.0, 'sat': 0.001979827880859375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8450756072998047, 'cpu': 0.859375, 'solve': 0.01987457275390625, 'unsat': 0.0049266815185546875, 'sat': 0.0039730072021484375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 210.0, 'conflicts': 61.0, 'conflicts_analyzed': 57.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 7.0, 'models': 2.0, 'models_level': 102.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 75.0, 'distributed_sum_lbd': 104.0, 'integrated': 216.0, 'lemmas': 246.0, 'lits_learnt': 823.0, 'lemmas_binary': 22.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.0, 'integrated_imps': 97.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 1303.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 56.0, 'lemmas_loop': 64.0, 'lemmas_other': 126.0, 'lits_conflict': 119.0, 'lits_loop': 311.0, 'lits_other': 393.0, 'jumps': {'jumps': 57.0, 'jumps_bounded': 9.0, 'levels': 723.0, 'levels_bounded': 655.0, 'max': 78.0, 'max_executed': 78.0, 'max_bounded': 77.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32}

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 2 ( 11.76% solved)

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 32)', truth=True, inc_range=None)

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 32]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 19)

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(29)]), ('plan_module', [Number(33), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.204080s.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(19, 32)', truth=True, inc_range=None), conversion = current_last_sgoals(19,32).

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027552s with result Satisfiable.

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.23163150000004862, Incremental time limit = None
Running cumulative time = 1.0179490000000442, Cumulative time limit = 3600
Used memory = (RSS = 257.464844Mb, VMS = 255.222656Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.911762s, Solving = 0.106187s, Total = 1.017949s, Memory = (RSS = 257.464844Mb, VMS = 255.222656Mb)), Calls = 4
Final Model :: Total atoms = 9438, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=32, end_step=33, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.9117620000000102, solving_time=0.106187000000034, total_time=1.0179490000000442, memory=Memory(rss=257.46484375, vms=255.22265625), step_range=range(29, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20407990000001064, solving_time=0.02755160000003798, total_time=0.23163150000004862, memory=Memory(rss=257.46484375, vms=255.22265625), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 35073.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 260004.0, 'bodies_tr': 260004.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1395.0, 'count_bodies_tr': 1395.0, 'sccs': 101.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2150.0, 'rules': 506869.0, 'rules_normal': 504946.0, 'rules_choice': 1847.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 506798.0, 'rules_tr_normal': 504946.0, 'rules_tr_choice': 1847.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 64782.0, 'eqs_atom': 19773.0, 'eqs_body': 5373.0, 'eqs_other': 39636.0}, 'lpStep': {'atoms': 5231.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61709.0, 'bodies_tr': 61709.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 227.0, 'rules': 120403.0, 'rules_normal': 120051.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 120385.0, 'rules_tr_normal': 120051.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10950.0, 'eqs_atom': 3102.0, 'eqs_body': 891.0, 'eqs_other': 6957.0}, 'generator': {'vars': 7689.0, 'vars_eliminated': 0.0, 'vars_frozen': 4632.0, 'constraints': 470.0, 'constraints_binary': 9229.0, 'constraints_ternary': 985.0, 'acyc_edges': 0.0, 'complexity': 11065.0}}, 'solving': {'solvers': {'choices': 210.0, 'conflicts': 20.0, 'conflicts_analyzed': 20.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 126.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 22.0, 'distributed_sum_lbd': 24.0, 'integrated': 14.0, 'lemmas': 85.0, 'lits_learnt': 584.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 768.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 63.0, 'lemmas_other': 2.0, 'lits_conflict': 20.0, 'lits_loop': 560.0, 'lits_other': 4.0, 'jumps': {'jumps': 20.0, 'jumps_bounded': 0.0, 'levels': 20.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.23337364196777344, 'cpu': 0.25, 'solve': 0.0109710693359375, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0784492492675781, 'cpu': 1.109375, 'solve': 0.03084564208984375, 'unsat': 0.0049266815185546875, 'sat': 0.0059680938720703125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 420.0, 'conflicts': 81.0, 'conflicts_analyzed': 77.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 7.0, 'models': 3.0, 'models_level': 228.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 97.0, 'distributed_sum_lbd': 128.0, 'integrated': 230.0, 'lemmas': 331.0, 'lits_learnt': 1407.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.03125, 'integrated_imps': 97.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 2071.0, 'guiding_paths': 38.0, 'splits': 0.0, 'lemmas_conflict': 76.0, 'lemmas_loop': 127.0, 'lemmas_other': 128.0, 'lits_conflict': 139.0, 'lits_loop': 871.0, 'lits_other': 397.0, 'jumps': {'jumps': 77.0, 'jumps_bounded': 9.0, 'levels': 743.0, 'levels_bounded': 655.0, 'max': 78.0, 'max_executed': 78.0, 'max_bounded': 77.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33}

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 3 ( 17.65% solved)

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 33)', truth=True, inc_range=None)

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 33]:
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20)

[12-11-2021_15-22-11] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(29)]), ('plan_module', [Number(34), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.230168s.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 34: original = External(symbol='current_last_sgoals(20, 33)', truth=True, inc_range=None), conversion = current_last_sgoals(20,33).

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023670s with result Unsatisfiable.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25383779999998524, Incremental time limit = None
Running cumulative time = 1.2717868000000294, Cumulative time limit = 3600
Used memory = (RSS = 260.347656Mb, VMS = 257.632812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=33, end_step=34, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.141930000000002, solving_time=0.1298568000000273, total_time=1.2717868000000294, memory=Memory(rss=260.34765625, vms=257.6328125), step_range=range(29, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23016799999999193, solving_time=0.023669799999993302, total_time=0.25383779999998524, memory=Memory(rss=260.34765625, vms=257.6328125), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 40288.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 322210.0, 'bodies_tr': 322210.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1725.0, 'count_bodies_tr': 1725.0, 'sccs': 124.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2434.0, 'rules': 628153.0, 'rules_normal': 625878.0, 'rules_choice': 2180.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 90.0, 'rules_tr': 628066.0, 'rules_tr_normal': 625878.0, 'rules_tr_choice': 2180.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 3.0, 'eqs': 76906.0, 'eqs_atom': 22990.0, 'eqs_body': 6121.0, 'eqs_other': 47795.0}, 'lpStep': {'atoms': 5215.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 62206.0, 'bodies_tr': 62206.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 284.0, 'rules': 121284.0, 'rules_normal': 120932.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 121268.0, 'rules_tr_normal': 120932.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 12124.0, 'eqs_atom': 3217.0, 'eqs_body': 748.0, 'eqs_other': 8159.0}, 'generator': {'vars': 8664.0, 'vars_eliminated': 0.0, 'vars_frozen': 5304.0, 'constraints': 685.0, 'constraints_binary': 18364.0, 'constraints_ternary': 1855.0, 'acyc_edges': 0.0, 'complexity': 21102.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 805.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.255340576171875, 'cpu': 0.265625, 'solve': 0.003017425537109375, 'unsat': 0.003017425537109375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3337898254394531, 'cpu': 1.375, 'solve': 0.033863067626953125, 'unsat': 0.007944107055664062, 'sat': 0.0059680938720703125}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 420.0, 'conflicts': 89.0, 'conflicts_analyzed': 77.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 7.0, 'models': 3.0, 'models_level': 228.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 97.0, 'distributed_sum_lbd': 128.0, 'integrated': 230.0, 'lemmas': 331.0, 'lits_learnt': 1407.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.0625, 'integrated_imps': 97.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 2876.0, 'guiding_paths': 45.0, 'splits': 0.0, 'lemmas_conflict': 76.0, 'lemmas_loop': 127.0, 'lemmas_other': 128.0, 'lits_conflict': 139.0, 'lits_loop': 871.0, 'lits_other': 397.0, 'jumps': {'jumps': 77.0, 'jumps_bounded': 9.0, 'levels': 743.0, 'levels_bounded': 655.0, 'max': 78.0, 'max_executed': 78.0, 'max_bounded': 77.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(29)]), ('plan_module', [Number(35), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.221185s.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043278s with result Satisfiable.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2644631000000004, Incremental time limit = None
Running cumulative time = 1.5362499000000298, Cumulative time limit = 3600
Used memory = (RSS = 268.738281Mb, VMS = 267.585938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.363115s, Solving = 0.173135s, Total = 1.536250s, Memory = (RSS = 268.738281Mb, VMS = 267.585938Mb)), Calls = 6
Final Model :: Total atoms = 10895, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=34, end_step=35, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.363115300000004, solving_time=0.17313460000002578, total_time=1.5362499000000298, memory=Memory(rss=268.73828125, vms=267.5859375), step_range=range(29, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22118530000000192, solving_time=0.04327779999999848, total_time=0.2644631000000004, memory=Memory(rss=268.73828125, vms=267.5859375), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 45731.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 385298.0, 'bodies_tr': 385298.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2055.0, 'count_bodies_tr': 2055.0, 'sccs': 153.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2819.0, 'rules': 750585.0, 'rules_normal': 747958.0, 'rules_choice': 2513.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 750486.0, 'rules_tr_normal': 747958.0, 'rules_tr_choice': 2513.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 9.0, 'eqs': 92228.0, 'eqs_atom': 26285.0, 'eqs_body': 6935.0, 'eqs_other': 59008.0}, 'lpStep': {'atoms': 5443.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 63088.0, 'bodies_tr': 63088.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 29.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 385.0, 'rules': 122432.0, 'rules_normal': 122080.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 122420.0, 'rules_tr_normal': 122080.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 15322.0, 'eqs_atom': 3295.0, 'eqs_body': 814.0, 'eqs_other': 11213.0}, 'generator': {'vars': 10322.0, 'vars_eliminated': 0.0, 'vars_frozen': 6306.0, 'constraints': 1041.0, 'constraints_binary': 37543.0, 'constraints_ternary': 3292.0, 'acyc_edges': 0.0, 'complexity': 42136.0}}, 'solving': {'solvers': {'choices': 339.0, 'conflicts': 79.0, 'conflicts_analyzed': 79.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 33.0, 'models': 1.0, 'models_level': 177.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 85.0, 'distributed_sum_lbd': 106.0, 'integrated': 188.0, 'lemmas': 318.0, 'lits_learnt': 837.0, 'lemmas_binary': 21.0, 'lemmas_ternary': 107.0, 'cpu_time': 0.03125, 'integrated_imps': 88.0, 'integrated_jumps': 4.0, 'guiding_paths_lits': 938.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 69.0, 'lemmas_loop': 61.0, 'lemmas_other': 188.0, 'lits_conflict': 74.0, 'lits_loop': 377.0, 'lits_other': 386.0, 'jumps': {'jumps': 79.0, 'jumps_bounded': 14.0, 'levels': 1961.0, 'levels_bounded': 1876.0, 'max': 136.0, 'max_executed': 136.0, 'max_bounded': 134.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.26595115661621094, 'cpu': 0.28125, 'solve': 0.01493072509765625, 'unsat': 0.0, 'sat': 0.0039615631103515625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.599740982055664, 'cpu': 1.65625, 'solve': 0.048793792724609375, 'unsat': 0.007944107055664062, 'sat': 0.009929656982421875}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 759.0, 'conflicts': 168.0, 'conflicts_analyzed': 156.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 40.0, 'models': 4.0, 'models_level': 405.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 182.0, 'distributed_sum_lbd': 234.0, 'integrated': 418.0, 'lemmas': 649.0, 'lits_learnt': 2244.0, 'lemmas_binary': 47.0, 'lemmas_ternary': 128.0, 'cpu_time': 0.09375, 'integrated_imps': 185.0, 'integrated_jumps': 17.0, 'guiding_paths_lits': 3814.0, 'guiding_paths': 52.0, 'splits': 0.0, 'lemmas_conflict': 145.0, 'lemmas_loop': 188.0, 'lemmas_other': 316.0, 'lits_conflict': 213.0, 'lits_loop': 1248.0, 'lits_other': 783.0, 'jumps': {'jumps': 156.0, 'jumps_bounded': 23.0, 'levels': 2704.0, 'levels_bounded': 2531.0, 'max': 136.0, 'max_executed': 136.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35}

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 4 ( 23.53% solved)

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 35)', truth=True, inc_range=None)

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 35]:
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 21)

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 35:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(29)]), ('plan_module', [Number(36), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.226426s.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 36: original = External(symbol='current_last_sgoals(21, 35)', truth=True, inc_range=None), conversion = current_last_sgoals(21,35).

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049154s with result Satisfiable.

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.27558010000007016, Incremental time limit = None
Running cumulative time = 1.8118300000001, Cumulative time limit = 3600
Used memory = (RSS = 271.800781Mb, VMS = 270.054688Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.589542s, Solving = 0.222288s, Total = 1.811830s, Memory = (RSS = 271.800781Mb, VMS = 270.054688Mb)), Calls = 7
Final Model :: Total atoms = 11626, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=35, end_step=36, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.5895417000000407, solving_time=0.22228830000005928, total_time=1.8118300000001, memory=Memory(rss=271.80078125, vms=270.0546875), step_range=range(29, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.22642640000003667, solving_time=0.049153700000033496, total_time=0.27558010000007016, memory=Memory(rss=271.80078125, vms=270.0546875), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 51236.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 448652.0, 'bodies_tr': 448652.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2385.0, 'count_bodies_tr': 2385.0, 'sccs': 182.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3209.0, 'rules': 873420.0, 'rules_normal': 870441.0, 'rules_choice': 2846.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 126.0, 'rules_tr': 873309.0, 'rules_tr_normal': 870441.0, 'rules_tr_choice': 2846.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 15.0, 'eqs': 108061.0, 'eqs_atom': 29599.0, 'eqs_body': 7762.0, 'eqs_other': 70700.0}, 'lpStep': {'atoms': 5505.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 63354.0, 'bodies_tr': 63354.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 29.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 390.0, 'rules': 122835.0, 'rules_normal': 122483.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 122823.0, 'rules_tr_normal': 122483.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 15833.0, 'eqs_atom': 3314.0, 'eqs_body': 827.0, 'eqs_other': 11692.0}, 'generator': {'vars': 12019.0, 'vars_eliminated': 0.0, 'vars_frozen': 7320.0, 'constraints': 1363.0, 'constraints_binary': 49280.0, 'constraints_ternary': 4465.0, 'acyc_edges': 0.0, 'complexity': 55422.0}}, 'solving': {'solvers': {'choices': 343.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 202.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 0.0, 'lemmas': 105.0, 'lits_learnt': 776.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1071.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 105.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 776.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.27729225158691406, 'cpu': 0.265625, 'solve': 0.019975662231445312, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8770332336425781, 'cpu': 1.921875, 'solve': 0.06876945495605469, 'unsat': 0.007944107055664062, 'sat': 0.012922286987304688}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1102.0, 'conflicts': 168.0, 'conflicts_analyzed': 156.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 47.0, 'models': 5.0, 'models_level': 607.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 188.0, 'distributed_sum_lbd': 246.0, 'integrated': 418.0, 'lemmas': 754.0, 'lits_learnt': 3020.0, 'lemmas_binary': 47.0, 'lemmas_ternary': 134.0, 'cpu_time': 0.125, 'integrated_imps': 185.0, 'integrated_jumps': 17.0, 'guiding_paths_lits': 4885.0, 'guiding_paths': 59.0, 'splits': 0.0, 'lemmas_conflict': 145.0, 'lemmas_loop': 293.0, 'lemmas_other': 316.0, 'lits_conflict': 213.0, 'lits_loop': 2024.0, 'lits_other': 783.0, 'jumps': {'jumps': 156.0, 'jumps_bounded': 23.0, 'levels': 2704.0, 'levels_bounded': 2531.0, 'max': 136.0, 'max_executed': 136.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36}

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 5 ( 29.41% solved)

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 36)', truth=True, inc_range=None)

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 22, step = 36]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), (block,8), 22)

[12-11-2021_15-22-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 36:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(29)]), ('plan_module', [Number(37), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.227896s.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 37: original = External(symbol='current_last_sgoals(22, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(22,36).

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048935s with result Unsatisfiable.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.27683129999996936, Incremental time limit = None
Running cumulative time = 2.0886613000000693, Cumulative time limit = 3600
Used memory = (RSS = 281.324219Mb, VMS = 280.882812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=36, end_step=37, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.8174376000000052, solving_time=0.2712237000000641, total_time=2.0886613000000693, memory=Memory(rss=281.32421875, vms=280.8828125), step_range=range(29, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2278958999999645, solving_time=0.04893540000000485, total_time=0.27683129999996936, memory=Memory(rss=281.32421875, vms=280.8828125), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 56752.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 513457.0, 'bodies_tr': 513457.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2715.0, 'count_bodies_tr': 2715.0, 'sccs': 213.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4469.0, 'rules': 997843.0, 'rules_normal': 994512.0, 'rules_choice': 3179.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 997730.0, 'rules_tr_normal': 994512.0, 'rules_tr_choice': 3179.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 31.0, 'eqs': 121499.0, 'eqs_atom': 32558.0, 'eqs_body': 8021.0, 'eqs_other': 80920.0}, 'lpStep': {'atoms': 5516.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 64805.0, 'bodies_tr': 64805.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1260.0, 'rules': 124423.0, 'rules_normal': 124071.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 124421.0, 'rules_tr_normal': 124071.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 13438.0, 'eqs_atom': 2959.0, 'eqs_body': 259.0, 'eqs_other': 10220.0}, 'generator': {'vars': 16010.0, 'vars_eliminated': 0.0, 'vars_frozen': 9771.0, 'constraints': 2423.0, 'constraints_binary': 104384.0, 'constraints_ternary': 8991.0, 'acyc_edges': 0.0, 'complexity': 116214.0}}, 'solving': {'solvers': {'choices': 27.0, 'conflicts': 27.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 18.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 49.0, 'integrated': 35.0, 'lemmas': 65.0, 'lits_learnt': 649.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.03125, 'integrated_imps': 16.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1204.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 25.0, 'lemmas_other': 16.0, 'lits_conflict': 181.0, 'lits_loop': 350.0, 'lits_other': 118.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 7.0, 'levels': 33.0, 'levels_bounded': 7.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.27960205078125, 'cpu': 0.296875, 'solve': 0.0109710693359375, 'unsat': 0.0109710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.156635284423828, 'cpu': 2.21875, 'solve': 0.07974052429199219, 'unsat': 0.018915176391601562, 'sat': 0.012922286987304688}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1129.0, 'conflicts': 195.0, 'conflicts_analyzed': 180.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 65.0, 'models': 5.0, 'models_level': 607.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 212.0, 'distributed_sum_lbd': 295.0, 'integrated': 453.0, 'lemmas': 819.0, 'lits_learnt': 3669.0, 'lemmas_binary': 53.0, 'lemmas_ternary': 135.0, 'cpu_time': 0.15625, 'integrated_imps': 201.0, 'integrated_jumps': 17.0, 'guiding_paths_lits': 6089.0, 'guiding_paths': 66.0, 'splits': 0.0, 'lemmas_conflict': 169.0, 'lemmas_loop': 318.0, 'lemmas_other': 332.0, 'lits_conflict': 394.0, 'lits_loop': 2374.0, 'lits_other': 901.0, 'jumps': {'jumps': 180.0, 'jumps_bounded': 30.0, 'levels': 2737.0, 'levels_bounded': 2538.0, 'max': 136.0, 'max_executed': 136.0, 'max_bounded': 134.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(29)]), ('plan_module', [Number(38), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.233423s.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078387s with result Satisfiable.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.31180959999994684, Incremental time limit = None
Running cumulative time = 2.400470900000016, Cumulative time limit = 3600
Used memory = (RSS = 295.203125Mb, VMS = 299.363281Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.050860s, Solving = 0.349611s, Total = 2.400471s, Memory = (RSS = 295.203125Mb, VMS = 299.363281Mb)), Calls = 9
Final Model :: Total atoms = 13089, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.050860299999954, solving_time=0.3496106000000623, total_time=2.400470900000016, memory=Memory(rss=295.203125, vms=299.36328125), step_range=range(29, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2334226999999487, solving_time=0.07838689999999815, total_time=0.31180959999994684, memory=Memory(rss=295.203125, vms=299.36328125), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 63147.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 580179.0, 'bodies_tr': 580179.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3045.0, 'count_bodies_tr': 3045.0, 'sccs': 244.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5736.0, 'rules': 1124995.0, 'rules_normal': 1121312.0, 'rules_choice': 3512.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 162.0, 'rules_tr': 1124880.0, 'rules_tr_normal': 1121312.0, 'rules_tr_choice': 3512.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 47.0, 'eqs': 142903.0, 'eqs_atom': 36303.0, 'eqs_body': 8281.0, 'eqs_other': 98319.0}, 'lpStep': {'atoms': 6395.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 66722.0, 'bodies_tr': 66722.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1267.0, 'rules': 127152.0, 'rules_normal': 126800.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 127150.0, 'rules_tr_normal': 126800.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 21404.0, 'eqs_atom': 3745.0, 'eqs_body': 260.0, 'eqs_other': 17399.0}, 'generator': {'vars': 20298.0, 'vars_eliminated': 0.0, 'vars_frozen': 12306.0, 'constraints': 3554.0, 'constraints_binary': 165216.0, 'constraints_ternary': 15041.0, 'acyc_edges': 0.0, 'complexity': 184329.0}}, 'solving': {'solvers': {'choices': 446.0, 'conflicts': 17.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 4.0, 'extra': {'domain_choices': 26.0, 'models': 1.0, 'models_level': 252.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 36.0, 'integrated': 102.0, 'lemmas': 277.0, 'lits_learnt': 2709.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 61.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 1337.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 158.0, 'lemmas_other': 102.0, 'lits_conflict': 137.0, 'lits_loop': 1750.0, 'lits_other': 822.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 10.0, 'levels': 977.0, 'levels_bounded': 960.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.31415557861328125, 'cpu': 0.328125, 'solve': 0.024898529052734375, 'unsat': 0.0, 'sat': 0.007946014404296875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.4707908630371094, 'cpu': 2.546875, 'solve': 0.10463905334472656, 'unsat': 0.018915176391601562, 'sat': 0.020868301391601562}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1575.0, 'conflicts': 212.0, 'conflicts_analyzed': 197.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 91.0, 'models': 6.0, 'models_level': 859.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 229.0, 'distributed_sum_lbd': 331.0, 'integrated': 555.0, 'lemmas': 1096.0, 'lits_learnt': 6378.0, 'lemmas_binary': 53.0, 'lemmas_ternary': 135.0, 'cpu_time': 0.1875, 'integrated_imps': 262.0, 'integrated_jumps': 19.0, 'guiding_paths_lits': 7426.0, 'guiding_paths': 73.0, 'splits': 0.0, 'lemmas_conflict': 186.0, 'lemmas_loop': 476.0, 'lemmas_other': 434.0, 'lits_conflict': 531.0, 'lits_loop': 4124.0, 'lits_other': 1723.0, 'jumps': {'jumps': 197.0, 'jumps_bounded': 40.0, 'levels': 3714.0, 'levels_bounded': 3498.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38}

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 6 ( 35.29% solved)

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 38)', truth=True, inc_range=None)

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 38]:
sub_goal(2, talos, put(manipulator_arm_1,(block,8),(block,9)), on((block,8)), (block,9), 23)

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(29)]), ('plan_module', [Number(39), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.253275s.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(23, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(23,38).

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067456s with result Satisfiable.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.32073109999998906, Incremental time limit = None
Running cumulative time = 2.7212020000000052, Cumulative time limit = 3600
Used memory = (RSS = 302.855469Mb, VMS = 304.902344Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.304136s, Solving = 0.417066s, Total = 2.721202s, Memory = (RSS = 302.855469Mb, VMS = 304.902344Mb)), Calls = 10
Final Model :: Total atoms = 13822, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.304135599999938, solving_time=0.417066400000067, total_time=2.7212020000000052, memory=Memory(rss=302.85546875, vms=304.90234375), step_range=range(29, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2532752999999843, solving_time=0.06745580000000473, total_time=0.32073109999998906, memory=Memory(rss=302.85546875, vms=304.90234375), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 69575.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 647484.0, 'bodies_tr': 647484.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3375.0, 'count_bodies_tr': 3375.0, 'sccs': 275.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7266.0, 'rules': 1252867.0, 'rules_normal': 1248832.0, 'rules_choice': 3845.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 1252752.0, 'rules_tr_normal': 1248832.0, 'rules_tr_choice': 3845.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 65.0, 'eqs': 156489.0, 'eqs_atom': 39993.0, 'eqs_body': 8385.0, 'eqs_other': 108111.0}, 'lpStep': {'atoms': 6428.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67305.0, 'bodies_tr': 67305.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 127872.0, 'rules_normal': 127520.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 127872.0, 'rules_tr_normal': 127520.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13586.0, 'eqs_atom': 3690.0, 'eqs_body': 104.0, 'eqs_other': 9792.0}, 'generator': {'vars': 25201.0, 'vars_eliminated': 0.0, 'vars_frozen': 15229.0, 'constraints': 4867.0, 'constraints_binary': 236111.0, 'constraints_ternary': 22038.0, 'acyc_edges': 0.0, 'complexity': 263644.0}}, 'solving': {'solvers': {'choices': 498.0, 'conflicts': 11.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 36.0, 'models': 1.0, 'models_level': 277.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 15.0, 'integrated': 42.0, 'lemmas': 102.0, 'lits_learnt': 1414.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 27.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 1470.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 62.0, 'lemmas_other': 33.0, 'lits_conflict': 81.0, 'lits_loop': 982.0, 'lits_other': 351.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 8.0, 'levels': 24.0, 'levels_bounded': 8.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3231353759765625, 'cpu': 0.453125, 'solve': 0.025899887084960938, 'unsat': 0.0, 'sat': 0.0109405517578125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.793926239013672, 'cpu': 3.0, 'solve': 0.1305389404296875, 'unsat': 0.018915176391601562, 'sat': 0.03180885314941406}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2073.0, 'conflicts': 223.0, 'conflicts_analyzed': 208.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 127.0, 'models': 7.0, 'models_level': 1136.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 236.0, 'distributed_sum_lbd': 346.0, 'integrated': 597.0, 'lemmas': 1198.0, 'lits_learnt': 7792.0, 'lemmas_binary': 60.0, 'lemmas_ternary': 135.0, 'cpu_time': 0.34375, 'integrated_imps': 289.0, 'integrated_jumps': 32.0, 'guiding_paths_lits': 8896.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 193.0, 'lemmas_loop': 538.0, 'lemmas_other': 467.0, 'lits_conflict': 612.0, 'lits_loop': 5106.0, 'lits_other': 2074.0, 'jumps': {'jumps': 208.0, 'jumps_bounded': 48.0, 'levels': 3738.0, 'levels_bounded': 3506.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39}

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 7 ( 41.18% solved)

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 39)', truth=True, inc_range=None)

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 39]:
sub_goal(2, talos, release(manipulator_arm_1,(block,8)), grasping(manipulator_arm_1), nothing, 24)

[12-11-2021_15-22-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(29)]), ('plan_module', [Number(40), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254366s.

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(24, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(24,39).

[12-11-2021_15-22-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.087578s with result Satisfiable.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3419441000000347, Incremental time limit = None
Running cumulative time = 3.06314610000004, Cumulative time limit = 3600
Used memory = (RSS = 310.433594Mb, VMS = 310.363281Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.558502s, Solving = 0.504645s, Total = 3.063146s, Memory = (RSS = 310.433594Mb, VMS = 310.363281Mb)), Calls = 11
Final Model :: Total atoms = 14556, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.5585015999999428, solving_time=0.5046445000000972, total_time=3.06314610000004, memory=Memory(rss=310.43359375, vms=310.36328125), step_range=range(29, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25436600000000453, solving_time=0.08757810000003019, total_time=0.3419441000000347, memory=Memory(rss=310.43359375, vms=310.36328125), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 76192.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 715200.0, 'bodies_tr': 715200.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3705.0, 'count_bodies_tr': 3705.0, 'sccs': 306.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8796.0, 'rules': 1381422.0, 'rules_normal': 1377035.0, 'rules_choice': 4178.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 198.0, 'rules_tr': 1381307.0, 'rules_tr_normal': 1377035.0, 'rules_tr_choice': 4178.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 83.0, 'eqs': 170587.0, 'eqs_atom': 43846.0, 'eqs_body': 8490.0, 'eqs_other': 118251.0}, 'lpStep': {'atoms': 6617.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67716.0, 'bodies_tr': 67716.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 128555.0, 'rules_normal': 128203.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 128555.0, 'rules_tr_normal': 128203.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14098.0, 'eqs_atom': 3853.0, 'eqs_body': 105.0, 'eqs_other': 10140.0}, 'generator': {'vars': 30155.0, 'vars_eliminated': 0.0, 'vars_frozen': 18165.0, 'constraints': 6218.0, 'constraints_binary': 308008.0, 'constraints_ternary': 29412.0, 'acyc_edges': 0.0, 'complexity': 344376.0}}, 'solving': {'solvers': {'choices': 511.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 302.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 56.0, 'lits_learnt': 504.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1603.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 56.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 504.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 11.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.34561920166015625, 'cpu': 0.40625, 'solve': 0.030918121337890625, 'unsat': 0.0, 'sat': 0.007978439331054688}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.139545440673828, 'cpu': 3.40625, 'solve': 0.16145706176757812, 'unsat': 0.018915176391601562, 'sat': 0.03978729248046875}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2584.0, 'conflicts': 223.0, 'conflicts_analyzed': 208.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 134.0, 'models': 8.0, 'models_level': 1438.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 236.0, 'distributed_sum_lbd': 346.0, 'integrated': 597.0, 'lemmas': 1254.0, 'lits_learnt': 8296.0, 'lemmas_binary': 60.0, 'lemmas_ternary': 135.0, 'cpu_time': 0.4375, 'integrated_imps': 289.0, 'integrated_jumps': 32.0, 'guiding_paths_lits': 10499.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 193.0, 'lemmas_loop': 594.0, 'lemmas_other': 467.0, 'lits_conflict': 612.0, 'lits_loop': 5610.0, 'lits_other': 2074.0, 'jumps': {'jumps': 208.0, 'jumps_bounded': 48.0, 'levels': 3738.0, 'levels_bounded': 3506.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40}

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 8 ( 47.06% solved)

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 40)', truth=True, inc_range=None)

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 25, step = 40]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 25)

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(29)]), ('plan_module', [Number(41), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.259074s.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(25, 40)', truth=True, inc_range=None), conversion = current_last_sgoals(25,40).

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.118849s with result Satisfiable.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37792280000002165, Incremental time limit = None
Running cumulative time = 3.4410689000000616, Cumulative time limit = 3600
Used memory = (RSS = 324.082031Mb, VMS = 328.871094Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.817575s, Solving = 0.623494s, Total = 3.441069s, Memory = (RSS = 324.082031Mb, VMS = 328.871094Mb)), Calls = 12
Final Model :: Total atoms = 15292, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=40, end_step=41, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.817575399999953, solving_time=0.6234935000001087, total_time=3.4410689000000616, memory=Memory(rss=324.08203125, vms=328.87109375), step_range=range(29, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2590738000000101, solving_time=0.11884900000001153, total_time=0.37792280000002165, memory=Memory(rss=324.08203125, vms=328.87109375), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 82824.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 782951.0, 'bodies_tr': 782951.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4035.0, 'count_bodies_tr': 4035.0, 'sccs': 337.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10326.0, 'rules': 1510149.0, 'rules_normal': 1505410.0, 'rules_choice': 4511.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 1510034.0, 'rules_tr_normal': 1505410.0, 'rules_tr_choice': 4511.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 101.0, 'eqs': 184760.0, 'eqs_atom': 47710.0, 'eqs_body': 8596.0, 'eqs_other': 128454.0}, 'lpStep': {'atoms': 6632.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67751.0, 'bodies_tr': 67751.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 128727.0, 'rules_normal': 128375.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 128727.0, 'rules_tr_normal': 128375.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14173.0, 'eqs_atom': 3864.0, 'eqs_body': 106.0, 'eqs_other': 10203.0}, 'generator': {'vars': 35116.0, 'vars_eliminated': 0.0, 'vars_frozen': 21105.0, 'constraints': 7570.0, 'constraints_binary': 380076.0, 'constraints_ternary': 36770.0, 'acyc_edges': 0.0, 'complexity': 425264.0}}, 'solving': {'solvers': {'choices': 553.0, 'conflicts': 21.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 327.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 21.0, 'integrated': 0.0, 'lemmas': 142.0, 'lits_learnt': 1421.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.21875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1736.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 121.0, 'lemmas_other': 0.0, 'lits_conflict': 21.0, 'lits_loop': 1400.0, 'lits_other': 0.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 0.0, 'levels': 21.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.38072776794433594, 'cpu': 0.515625, 'solve': 0.07679557800292969, 'unsat': 0.0, 'sat': 0.010972976684570312}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.520273208618164, 'cpu': 3.921875, 'solve': 0.2382526397705078, 'unsat': 0.018915176391601562, 'sat': 0.05076026916503906}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3137.0, 'conflicts': 244.0, 'conflicts_analyzed': 229.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 141.0, 'models': 9.0, 'models_level': 1765.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 257.0, 'distributed_sum_lbd': 367.0, 'integrated': 597.0, 'lemmas': 1396.0, 'lits_learnt': 9717.0, 'lemmas_binary': 60.0, 'lemmas_ternary': 135.0, 'cpu_time': 0.65625, 'integrated_imps': 289.0, 'integrated_jumps': 32.0, 'guiding_paths_lits': 12235.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 214.0, 'lemmas_loop': 715.0, 'lemmas_other': 467.0, 'lits_conflict': 633.0, 'lits_loop': 7010.0, 'lits_other': 2074.0, 'jumps': {'jumps': 229.0, 'jumps_bounded': 48.0, 'levels': 3759.0, 'levels_bounded': 3506.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41}

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 9 ( 52.94% solved)

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 41)', truth=True, inc_range=None)

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 41]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 26)

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(29)]), ('plan_module', [Number(42), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261607s.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 42: original = External(symbol='current_last_sgoals(26, 41)', truth=True, inc_range=None), conversion = current_last_sgoals(26,41).

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.072151s with result Unsatisfiable.

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3337572000000364, Incremental time limit = None
Running cumulative time = 3.774826100000098, Cumulative time limit = 3600
Used memory = (RSS = 332.425781Mb, VMS = 334.656250Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=41, end_step=42, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.079181999999946, solving_time=0.6956441000001519, total_time=3.774826100000098, memory=Memory(rss=332.42578125, vms=334.65625), step_range=range(29, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26160659999999325, solving_time=0.07215060000004314, total_time=0.3337572000000364, memory=Memory(rss=332.42578125, vms=334.65625), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 89471.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 850738.0, 'bodies_tr': 850738.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4365.0, 'count_bodies_tr': 4365.0, 'sccs': 368.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11856.0, 'rules': 1639049.0, 'rules_normal': 1633958.0, 'rules_choice': 4844.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 234.0, 'rules_tr': 1638934.0, 'rules_tr_normal': 1633958.0, 'rules_tr_choice': 4844.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 119.0, 'eqs': 199009.0, 'eqs_atom': 51584.0, 'eqs_body': 8703.0, 'eqs_other': 138722.0}, 'lpStep': {'atoms': 6647.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67787.0, 'bodies_tr': 67787.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 128900.0, 'rules_normal': 128548.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 128900.0, 'rules_tr_normal': 128548.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14249.0, 'eqs_atom': 3874.0, 'eqs_body': 107.0, 'eqs_other': 10268.0}, 'generator': {'vars': 40085.0, 'vars_eliminated': 0.0, 'vars_frozen': 24050.0, 'constraints': 8923.0, 'constraints_binary': 449390.0, 'constraints_ternary': 43926.0, 'acyc_edges': 0.0, 'complexity': 503197.0}}, 'solving': {'solvers': {'choices': 71.0, 'conflicts': 51.0, 'conflicts_analyzed': 46.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 71.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 93.0, 'integrated': 240.0, 'lemmas': 793.0, 'lits_learnt': 11020.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.125, 'integrated_imps': 94.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 1869.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 40.0, 'lemmas_loop': 584.0, 'lemmas_other': 169.0, 'lits_conflict': 700.0, 'lits_loop': 7484.0, 'lits_other': 2836.0, 'jumps': {'jumps': 46.0, 'jumps_bounded': 12.0, 'levels': 70.0, 'levels_bounded': 12.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3377227783203125, 'cpu': 0.4375, 'solve': 0.026941299438476562, 'unsat': 0.026941299438476562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.8579959869384766, 'cpu': 4.359375, 'solve': 0.2651939392089844, 'unsat': 0.045856475830078125, 'sat': 0.05076026916503906}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3208.0, 'conflicts': 295.0, 'conflicts_analyzed': 275.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 212.0, 'models': 9.0, 'models_level': 1765.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 297.0, 'distributed_sum_lbd': 460.0, 'integrated': 837.0, 'lemmas': 2189.0, 'lits_learnt': 20737.0, 'lemmas_binary': 60.0, 'lemmas_ternary': 149.0, 'cpu_time': 0.78125, 'integrated_imps': 383.0, 'integrated_jumps': 45.0, 'guiding_paths_lits': 14104.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 254.0, 'lemmas_loop': 1299.0, 'lemmas_other': 636.0, 'lits_conflict': 1333.0, 'lits_loop': 14494.0, 'lits_other': 4910.0, 'jumps': {'jumps': 275.0, 'jumps_bounded': 60.0, 'levels': 3829.0, 'levels_bounded': 3518.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 42:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(29)]), ('plan_module', [Number(43), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.286945s.

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.090442s with result Satisfiable.

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3773877999999513, Incremental time limit = None
Running cumulative time = 4.152213900000049, Cumulative time limit = 3600
Used memory = (RSS = 345.265625Mb, VMS = 344.339844Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.366127s, Solving = 0.786087s, Total = 4.152214s, Memory = (RSS = 345.265625Mb, VMS = 344.339844Mb)), Calls = 14
Final Model :: Total atoms = 16764, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[12-11-2021_15-22-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=42, end_step=43, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.3661273999999253, solving_time=0.786086500000124, total_time=4.152213900000049, memory=Memory(rss=345.265625, vms=344.33984375), step_range=range(29, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28694539999997914, solving_time=0.09044239999997217, total_time=0.3773877999999513, memory=Memory(rss=345.265625, vms=344.33984375), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 96134.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 918561.0, 'bodies_tr': 918561.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4695.0, 'count_bodies_tr': 4695.0, 'sccs': 399.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13386.0, 'rules': 1768122.0, 'rules_normal': 1762679.0, 'rules_choice': 5177.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 1768007.0, 'rules_tr_normal': 1762679.0, 'rules_tr_choice': 5177.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 137.0, 'eqs': 213336.0, 'eqs_atom': 55470.0, 'eqs_body': 8811.0, 'eqs_other': 149055.0}, 'lpStep': {'atoms': 6663.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67823.0, 'bodies_tr': 67823.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129073.0, 'rules_normal': 128721.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129073.0, 'rules_tr_normal': 128721.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14327.0, 'eqs_atom': 3886.0, 'eqs_body': 108.0, 'eqs_other': 10333.0}, 'generator': {'vars': 45061.0, 'vars_eliminated': 0.0, 'vars_frozen': 26999.0, 'constraints': 10277.0, 'constraints_binary': 521802.0, 'constraints_ternary': 51297.0, 'acyc_edges': 0.0, 'complexity': 584444.0}}, 'solving': {'solvers': {'choices': 764.0, 'conflicts': 161.0, 'conflicts_analyzed': 161.0, 'restarts': 0.0, 'restarts_last': 45.0, 'extra': {'domain_choices': 196.0, 'models': 1.0, 'models_level': 380.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 155.0, 'distributed_sum_lbd': 478.0, 'integrated': 577.0, 'lemmas': 1236.0, 'lits_learnt': 32517.0, 'lemmas_binary': 79.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 63.0, 'integrated_jumps': 200.0, 'guiding_paths_lits': 2002.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 156.0, 'lemmas_loop': 506.0, 'lemmas_other': 574.0, 'lits_conflict': 5685.0, 'lits_loop': 7775.0, 'lits_other': 19057.0, 'jumps': {'jumps': 161.0, 'jumps_bounded': 4.0, 'levels': 191.0, 'levels_bounded': 4.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3809795379638672, 'cpu': 0.5, 'solve': 0.045848846435546875, 'unsat': 0.0, 'sat': 0.017927169799804688}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.238975524902344, 'cpu': 4.859375, 'solve': 0.31104278564453125, 'unsat': 0.045856475830078125, 'sat': 0.06868743896484375}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3972.0, 'conflicts': 456.0, 'conflicts_analyzed': 436.0, 'restarts': 0.0, 'restarts_last': 45.0, 'extra': {'domain_choices': 408.0, 'models': 10.0, 'models_level': 2145.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 452.0, 'distributed_sum_lbd': 938.0, 'integrated': 1414.0, 'lemmas': 3425.0, 'lits_learnt': 53254.0, 'lemmas_binary': 139.0, 'lemmas_ternary': 149.0, 'cpu_time': 0.9375, 'integrated_imps': 446.0, 'integrated_jumps': 245.0, 'guiding_paths_lits': 16106.0, 'guiding_paths': 108.0, 'splits': 0.0, 'lemmas_conflict': 410.0, 'lemmas_loop': 1805.0, 'lemmas_other': 1210.0, 'lits_conflict': 7018.0, 'lits_loop': 22269.0, 'lits_other': 23967.0, 'jumps': {'jumps': 436.0, 'jumps_bounded': 64.0, 'levels': 4020.0, 'levels_bounded': 3522.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43}

[12-11-2021_15-22-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 10 ( 58.82% solved)

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(27, 43)', truth=True, inc_range=None)

[12-11-2021_15-22-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 27, step = 43]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 27)

[12-11-2021_15-22-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 43:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(29)]), ('plan_module', [Number(44), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289090s.

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 44: original = External(symbol='current_last_sgoals(27, 43)', truth=True, inc_range=None), conversion = current_last_sgoals(27,43).

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.207851s with result Unsatisfiable.

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.4969413999999688, Incremental time limit = None
Running cumulative time = 4.649155300000018, Cumulative time limit = 3600
Used memory = (RSS = 366.269531Mb, VMS = 376.984375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=43, end_step=44, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.655217599999901, solving_time=0.9939377000001173, total_time=4.649155300000018, memory=Memory(rss=366.26953125, vms=376.984375), step_range=range(29, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28909019999997554, solving_time=0.20785119999999324, total_time=0.4969413999999688, memory=Memory(rss=366.26953125, vms=376.984375), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 102813.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 986421.0, 'bodies_tr': 986421.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5025.0, 'count_bodies_tr': 5025.0, 'sccs': 430.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14916.0, 'rules': 1897369.0, 'rules_normal': 1891574.0, 'rules_choice': 5510.0, 'rules_minimize': 15.0, 'rules_acyc': 0.0, 'rules_heuristic': 270.0, 'rules_tr': 1897254.0, 'rules_tr_normal': 1891574.0, 'rules_tr_choice': 5510.0, 'rules_tr_minimize': 15.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 155.0, 'eqs': 227742.0, 'eqs_atom': 59367.0, 'eqs_body': 8920.0, 'eqs_other': 159455.0}, 'lpStep': {'atoms': 6679.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67860.0, 'bodies_tr': 67860.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129247.0, 'rules_normal': 128895.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129247.0, 'rules_tr_normal': 128895.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14406.0, 'eqs_atom': 3897.0, 'eqs_body': 109.0, 'eqs_other': 10400.0}, 'generator': {'vars': 50045.0, 'vars_eliminated': 0.0, 'vars_frozen': 29953.0, 'constraints': 11632.0, 'constraints_binary': 594387.0, 'constraints_ternary': 58675.0, 'acyc_edges': 0.0, 'complexity': 665872.0}}, 'solving': {'solvers': {'choices': 1326.0, 'conflicts': 495.0, 'conflicts_analyzed': 488.0, 'restarts': 0.0, 'restarts_last': 131.0, 'extra': {'domain_choices': 847.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 465.0, 'distributed_sum_lbd': 1294.0, 'integrated': 2723.0, 'lemmas': 4059.0, 'lits_learnt': 110863.0, 'lemmas_binary': 571.0, 'lemmas_ternary': 49.0, 'cpu_time': 0.96875, 'integrated_imps': 587.0, 'integrated_jumps': 488.0, 'guiding_paths_lits': 2135.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 483.0, 'lemmas_loop': 1102.0, 'lemmas_other': 2474.0, 'lits_conflict': 16246.0, 'lits_loop': 16813.0, 'lits_other': 77804.0, 'jumps': {'jumps': 488.0, 'jumps_bounded': 6.0, 'levels': 838.0, 'levels_bounded': 6.0, 'max': 20.0, 'max_executed': 20.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 15.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.5016613006591797, 'cpu': 1.3125, 'solve': 0.16057205200195312, 'unsat': 0.16057205200195312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.740636825561523, 'cpu': 6.171875, 'solve': 0.4716148376464844, 'unsat': 0.20642852783203125, 'sat': 0.06868743896484375}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5298.0, 'conflicts': 951.0, 'conflicts_analyzed': 924.0, 'restarts': 0.0, 'restarts_last': 131.0, 'extra': {'domain_choices': 1255.0, 'models': 10.0, 'models_level': 2145.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 917.0, 'distributed_sum_lbd': 2232.0, 'integrated': 4137.0, 'lemmas': 7484.0, 'lits_learnt': 164117.0, 'lemmas_binary': 710.0, 'lemmas_ternary': 198.0, 'cpu_time': 1.90625, 'integrated_imps': 1033.0, 'integrated_jumps': 733.0, 'guiding_paths_lits': 18241.0, 'guiding_paths': 115.0, 'splits': 0.0, 'lemmas_conflict': 893.0, 'lemmas_loop': 2907.0, 'lemmas_other': 3684.0, 'lits_conflict': 23264.0, 'lits_loop': 39082.0, 'lits_other': 101771.0, 'jumps': {'jumps': 924.0, 'jumps_bounded': 70.0, 'levels': 4858.0, 'levels_bounded': 3528.0, 'max': 192.0, 'max_executed': 192.0, 'max_bounded': 191.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 44:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(29)]), ('plan_module', [Number(45), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.277911s.

[12-11-2021_15-22-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.665758s with result Unsatisfiable.

[12-11-2021_15-22-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.9436698999999749, Incremental time limit = None
Running cumulative time = 5.592825199999993, Cumulative time limit = 3600
Used memory = (RSS = 373.968750Mb, VMS = 381.820312Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=44, end_step=45, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.9331289999998944, solving_time=1.6596962000000985, total_time=5.592825199999993, memory=Memory(rss=373.96875, vms=381.8203125), step_range=range(29, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2779113999999936, solving_time=0.6657584999999813, total_time=0.9436698999999749, memory=Memory(rss=373.96875, vms=381.8203125), step_range=range(45, 46), clingo_stats={'problem': {'lp': {'atoms': 109508.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1054318.0, 'bodies_tr': 1054318.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5355.0, 'count_bodies_tr': 5355.0, 'sccs': 461.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16446.0, 'rules': 2026790.0, 'rules_normal': 2020643.0, 'rules_choice': 5843.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 2026675.0, 'rules_tr_normal': 2020643.0, 'rules_tr_choice': 5843.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 173.0, 'eqs': 242227.0, 'eqs_atom': 63275.0, 'eqs_body': 9030.0, 'eqs_other': 169922.0}, 'lpStep': {'atoms': 6695.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67897.0, 'bodies_tr': 67897.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129421.0, 'rules_normal': 129069.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129421.0, 'rules_tr_normal': 129069.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14485.0, 'eqs_atom': 3908.0, 'eqs_body': 110.0, 'eqs_other': 10467.0}, 'generator': {'vars': 55037.0, 'vars_eliminated': 0.0, 'vars_frozen': 32912.0, 'constraints': 12988.0, 'constraints_binary': 667145.0, 'constraints_ternary': 66060.0, 'acyc_edges': 0.0, 'complexity': 747481.0}}, 'solving': {'solvers': {'choices': 3888.0, 'conflicts': 1958.0, 'conflicts_analyzed': 1953.0, 'restarts': 9.0, 'restarts_last': 307.0, 'extra': {'domain_choices': 2362.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1747.0, 'distributed_sum_lbd': 5228.0, 'integrated': 10447.0, 'lemmas': 15447.0, 'lits_learnt': 670085.0, 'lemmas_binary': 1302.0, 'lemmas_ternary': 378.0, 'cpu_time': 3.375, 'integrated_imps': 2030.0, 'integrated_jumps': 1092.0, 'guiding_paths_lits': 2268.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1948.0, 'lemmas_loop': 3180.0, 'lemmas_other': 10319.0, 'lits_conflict': 101755.0, 'lits_loop': 47402.0, 'lits_other': 520928.0, 'jumps': {'jumps': 1953.0, 'jumps_bounded': 30.0, 'levels': 3154.0, 'levels_bounded': 353.0, 'max': 327.0, 'max_executed': 327.0, 'max_bounded': 324.0}}}}, 'summary': {'call': 16.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.9482345581054688, 'cpu': 3.703125, 'solve': 0.6163253784179688, 'unsat': 0.6163253784179688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.688871383666992, 'cpu': 9.875, 'solve': 1.0879402160644531, 'unsat': 0.82275390625, 'sat': 0.06868743896484375}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 9186.0, 'conflicts': 2909.0, 'conflicts_analyzed': 2877.0, 'restarts': 9.0, 'restarts_last': 307.0, 'extra': {'domain_choices': 3617.0, 'models': 10.0, 'models_level': 2145.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2664.0, 'distributed_sum_lbd': 7460.0, 'integrated': 14584.0, 'lemmas': 22931.0, 'lits_learnt': 834202.0, 'lemmas_binary': 2012.0, 'lemmas_ternary': 576.0, 'cpu_time': 5.28125, 'integrated_imps': 3063.0, 'integrated_jumps': 1825.0, 'guiding_paths_lits': 20509.0, 'guiding_paths': 122.0, 'splits': 0.0, 'lemmas_conflict': 2841.0, 'lemmas_loop': 6087.0, 'lemmas_other': 14003.0, 'lits_conflict': 125019.0, 'lits_loop': 86484.0, 'lits_other': 622699.0, 'jumps': {'jumps': 2877.0, 'jumps_bounded': 100.0, 'levels': 8012.0, 'levels_bounded': 3881.0, 'max': 327.0, 'max_executed': 327.0, 'max_bounded': 324.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 45:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(29)]), ('plan_module', [Number(46), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.302148s.

[12-11-2021_15-22-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.623903s with result Satisfiable.

[12-11-2021_15-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.9260507000000189, Incremental time limit = None
Running cumulative time = 6.518875900000012, Cumulative time limit = 3600
Used memory = (RSS = 381.218750Mb, VMS = 385.613281Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.235277s, Solving = 2.283599s, Total = 6.518876s, Memory = (RSS = 381.218750Mb, VMS = 385.613281Mb)), Calls = 17
Final Model :: Total atoms = 18974, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[12-11-2021_15-22-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=45, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.235276899999917, solving_time=2.2835990000000947, total_time=6.518875900000012, memory=Memory(rss=381.21875, vms=385.61328125), step_range=range(29, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3021479000000227, solving_time=0.6239027999999962, total_time=0.9260507000000189, memory=Memory(rss=381.21875, vms=385.61328125), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 116218.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1122242.0, 'bodies_tr': 1122242.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5685.0, 'count_bodies_tr': 5685.0, 'sccs': 492.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17976.0, 'rules': 2156375.0, 'rules_normal': 2149876.0, 'rules_choice': 6176.0, 'rules_minimize': 17.0, 'rules_acyc': 0.0, 'rules_heuristic': 306.0, 'rules_tr': 2156260.0, 'rules_tr_normal': 2149876.0, 'rules_tr_choice': 6176.0, 'rules_tr_minimize': 17.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 191.0, 'eqs': 256757.0, 'eqs_atom': 67186.0, 'eqs_body': 9140.0, 'eqs_other': 180431.0}, 'lpStep': {'atoms': 6710.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67924.0, 'bodies_tr': 67924.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129585.0, 'rules_normal': 129233.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129585.0, 'rules_tr_normal': 129233.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14530.0, 'eqs_atom': 3911.0, 'eqs_body': 110.0, 'eqs_other': 10509.0}, 'generator': {'vars': 60029.0, 'vars_eliminated': 0.0, 'vars_frozen': 35871.0, 'constraints': 14177.0, 'constraints_binary': 735873.0, 'constraints_ternary': 73100.0, 'acyc_edges': 0.0, 'complexity': 824544.0}}, 'solving': {'solvers': {'choices': 4267.0, 'conflicts': 2584.0, 'conflicts_analyzed': 2584.0, 'restarts': 11.0, 'restarts_last': 447.0, 'extra': {'domain_choices': 3059.0, 'models': 1.0, 'models_level': 463.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1973.0, 'distributed_sum_lbd': 6524.0, 'integrated': 11625.0, 'lemmas': 17490.0, 'lits_learnt': 832675.0, 'lemmas_binary': 1511.0, 'lemmas_ternary': 319.0, 'cpu_time': 3.859375, 'integrated_imps': 921.0, 'integrated_jumps': 675.0, 'guiding_paths_lits': 2401.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2569.0, 'lemmas_loop': 3297.0, 'lemmas_other': 11624.0, 'lits_conflict': 153605.0, 'lits_loop': 53715.0, 'lits_other': 625355.0, 'jumps': {'jumps': 2584.0, 'jumps_bounded': 10.0, 'levels': 3452.0, 'levels_bounded': 10.0, 'max': 20.0, 'max_executed': 20.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.9374847412109375, 'cpu': 4.21875, 'solve': 0.5754623413085938, 'unsat': 0.0, 'sat': 0.5176181793212891}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 6.62635612487793, 'cpu': 14.09375, 'solve': 1.6634025573730469, 'unsat': 0.82275390625, 'sat': 0.5863056182861328}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 13453.0, 'conflicts': 5493.0, 'conflicts_analyzed': 5461.0, 'restarts': 20.0, 'restarts_last': 447.0, 'extra': {'domain_choices': 6676.0, 'models': 11.0, 'models_level': 2608.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4637.0, 'distributed_sum_lbd': 13984.0, 'integrated': 26209.0, 'lemmas': 40421.0, 'lits_learnt': 1666877.0, 'lemmas_binary': 3523.0, 'lemmas_ternary': 895.0, 'cpu_time': 9.140625, 'integrated_imps': 3984.0, 'integrated_jumps': 2500.0, 'guiding_paths_lits': 22910.0, 'guiding_paths': 129.0, 'splits': 0.0, 'lemmas_conflict': 5410.0, 'lemmas_loop': 9384.0, 'lemmas_other': 25627.0, 'lits_conflict': 278624.0, 'lits_loop': 140199.0, 'lits_other': 1248054.0, 'jumps': {'jumps': 5461.0, 'jumps_bounded': 110.0, 'levels': 11464.0, 'levels_bounded': 3891.0, 'max': 327.0, 'max_executed': 327.0, 'max_bounded': 324.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46}

[12-11-2021_15-22-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 28 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 11 ( 64.71% solved)

[12-11-2021_15-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(28, 46)', truth=True, inc_range=None)

[12-11-2021_15-22-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 28, step = 46]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 28)

[12-11-2021_15-22-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 46:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(29)]), ('plan_module', [Number(47), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.428768s.

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 47: original = External(symbol='current_last_sgoals(28, 46)', truth=True, inc_range=None), conversion = current_last_sgoals(28,46).

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.126110s with result Satisfiable.

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5548776999999632, Incremental time limit = None
Running cumulative time = 7.073753599999975, Cumulative time limit = 3600
Used memory = (RSS = 396.593750Mb, VMS = 397.167969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.664045s, Solving = 2.409709s, Total = 7.073754s, Memory = (RSS = 396.593750Mb, VMS = 397.167969Mb)), Calls = 18
Final Model :: Total atoms = 19714, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[12-11-2021_15-22-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.6640447999998855, solving_time=2.4097088000000895, total_time=7.073753599999975, memory=Memory(rss=396.59375, vms=397.16796875), step_range=range(29, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.42876789999996845, solving_time=0.12610979999999472, total_time=0.5548776999999632, memory=Memory(rss=396.59375, vms=397.16796875), step_range=range(47, 48), clingo_stats={'problem': {'lp': {'atoms': 122932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1190197.0, 'bodies_tr': 1190197.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6015.0, 'count_bodies_tr': 6015.0, 'sccs': 523.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19506.0, 'rules': 2286127.0, 'rules_normal': 2279276.0, 'rules_choice': 6509.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 2286012.0, 'rules_tr_normal': 2279276.0, 'rules_tr_choice': 6509.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 209.0, 'eqs': 271365.0, 'eqs_atom': 71108.0, 'eqs_body': 9251.0, 'eqs_other': 191006.0}, 'lpStep': {'atoms': 6714.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67955.0, 'bodies_tr': 67955.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129752.0, 'rules_normal': 129400.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129752.0, 'rules_tr_normal': 129400.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14608.0, 'eqs_atom': 3922.0, 'eqs_body': 111.0, 'eqs_other': 10575.0}, 'generator': {'vars': 65029.0, 'vars_eliminated': 0.0, 'vars_frozen': 38835.0, 'constraints': 15534.0, 'constraints_binary': 808799.0, 'constraints_ternary': 80492.0, 'acyc_edges': 0.0, 'complexity': 906329.0}}, 'solving': {'solvers': {'choices': 613.0, 'conflicts': 330.0, 'conflicts_analyzed': 330.0, 'restarts': 0.0, 'restarts_last': 88.0, 'extra': {'domain_choices': 309.0, 'models': 1.0, 'models_level': 492.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 243.0, 'distributed_sum_lbd': 790.0, 'integrated': 1226.0, 'lemmas': 2441.0, 'lits_learnt': 128613.0, 'lemmas_binary': 92.0, 'lemmas_ternary': 25.0, 'cpu_time': 0.484375, 'integrated_imps': 41.0, 'integrated_jumps': 44.0, 'guiding_paths_lits': 2534.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 330.0, 'lemmas_loop': 891.0, 'lemmas_other': 1220.0, 'lits_conflict': 25374.0, 'lits_loop': 15677.0, 'lits_other': 87562.0, 'jumps': {'jumps': 330.0, 'jumps_bounded': 1.0, 'levels': 430.0, 'levels_bounded': 1.0, 'max': 20.0, 'max_executed': 20.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.5674819946289062, 'cpu': 0.96875, 'solve': 0.07679176330566406, 'unsat': 0.0, 'sat': 0.0299224853515625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.193838119506836, 'cpu': 15.0625, 'solve': 1.740194320678711, 'unsat': 0.82275390625, 'sat': 0.6162281036376953}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 14066.0, 'conflicts': 5823.0, 'conflicts_analyzed': 5791.0, 'restarts': 20.0, 'restarts_last': 447.0, 'extra': {'domain_choices': 6985.0, 'models': 12.0, 'models_level': 3100.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4880.0, 'distributed_sum_lbd': 14774.0, 'integrated': 27435.0, 'lemmas': 42862.0, 'lits_learnt': 1795490.0, 'lemmas_binary': 3615.0, 'lemmas_ternary': 920.0, 'cpu_time': 9.625, 'integrated_imps': 4025.0, 'integrated_jumps': 2544.0, 'guiding_paths_lits': 25444.0, 'guiding_paths': 136.0, 'splits': 0.0, 'lemmas_conflict': 5740.0, 'lemmas_loop': 10275.0, 'lemmas_other': 26847.0, 'lits_conflict': 303998.0, 'lits_loop': 155876.0, 'lits_other': 1335616.0, 'jumps': {'jumps': 5791.0, 'jumps_bounded': 111.0, 'levels': 11894.0, 'levels_bounded': 3892.0, 'max': 327.0, 'max_executed': 327.0, 'max_bounded': 324.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 47}

[12-11-2021_15-22-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 29 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 12 ( 70.59% solved)

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(29, 47)', truth=True, inc_range=None)

[12-11-2021_15-22-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 29, step = 47]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 29)

[12-11-2021_15-22-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(29)]), ('plan_module', [Number(48), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289882s.

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(29, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(29,47).

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.405027s with result Unsatisfiable.

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.6949085999999625, Incremental time limit = None
Running cumulative time = 7.7686621999999375, Cumulative time limit = 3600
Used memory = (RSS = 405.832031Mb, VMS = 421.183594Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=47, end_step=48, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.953926699999897, solving_time=2.8147355000000402, total_time=7.7686621999999375, memory=Memory(rss=405.83203125, vms=421.18359375), step_range=range(29, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2898819000000117, solving_time=0.4050266999999508, total_time=0.6949085999999625, memory=Memory(rss=405.83203125, vms=421.18359375), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 129662.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1258189.0, 'bodies_tr': 1258189.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6345.0, 'count_bodies_tr': 6345.0, 'sccs': 554.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21036.0, 'rules': 2416053.0, 'rules_normal': 2408850.0, 'rules_choice': 6842.0, 'rules_minimize': 19.0, 'rules_acyc': 0.0, 'rules_heuristic': 342.0, 'rules_tr': 2415938.0, 'rules_tr_normal': 2408850.0, 'rules_tr_choice': 6842.0, 'rules_tr_minimize': 19.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 227.0, 'eqs': 286053.0, 'eqs_atom': 75042.0, 'eqs_body': 9363.0, 'eqs_other': 201648.0}, 'lpStep': {'atoms': 6730.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67992.0, 'bodies_tr': 67992.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 129926.0, 'rules_normal': 129574.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 129926.0, 'rules_tr_normal': 129574.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14688.0, 'eqs_atom': 3934.0, 'eqs_body': 112.0, 'eqs_other': 10642.0}, 'generator': {'vars': 70036.0, 'vars_eliminated': 0.0, 'vars_frozen': 41803.0, 'constraints': 16893.0, 'constraints_binary': 882056.0, 'constraints_ternary': 87889.0, 'acyc_edges': 0.0, 'complexity': 988452.0}}, 'solving': {'solvers': {'choices': 2070.0, 'conflicts': 1383.0, 'conflicts_analyzed': 1377.0, 'restarts': 6.0, 'restarts_last': 214.0, 'extra': {'domain_choices': 1901.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1235.0, 'distributed_sum_lbd': 3869.0, 'integrated': 7362.0, 'lemmas': 9615.0, 'lits_learnt': 544552.0, 'lemmas_binary': 609.0, 'lemmas_ternary': 77.0, 'cpu_time': 2.40625, 'integrated_imps': 982.0, 'integrated_jumps': 416.0, 'guiding_paths_lits': 2667.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1376.0, 'lemmas_loop': 1389.0, 'lemmas_other': 6850.0, 'lits_conflict': 89396.0, 'lits_loop': 18891.0, 'lits_other': 436265.0, 'jumps': {'jumps': 1377.0, 'jumps_bounded': 7.0, 'levels': 1659.0, 'levels_bounded': 7.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 19.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.7057075500488281, 'cpu': 2.765625, 'solve': 0.3480701446533203, 'unsat': 0.3480701446533203, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.899545669555664, 'cpu': 17.828125, 'solve': 2.0882644653320312, 'unsat': 1.1708240509033203, 'sat': 0.6162281036376953}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 16136.0, 'conflicts': 7206.0, 'conflicts_analyzed': 7168.0, 'restarts': 26.0, 'restarts_last': 447.0, 'extra': {'domain_choices': 8886.0, 'models': 12.0, 'models_level': 3100.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6115.0, 'distributed_sum_lbd': 18643.0, 'integrated': 34797.0, 'lemmas': 52477.0, 'lits_learnt': 2340042.0, 'lemmas_binary': 4224.0, 'lemmas_ternary': 997.0, 'cpu_time': 12.03125, 'integrated_imps': 5007.0, 'integrated_jumps': 2960.0, 'guiding_paths_lits': 28111.0, 'guiding_paths': 143.0, 'splits': 0.0, 'lemmas_conflict': 7116.0, 'lemmas_loop': 11664.0, 'lemmas_other': 33697.0, 'lits_conflict': 393394.0, 'lits_loop': 174767.0, 'lits_other': 1771881.0, 'jumps': {'jumps': 7168.0, 'jumps_bounded': 118.0, 'levels': 13553.0, 'levels_bounded': 3899.0, 'max': 327.0, 'max_executed': 327.0, 'max_bounded': 324.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 48:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(29)]), ('plan_module', [Number(49), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.293349s.

[12-11-2021_15-22-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.181484s with result Unsatisfiable.

[12-11-2021_15-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 2.4748324000000252, Incremental time limit = None
Running cumulative time = 10.243494599999963, Cumulative time limit = 3600
Used memory = (RSS = 416.355469Mb, VMS = 428.960938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=48, end_step=49, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.247275299999899, solving_time=4.996219300000064, total_time=10.243494599999963, memory=Memory(rss=416.35546875, vms=428.9609375), step_range=range(29, 50), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2933486000000016, solving_time=2.1814838000000236, total_time=2.4748324000000252, memory=Memory(rss=416.35546875, vms=428.9609375), step_range=range(49, 50), clingo_stats={'problem': {'lp': {'atoms': 136409.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1326217.0, 'bodies_tr': 1326217.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6675.0, 'count_bodies_tr': 6675.0, 'sccs': 585.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22566.0, 'rules': 2546152.0, 'rules_normal': 2538597.0, 'rules_choice': 7175.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 2546037.0, 'rules_tr_normal': 2538597.0, 'rules_tr_choice': 7175.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 245.0, 'eqs': 300822.0, 'eqs_atom': 78989.0, 'eqs_body': 9476.0, 'eqs_other': 212357.0}, 'lpStep': {'atoms': 6747.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68028.0, 'bodies_tr': 68028.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130099.0, 'rules_normal': 129747.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130099.0, 'rules_tr_normal': 129747.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14769.0, 'eqs_atom': 3947.0, 'eqs_body': 113.0, 'eqs_other': 10709.0}, 'generator': {'vars': 75049.0, 'vars_eliminated': 0.0, 'vars_frozen': 44775.0, 'constraints': 18253.0, 'constraints_binary': 955481.0, 'constraints_ternary': 95291.0, 'acyc_edges': 0.0, 'complexity': 1070749.0}}, 'solving': {'solvers': {'choices': 15130.0, 'conflicts': 7031.0, 'conflicts_analyzed': 7025.0, 'restarts': 27.0, 'restarts_last': 994.0, 'extra': {'domain_choices': 9500.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 7710.0, 'distributed': 5257.0, 'distributed_sum_lbd': 17541.0, 'integrated': 31583.0, 'lemmas': 48148.0, 'lits_learnt': 2630370.0, 'lemmas_binary': 2831.0, 'lemmas_ternary': 735.0, 'cpu_time': 14.828125, 'integrated_imps': 3830.0, 'integrated_jumps': 3870.0, 'guiding_paths_lits': 2800.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 7018.0, 'lemmas_loop': 9771.0, 'lemmas_other': 31359.0, 'lits_conflict': 508238.0, 'lits_loop': 154853.0, 'lits_other': 1967279.0, 'jumps': {'jumps': 7025.0, 'jumps_bounded': 14.0, 'levels': 13507.0, 'levels_bounded': 2408.0, 'max': 453.0, 'max_executed': 453.0, 'max_bounded': 400.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 2.4857749938964844, 'cpu': 15.203125, 'solve': 2.1243553161621094, 'unsat': 2.1243553161621094, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 10.385320663452148, 'cpu': 33.03125, 'solve': 4.212619781494141, 'unsat': 3.2951793670654297, 'sat': 0.6162281036376953}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 31266.0, 'conflicts': 14237.0, 'conflicts_analyzed': 14193.0, 'restarts': 53.0, 'restarts_last': 994.0, 'extra': {'domain_choices': 18386.0, 'models': 12.0, 'models_level': 3100.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 7710.0, 'distributed': 11372.0, 'distributed_sum_lbd': 36184.0, 'integrated': 66380.0, 'lemmas': 100625.0, 'lits_learnt': 4970412.0, 'lemmas_binary': 7055.0, 'lemmas_ternary': 1732.0, 'cpu_time': 26.859375, 'integrated_imps': 8837.0, 'integrated_jumps': 6830.0, 'guiding_paths_lits': 30911.0, 'guiding_paths': 150.0, 'splits': 0.0, 'lemmas_conflict': 14134.0, 'lemmas_loop': 21435.0, 'lemmas_other': 65056.0, 'lits_conflict': 901632.0, 'lits_loop': 329620.0, 'lits_other': 3739160.0, 'jumps': {'jumps': 14193.0, 'jumps_bounded': 132.0, 'levels': 27060.0, 'levels_bounded': 6307.0, 'max': 453.0, 'max_executed': 453.0, 'max_bounded': 400.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 49:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(29)]), ('plan_module', [Number(50), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.309092s.

[12-11-2021_15-22-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 4.596726s with result Satisfiable.

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 4.905818399999987, Incremental time limit = None
Running cumulative time = 15.14931299999995, Cumulative time limit = 3600
Used memory = (RSS = 429.417969Mb, VMS = 439.382812Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.556367s, Solving = 9.592946s, Total = 15.149313s, Memory = (RSS = 429.417969Mb, VMS = 439.382812Mb)), Calls = 21
Final Model :: Total atoms = 21928, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=49, end_step=50, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.5563673999998855, solving_time=9.592945600000064, total_time=15.14931299999995, memory=Memory(rss=429.41796875, vms=439.3828125), step_range=range(29, 51), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30909209999998666, solving_time=4.5967263, total_time=4.905818399999987, memory=Memory(rss=429.41796875, vms=439.3828125), step_range=range(50, 51), clingo_stats={'problem': {'lp': {'atoms': 143168.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1394268.0, 'bodies_tr': 1394268.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7005.0, 'count_bodies_tr': 7005.0, 'sccs': 616.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24096.0, 'rules': 2676410.0, 'rules_normal': 2668503.0, 'rules_choice': 7508.0, 'rules_minimize': 21.0, 'rules_acyc': 0.0, 'rules_heuristic': 378.0, 'rules_tr': 2676295.0, 'rules_tr_normal': 2668503.0, 'rules_tr_choice': 7508.0, 'rules_tr_minimize': 21.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 263.0, 'eqs': 315642.0, 'eqs_atom': 82941.0, 'eqs_body': 9589.0, 'eqs_other': 223112.0}, 'lpStep': {'atoms': 6759.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68051.0, 'bodies_tr': 68051.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130258.0, 'rules_normal': 129906.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130258.0, 'rules_tr_normal': 129906.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14820.0, 'eqs_atom': 3952.0, 'eqs_body': 113.0, 'eqs_other': 10755.0}, 'generator': {'vars': 80062.0, 'vars_eliminated': 0.0, 'vars_frozen': 47747.0, 'constraints': 19284.0, 'constraints_binary': 1016723.0, 'constraints_ternary': 101524.0, 'acyc_edges': 0.0, 'complexity': 1139365.0}}, 'solving': {'solvers': {'choices': 24656.0, 'conflicts': 16637.0, 'conflicts_analyzed': 16637.0, 'restarts': 45.0, 'restarts_last': 2898.0, 'extra': {'domain_choices': 19933.0, 'models': 1.0, 'models_level': 555.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 49613.0, 'distributed': 10149.0, 'distributed_sum_lbd': 36025.0, 'integrated': 60760.0, 'lemmas': 91088.0, 'lits_learnt': 5917746.0, 'lemmas_binary': 3970.0, 'lemmas_ternary': 973.0, 'cpu_time': 31.859375, 'integrated_imps': 3818.0, 'integrated_jumps': 2888.0, 'guiding_paths_lits': 2933.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 16632.0, 'lemmas_loop': 13828.0, 'lemmas_other': 60628.0, 'lits_conflict': 1367102.0, 'lits_loop': 206315.0, 'lits_other': 4344329.0, 'jumps': {'jumps': 16637.0, 'jumps_bounded': 10.0, 'levels': 23772.0, 'levels_bounded': 2518.0, 'max': 458.0, 'max_executed': 458.0, 'max_bounded': 419.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 4.926248550415039, 'cpu': 32.234375, 'solve': 4.539043426513672, 'unsat': 0.0, 'sat': 4.483028411865234}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 15.311569213867188, 'cpu': 65.265625, 'solve': 8.751663208007812, 'unsat': 3.2951793670654297, 'sat': 5.09925651550293}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 55922.0, 'conflicts': 30874.0, 'conflicts_analyzed': 30830.0, 'restarts': 98.0, 'restarts_last': 2898.0, 'extra': {'domain_choices': 38319.0, 'models': 13.0, 'models_level': 3655.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 57323.0, 'distributed': 21521.0, 'distributed_sum_lbd': 72209.0, 'integrated': 127140.0, 'lemmas': 191713.0, 'lits_learnt': 10888158.0, 'lemmas_binary': 11025.0, 'lemmas_ternary': 2705.0, 'cpu_time': 58.71875, 'integrated_imps': 12655.0, 'integrated_jumps': 9718.0, 'guiding_paths_lits': 33844.0, 'guiding_paths': 157.0, 'splits': 0.0, 'lemmas_conflict': 30766.0, 'lemmas_loop': 35263.0, 'lemmas_other': 125684.0, 'lits_conflict': 2268734.0, 'lits_loop': 535935.0, 'lits_other': 8083489.0, 'jumps': {'jumps': 30830.0, 'jumps_bounded': 142.0, 'levels': 50832.0, 'levels_bounded': 8825.0, 'max': 458.0, 'max_executed': 458.0, 'max_bounded': 419.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 47, 29: 50}

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 30 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 13 ( 76.47% solved)

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(30, 50)', truth=True, inc_range=None)

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 30, step = 50]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 30)

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 50:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(29)]), ('plan_module', [Number(51), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307459s.

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 51: original = External(symbol='current_last_sgoals(30, 50)', truth=True, inc_range=None), conversion = current_last_sgoals(30,50).

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.284245s with result Satisfiable.

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5917036000000735, Incremental time limit = None
Running cumulative time = 15.741016600000023, Cumulative time limit = 3600
Used memory = (RSS = 441.312500Mb, VMS = 448.484375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.863826s, Solving = 9.877191s, Total = 15.741017s, Memory = (RSS = 441.312500Mb, VMS = 448.484375Mb)), Calls = 22
Final Model :: Total atoms = 22668, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=50, end_step=51, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.863826099999926, solving_time=9.877190500000097, total_time=15.741016600000023, memory=Memory(rss=441.3125, vms=448.484375), step_range=range(29, 52), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3074587000000406, solving_time=0.2842449000000329, total_time=0.5917036000000735, memory=Memory(rss=441.3125, vms=448.484375), step_range=range(51, 52), clingo_stats={'problem': {'lp': {'atoms': 149932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1462350.0, 'bodies_tr': 1462350.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7335.0, 'count_bodies_tr': 7335.0, 'sccs': 647.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25626.0, 'rules': 2806835.0, 'rules_normal': 2798576.0, 'rules_choice': 7841.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 2806720.0, 'rules_tr_normal': 2798576.0, 'rules_tr_choice': 7841.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 281.0, 'eqs': 330532.0, 'eqs_atom': 86905.0, 'eqs_body': 9702.0, 'eqs_other': 233925.0}, 'lpStep': {'atoms': 6764.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68082.0, 'bodies_tr': 68082.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130425.0, 'rules_normal': 130073.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130425.0, 'rules_tr_normal': 130073.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14890.0, 'eqs_atom': 3964.0, 'eqs_body': 113.0, 'eqs_other': 10813.0}, 'generator': {'vars': 85077.0, 'vars_eliminated': 0.0, 'vars_frozen': 50719.0, 'constraints': 20643.0, 'constraints_binary': 1087519.0, 'constraints_ternary': 108871.0, 'acyc_edges': 0.0, 'complexity': 1218977.0}}, 'solving': {'solvers': {'choices': 1523.0, 'conflicts': 493.0, 'conflicts_analyzed': 493.0, 'restarts': 3.0, 'restarts_last': 90.0, 'extra': {'domain_choices': 481.0, 'models': 1.0, 'models_level': 580.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 295.0, 'distributed_sum_lbd': 1008.0, 'integrated': 1013.0, 'lemmas': 2051.0, 'lits_learnt': 134778.0, 'lemmas_binary': 100.0, 'lemmas_ternary': 12.0, 'cpu_time': 1.25, 'integrated_imps': 130.0, 'integrated_jumps': 207.0, 'guiding_paths_lits': 3066.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 493.0, 'lemmas_loop': 558.0, 'lemmas_other': 1000.0, 'lits_conflict': 48976.0, 'lits_loop': 8098.0, 'lits_other': 77704.0, 'jumps': {'jumps': 493.0, 'jumps_bounded': 3.0, 'levels': 740.0, 'levels_bounded': 3.0, 'max': 42.0, 'max_executed': 42.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.6185245513916016, 'cpu': 1.640625, 'solve': 0.22491073608398438, 'unsat': 0.0, 'sat': 0.045879364013671875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 15.930093765258789, 'cpu': 66.90625, 'solve': 8.976573944091797, 'unsat': 3.2951793670654297, 'sat': 5.145135879516602}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 57445.0, 'conflicts': 31367.0, 'conflicts_analyzed': 31323.0, 'restarts': 101.0, 'restarts_last': 2898.0, 'extra': {'domain_choices': 38800.0, 'models': 14.0, 'models_level': 4235.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 57323.0, 'distributed': 21816.0, 'distributed_sum_lbd': 73217.0, 'integrated': 128153.0, 'lemmas': 193764.0, 'lits_learnt': 11022936.0, 'lemmas_binary': 11125.0, 'lemmas_ternary': 2717.0, 'cpu_time': 59.96875, 'integrated_imps': 12785.0, 'integrated_jumps': 9925.0, 'guiding_paths_lits': 36910.0, 'guiding_paths': 164.0, 'splits': 0.0, 'lemmas_conflict': 31259.0, 'lemmas_loop': 35821.0, 'lemmas_other': 126684.0, 'lits_conflict': 2317710.0, 'lits_loop': 544033.0, 'lits_other': 8161193.0, 'jumps': {'jumps': 31323.0, 'jumps_bounded': 145.0, 'levels': 51572.0, 'levels_bounded': 8828.0, 'max': 458.0, 'max_executed': 458.0, 'max_bounded': 419.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 47, 29: 50, 30: 51}

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 31 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 14 ( 82.35% solved)

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(31, 51)', truth=True, inc_range=None)

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 31, step = 51]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 31)

[12-11-2021_15-22-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 51:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(29)]), ('plan_module', [Number(52), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311272s.

[12-11-2021_15-22-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 52: original = External(symbol='current_last_sgoals(31, 51)', truth=True, inc_range=None), conversion = current_last_sgoals(31,51).

[12-11-2021_15-22-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.650732s with result Unsatisfiable.

[12-11-2021_15-22-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.9620047999999883, Incremental time limit = None
Running cumulative time = 16.70302140000001, Cumulative time limit = 3600
Used memory = (RSS = 449.574219Mb, VMS = 453.429688Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=51, end_step=52, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.175098599999899, solving_time=10.527922800000113, total_time=16.70302140000001, memory=Memory(rss=449.57421875, vms=453.4296875), step_range=range(29, 53), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.31127249999997275, solving_time=0.6507323000000156, total_time=0.9620047999999883, memory=Memory(rss=449.57421875, vms=453.4296875), step_range=range(52, 53), clingo_stats={'problem': {'lp': {'atoms': 156708.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1530462.0, 'bodies_tr': 1530462.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7665.0, 'count_bodies_tr': 7665.0, 'sccs': 678.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 27156.0, 'rules': 2937426.0, 'rules_normal': 2928815.0, 'rules_choice': 8174.0, 'rules_minimize': 23.0, 'rules_acyc': 0.0, 'rules_heuristic': 414.0, 'rules_tr': 2937311.0, 'rules_tr_normal': 2928815.0, 'rules_tr_choice': 8174.0, 'rules_tr_minimize': 23.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 299.0, 'eqs': 345494.0, 'eqs_atom': 90881.0, 'eqs_body': 9815.0, 'eqs_other': 244798.0}, 'lpStep': {'atoms': 6776.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68112.0, 'bodies_tr': 68112.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130591.0, 'rules_normal': 130239.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130591.0, 'rules_tr_normal': 130239.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 14962.0, 'eqs_atom': 3976.0, 'eqs_body': 113.0, 'eqs_other': 10873.0}, 'generator': {'vars': 90092.0, 'vars_eliminated': 0.0, 'vars_frozen': 53691.0, 'constraints': 22003.0, 'constraints_binary': 1161410.0, 'constraints_ternary': 116275.0, 'acyc_edges': 0.0, 'complexity': 1301742.0}}, 'solving': {'solvers': {'choices': 2606.0, 'conflicts': 1460.0, 'conflicts_analyzed': 1458.0, 'restarts': 7.0, 'restarts_last': 274.0, 'extra': {'domain_choices': 2404.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1254.0, 'distributed_sum_lbd': 4313.0, 'integrated': 7490.0, 'lemmas': 10690.0, 'lits_learnt': 935467.0, 'lemmas_binary': 526.0, 'lemmas_ternary': 105.0, 'cpu_time': 4.234375, 'integrated_imps': 1010.0, 'integrated_jumps': 620.0, 'guiding_paths_lits': 3199.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1457.0, 'lemmas_loop': 1760.0, 'lemmas_other': 7473.0, 'lits_conflict': 155703.0, 'lits_loop': 28169.0, 'lits_other': 751595.0, 'jumps': {'jumps': 1458.0, 'jumps_bounded': 4.0, 'levels': 1971.0, 'levels_bounded': 4.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 23.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.9859390258789062, 'cpu': 4.625, 'solve': 0.5919914245605469, 'unsat': 0.5919914245605469, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 16.916032791137695, 'cpu': 71.53125, 'solve': 9.568565368652344, 'unsat': 3.8871707916259766, 'sat': 5.145135879516602}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 60051.0, 'conflicts': 32827.0, 'conflicts_analyzed': 32781.0, 'restarts': 108.0, 'restarts_last': 2898.0, 'extra': {'domain_choices': 41204.0, 'models': 14.0, 'models_level': 4235.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 57323.0, 'distributed': 23070.0, 'distributed_sum_lbd': 77530.0, 'integrated': 135643.0, 'lemmas': 204454.0, 'lits_learnt': 11958403.0, 'lemmas_binary': 11651.0, 'lemmas_ternary': 2822.0, 'cpu_time': 64.203125, 'integrated_imps': 13795.0, 'integrated_jumps': 10545.0, 'guiding_paths_lits': 40109.0, 'guiding_paths': 171.0, 'splits': 0.0, 'lemmas_conflict': 32716.0, 'lemmas_loop': 37581.0, 'lemmas_other': 134157.0, 'lits_conflict': 2473413.0, 'lits_loop': 572202.0, 'lits_other': 8912788.0, 'jumps': {'jumps': 32781.0, 'jumps_bounded': 149.0, 'levels': 53543.0, 'levels_bounded': 8832.0, 'max': 458.0, 'max_executed': 458.0, 'max_bounded': 419.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 52:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(29)]), ('plan_module', [Number(53), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.327866s.

[12-11-2021_15-22-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 8.587629s with result Satisfiable.

[12-11-2021_15-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 8.915495000000021, Incremental time limit = None
Running cumulative time = 25.618516400000033, Cumulative time limit = 3600
Used memory = (RSS = 476.984375Mb, VMS = 478.710938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 15
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.502965s, Solving = 19.115552s, Total = 25.618516s, Memory = (RSS = 476.984375Mb, VMS = 478.710938Mb)), Calls = 24
Final Model :: Total atoms = 24148, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-22-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=52, end_step=53, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.5029645999999275, solving_time=19.115551800000105, total_time=25.618516400000033, memory=Memory(rss=476.984375, vms=478.7109375), step_range=range(29, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32786600000002863, solving_time=8.587628999999993, total_time=8.915495000000021, memory=Memory(rss=476.984375, vms=478.7109375), step_range=range(53, 54), clingo_stats={'problem': {'lp': {'atoms': 163496.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1598604.0, 'bodies_tr': 1598604.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7995.0, 'count_bodies_tr': 7995.0, 'sccs': 709.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 28686.0, 'rules': 3068183.0, 'rules_normal': 3059220.0, 'rules_choice': 8507.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 3068068.0, 'rules_tr_normal': 3059220.0, 'rules_tr_choice': 8507.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 317.0, 'eqs': 360528.0, 'eqs_atom': 94869.0, 'eqs_body': 9928.0, 'eqs_other': 255731.0}, 'lpStep': {'atoms': 6788.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68142.0, 'bodies_tr': 68142.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130757.0, 'rules_normal': 130405.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130757.0, 'rules_tr_normal': 130405.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15034.0, 'eqs_atom': 3988.0, 'eqs_body': 113.0, 'eqs_other': 10933.0}, 'generator': {'vars': 95107.0, 'vars_eliminated': 0.0, 'vars_frozen': 56663.0, 'constraints': 23357.0, 'constraints_binary': 1234005.0, 'constraints_ternary': 123595.0, 'acyc_edges': 0.0, 'complexity': 1383121.0}}, 'solving': {'solvers': {'choices': 39473.0, 'conflicts': 26909.0, 'conflicts_analyzed': 26909.0, 'restarts': 64.0, 'restarts_last': 1123.0, 'extra': {'domain_choices': 32661.0, 'models': 1.0, 'models_level': 628.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 100293.0, 'distributed': 13970.0, 'distributed_sum_lbd': 50596.0, 'integrated': 83714.0, 'lemmas': 125800.0, 'lits_learnt': 10769211.0, 'lemmas_binary': 4101.0, 'lemmas_ternary': 1517.0, 'cpu_time': 59.53125, 'integrated_imps': 3720.0, 'integrated_jumps': 4178.0, 'guiding_paths_lits': 3332.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 26905.0, 'lemmas_loop': 15212.0, 'lemmas_other': 83683.0, 'lits_conflict': 2884641.0, 'lits_loop': 248876.0, 'lits_other': 7635694.0, 'jumps': {'jumps': 26909.0, 'jumps_bounded': 15.0, 'levels': 36941.0, 'levels_bounded': 1915.0, 'max': 505.0, 'max_executed': 505.0, 'max_bounded': 476.0}}}}, 'summary': {'call': 24.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 8.940221786499023, 'cpu': 59.953125, 'solve': 8.525382995605469, 'unsat': 0.0, 'sat': 8.462457656860352}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 25.85625457763672, 'cpu': 131.484375, 'solve': 18.093948364257812, 'unsat': 3.8871707916259766, 'sat': 13.607593536376953}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 99524.0, 'conflicts': 59736.0, 'conflicts_analyzed': 59690.0, 'restarts': 172.0, 'restarts_last': 2898.0, 'extra': {'domain_choices': 73865.0, 'models': 15.0, 'models_level': 4863.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 157616.0, 'distributed': 37040.0, 'distributed_sum_lbd': 128126.0, 'integrated': 219357.0, 'lemmas': 330254.0, 'lits_learnt': 22727614.0, 'lemmas_binary': 15752.0, 'lemmas_ternary': 4339.0, 'cpu_time': 123.734375, 'integrated_imps': 17515.0, 'integrated_jumps': 14723.0, 'guiding_paths_lits': 43441.0, 'guiding_paths': 178.0, 'splits': 0.0, 'lemmas_conflict': 59621.0, 'lemmas_loop': 52793.0, 'lemmas_other': 217840.0, 'lits_conflict': 5358054.0, 'lits_loop': 821078.0, 'lits_other': 16548482.0, 'jumps': {'jumps': 59690.0, 'jumps_bounded': 164.0, 'levels': 90484.0, 'levels_bounded': 10747.0, 'max': 505.0, 'max_executed': 505.0, 'max_bounded': 476.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 47, 29: 50, 30: 51, 31: 53}

[12-11-2021_15-22-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 32 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 15 ( 88.24% solved)

[12-11-2021_15-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(32, 53)', truth=True, inc_range=None)

[12-11-2021_15-22-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 32, step = 53]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 32)

[12-11-2021_15-22-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(29)]), ('plan_module', [Number(54), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.324185s.

[12-11-2021_15-22-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 54: original = External(symbol='current_last_sgoals(32, 53)', truth=True, inc_range=None), conversion = current_last_sgoals(32,53).

[12-11-2021_15-22-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.296587s with result Unsatisfiable.

[12-11-2021_15-22-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 1.6207724000000212, Incremental time limit = None
Running cumulative time = 27.239288800000054, Cumulative time limit = 3600
Used memory = (RSS = 489.222656Mb, VMS = 488.093750Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.827149899999938, solving_time=20.412138900000116, total_time=27.239288800000054, memory=Memory(rss=489.22265625, vms=488.09375), step_range=range(29, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32418530000001056, solving_time=1.2965871000000107, total_time=1.6207724000000212, memory=Memory(rss=489.22265625, vms=488.09375), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 170296.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1666776.0, 'bodies_tr': 1666776.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8325.0, 'count_bodies_tr': 8325.0, 'sccs': 740.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 30216.0, 'rules': 3199106.0, 'rules_normal': 3189791.0, 'rules_choice': 8840.0, 'rules_minimize': 25.0, 'rules_acyc': 0.0, 'rules_heuristic': 450.0, 'rules_tr': 3198991.0, 'rules_tr_normal': 3189791.0, 'rules_tr_choice': 8840.0, 'rules_tr_minimize': 25.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 335.0, 'eqs': 375634.0, 'eqs_atom': 98869.0, 'eqs_body': 10041.0, 'eqs_other': 266724.0}, 'lpStep': {'atoms': 6800.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68172.0, 'bodies_tr': 68172.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 130923.0, 'rules_normal': 130571.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 130923.0, 'rules_tr_normal': 130571.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15106.0, 'eqs_atom': 4000.0, 'eqs_body': 113.0, 'eqs_other': 10993.0}, 'generator': {'vars': 100122.0, 'vars_eliminated': 0.0, 'vars_frozen': 59635.0, 'constraints': 24629.0, 'constraints_binary': 1295779.0, 'constraints_ternary': 130543.0, 'acyc_edges': 0.0, 'complexity': 1453225.0}}, 'solving': {'solvers': {'choices': 6591.0, 'conflicts': 3653.0, 'conflicts_analyzed': 3647.0, 'restarts': 13.0, 'restarts_last': 590.0, 'extra': {'domain_choices': 4457.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 14797.0, 'distributed': 2745.0, 'distributed_sum_lbd': 9140.0, 'integrated': 16423.0, 'lemmas': 21639.0, 'lits_learnt': 2068679.0, 'lemmas_binary': 674.0, 'lemmas_ternary': 202.0, 'cpu_time': 8.921875, 'integrated_imps': 2062.0, 'integrated_jumps': 1587.0, 'guiding_paths_lits': 3465.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3644.0, 'lemmas_loop': 2375.0, 'lemmas_other': 15620.0, 'lits_conflict': 406721.0, 'lits_loop': 36985.0, 'lits_other': 1624973.0, 'jumps': {'jumps': 3647.0, 'jumps_bounded': 10.0, 'levels': 5489.0, 'levels_bounded': 504.0, 'max': 501.0, 'max_executed': 501.0, 'max_bounded': 495.0}}}}, 'summary': {'call': 25.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 1.6556396484375, 'cpu': 9.328125, 'solve': 1.2316932678222656, 'unsat': 1.2316932678222656, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 27.51189422607422, 'cpu': 140.8125, 'solve': 19.325641632080078, 'unsat': 5.118864059448242, 'sat': 13.607593536376953}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 106115.0, 'conflicts': 63389.0, 'conflicts_analyzed': 63337.0, 'restarts': 185.0, 'restarts_last': 2898.0, 'extra': {'domain_choices': 78322.0, 'models': 15.0, 'models_level': 4863.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 172413.0, 'distributed': 39785.0, 'distributed_sum_lbd': 137266.0, 'integrated': 235780.0, 'lemmas': 351893.0, 'lits_learnt': 24796293.0, 'lemmas_binary': 16426.0, 'lemmas_ternary': 4541.0, 'cpu_time': 132.65625, 'integrated_imps': 19577.0, 'integrated_jumps': 16310.0, 'guiding_paths_lits': 46906.0, 'guiding_paths': 185.0, 'splits': 0.0, 'lemmas_conflict': 63265.0, 'lemmas_loop': 55168.0, 'lemmas_other': 233460.0, 'lits_conflict': 5764775.0, 'lits_loop': 858063.0, 'lits_other': 18173455.0, 'jumps': {'jumps': 63337.0, 'jumps_bounded': 174.0, 'levels': 95973.0, 'levels_bounded': 11251.0, 'max': 505.0, 'max_executed': 505.0, 'max_bounded': 495.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-38] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(29)]), ('plan_module', [Number(55), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.331617s.

[12-11-2021_15-22-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-22-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 9.620822s with result Unsatisfiable.

[12-11-2021_15-22-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 9.952439099999992, Incremental time limit = None
Running cumulative time = 37.191727900000046, Cumulative time limit = 3600
Used memory = (RSS = 516.687500Mb, VMS = 540.855469Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-22-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=54, end_step=55, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.15876679999991, solving_time=30.032961100000136, total_time=37.191727900000046, memory=Memory(rss=516.6875, vms=540.85546875), step_range=range(29, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3316168999999718, solving_time=9.62082220000002, total_time=9.952439099999992, memory=Memory(rss=516.6875, vms=540.85546875), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 177108.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1734978.0, 'bodies_tr': 1734978.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8655.0, 'count_bodies_tr': 8655.0, 'sccs': 771.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 31746.0, 'rules': 3330195.0, 'rules_normal': 3320528.0, 'rules_choice': 9173.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 3330080.0, 'rules_tr_normal': 3320528.0, 'rules_tr_choice': 9173.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 353.0, 'eqs': 390812.0, 'eqs_atom': 102881.0, 'eqs_body': 10154.0, 'eqs_other': 277777.0}, 'lpStep': {'atoms': 6812.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68202.0, 'bodies_tr': 68202.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131089.0, 'rules_normal': 130737.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131089.0, 'rules_tr_normal': 130737.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15178.0, 'eqs_atom': 4012.0, 'eqs_body': 113.0, 'eqs_other': 11053.0}, 'generator': {'vars': 105137.0, 'vars_eliminated': 0.0, 'vars_frozen': 62607.0, 'constraints': 25989.0, 'constraints_binary': 1370135.0, 'constraints_ternary': 137942.0, 'acyc_edges': 0.0, 'complexity': 1536450.0}}, 'solving': {'solvers': {'choices': 40046.0, 'conflicts': 28209.0, 'conflicts_analyzed': 28204.0, 'restarts': 60.0, 'restarts_last': 4794.0, 'extra': {'domain_choices': 36183.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 90659.0, 'distributed': 17185.0, 'distributed_sum_lbd': 62369.0, 'integrated': 103102.0, 'lemmas': 142465.0, 'lits_learnt': 15319881.0, 'lemmas_binary': 3012.0, 'lemmas_ternary': 1193.0, 'cpu_time': 66.578125, 'integrated_imps': 7720.0, 'integrated_jumps': 5616.0, 'guiding_paths_lits': 3598.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 28203.0, 'lemmas_loop': 11773.0, 'lemmas_other': 102489.0, 'lits_conflict': 3544765.0, 'lits_loop': 192926.0, 'lits_other': 11582190.0, 'jumps': {'jumps': 28204.0, 'jumps_bounded': 6.0, 'levels': 34308.0, 'levels_bounded': 6.0, 'max': 27.0, 'max_executed': 27.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 9.98638916015625, 'cpu': 67.015625, 'solve': 9.554813385009766, 'unsat': 9.554813385009766, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 37.49828338623047, 'cpu': 207.828125, 'solve': 28.880455017089844, 'unsat': 14.673677444458008, 'sat': 13.607593536376953}, 'models': {'enumerated': 15.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 146161.0, 'conflicts': 91598.0, 'conflicts_analyzed': 91541.0, 'restarts': 245.0, 'restarts_last': 4794.0, 'extra': {'domain_choices': 114505.0, 'models': 15.0, 'models_level': 4863.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 263072.0, 'distributed': 56970.0, 'distributed_sum_lbd': 199635.0, 'integrated': 338882.0, 'lemmas': 494358.0, 'lits_learnt': 40116174.0, 'lemmas_binary': 19438.0, 'lemmas_ternary': 5734.0, 'cpu_time': 199.234375, 'integrated_imps': 27297.0, 'integrated_jumps': 21926.0, 'guiding_paths_lits': 50504.0, 'guiding_paths': 192.0, 'splits': 0.0, 'lemmas_conflict': 91468.0, 'lemmas_loop': 66941.0, 'lemmas_other': 335949.0, 'lits_conflict': 9309540.0, 'lits_loop': 1050989.0, 'lits_other': 29755645.0, 'jumps': {'jumps': 91541.0, 'jumps_bounded': 180.0, 'levels': 130281.0, 'levels_bounded': 11257.0, 'max': 505.0, 'max_executed': 505.0, 'max_bounded': 495.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-22-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-22-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-22-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(29)]), ('plan_module', [Number(56), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-22-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.365630s.

[12-11-2021_15-22-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-23-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 23.895653s with result Satisfiable.

[12-11-2021_15-23-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 24.261283700000035, Incremental time limit = None
Running cumulative time = 61.45301160000008, Cumulative time limit = 3600
Used memory = (RSS = 554.898438Mb, VMS = 579.136719Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-23-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 16
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.524397s, Solving = 53.928615s, Total = 61.453012s, Memory = (RSS = 554.898438Mb, VMS = 579.136719Mb)), Calls = 27
Final Model :: Total atoms = 26370, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-23-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=55, end_step=56, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.524397099999931, solving_time=53.92861450000015, total_time=61.45301160000008, memory=Memory(rss=554.8984375, vms=579.13671875), step_range=range(29, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3656303000000207, solving_time=23.895653400000015, total_time=24.261283700000035, memory=Memory(rss=554.8984375, vms=579.13671875), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 183932.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1803209.0, 'bodies_tr': 1803209.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8985.0, 'count_bodies_tr': 8985.0, 'sccs': 802.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 33276.0, 'rules': 3461449.0, 'rules_normal': 3451430.0, 'rules_choice': 9506.0, 'rules_minimize': 27.0, 'rules_acyc': 0.0, 'rules_heuristic': 486.0, 'rules_tr': 3461334.0, 'rules_tr_normal': 3451430.0, 'rules_tr_choice': 9506.0, 'rules_tr_minimize': 27.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 371.0, 'eqs': 406059.0, 'eqs_atom': 106904.0, 'eqs_body': 10267.0, 'eqs_other': 288888.0}, 'lpStep': {'atoms': 6824.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68231.0, 'bodies_tr': 68231.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131254.0, 'rules_normal': 130902.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131254.0, 'rules_tr_normal': 130902.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15247.0, 'eqs_atom': 4023.0, 'eqs_body': 113.0, 'eqs_other': 11111.0}, 'generator': {'vars': 110152.0, 'vars_eliminated': 0.0, 'vars_frozen': 65579.0, 'constraints': 27343.0, 'constraints_binary': 1443570.0, 'constraints_ternary': 145307.0, 'acyc_edges': 0.0, 'complexity': 1618714.0}}, 'solving': {'solvers': {'choices': 113555.0, 'conflicts': 82293.0, 'conflicts_analyzed': 82293.0, 'restarts': 138.0, 'restarts_last': 12007.0, 'extra': {'domain_choices': 100009.0, 'models': 1.0, 'models_level': 703.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 355170.0, 'distributed': 35879.0, 'distributed_sum_lbd': 132051.0, 'integrated': 215211.0, 'lemmas': 316734.0, 'lits_learnt': 39012163.0, 'lemmas_binary': 6811.0, 'lemmas_ternary': 3602.0, 'cpu_time': 164.546875, 'integrated_imps': 9468.0, 'integrated_jumps': 8996.0, 'guiding_paths_lits': 4264.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 82288.0, 'lemmas_loop': 19435.0, 'lemmas_other': 215011.0, 'lits_conflict': 11731683.0, 'lits_loop': 327511.0, 'lits_other': 26952969.0, 'jumps': {'jumps': 82293.0, 'jumps_bounded': 10.0, 'levels': 106145.0, 'levels_bounded': 2138.0, 'max': 543.0, 'max_executed': 543.0, 'max_bounded': 533.0}}}}, 'summary': {'call': 27.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 24.305936813354492, 'cpu': 165.0, 'solve': 23.8256778717041, 'unsat': 0.0, 'sat': 23.74769401550293}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 61.80422019958496, 'cpu': 372.828125, 'solve': 52.706132888793945, 'unsat': 14.673677444458008, 'sat': 37.35528755187988}, 'models': {'enumerated': 16.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 259716.0, 'conflicts': 173891.0, 'conflicts_analyzed': 173834.0, 'restarts': 383.0, 'restarts_last': 12007.0, 'extra': {'domain_choices': 214514.0, 'models': 16.0, 'models_level': 5566.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 618242.0, 'distributed': 92849.0, 'distributed_sum_lbd': 331686.0, 'integrated': 554093.0, 'lemmas': 811092.0, 'lits_learnt': 79128337.0, 'lemmas_binary': 26249.0, 'lemmas_ternary': 9336.0, 'cpu_time': 363.78125, 'integrated_imps': 36765.0, 'integrated_jumps': 30922.0, 'guiding_paths_lits': 54768.0, 'guiding_paths': 200.0, 'splits': 0.0, 'lemmas_conflict': 173756.0, 'lemmas_loop': 86376.0, 'lemmas_other': 550960.0, 'lits_conflict': 21041223.0, 'lits_loop': 1378500.0, 'lits_other': 56708614.0, 'jumps': {'jumps': 173834.0, 'jumps_bounded': 190.0, 'levels': 236426.0, 'levels_bounded': 13395.0, 'max': 543.0, 'max_executed': 543.0, 'max_bounded': 533.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-23-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 47, 29: 50, 30: 51, 31: 53, 32: 56}

[12-11-2021_15-23-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 33 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 16 ( 94.12% solved)

[12-11-2021_15-23-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(33, 56)', truth=True, inc_range=None)

[12-11-2021_15-23-12] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 33, step = 56]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 33)

[12-11-2021_15-23-12] DEBUG :: ASH Planner Main #1 >> Reaction at search length 56:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-23-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-23-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(29)]), ('plan_module', [Number(57), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.369704s.

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='current_last_sgoals(33, 56)', truth=True, inc_range=None), conversion = current_last_sgoals(33,56).

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.460276s with result Satisfiable.

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.8299799000000121, Incremental time limit = None
Running cumulative time = 62.282991500000094, Cumulative time limit = 3600
Used memory = (RSS = 571.894531Mb, VMS = 592.773438Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.894101s, Solving = 54.388890s, Total = 62.282992s, Memory = (RSS = 571.894531Mb, VMS = 592.773438Mb)), Calls = 28
Final Model :: Total atoms = 27114, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-23-13] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=56, end_step=57, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.894101299999932, solving_time=54.38889020000016, total_time=62.282991500000094, memory=Memory(rss=571.89453125, vms=592.7734375), step_range=range(29, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.36970420000000104, solving_time=0.46027570000001106, total_time=0.8299799000000121, memory=Memory(rss=571.89453125, vms=592.7734375), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 190767.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1871470.0, 'bodies_tr': 1871470.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9315.0, 'count_bodies_tr': 9315.0, 'sccs': 833.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 34806.0, 'rules': 3592869.0, 'rules_normal': 3582498.0, 'rules_choice': 9839.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 504.0, 'rules_tr': 3592754.0, 'rules_tr_normal': 3582498.0, 'rules_tr_choice': 9839.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 389.0, 'eqs': 421378.0, 'eqs_atom': 110939.0, 'eqs_body': 10380.0, 'eqs_other': 300059.0}, 'lpStep': {'atoms': 6835.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68261.0, 'bodies_tr': 68261.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131420.0, 'rules_normal': 131068.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131420.0, 'rules_tr_normal': 131068.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15319.0, 'eqs_atom': 4035.0, 'eqs_body': 113.0, 'eqs_other': 11171.0}, 'generator': {'vars': 115167.0, 'vars_eliminated': 0.0, 'vars_frozen': 68551.0, 'constraints': 28700.0, 'constraints_binary': 1516385.0, 'constraints_ternary': 152386.0, 'acyc_edges': 0.0, 'complexity': 1700075.0}}, 'solving': {'solvers': {'choices': 1653.0, 'conflicts': 1074.0, 'conflicts_analyzed': 1074.0, 'restarts': 4.0, 'restarts_last': 190.0, 'extra': {'domain_choices': 1359.0, 'models': 1.0, 'models_level': 728.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 664.0, 'distributed_sum_lbd': 2458.0, 'integrated': 3339.0, 'lemmas': 4790.0, 'lits_learnt': 538939.0, 'lemmas_binary': 61.0, 'lemmas_ternary': 43.0, 'cpu_time': 2.734375, 'integrated_imps': 330.0, 'integrated_jumps': 164.0, 'guiding_paths_lits': 3864.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1074.0, 'lemmas_loop': 383.0, 'lemmas_other': 3333.0, 'lits_conflict': 145586.0, 'lits_loop': 5128.0, 'lits_other': 388225.0, 'jumps': {'jumps': 1074.0, 'jumps_bounded': 3.0, 'levels': 1296.0, 'levels_bounded': 3.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.8736457824707031, 'cpu': 3.21875, 'solve': 0.38399696350097656, 'unsat': 0.0, 'sat': 0.051349639892578125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 62.677865982055664, 'cpu': 376.046875, 'solve': 53.09012985229492, 'unsat': 14.673677444458008, 'sat': 37.40663719177246}, 'models': {'enumerated': 17.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 261369.0, 'conflicts': 174965.0, 'conflicts_analyzed': 174908.0, 'restarts': 387.0, 'restarts_last': 12007.0, 'extra': {'domain_choices': 215873.0, 'models': 17.0, 'models_level': 6294.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 618242.0, 'distributed': 93513.0, 'distributed_sum_lbd': 334144.0, 'integrated': 557432.0, 'lemmas': 815882.0, 'lits_learnt': 79667276.0, 'lemmas_binary': 26310.0, 'lemmas_ternary': 9379.0, 'cpu_time': 366.515625, 'integrated_imps': 37095.0, 'integrated_jumps': 31086.0, 'guiding_paths_lits': 58632.0, 'guiding_paths': 207.0, 'splits': 0.0, 'lemmas_conflict': 174830.0, 'lemmas_loop': 86759.0, 'lemmas_other': 554293.0, 'lits_conflict': 21186809.0, 'lits_loop': 1383628.0, 'lits_other': 57096839.0, 'jumps': {'jumps': 174908.0, 'jumps_bounded': 193.0, 'levels': 237722.0, 'levels_bounded': 13398.0, 'max': 543.0, 'max_executed': 543.0, 'max_bounded': 533.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-23-13] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 47, 29: 50, 30: 51, 31: 53, 32: 56, 33: 57}

[12-11-2021_15-23-13] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 34 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 17 (100.00% solved)

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(34, 57)', truth=True, inc_range=None)

[12-11-2021_15-23-13] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 34, step = 57]:
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 34)

[12-11-2021_15-23-13] DEBUG :: ASH Planner Main #1 >> Reaction at search length 57:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-23-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(29)]), ('plan_module', [Number(58), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-23-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.346621s.

[12-11-2021_15-23-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='current_last_sgoals(34, 57)', truth=True, inc_range=None), conversion = current_last_sgoals(34,57).

[12-11-2021_15-23-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-23-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 5.795006s with result Unsatisfiable.

[12-11-2021_15-23-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 6.1416275999999925, Incremental time limit = None
Running cumulative time = 68.42461910000009, Cumulative time limit = 3600
Used memory = (RSS = 583.398438Mb, VMS = 601.093750Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-23-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=57, end_step=58, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=8.2407227999999, solving_time=60.183896300000185, total_time=68.42461910000009, memory=Memory(rss=583.3984375, vms=601.09375), step_range=range(29, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3466214999999693, solving_time=5.795006100000023, total_time=6.1416275999999925, memory=Memory(rss=583.3984375, vms=601.09375), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 197614.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 1939761.0, 'bodies_tr': 1939761.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9645.0, 'count_bodies_tr': 9645.0, 'sccs': 864.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 36336.0, 'rules': 3724455.0, 'rules_normal': 3713732.0, 'rules_choice': 10172.0, 'rules_minimize': 29.0, 'rules_acyc': 0.0, 'rules_heuristic': 522.0, 'rules_tr': 3724340.0, 'rules_tr_normal': 3713732.0, 'rules_tr_choice': 10172.0, 'rules_tr_minimize': 29.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 407.0, 'eqs': 436769.0, 'eqs_atom': 114986.0, 'eqs_body': 10493.0, 'eqs_other': 311290.0}, 'lpStep': {'atoms': 6847.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68291.0, 'bodies_tr': 68291.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131586.0, 'rules_normal': 131234.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131586.0, 'rules_tr_normal': 131234.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15391.0, 'eqs_atom': 4047.0, 'eqs_body': 113.0, 'eqs_other': 11231.0}, 'generator': {'vars': 120182.0, 'vars_eliminated': 0.0, 'vars_frozen': 71523.0, 'constraints': 30060.0, 'constraints_binary': 1591199.0, 'constraints_ternary': 159780.0, 'acyc_edges': 0.0, 'complexity': 1783753.0}}, 'solving': {'solvers': {'choices': 30305.0, 'conflicts': 17285.0, 'conflicts_analyzed': 17279.0, 'restarts': 50.0, 'restarts_last': 2857.0, 'extra': {'domain_choices': 23053.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 49760.0, 'distributed': 10664.0, 'distributed_sum_lbd': 38508.0, 'integrated': 63927.0, 'lemmas': 87730.0, 'lits_learnt': 8742947.0, 'lemmas_binary': 2311.0, 'lemmas_ternary': 1295.0, 'cpu_time': 39.96875, 'integrated_imps': 2845.0, 'integrated_jumps': 3485.0, 'guiding_paths_lits': 3997.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 17278.0, 'lemmas_loop': 7266.0, 'lemmas_other': 63186.0, 'lits_conflict': 1946074.0, 'lits_loop': 118032.0, 'lits_other': 6678841.0, 'jumps': {'jumps': 17279.0, 'jumps_bounded': 5.0, 'levels': 26641.0, 'levels_bounded': 5.0, 'max': 37.0, 'max_executed': 37.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 29.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 6.177349090576172, 'cpu': 40.421875, 'solve': 5.725534439086914, 'unsat': 5.725534439086914, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 68.85521507263184, 'cpu': 416.46875, 'solve': 58.815664291381836, 'unsat': 20.399211883544922, 'sat': 37.40663719177246}, 'models': {'enumerated': 17.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 291674.0, 'conflicts': 192250.0, 'conflicts_analyzed': 192187.0, 'restarts': 437.0, 'restarts_last': 12007.0, 'extra': {'domain_choices': 238926.0, 'models': 17.0, 'models_level': 6294.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 668002.0, 'distributed': 104177.0, 'distributed_sum_lbd': 372652.0, 'integrated': 621359.0, 'lemmas': 903612.0, 'lits_learnt': 88410223.0, 'lemmas_binary': 28621.0, 'lemmas_ternary': 10674.0, 'cpu_time': 406.484375, 'integrated_imps': 39940.0, 'integrated_jumps': 34571.0, 'guiding_paths_lits': 62629.0, 'guiding_paths': 214.0, 'splits': 0.0, 'lemmas_conflict': 192108.0, 'lemmas_loop': 94025.0, 'lemmas_other': 617479.0, 'lits_conflict': 23132883.0, 'lits_loop': 1501660.0, 'lits_other': 63775680.0, 'jumps': {'jumps': 192187.0, 'jumps_bounded': 198.0, 'levels': 264363.0, 'levels_bounded': 13403.0, 'max': 543.0, 'max_executed': 543.0, 'max_bounded': 533.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-23-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 58:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-23-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-23-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(29)]), ('plan_module', [Number(59), Number(29), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(29), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(29), Number(18), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-23-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.352384s.

[12-11-2021_15-23-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 51.686820s with result Satisfiable.

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 52.03920429999994, Incremental time limit = None
Running cumulative time = 120.46382340000002, Cumulative time limit = 3600
Used memory = (RSS = 624.253906Mb, VMS = 641.292969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 18
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.593107s, Solving = 111.870717s, Total = 120.463823s, Memory = (RSS = 624.253906Mb, VMS = 641.292969Mb)), Calls = 30
Final Model :: Total atoms = 28599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-24-12] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=58, end_step=59, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.593106799999873, solving_time=111.87071660000015, total_time=120.46382340000002, memory=Memory(rss=624.25390625, vms=641.29296875), step_range=range(29, 60), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3523839999999723, solving_time=51.686820299999965, total_time=52.03920429999994, memory=Memory(rss=624.25390625, vms=641.29296875), step_range=range(59, 60), clingo_stats={'problem': {'lp': {'atoms': 204473.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 2008082.0, 'bodies_tr': 2008082.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9975.0, 'count_bodies_tr': 9975.0, 'sccs': 895.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37866.0, 'rules': 3856207.0, 'rules_normal': 3845132.0, 'rules_choice': 10505.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 540.0, 'rules_tr': 3856092.0, 'rules_tr_normal': 3845132.0, 'rules_tr_choice': 10505.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 425.0, 'eqs': 452232.0, 'eqs_atom': 119045.0, 'eqs_body': 10606.0, 'eqs_other': 322581.0}, 'lpStep': {'atoms': 6859.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68321.0, 'bodies_tr': 68321.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 131752.0, 'rules_normal': 131400.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 131752.0, 'rules_tr_normal': 131400.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 15463.0, 'eqs_atom': 4059.0, 'eqs_body': 113.0, 'eqs_other': 11291.0}, 'generator': {'vars': 125197.0, 'vars_eliminated': 0.0, 'vars_frozen': 74495.0, 'constraints': 31420.0, 'constraints_binary': 1666168.0, 'constraints_ternary': 167184.0, 'acyc_edges': 0.0, 'complexity': 1867596.0}}, 'solving': {'solvers': {'choices': 198263.0, 'conflicts': 148956.0, 'conflicts_analyzed': 148956.0, 'restarts': 187.0, 'restarts_last': 7217.0, 'extra': {'domain_choices': 179111.0, 'models': 1.0, 'models_level': 779.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 403519.0, 'distributed': 40151.0, 'distributed_sum_lbd': 146844.0, 'integrated': 240972.0, 'lemmas': 418925.0, 'lits_learnt': 52193096.0, 'lemmas_binary': 7844.0, 'lemmas_ternary': 5767.0, 'cpu_time': 337.453125, 'integrated_imps': 5146.0, 'integrated_jumps': 5676.0, 'guiding_paths_lits': 4720.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 148955.0, 'lemmas_loop': 29065.0, 'lemmas_other': 240905.0, 'lits_conflict': 23572634.0, 'lits_loop': 494005.0, 'lits_other': 28126457.0, 'jumps': {'jumps': 148956.0, 'jumps_bounded': 17.0, 'levels': 193616.0, 'levels_bounded': 1797.0, 'max': 620.0, 'max_executed': 620.0, 'max_bounded': 590.0}}}}, 'summary': {'call': 30.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 52.08479118347168, 'cpu': 337.921875, 'solve': 51.61204719543457, 'unsat': 0.0, 'sat': 51.50805854797363}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 120.94000625610352, 'cpu': 754.390625, 'solve': 110.4277114868164, 'unsat': 20.399211883544922, 'sat': 88.9146957397461}, 'models': {'enumerated': 18.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 489937.0, 'conflicts': 341206.0, 'conflicts_analyzed': 341143.0, 'restarts': 624.0, 'restarts_last': 12007.0, 'extra': {'domain_choices': 418037.0, 'models': 18.0, 'models_level': 7073.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 1071521.0, 'distributed': 144328.0, 'distributed_sum_lbd': 519496.0, 'integrated': 862331.0, 'lemmas': 1322537.0, 'lits_learnt': 140603319.0, 'lemmas_binary': 36465.0, 'lemmas_ternary': 16441.0, 'cpu_time': 743.9375, 'integrated_imps': 45086.0, 'integrated_jumps': 40247.0, 'guiding_paths_lits': 67349.0, 'guiding_paths': 222.0, 'splits': 0.0, 'lemmas_conflict': 341063.0, 'lemmas_loop': 123090.0, 'lemmas_other': 858384.0, 'lits_conflict': 46705517.0, 'lits_loop': 1995665.0, 'lits_other': 91902137.0, 'jumps': {'jumps': 341143.0, 'jumps_bounded': 215.0, 'levels': 457979.0, 'levels_bounded': 15200.0, 'max': 620.0, 'max_executed': 620.0, 'max_bounded': 590.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-12] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 32, 19: 33, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 47, 29: 50, 30: 51, 31: 53, 32: 56, 33: 57, 34: 59}

[12-11-2021_15-24-12] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 35 achieved :: Progression >> total requested sgoals = 17, current total achieved sgoals = 18 (105.88% solved)

[12-11-2021_15-24-12] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 34 was achieved successfully.

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.289263s, Solving = 0.036328s, Total = 0.325590s, Memory = (RSS = 247.457031Mb, VMS = 245.156250Mb)
2 : Statistics :: Grounding = 0.203725s, Solving = 0.015980s, Total = 0.219705s, Memory = (RSS = 252.199219Mb, VMS = 250.960938Mb)
3 : Statistics :: Grounding = 0.214694s, Solving = 0.026328s, Total = 0.241022s, Memory = (RSS = 255.433594Mb, VMS = 253.656250Mb)
4 : Statistics :: Grounding = 0.204080s, Solving = 0.027552s, Total = 0.231632s, Memory = (RSS = 257.464844Mb, VMS = 255.222656Mb)
5 : Statistics :: Grounding = 0.230168s, Solving = 0.023670s, Total = 0.253838s, Memory = (RSS = 260.347656Mb, VMS = 257.632812Mb)
6 : Statistics :: Grounding = 0.221185s, Solving = 0.043278s, Total = 0.264463s, Memory = (RSS = 268.738281Mb, VMS = 267.585938Mb)
7 : Statistics :: Grounding = 0.226426s, Solving = 0.049154s, Total = 0.275580s, Memory = (RSS = 271.800781Mb, VMS = 270.054688Mb)
8 : Statistics :: Grounding = 0.227896s, Solving = 0.048935s, Total = 0.276831s, Memory = (RSS = 281.324219Mb, VMS = 280.882812Mb)
9 : Statistics :: Grounding = 0.233423s, Solving = 0.078387s, Total = 0.311810s, Memory = (RSS = 295.203125Mb, VMS = 299.363281Mb)
10 : Statistics :: Grounding = 0.253275s, Solving = 0.067456s, Total = 0.320731s, Memory = (RSS = 302.855469Mb, VMS = 304.902344Mb)
11 : Statistics :: Grounding = 0.254366s, Solving = 0.087578s, Total = 0.341944s, Memory = (RSS = 310.433594Mb, VMS = 310.363281Mb)
12 : Statistics :: Grounding = 0.259074s, Solving = 0.118849s, Total = 0.377923s, Memory = (RSS = 324.082031Mb, VMS = 328.871094Mb)
13 : Statistics :: Grounding = 0.261607s, Solving = 0.072151s, Total = 0.333757s, Memory = (RSS = 332.425781Mb, VMS = 334.656250Mb)
14 : Statistics :: Grounding = 0.286945s, Solving = 0.090442s, Total = 0.377388s, Memory = (RSS = 345.265625Mb, VMS = 344.339844Mb)
15 : Statistics :: Grounding = 0.289090s, Solving = 0.207851s, Total = 0.496941s, Memory = (RSS = 366.269531Mb, VMS = 376.984375Mb)
16 : Statistics :: Grounding = 0.277911s, Solving = 0.665758s, Total = 0.943670s, Memory = (RSS = 373.968750Mb, VMS = 381.820312Mb)
17 : Statistics :: Grounding = 0.302148s, Solving = 0.623903s, Total = 0.926051s, Memory = (RSS = 381.218750Mb, VMS = 385.613281Mb)
18 : Statistics :: Grounding = 0.428768s, Solving = 0.126110s, Total = 0.554878s, Memory = (RSS = 396.593750Mb, VMS = 397.167969Mb)
19 : Statistics :: Grounding = 0.289882s, Solving = 0.405027s, Total = 0.694909s, Memory = (RSS = 405.832031Mb, VMS = 421.183594Mb)
20 : Statistics :: Grounding = 0.293349s, Solving = 2.181484s, Total = 2.474832s, Memory = (RSS = 416.355469Mb, VMS = 428.960938Mb)
21 : Statistics :: Grounding = 0.309092s, Solving = 4.596726s, Total = 4.905818s, Memory = (RSS = 429.417969Mb, VMS = 439.382812Mb)
22 : Statistics :: Grounding = 0.307459s, Solving = 0.284245s, Total = 0.591704s, Memory = (RSS = 441.312500Mb, VMS = 448.484375Mb)
23 : Statistics :: Grounding = 0.311272s, Solving = 0.650732s, Total = 0.962005s, Memory = (RSS = 449.574219Mb, VMS = 453.429688Mb)
24 : Statistics :: Grounding = 0.327866s, Solving = 8.587629s, Total = 8.915495s, Memory = (RSS = 476.984375Mb, VMS = 478.710938Mb)
25 : Statistics :: Grounding = 0.324185s, Solving = 1.296587s, Total = 1.620772s, Memory = (RSS = 489.222656Mb, VMS = 488.093750Mb)
26 : Statistics :: Grounding = 0.331617s, Solving = 9.620822s, Total = 9.952439s, Memory = (RSS = 516.687500Mb, VMS = 540.855469Mb)
27 : Statistics :: Grounding = 0.365630s, Solving = 23.895653s, Total = 24.261284s, Memory = (RSS = 554.898438Mb, VMS = 579.136719Mb)
28 : Statistics :: Grounding = 0.369704s, Solving = 0.460276s, Total = 0.829980s, Memory = (RSS = 571.894531Mb, VMS = 592.773438Mb)
29 : Statistics :: Grounding = 0.346621s, Solving = 5.795006s, Total = 6.141628s, Memory = (RSS = 583.398438Mb, VMS = 601.093750Mb)
30 : Statistics :: Grounding = 0.352384s, Solving = 51.686820s, Total = 52.039204s, Memory = (RSS = 624.253906Mb, VMS = 641.292969Mb)

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 120.463823s due to: External generator exit.

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 26, 44: 27, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 31, 53: 31, 54: 32, 55: 32, 56: 32, 57: 33, 58: 33, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 48, 29: 50, 30: 51, 31: 53, 32: 56, 33: 58, 34: 59}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 34, Last requested goal index = 34 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.593107s, Solving = 111.870717s, Total = 120.463823s, Memory = (RSS = 624.253906Mb, VMS = 641.292969Mb)), Calls = 30
Model :: Total atoms = 28599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 30 :: Actions = 30                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_1,(block,8),(block,9))
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,8))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 43:
    Current Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 44:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 59:
    Current Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 26 : Achieved sgoals = 13 : Unachieved sgoals = 13
Level = 1 : Solved problems = 2 : Total constraining sgoals = 34 : Achieved sgoals = 34 : Unachieved sgoals = 0

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [2-2]

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 3 by method ground-first: [1-2]

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 2:
Divided plan : Level =  3 (classic), Length =  26, Actions =  26 (Com = 1.00), Sgs = 26, Time = 173.028s (Gro =   4.159s, Sea = 168.869s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 13, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [14-26]

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [14-26], problem number = 2, increment number = 3

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 14)
	('last_sgoals', 26)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 14
last_sgoals = 26
start_step = 34
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 46

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [14-26] : Minimum search length bound = disabled with value = 46

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[12-11-2021_15-24-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[12-11-2021_15-24-13] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 34 as problem start state.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 34})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 34})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 34})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 34})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 34})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 34})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 34})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'complete(yellow)', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 34})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 34})
Fluent({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 34})
Fluent({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 34})

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 257 rules into program part ash_initial_state:

holds(2, complete(blue), false, 34).
holds(2, complete(red), false, 34).
holds(2, complete(yellow), false, 34).
holds(2, configuration(manipulator_arm_1), extended, 34).
holds(2, configuration(manipulator_arm_2), retracted, 34).
holds(2, configuration(puzzle_room_door), open, 34).
holds(2, configuration(starting_room_door), closed, 34).
holds(2, configuration(store_room_door), open, 34).
holds(2, grasping(manipulator_arm_1), (block,5), 34).
holds(2, grasping(manipulator_arm_2), (block,4), 34).
holds(2, in((block,1)), puzzle_room, 34).
holds(2, in((block,2)), puzzle_room, 34).
holds(2, in((block,3)), puzzle_room, 34).
holds(2, in((block,4)), puzzle_room, 34).
holds(2, in((block,5)), puzzle_room, 34).
holds(2, in((block,6)), puzzle_room, 34).
holds(2, in((block,7)), puzzle_room, 34).
holds(2, in((block,8)), puzzle_room, 34).
holds(2, in((block,9)), puzzle_room, 34).
holds(2, in(manipulator_arm_1), puzzle_room, 34).
holds(2, in(manipulator_arm_2), puzzle_room, 34).
holds(2, in(puzzle_room_table), puzzle_room, 34).
holds(2, in(talos), puzzle_room, 34).
holds(2, in_tower((block,1),(block,1)), true, 34).
holds(2, in_tower((block,1),(block,2)), false, 34).
holds(2, in_tower((block,1),(block,3)), true, 34).
holds(2, in_tower((block,1),(block,4)), false, 34).
holds(2, in_tower((block,1),(block,5)), false, 34).
holds(2, in_tower((block,1),(block,6)), false, 34).
holds(2, in_tower((block,1),(block,7)), false, 34).
holds(2, in_tower((block,1),(block,8)), false, 34).
holds(2, in_tower((block,1),(block,9)), false, 34).
holds(2, in_tower((block,2),(block,1)), false, 34).
holds(2, in_tower((block,2),(block,2)), true, 34).
holds(2, in_tower((block,2),(block,3)), false, 34).
holds(2, in_tower((block,2),(block,4)), false, 34).
holds(2, in_tower((block,2),(block,5)), false, 34).
holds(2, in_tower((block,2),(block,6)), false, 34).
holds(2, in_tower((block,2),(block,7)), false, 34).
holds(2, in_tower((block,2),(block,8)), false, 34).
holds(2, in_tower((block,2),(block,9)), false, 34).
holds(2, in_tower((block,3),(block,1)), false, 34).
holds(2, in_tower((block,3),(block,2)), false, 34).
holds(2, in_tower((block,3),(block,3)), false, 34).
holds(2, in_tower((block,3),(block,4)), false, 34).
holds(2, in_tower((block,3),(block,5)), false, 34).
holds(2, in_tower((block,3),(block,6)), false, 34).
holds(2, in_tower((block,3),(block,7)), false, 34).
holds(2, in_tower((block,3),(block,8)), false, 34).
holds(2, in_tower((block,3),(block,9)), false, 34).
holds(2, in_tower((block,4),(block,1)), false, 34).
holds(2, in_tower((block,4),(block,2)), false, 34).
holds(2, in_tower((block,4),(block,3)), false, 34).
holds(2, in_tower((block,4),(block,4)), false, 34).
holds(2, in_tower((block,4),(block,5)), false, 34).
holds(2, in_tower((block,4),(block,6)), false, 34).
holds(2, in_tower((block,4),(block,7)), false, 34).
holds(2, in_tower((block,4),(block,8)), false, 34).
holds(2, in_tower((block,4),(block,9)), false, 34).
holds(2, in_tower((block,5),(block,1)), false, 34).
holds(2, in_tower((block,5),(block,2)), false, 34).
holds(2, in_tower((block,5),(block,3)), false, 34).
holds(2, in_tower((block,5),(block,4)), false, 34).
holds(2, in_tower((block,5),(block,5)), false, 34).
holds(2, in_tower((block,5),(block,6)), false, 34).
holds(2, in_tower((block,5),(block,7)), false, 34).
holds(2, in_tower((block,5),(block,8)), false, 34).
holds(2, in_tower((block,5),(block,9)), false, 34).
holds(2, in_tower((block,6),(block,1)), false, 34).
holds(2, in_tower((block,6),(block,2)), false, 34).
holds(2, in_tower((block,6),(block,3)), false, 34).
holds(2, in_tower((block,6),(block,4)), false, 34).
holds(2, in_tower((block,6),(block,5)), true, 34).
holds(2, in_tower((block,6),(block,6)), true, 34).
holds(2, in_tower((block,6),(block,7)), false, 34).
holds(2, in_tower((block,6),(block,8)), false, 34).
holds(2, in_tower((block,6),(block,9)), false, 34).
holds(2, in_tower((block,7),(block,1)), false, 34).
holds(2, in_tower((block,7),(block,2)), false, 34).
holds(2, in_tower((block,7),(block,3)), false, 34).
holds(2, in_tower((block,7),(block,4)), false, 34).
holds(2, in_tower((block,7),(block,5)), false, 34).
holds(2, in_tower((block,7),(block,6)), false, 34).
holds(2, in_tower((block,7),(block,7)), true, 34).
holds(2, in_tower((block,7),(block,8)), false, 34).
holds(2, in_tower((block,7),(block,9)), false, 34).
holds(2, in_tower((block,8),(block,1)), false, 34).
holds(2, in_tower((block,8),(block,2)), false, 34).
holds(2, in_tower((block,8),(block,3)), false, 34).
holds(2, in_tower((block,8),(block,4)), false, 34).
holds(2, in_tower((block,8),(block,5)), false, 34).
holds(2, in_tower((block,8),(block,6)), false, 34).
holds(2, in_tower((block,8),(block,7)), false, 34).
holds(2, in_tower((block,8),(block,8)), false, 34).
holds(2, in_tower((block,8),(block,9)), false, 34).
holds(2, in_tower((block,9),(block,1)), false, 34).
holds(2, in_tower((block,9),(block,2)), false, 34).
holds(2, in_tower((block,9),(block,3)), false, 34).
holds(2, in_tower((block,9),(block,4)), false, 34).
holds(2, in_tower((block,9),(block,5)), false, 34).
holds(2, in_tower((block,9),(block,6)), false, 34).
holds(2, in_tower((block,9),(block,7)), false, 34).
holds(2, in_tower((block,9),(block,8)), true, 34).
holds(2, in_tower((block,9),(block,9)), true, 34).
holds(2, on((block,1)), puzzle_room_table, 34).
holds(2, on((block,2)), puzzle_room_table, 34).
holds(2, on((block,3)), (block,1), 34).
holds(2, on((block,4)), nothing, 34).
holds(2, on((block,5)), (block,6), 34).
holds(2, on((block,6)), puzzle_room_table, 34).
holds(2, on((block,7)), puzzle_room_table, 34).
holds(2, on((block,8)), (block,9), 34).
holds(2, on((block,9)), puzzle_room_table, 34).
holds(2, tower_base((block,1)), true, 34).
holds(2, tower_base((block,2)), true, 34).
holds(2, tower_base((block,3)), false, 34).
holds(2, tower_base((block,4)), false, 34).
holds(2, tower_base((block,5)), false, 34).
holds(2, tower_base((block,6)), true, 34).
holds(2, tower_base((block,7)), true, 34).
holds(2, tower_base((block,8)), false, 34).
holds(2, tower_base((block,9)), true, 34).
holds(2, unordered_tower((block,1)), true, 34).
holds(2, unordered_tower((block,2)), false, 34).
holds(2, unordered_tower((block,3)), false, 34).
holds(2, unordered_tower((block,4)), false, 34).
holds(2, unordered_tower((block,5)), false, 34).
holds(2, unordered_tower((block,6)), false, 34).
holds(2, unordered_tower((block,7)), false, 34).
holds(2, unordered_tower((block,8)), false, 34).
holds(2, unordered_tower((block,9)), false, 34).
holds(3, complete(blue), false, 34).
holds(3, complete(red), false, 34).
holds(3, complete(yellow), false, 34).
holds(3, grasping(manipulator_arm_1), (block,5), 34).
holds(3, grasping(manipulator_arm_2), (block,4), 34).
holds(3, in((block,1)), puzzle_room, 34).
holds(3, in((block,2)), puzzle_room, 34).
holds(3, in((block,3)), puzzle_room, 34).
holds(3, in((block,4)), puzzle_room, 34).
holds(3, in((block,5)), puzzle_room, 34).
holds(3, in((block,6)), puzzle_room, 34).
holds(3, in((block,7)), puzzle_room, 34).
holds(3, in((block,8)), puzzle_room, 34).
holds(3, in((block,9)), puzzle_room, 34).
holds(3, in(manipulator_arm_1), puzzle_room, 34).
holds(3, in(manipulator_arm_2), puzzle_room, 34).
holds(3, in(puzzle_room_table), puzzle_room, 34).
holds(3, in(talos), puzzle_room, 34).
holds(3, in_tower((block,1),(block,1)), true, 34).
holds(3, in_tower((block,1),(block,2)), false, 34).
holds(3, in_tower((block,1),(block,3)), true, 34).
holds(3, in_tower((block,1),(block,4)), false, 34).
holds(3, in_tower((block,1),(block,5)), false, 34).
holds(3, in_tower((block,1),(block,6)), false, 34).
holds(3, in_tower((block,1),(block,7)), false, 34).
holds(3, in_tower((block,1),(block,8)), false, 34).
holds(3, in_tower((block,1),(block,9)), false, 34).
holds(3, in_tower((block,2),(block,1)), false, 34).
holds(3, in_tower((block,2),(block,2)), true, 34).
holds(3, in_tower((block,2),(block,3)), false, 34).
holds(3, in_tower((block,2),(block,4)), false, 34).
holds(3, in_tower((block,2),(block,5)), false, 34).
holds(3, in_tower((block,2),(block,6)), false, 34).
holds(3, in_tower((block,2),(block,7)), false, 34).
holds(3, in_tower((block,2),(block,8)), false, 34).
holds(3, in_tower((block,2),(block,9)), false, 34).
holds(3, in_tower((block,3),(block,1)), false, 34).
holds(3, in_tower((block,3),(block,2)), false, 34).
holds(3, in_tower((block,3),(block,3)), false, 34).
holds(3, in_tower((block,3),(block,4)), false, 34).
holds(3, in_tower((block,3),(block,5)), false, 34).
holds(3, in_tower((block,3),(block,6)), false, 34).
holds(3, in_tower((block,3),(block,7)), false, 34).
holds(3, in_tower((block,3),(block,8)), false, 34).
holds(3, in_tower((block,3),(block,9)), false, 34).
holds(3, in_tower((block,4),(block,1)), false, 34).
holds(3, in_tower((block,4),(block,2)), false, 34).
holds(3, in_tower((block,4),(block,3)), false, 34).
holds(3, in_tower((block,4),(block,4)), false, 34).
holds(3, in_tower((block,4),(block,5)), false, 34).
holds(3, in_tower((block,4),(block,6)), false, 34).
holds(3, in_tower((block,4),(block,7)), false, 34).
holds(3, in_tower((block,4),(block,8)), false, 34).
holds(3, in_tower((block,4),(block,9)), false, 34).
holds(3, in_tower((block,5),(block,1)), false, 34).
holds(3, in_tower((block,5),(block,2)), false, 34).
holds(3, in_tower((block,5),(block,3)), false, 34).
holds(3, in_tower((block,5),(block,4)), false, 34).
holds(3, in_tower((block,5),(block,5)), false, 34).
holds(3, in_tower((block,5),(block,6)), false, 34).
holds(3, in_tower((block,5),(block,7)), false, 34).
holds(3, in_tower((block,5),(block,8)), false, 34).
holds(3, in_tower((block,5),(block,9)), false, 34).
holds(3, in_tower((block,6),(block,1)), false, 34).
holds(3, in_tower((block,6),(block,2)), false, 34).
holds(3, in_tower((block,6),(block,3)), false, 34).
holds(3, in_tower((block,6),(block,4)), false, 34).
holds(3, in_tower((block,6),(block,5)), true, 34).
holds(3, in_tower((block,6),(block,6)), true, 34).
holds(3, in_tower((block,6),(block,7)), false, 34).
holds(3, in_tower((block,6),(block,8)), false, 34).
holds(3, in_tower((block,6),(block,9)), false, 34).
holds(3, in_tower((block,7),(block,1)), false, 34).
holds(3, in_tower((block,7),(block,2)), false, 34).
holds(3, in_tower((block,7),(block,3)), false, 34).
holds(3, in_tower((block,7),(block,4)), false, 34).
holds(3, in_tower((block,7),(block,5)), false, 34).
holds(3, in_tower((block,7),(block,6)), false, 34).
holds(3, in_tower((block,7),(block,7)), true, 34).
holds(3, in_tower((block,7),(block,8)), false, 34).
holds(3, in_tower((block,7),(block,9)), false, 34).
holds(3, in_tower((block,8),(block,1)), false, 34).
holds(3, in_tower((block,8),(block,2)), false, 34).
holds(3, in_tower((block,8),(block,3)), false, 34).
holds(3, in_tower((block,8),(block,4)), false, 34).
holds(3, in_tower((block,8),(block,5)), false, 34).
holds(3, in_tower((block,8),(block,6)), false, 34).
holds(3, in_tower((block,8),(block,7)), false, 34).
holds(3, in_tower((block,8),(block,8)), false, 34).
holds(3, in_tower((block,8),(block,9)), false, 34).
holds(3, in_tower((block,9),(block,1)), false, 34).
holds(3, in_tower((block,9),(block,2)), false, 34).
holds(3, in_tower((block,9),(block,3)), false, 34).
holds(3, in_tower((block,9),(block,4)), false, 34).
holds(3, in_tower((block,9),(block,5)), false, 34).
holds(3, in_tower((block,9),(block,6)), false, 34).
holds(3, in_tower((block,9),(block,7)), false, 34).
holds(3, in_tower((block,9),(block,8)), true, 34).
holds(3, in_tower((block,9),(block,9)), true, 34).
holds(3, on((block,1)), puzzle_room_table, 34).
holds(3, on((block,2)), puzzle_room_table, 34).
holds(3, on((block,3)), (block,1), 34).
holds(3, on((block,4)), nothing, 34).
holds(3, on((block,5)), (block,6), 34).
holds(3, on((block,6)), puzzle_room_table, 34).
holds(3, on((block,7)), puzzle_room_table, 34).
holds(3, on((block,8)), (block,9), 34).
holds(3, on((block,9)), puzzle_room_table, 34).
holds(3, tower_base((block,1)), true, 34).
holds(3, tower_base((block,2)), true, 34).
holds(3, tower_base((block,3)), false, 34).
holds(3, tower_base((block,4)), false, 34).
holds(3, tower_base((block,5)), false, 34).
holds(3, tower_base((block,6)), true, 34).
holds(3, tower_base((block,7)), true, 34).
holds(3, tower_base((block,8)), false, 34).
holds(3, tower_base((block,9)), true, 34).
holds(3, unordered_tower((block,1)), true, 34).
holds(3, unordered_tower((block,2)), false, 34).
holds(3, unordered_tower((block,3)), false, 34).
holds(3, unordered_tower((block,4)), false, 34).
holds(3, unordered_tower((block,5)), false, 34).
holds(3, unordered_tower((block,6)), false, 34).
holds(3, unordered_tower((block,7)), false, 34).
holds(3, unordered_tower((block,8)), false, 34).
holds(3, unordered_tower((block,9)), false, 34).

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 588 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, complete(yellow), false, false).
final_goal(2, complete(yellow), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, tower_base((block,7)), false, true).
final_goal(2, tower_base((block,7)), true, false).
final_goal(2, tower_base((block,8)), false, true).
final_goal(2, tower_base((block,8)), true, false).
final_goal(2, tower_base((block,9)), false, false).
final_goal(2, tower_base((block,9)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(2, unordered_tower((block,7)), false, true).
final_goal(2, unordered_tower((block,7)), true, false).
final_goal(2, unordered_tower((block,8)), false, true).
final_goal(2, unordered_tower((block,8)), true, false).
final_goal(2, unordered_tower((block,9)), false, true).
final_goal(2, unordered_tower((block,9)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, complete(yellow), false, false).
final_goal(3, complete(yellow), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,1),(block,7)), false, true).
final_goal(3, in_tower((block,1),(block,7)), true, false).
final_goal(3, in_tower((block,1),(block,8)), false, true).
final_goal(3, in_tower((block,1),(block,8)), true, false).
final_goal(3, in_tower((block,1),(block,9)), false, true).
final_goal(3, in_tower((block,1),(block,9)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,7)), false, true).
final_goal(3, in_tower((block,2),(block,7)), true, false).
final_goal(3, in_tower((block,2),(block,8)), false, true).
final_goal(3, in_tower((block,2),(block,8)), true, false).
final_goal(3, in_tower((block,2),(block,9)), false, true).
final_goal(3, in_tower((block,2),(block,9)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,7)), false, true).
final_goal(3, in_tower((block,3),(block,7)), true, false).
final_goal(3, in_tower((block,3),(block,8)), false, true).
final_goal(3, in_tower((block,3),(block,8)), true, false).
final_goal(3, in_tower((block,3),(block,9)), false, true).
final_goal(3, in_tower((block,3),(block,9)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,7)), false, true).
final_goal(3, in_tower((block,4),(block,7)), true, false).
final_goal(3, in_tower((block,4),(block,8)), false, true).
final_goal(3, in_tower((block,4),(block,8)), true, false).
final_goal(3, in_tower((block,4),(block,9)), false, true).
final_goal(3, in_tower((block,4),(block,9)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,7)), false, true).
final_goal(3, in_tower((block,5),(block,7)), true, false).
final_goal(3, in_tower((block,5),(block,8)), false, true).
final_goal(3, in_tower((block,5),(block,8)), true, false).
final_goal(3, in_tower((block,5),(block,9)), false, true).
final_goal(3, in_tower((block,5),(block,9)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, in_tower((block,6),(block,7)), false, true).
final_goal(3, in_tower((block,6),(block,7)), true, false).
final_goal(3, in_tower((block,6),(block,8)), false, true).
final_goal(3, in_tower((block,6),(block,8)), true, false).
final_goal(3, in_tower((block,6),(block,9)), false, true).
final_goal(3, in_tower((block,6),(block,9)), true, false).
final_goal(3, in_tower((block,7),(block,1)), false, true).
final_goal(3, in_tower((block,7),(block,1)), true, false).
final_goal(3, in_tower((block,7),(block,2)), false, true).
final_goal(3, in_tower((block,7),(block,2)), true, false).
final_goal(3, in_tower((block,7),(block,3)), false, true).
final_goal(3, in_tower((block,7),(block,3)), true, false).
final_goal(3, in_tower((block,7),(block,4)), false, true).
final_goal(3, in_tower((block,7),(block,4)), true, false).
final_goal(3, in_tower((block,7),(block,5)), false, true).
final_goal(3, in_tower((block,7),(block,5)), true, false).
final_goal(3, in_tower((block,7),(block,6)), false, true).
final_goal(3, in_tower((block,7),(block,6)), true, false).
final_goal(3, in_tower((block,7),(block,7)), false, true).
final_goal(3, in_tower((block,7),(block,7)), true, false).
final_goal(3, in_tower((block,7),(block,8)), false, true).
final_goal(3, in_tower((block,7),(block,8)), true, false).
final_goal(3, in_tower((block,7),(block,9)), false, true).
final_goal(3, in_tower((block,7),(block,9)), true, false).
final_goal(3, in_tower((block,8),(block,1)), false, true).
final_goal(3, in_tower((block,8),(block,1)), true, false).
final_goal(3, in_tower((block,8),(block,2)), false, true).
final_goal(3, in_tower((block,8),(block,2)), true, false).
final_goal(3, in_tower((block,8),(block,3)), false, true).
final_goal(3, in_tower((block,8),(block,3)), true, false).
final_goal(3, in_tower((block,8),(block,4)), false, true).
final_goal(3, in_tower((block,8),(block,4)), true, false).
final_goal(3, in_tower((block,8),(block,5)), false, true).
final_goal(3, in_tower((block,8),(block,5)), true, false).
final_goal(3, in_tower((block,8),(block,6)), false, true).
final_goal(3, in_tower((block,8),(block,6)), true, false).
final_goal(3, in_tower((block,8),(block,7)), false, true).
final_goal(3, in_tower((block,8),(block,7)), true, false).
final_goal(3, in_tower((block,8),(block,8)), false, true).
final_goal(3, in_tower((block,8),(block,8)), true, false).
final_goal(3, in_tower((block,8),(block,9)), false, true).
final_goal(3, in_tower((block,8),(block,9)), true, false).
final_goal(3, in_tower((block,9),(block,1)), false, true).
final_goal(3, in_tower((block,9),(block,1)), true, false).
final_goal(3, in_tower((block,9),(block,2)), false, true).
final_goal(3, in_tower((block,9),(block,2)), true, false).
final_goal(3, in_tower((block,9),(block,3)), false, true).
final_goal(3, in_tower((block,9),(block,3)), true, false).
final_goal(3, in_tower((block,9),(block,4)), false, true).
final_goal(3, in_tower((block,9),(block,4)), true, false).
final_goal(3, in_tower((block,9),(block,5)), false, true).
final_goal(3, in_tower((block,9),(block,5)), true, false).
final_goal(3, in_tower((block,9),(block,6)), false, true).
final_goal(3, in_tower((block,9),(block,6)), true, false).
final_goal(3, in_tower((block,9),(block,7)), false, false).
final_goal(3, in_tower((block,9),(block,7)), true, true).
final_goal(3, in_tower((block,9),(block,8)), false, false).
final_goal(3, in_tower((block,9),(block,8)), true, true).
final_goal(3, in_tower((block,9),(block,9)), false, false).
final_goal(3, in_tower((block,9),(block,9)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), (block,7), false).
final_goal(3, on((block,1)), (block,8), false).
final_goal(3, on((block,1)), (block,9), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), (block,7), false).
final_goal(3, on((block,2)), (block,8), false).
final_goal(3, on((block,2)), (block,9), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), (block,7), false).
final_goal(3, on((block,3)), (block,8), false).
final_goal(3, on((block,3)), (block,9), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), (block,7), false).
final_goal(3, on((block,4)), (block,8), false).
final_goal(3, on((block,4)), (block,9), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), (block,7), false).
final_goal(3, on((block,5)), (block,8), false).
final_goal(3, on((block,5)), (block,9), false).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), (block,7), false).
final_goal(3, on((block,6)), (block,8), false).
final_goal(3, on((block,6)), (block,9), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, on((block,7)), (block,1), false).
final_goal(3, on((block,7)), (block,2), false).
final_goal(3, on((block,7)), (block,3), false).
final_goal(3, on((block,7)), (block,4), false).
final_goal(3, on((block,7)), (block,5), false).
final_goal(3, on((block,7)), (block,6), false).
final_goal(3, on((block,7)), (block,8), true).
final_goal(3, on((block,7)), (block,9), false).
final_goal(3, on((block,7)), nothing, false).
final_goal(3, on((block,7)), puzzle_room_table, false).
final_goal(3, on((block,8)), (block,1), false).
final_goal(3, on((block,8)), (block,2), false).
final_goal(3, on((block,8)), (block,3), false).
final_goal(3, on((block,8)), (block,4), false).
final_goal(3, on((block,8)), (block,5), false).
final_goal(3, on((block,8)), (block,6), false).
final_goal(3, on((block,8)), (block,7), false).
final_goal(3, on((block,8)), (block,9), true).
final_goal(3, on((block,8)), nothing, false).
final_goal(3, on((block,8)), puzzle_room_table, false).
final_goal(3, on((block,9)), (block,1), false).
final_goal(3, on((block,9)), (block,2), false).
final_goal(3, on((block,9)), (block,3), false).
final_goal(3, on((block,9)), (block,4), false).
final_goal(3, on((block,9)), (block,5), false).
final_goal(3, on((block,9)), (block,6), false).
final_goal(3, on((block,9)), (block,7), false).
final_goal(3, on((block,9)), (block,8), false).
final_goal(3, on((block,9)), nothing, false).
final_goal(3, on((block,9)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, tower_base((block,7)), false, true).
final_goal(3, tower_base((block,7)), true, false).
final_goal(3, tower_base((block,8)), false, true).
final_goal(3, tower_base((block,8)), true, false).
final_goal(3, tower_base((block,9)), false, false).
final_goal(3, tower_base((block,9)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).
final_goal(3, unordered_tower((block,7)), false, true).
final_goal(3, unordered_tower((block,7)), true, false).
final_goal(3, unordered_tower((block,8)), false, true).
final_goal(3, unordered_tower((block,8)), true, false).
final_goal(3, unordered_tower((block,9)), false, true).
final_goal(3, unordered_tower((block,9)), true, false).

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 20})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 21})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 22})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 23})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 24})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 25})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 26})

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 14).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 15).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 16).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 17).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 18).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 19).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 20).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 21).
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 22).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 23).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 24).
sub_goal(3, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 25).
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 26).

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000016E4A2C23A0>]
	incrementor = SolveIncrementor(step_start=34, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=None, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 34), range_=None), IncPart(name='plan_module', args=('#inc', 34, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 34, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 34, 14, 26, 'sequential', 'true'), range_=None)]

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1221 rules

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007112100000028931s

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.034259s.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007552s with result Satisfiable.

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016E532010E0>

[12-11-2021_15-24-13] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))
	('level', 2)
	('start_step', 34)
	('last_sgoals', 26)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('first_sgoals', 14)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016E532010E0>)

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 35)', truth=True, inc_range=None)

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 34). %* None *%
#program plan_module(#inc, 34, false, false). %* None *%
#program optimisation_module(#inc, 34, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 34, 14, 26, sequential, true). %* None *%

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     33 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(34), Number(34)]), ('plan_module', [Number(34), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(35), Number(34)]), ('plan_module', [Number(35), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.174869s.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 34: original = External(symbol='current_last_sgoals(14, 35)', truth=True, inc_range=None), conversion = current_last_sgoals(14,35).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 35: original = External(symbol='current_last_sgoals(14, 35)', truth=True, inc_range=None), conversion = current_last_sgoals(14,35).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031378s with result Satisfiable.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2062469999999621, Incremental time limit = None
Running cumulative time = 0.2062469999999621, Cumulative time limit = 3600
Used memory = (RSS = 300.632812Mb, VMS = 296.667969Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.174869s, Solving = 0.031378s, Total = 0.206247s, Memory = (RSS = 300.632812Mb, VMS = 296.667969Mb)), Calls = 1
Final Model :: Total atoms = 6462, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=33, end_step=35, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.17486919999998918, solving_time=0.03137779999997292, total_time=0.2062469999999621, memory=Memory(rss=300.6328125, vms=296.66796875), step_range=range(34, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17486919999998918, solving_time=0.03137779999997292, total_time=0.2062469999999621, memory=Memory(rss=300.6328125, vms=296.66796875), step_range=range(34, 36), clingo_stats={'problem': {'lp': {'atoms': 14774.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45629.0, 'bodies_tr': 45629.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 367.0, 'count_bodies_tr': 367.0, 'sccs': 38.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 908.0, 'rules': 91214.0, 'rules_normal': 90636.0, 'rules_choice': 559.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 91207.0, 'rules_tr_normal': 90636.0, 'rules_tr_choice': 559.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 18142.0, 'eqs_atom': 5466.0, 'eqs_body': 1785.0, 'eqs_other': 10891.0}, 'lpStep': {'atoms': 7895.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 43873.0, 'bodies_tr': 43873.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 367.0, 'count_bodies_tr': 367.0, 'sccs': 38.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 908.0, 'rules': 83751.0, 'rules_normal': 83173.0, 'rules_choice': 559.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 83744.0, 'rules_tr_normal': 83173.0, 'rules_tr_choice': 559.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 9268.0, 'eqs_atom': 2197.0, 'eqs_body': 672.0, 'eqs_other': 6399.0}, 'generator': {'vars': 3991.0, 'vars_eliminated': 0.0, 'vars_frozen': 2402.0, 'constraints': 35.0, 'constraints_binary': 2195.0, 'constraints_ternary': 317.0, 'acyc_edges': 0.0, 'complexity': 2557.0}}, 'solving': {'solvers': {'choices': 110.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 43.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 42.0, 'lemmas': 52.0, 'lits_learnt': 52.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 42.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 248.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 42.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 42.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.20645523071289062, 'cpu': 0.203125, 'solve': 0.0109710693359375, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2553253173828125, 'cpu': 0.25, 'solve': 0.015926361083984375, 'unsat': 0.0, 'sat': 0.00395965576171875}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 110.0, 'conflicts': 7.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 44.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 7.0, 'integrated': 42.0, 'lemmas': 52.0, 'lits_learnt': 52.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 42.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 256.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 3.0, 'lemmas_other': 42.0, 'lits_conflict': 7.0, 'lits_loop': 3.0, 'lits_other': 42.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35}

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 2 ( 15.38% solved)

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 35)', truth=True, inc_range=None)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 35]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 15)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 35:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(34)]), ('plan_module', [Number(36), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140339s.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 36: original = External(symbol='current_last_sgoals(15, 35)', truth=True, inc_range=None), conversion = current_last_sgoals(15,35).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017542s with result Satisfiable.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.15788070000002108, Incremental time limit = None
Running cumulative time = 0.3641276999999832, Cumulative time limit = 3600
Used memory = (RSS = 303.914062Mb, VMS = 300.585938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.315208s, Solving = 0.048920s, Total = 0.364128s, Memory = (RSS = 303.914062Mb, VMS = 300.585938Mb)), Calls = 2
Final Model :: Total atoms = 7105, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=35, end_step=36, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3152077000000304, solving_time=0.04891999999995278, total_time=0.3641276999999832, memory=Memory(rss=303.9140625, vms=300.5859375), step_range=range(34, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14033850000004122, solving_time=0.017542199999979857, total_time=0.15788070000002108, memory=Memory(rss=303.9140625, vms=300.5859375), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 17661.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 84093.0, 'bodies_tr': 84093.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 676.0, 'count_bodies_tr': 676.0, 'sccs': 41.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 934.0, 'rules': 164580.0, 'rules_normal': 163723.0, 'rules_choice': 819.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 164557.0, 'rules_tr_normal': 163723.0, 'rules_tr_choice': 819.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 13.0, 'eqs': 23739.0, 'eqs_atom': 6469.0, 'eqs_body': 2601.0, 'eqs_other': 14669.0}, 'lpStep': {'atoms': 2887.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38464.0, 'bodies_tr': 38464.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 3.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26.0, 'rules': 73366.0, 'rules_normal': 73087.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 73350.0, 'rules_tr_normal': 73087.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 5597.0, 'eqs_atom': 1003.0, 'eqs_body': 816.0, 'eqs_other': 3778.0}, 'generator': {'vars': 4331.0, 'vars_eliminated': 0.0, 'vars_frozen': 2654.0, 'constraints': 69.0, 'constraints_binary': 3111.0, 'constraints_ternary': 240.0, 'acyc_edges': 0.0, 'complexity': 3444.0}}, 'solving': {'solvers': {'choices': 144.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 64.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 0.0, 'lemmas': 9.0, 'lits_learnt': 9.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 368.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 9.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.15874481201171875, 'cpu': 0.171875, 'solve': 0.0079803466796875, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.41407012939453125, 'cpu': 0.421875, 'solve': 0.023906707763671875, 'unsat': 0.0, 'sat': 0.005954742431640625}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 254.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 108.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 16.0, 'integrated': 42.0, 'lemmas': 61.0, 'lits_learnt': 61.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 42.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 624.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 3.0, 'lemmas_other': 42.0, 'lits_conflict': 16.0, 'lits_loop': 3.0, 'lits_other': 42.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36}

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 3 ( 23.08% solved)

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 36)', truth=True, inc_range=None)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 36]:
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 16)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 36:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(34)]), ('plan_module', [Number(37), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138191s.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 37: original = External(symbol='current_last_sgoals(16, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(16,36).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022593s with result Satisfiable.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.16078399999997828, Incremental time limit = None
Running cumulative time = 0.5249116999999615, Cumulative time limit = 3600
Used memory = (RSS = 309.195312Mb, VMS = 307.199219Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.453399s, Solving = 0.071513s, Total = 0.524912s, Memory = (RSS = 309.195312Mb, VMS = 307.199219Mb)), Calls = 3
Final Model :: Total atoms = 7749, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4533991000000128, solving_time=0.07151259999994863, total_time=0.5249116999999615, memory=Memory(rss=309.1953125, vms=307.19921875), step_range=range(34, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13819139999998242, solving_time=0.022592599999995855, total_time=0.16078399999997828, memory=Memory(rss=309.1953125, vms=307.19921875), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 20813.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 122922.0, 'bodies_tr': 122922.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 985.0, 'count_bodies_tr': 985.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1535.0, 'rules': 238390.0, 'rules_normal': 237254.0, 'rules_choice': 1079.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 54.0, 'rules_tr': 238356.0, 'rules_tr_normal': 237254.0, 'rules_tr_choice': 1079.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 20.0, 'eqs': 29449.0, 'eqs_atom': 7245.0, 'eqs_body': 3218.0, 'eqs_other': 18986.0}, 'lpStep': {'atoms': 3152.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38829.0, 'bodies_tr': 38829.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 21.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 601.0, 'rules': 73810.0, 'rules_normal': 73531.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 73799.0, 'rules_tr_normal': 73531.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 7.0, 'eqs': 5710.0, 'eqs_atom': 776.0, 'eqs_body': 617.0, 'eqs_other': 4317.0}, 'generator': {'vars': 6092.0, 'vars_eliminated': 0.0, 'vars_frozen': 3850.0, 'constraints': 518.0, 'constraints_binary': 11970.0, 'constraints_ternary': 1343.0, 'acyc_edges': 0.0, 'complexity': 13889.0}}, 'solving': {'solvers': {'choices': 168.0, 'conflicts': 13.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 85.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 27.0, 'integrated': 0.0, 'lemmas': 32.0, 'lits_learnt': 115.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 427.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 19.0, 'lemmas_other': 0.0, 'lits_conflict': 13.0, 'lits_loop': 102.0, 'lits_other': 0.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 0.0, 'levels': 13.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1612987518310547, 'cpu': 0.15625, 'solve': 0.008955001831054688, 'unsat': 0.0, 'sat': 0.00197601318359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5753688812255859, 'cpu': 0.578125, 'solve': 0.03286170959472656, 'unsat': 0.0, 'sat': 0.007930755615234375}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 422.0, 'conflicts': 29.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 193.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 43.0, 'integrated': 42.0, 'lemmas': 93.0, 'lits_learnt': 176.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.046875, 'integrated_imps': 42.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 1051.0, 'guiding_paths': 31.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 22.0, 'lemmas_other': 42.0, 'lits_conflict': 29.0, 'lits_loop': 105.0, 'lits_other': 42.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 0.0, 'levels': 29.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37}

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 4 ( 30.77% solved)

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 37)', truth=True, inc_range=None)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 37]:
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 17)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(34)]), ('plan_module', [Number(38), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141075s.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(17, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(17,37).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034650s with result Satisfiable.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1757249999999999, Incremental time limit = None
Running cumulative time = 0.7006366999999614, Cumulative time limit = 3600
Used memory = (RSS = 313.609375Mb, VMS = 310.304688Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.594474s, Solving = 0.106163s, Total = 0.700637s, Memory = (RSS = 313.609375Mb, VMS = 310.304688Mb)), Calls = 4
Final Model :: Total atoms = 8394, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5944738000000029, solving_time=0.10616289999995843, total_time=0.7006366999999614, memory=Memory(rss=313.609375, vms=310.3046875), step_range=range(34, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14107469999999012, solving_time=0.03465030000000979, total_time=0.1757249999999999, memory=Memory(rss=313.609375, vms=310.3046875), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 24129.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 162842.0, 'bodies_tr': 162842.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1294.0, 'count_bodies_tr': 1294.0, 'sccs': 86.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2387.0, 'rules': 313644.0, 'rules_normal': 312229.0, 'rules_choice': 1339.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 313605.0, 'rules_tr_normal': 312229.0, 'rules_tr_choice': 1339.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 33.0, 'eqs': 37397.0, 'eqs_atom': 8610.0, 'eqs_body': 3702.0, 'eqs_other': 25085.0}, 'lpStep': {'atoms': 3316.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 39920.0, 'bodies_tr': 39920.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 24.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 852.0, 'rules': 75254.0, 'rules_normal': 74975.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 75249.0, 'rules_tr_normal': 74975.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 13.0, 'eqs': 7948.0, 'eqs_atom': 1365.0, 'eqs_body': 484.0, 'eqs_other': 6099.0}, 'generator': {'vars': 8755.0, 'vars_eliminated': 0.0, 'vars_frozen': 5569.0, 'constraints': 1137.0, 'constraints_binary': 35003.0, 'constraints_ternary': 3489.0, 'acyc_edges': 0.0, 'complexity': 39765.0}}, 'solving': {'solvers': {'choices': 210.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 106.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 74.0, 'lits_learnt': 840.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 532.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 74.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 840.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.17752647399902344, 'cpu': 0.15625, 'solve': 0.01197052001953125, 'unsat': 0.0, 'sat': 0.0029926300048828125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7528953552246094, 'cpu': 0.734375, 'solve': 0.04483222961425781, 'unsat': 0.0, 'sat': 0.010923385620117188}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 632.0, 'conflicts': 29.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 299.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 38.0, 'distributed_sum_lbd': 47.0, 'integrated': 42.0, 'lemmas': 167.0, 'lits_learnt': 1016.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.046875, 'integrated_imps': 42.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 1583.0, 'guiding_paths': 38.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 96.0, 'lemmas_other': 42.0, 'lits_conflict': 29.0, 'lits_loop': 945.0, 'lits_other': 42.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 0.0, 'levels': 29.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38}

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 5 ( 38.46% solved)

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 38)', truth=True, inc_range=None)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 18, step = 38]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 18)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(34)]), ('plan_module', [Number(39), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.158245s.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(18, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(18,38).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037366s with result Satisfiable.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.19561089999996284, Incremental time limit = None
Running cumulative time = 0.8962475999999242, Cumulative time limit = 3600
Used memory = (RSS = 324.742188Mb, VMS = 321.812500Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.752719s, Solving = 0.143529s, Total = 0.896248s, Memory = (RSS = 324.742188Mb, VMS = 321.812500Mb)), Calls = 5
Final Model :: Total atoms = 9040, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7527188999999908, solving_time=0.14352869999993345, total_time=0.8962475999999242, memory=Memory(rss=324.7421875, vms=321.8125), step_range=range(34, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15824509999998781, solving_time=0.037365799999975025, total_time=0.19561089999996284, memory=Memory(rss=324.7421875, vms=321.8125), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 28180.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 204419.0, 'bodies_tr': 204419.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1603.0, 'count_bodies_tr': 1603.0, 'sccs': 112.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3759.0, 'rules': 391243.0, 'rules_normal': 389549.0, 'rules_choice': 1599.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 90.0, 'rules_tr': 391204.0, 'rules_tr_normal': 389549.0, 'rules_tr_choice': 1599.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 51.0, 'eqs': 45685.0, 'eqs_atom': 10541.0, 'eqs_body': 3876.0, 'eqs_other': 31268.0}, 'lpStep': {'atoms': 4051.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 41577.0, 'bodies_tr': 41577.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 77599.0, 'rules_normal': 77320.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 77599.0, 'rules_tr_normal': 77320.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8288.0, 'eqs_atom': 1931.0, 'eqs_body': 174.0, 'eqs_other': 6183.0}, 'generator': {'vars': 12673.0, 'vars_eliminated': 0.0, 'vars_frozen': 8079.0, 'constraints': 2266.0, 'constraints_binary': 78373.0, 'constraints_ternary': 7682.0, 'acyc_edges': 0.0, 'complexity': 88551.0}}, 'solving': {'solvers': {'choices': 252.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 127.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 8.0, 'lits_learnt': 84.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 8.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 84.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.19746971130371094, 'cpu': 0.1875, 'solve': 0.012964248657226562, 'unsat': 0.0, 'sat': 0.0039882659912109375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9503650665283203, 'cpu': 0.921875, 'solve': 0.057796478271484375, 'unsat': 0.0, 'sat': 0.014911651611328125}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 884.0, 'conflicts': 29.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 426.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 38.0, 'distributed_sum_lbd': 47.0, 'integrated': 42.0, 'lemmas': 175.0, 'lits_learnt': 1100.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.046875, 'integrated_imps': 42.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 2220.0, 'guiding_paths': 45.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 104.0, 'lemmas_other': 42.0, 'lits_conflict': 29.0, 'lits_loop': 1029.0, 'lits_other': 42.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 0.0, 'levels': 29.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39}

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 6 ( 46.15% solved)

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 39)', truth=True, inc_range=None)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 39]:
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 19)

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(34)]), ('plan_module', [Number(40), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150340s.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(19, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(19,39).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033452s with result Unsatisfiable.

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18379169999997202, Incremental time limit = None
Running cumulative time = 1.0800392999998962, Cumulative time limit = 3600
Used memory = (RSS = 337.015625Mb, VMS = 335.984375Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=39, end_step=40, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9030586000000085, solving_time=0.17698069999988775, total_time=1.0800392999998962, memory=Memory(rss=337.015625, vms=335.984375), step_range=range(34, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15033970000001773, solving_time=0.033451999999954296, total_time=0.18379169999997202, memory=Memory(rss=337.015625, vms=335.984375), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 32402.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 246571.0, 'bodies_tr': 246571.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1912.0, 'count_bodies_tr': 1912.0, 'sccs': 138.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5131.0, 'rules': 469596.0, 'rules_normal': 467623.0, 'rules_choice': 1859.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 469557.0, 'rules_tr_normal': 467623.0, 'rules_tr_choice': 1859.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 69.0, 'eqs': 54496.0, 'eqs_atom': 12605.0, 'eqs_body': 4041.0, 'eqs_other': 37850.0}, 'lpStep': {'atoms': 4222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42152.0, 'bodies_tr': 42152.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78353.0, 'rules_normal': 78074.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78353.0, 'rules_tr_normal': 78074.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8811.0, 'eqs_atom': 2064.0, 'eqs_body': 165.0, 'eqs_other': 6582.0}, 'generator': {'vars': 16684.0, 'vars_eliminated': 0.0, 'vars_frozen': 10619.0, 'constraints': 3420.0, 'constraints_binary': 124717.0, 'constraints_ternary': 12139.0, 'acyc_edges': 0.0, 'complexity': 140600.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 742.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1855030059814453, 'cpu': 0.203125, 'solve': 0.0059719085693359375, 'unsat': 0.0059719085693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.1358680725097656, 'cpu': 1.125, 'solve': 0.06376838684082031, 'unsat': 0.0059719085693359375, 'sat': 0.014911651611328125}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 884.0, 'conflicts': 37.0, 'conflicts_analyzed': 29.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 426.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 38.0, 'distributed_sum_lbd': 47.0, 'integrated': 42.0, 'lemmas': 175.0, 'lits_learnt': 1100.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.078125, 'integrated_imps': 42.0, 'integrated_jumps': 14.0, 'guiding_paths_lits': 2962.0, 'guiding_paths': 52.0, 'splits': 0.0, 'lemmas_conflict': 29.0, 'lemmas_loop': 104.0, 'lemmas_other': 42.0, 'lits_conflict': 29.0, 'lits_loop': 1029.0, 'lits_other': 42.0, 'jumps': {'jumps': 29.0, 'jumps_bounded': 0.0, 'levels': 29.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-14] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(34)]), ('plan_module', [Number(41), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.154497s.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.113006s with result Satisfiable.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2675025999999434, Incremental time limit = None
Running cumulative time = 1.3475418999998396, Cumulative time limit = 3600
Used memory = (RSS = 352.558594Mb, VMS = 356.898438Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.057555s, Solving = 0.289987s, Total = 1.347542s, Memory = (RSS = 352.558594Mb, VMS = 356.898438Mb)), Calls = 7
Final Model :: Total atoms = 10331, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=40, end_step=41, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.05755529999999, solving_time=0.28998659999984966, total_time=1.3475418999998396, memory=Memory(rss=352.55859375, vms=356.8984375), step_range=range(34, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1544966999999815, solving_time=0.11300589999996191, total_time=0.2675025999999434, memory=Memory(rss=352.55859375, vms=356.8984375), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 36636.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 288751.0, 'bodies_tr': 288751.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2221.0, 'count_bodies_tr': 2221.0, 'sccs': 164.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6503.0, 'rules': 548056.0, 'rules_normal': 545804.0, 'rules_choice': 2119.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 126.0, 'rules_tr': 548017.0, 'rules_tr_normal': 545804.0, 'rules_tr_choice': 2119.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 87.0, 'eqs': 63366.0, 'eqs_atom': 14677.0, 'eqs_body': 4208.0, 'eqs_other': 44481.0}, 'lpStep': {'atoms': 4234.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42180.0, 'bodies_tr': 42180.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78460.0, 'rules_normal': 78181.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78460.0, 'rules_tr_normal': 78181.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8870.0, 'eqs_atom': 2072.0, 'eqs_body': 167.0, 'eqs_other': 6631.0}, 'generator': {'vars': 20702.0, 'vars_eliminated': 0.0, 'vars_frozen': 13163.0, 'constraints': 4575.0, 'constraints_binary': 171170.0, 'constraints_ternary': 16602.0, 'acyc_edges': 0.0, 'complexity': 192765.0}}, 'solving': {'solvers': {'choices': 530.0, 'conflicts': 103.0, 'conflicts_analyzed': 103.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 147.0, 'models': 1.0, 'models_level': 173.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 119.0, 'distributed_sum_lbd': 354.0, 'integrated': 558.0, 'lemmas': 1101.0, 'lits_learnt': 17815.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 4.0, 'cpu_time': 0.25, 'integrated_imps': 42.0, 'integrated_jumps': 58.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 103.0, 'lemmas_loop': 440.0, 'lemmas_other': 558.0, 'lits_conflict': 1551.0, 'lits_loop': 7018.0, 'lits_other': 9246.0, 'jumps': {'jumps': 103.0, 'jumps_bounded': 0.0, 'levels': 118.0, 'levels_bounded': 0.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2692832946777344, 'cpu': 0.4375, 'solve': 0.08477592468261719, 'unsat': 0.0, 'sat': 0.012968063354492188}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.4051513671875, 'cpu': 1.5625, 'solve': 0.1485443115234375, 'unsat': 0.0059719085693359375, 'sat': 0.027879714965820312}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1414.0, 'conflicts': 140.0, 'conflicts_analyzed': 132.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 147.0, 'models': 7.0, 'models_level': 599.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 157.0, 'distributed_sum_lbd': 401.0, 'integrated': 600.0, 'lemmas': 1276.0, 'lits_learnt': 18915.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.328125, 'integrated_imps': 84.0, 'integrated_jumps': 72.0, 'guiding_paths_lits': 3809.0, 'guiding_paths': 59.0, 'splits': 0.0, 'lemmas_conflict': 132.0, 'lemmas_loop': 544.0, 'lemmas_other': 600.0, 'lits_conflict': 1580.0, 'lits_loop': 8047.0, 'lits_other': 9288.0, 'jumps': {'jumps': 132.0, 'jumps_bounded': 0.0, 'levels': 147.0, 'levels_bounded': 0.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41}

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 7 ( 53.85% solved)

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 41)', truth=True, inc_range=None)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 41]:
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 20)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(34)]), ('plan_module', [Number(42), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.192493s.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 42: original = External(symbol='current_last_sgoals(20, 41)', truth=True, inc_range=None), conversion = current_last_sgoals(20,41).

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065131s with result Satisfiable.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.25762440000005427, Incremental time limit = None
Running cumulative time = 1.605166299999894, Cumulative time limit = 3600
Used memory = (RSS = 359.410156Mb, VMS = 361.742188Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.250048s, Solving = 0.355118s, Total = 1.605166s, Memory = (RSS = 359.410156Mb, VMS = 361.742188Mb)), Calls = 8
Final Model :: Total atoms = 10979, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=41, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.2500484000000256, solving_time=0.3551178999998683, total_time=1.605166299999894, memory=Memory(rss=359.41015625, vms=361.7421875), step_range=range(34, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1924931000000356, solving_time=0.06513130000001865, total_time=0.25762440000005427, memory=Memory(rss=359.41015625, vms=361.7421875), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 40883.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 330960.0, 'bodies_tr': 330960.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2530.0, 'count_bodies_tr': 2530.0, 'sccs': 190.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7875.0, 'rules': 626624.0, 'rules_normal': 624093.0, 'rules_choice': 2379.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 626585.0, 'rules_tr_normal': 624093.0, 'rules_tr_choice': 2379.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 105.0, 'eqs': 72296.0, 'eqs_atom': 16758.0, 'eqs_body': 4375.0, 'eqs_other': 51163.0}, 'lpStep': {'atoms': 4247.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42209.0, 'bodies_tr': 42209.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78568.0, 'rules_normal': 78289.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78568.0, 'rules_tr_normal': 78289.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8930.0, 'eqs_atom': 2081.0, 'eqs_body': 167.0, 'eqs_other': 6682.0}, 'generator': {'vars': 24727.0, 'vars_eliminated': 0.0, 'vars_frozen': 15711.0, 'constraints': 5631.0, 'constraints_binary': 213930.0, 'constraints_ternary': 20337.0, 'acyc_edges': 0.0, 'complexity': 240410.0}}, 'solving': {'solvers': {'choices': 496.0, 'conflicts': 38.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 102.0, 'models': 1.0, 'models_level': 194.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 88.0, 'integrated': 181.0, 'lemmas': 1177.0, 'lits_learnt': 18269.0, 'lemmas_binary': 58.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.125, 'integrated_imps': 82.0, 'integrated_jumps': 42.0, 'guiding_paths_lits': 952.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 964.0, 'lemmas_other': 181.0, 'lits_conflict': 364.0, 'lits_loop': 15755.0, 'lits_other': 2150.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 10.0, 'levels': 65.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.2609825134277344, 'cpu': 0.359375, 'solve': 0.03090667724609375, 'unsat': 0.0, 'sat': 0.014949798583984375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6661338806152344, 'cpu': 1.921875, 'solve': 0.17945098876953125, 'unsat': 0.0059719085693359375, 'sat': 0.04282951354980469}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1910.0, 'conflicts': 178.0, 'conflicts_analyzed': 170.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 249.0, 'models': 8.0, 'models_level': 793.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 189.0, 'distributed_sum_lbd': 489.0, 'integrated': 781.0, 'lemmas': 2453.0, 'lits_learnt': 37184.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.453125, 'integrated_imps': 166.0, 'integrated_jumps': 114.0, 'guiding_paths_lits': 4761.0, 'guiding_paths': 66.0, 'splits': 0.0, 'lemmas_conflict': 164.0, 'lemmas_loop': 1508.0, 'lemmas_other': 781.0, 'lits_conflict': 1944.0, 'lits_loop': 23802.0, 'lits_other': 11438.0, 'jumps': {'jumps': 170.0, 'jumps_bounded': 10.0, 'levels': 212.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41, 20: 42}

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 8 ( 61.54% solved)

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 42)', truth=True, inc_range=None)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 42]:
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 21)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 42:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(34)]), ('plan_module', [Number(43), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173688s.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 43: original = External(symbol='current_last_sgoals(21, 42)', truth=True, inc_range=None), conversion = current_last_sgoals(21,42).

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050098s with result Satisfiable.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22378649999996014, Incremental time limit = None
Running cumulative time = 1.828952799999854, Cumulative time limit = 3600
Used memory = (RSS = 365.207031Mb, VMS = 364.949219Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 9
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.423737s, Solving = 0.405216s, Total = 1.828953s, Memory = (RSS = 365.207031Mb, VMS = 364.949219Mb)), Calls = 9
Final Model :: Total atoms = 11628, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=42, end_step=43, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.4237365000000182, solving_time=0.4052162999998359, total_time=1.828952799999854, memory=Memory(rss=365.20703125, vms=364.94921875), step_range=range(34, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17368809999999257, solving_time=0.05009839999996757, total_time=0.22378649999996014, memory=Memory(rss=365.20703125, vms=364.94921875), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 45144.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 373199.0, 'bodies_tr': 373199.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2839.0, 'count_bodies_tr': 2839.0, 'sccs': 216.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9247.0, 'rules': 705301.0, 'rules_normal': 702491.0, 'rules_choice': 2639.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 162.0, 'rules_tr': 705262.0, 'rules_tr_normal': 702491.0, 'rules_tr_choice': 2639.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 123.0, 'eqs': 81291.0, 'eqs_atom': 18849.0, 'eqs_body': 4544.0, 'eqs_other': 57898.0}, 'lpStep': {'atoms': 4261.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42239.0, 'bodies_tr': 42239.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78677.0, 'rules_normal': 78398.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78677.0, 'rules_tr_normal': 78398.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 8995.0, 'eqs_atom': 2091.0, 'eqs_body': 169.0, 'eqs_other': 6735.0}, 'generator': {'vars': 28759.0, 'vars_eliminated': 0.0, 'vars_frozen': 18263.0, 'constraints': 6788.0, 'constraints_binary': 260685.0, 'constraints_ternary': 24968.0, 'acyc_edges': 0.0, 'complexity': 293047.0}}, 'solving': {'solvers': {'choices': 441.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 213.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 36.0, 'lits_learnt': 748.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1057.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 36.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 748.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.22640419006347656, 'cpu': 0.296875, 'solve': 0.022939682006835938, 'unsat': 0.0, 'sat': 0.009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.892538070678711, 'cpu': 2.21875, 'solve': 0.2023906707763672, 'unsat': 0.0059719085693359375, 'sat': 0.05280494689941406}, 'models': {'enumerated': 9.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2351.0, 'conflicts': 178.0, 'conflicts_analyzed': 170.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 258.0, 'models': 9.0, 'models_level': 1006.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 189.0, 'distributed_sum_lbd': 489.0, 'integrated': 781.0, 'lemmas': 2489.0, 'lits_learnt': 37932.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.5625, 'integrated_imps': 166.0, 'integrated_jumps': 114.0, 'guiding_paths_lits': 5818.0, 'guiding_paths': 73.0, 'splits': 0.0, 'lemmas_conflict': 164.0, 'lemmas_loop': 1544.0, 'lemmas_other': 781.0, 'lits_conflict': 1944.0, 'lits_loop': 24550.0, 'lits_other': 11438.0, 'jumps': {'jumps': 170.0, 'jumps_bounded': 10.0, 'levels': 212.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41, 20: 42, 21: 43}

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 9 ( 69.23% solved)

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 43)', truth=True, inc_range=None)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 22, step = 43]:
sub_goal(3, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 22)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 43:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(34)]), ('plan_module', [Number(44), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170211s.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 44: original = External(symbol='current_last_sgoals(22, 43)', truth=True, inc_range=None), conversion = current_last_sgoals(22,43).

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057876s with result Satisfiable.

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22808670000000575, Incremental time limit = None
Running cumulative time = 2.05703949999986, Cumulative time limit = 3600
Used memory = (RSS = 379.019531Mb, VMS = 385.937500Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 10
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.593947s, Solving = 0.463092s, Total = 2.057039s, Memory = (RSS = 379.019531Mb, VMS = 385.937500Mb)), Calls = 10
Final Model :: Total atoms = 12278, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=43, end_step=44, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.5939471000000367, solving_time=0.4630923999998231, total_time=2.05703949999986, memory=Memory(rss=379.01953125, vms=385.9375), step_range=range(34, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17021060000001853, solving_time=0.05787609999998722, total_time=0.22808670000000575, memory=Memory(rss=379.01953125, vms=385.9375), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 49420.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 415469.0, 'bodies_tr': 415469.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3148.0, 'count_bodies_tr': 3148.0, 'sccs': 242.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10619.0, 'rules': 784088.0, 'rules_normal': 780999.0, 'rules_choice': 2899.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 784049.0, 'rules_tr_normal': 780999.0, 'rules_tr_choice': 2899.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 141.0, 'eqs': 90352.0, 'eqs_atom': 20951.0, 'eqs_body': 4713.0, 'eqs_other': 64688.0}, 'lpStep': {'atoms': 4276.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42270.0, 'bodies_tr': 42270.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78787.0, 'rules_normal': 78508.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78787.0, 'rules_tr_normal': 78508.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9061.0, 'eqs_atom': 2102.0, 'eqs_body': 169.0, 'eqs_other': 6790.0}, 'generator': {'vars': 32798.0, 'vars_eliminated': 0.0, 'vars_frozen': 20819.0, 'constraints': 7946.0, 'constraints_binary': 307465.0, 'constraints_ternary': 29449.0, 'acyc_edges': 0.0, 'complexity': 345560.0}}, 'solving': {'solvers': {'choices': 483.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 234.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 57.0, 'lits_learnt': 853.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 57.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 853.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.23138046264648438, 'cpu': 0.328125, 'solve': 0.02691650390625, 'unsat': 0.0, 'sat': 0.012956619262695312}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1239185333251953, 'cpu': 2.546875, 'solve': 0.2293071746826172, 'unsat': 0.0059719085693359375, 'sat': 0.06576156616210938}, 'models': {'enumerated': 10.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2834.0, 'conflicts': 178.0, 'conflicts_analyzed': 170.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 267.0, 'models': 10.0, 'models_level': 1240.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 189.0, 'distributed_sum_lbd': 489.0, 'integrated': 781.0, 'lemmas': 2546.0, 'lits_learnt': 38785.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.71875, 'integrated_imps': 166.0, 'integrated_jumps': 114.0, 'guiding_paths_lits': 6980.0, 'guiding_paths': 80.0, 'splits': 0.0, 'lemmas_conflict': 164.0, 'lemmas_loop': 1601.0, 'lemmas_other': 781.0, 'lits_conflict': 1944.0, 'lits_loop': 25403.0, 'lits_other': 11438.0, 'jumps': {'jumps': 170.0, 'jumps_bounded': 10.0, 'levels': 212.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41, 20: 42, 21: 43, 22: 44}

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 10 ( 76.92% solved)

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 44)', truth=True, inc_range=None)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 44]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 23)

[12-11-2021_15-24-15] DEBUG :: ASH Planner Main #1 >> Reaction at search length 44:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(34)]), ('plan_module', [Number(45), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.183458s.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 45: original = External(symbol='current_last_sgoals(23, 44)', truth=True, inc_range=None), conversion = current_last_sgoals(23,44).

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060597s with result Satisfiable.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24405540000003612, Incremental time limit = None
Running cumulative time = 2.301094899999896, Cumulative time limit = 3600
Used memory = (RSS = 386.253906Mb, VMS = 390.992188Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.777406s, Solving = 0.523689s, Total = 2.301095s, Memory = (RSS = 386.253906Mb, VMS = 390.992188Mb)), Calls = 11
Final Model :: Total atoms = 12929, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=44, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.777405500000043, solving_time=0.5236893999998529, total_time=2.301094899999896, memory=Memory(rss=386.25390625, vms=390.9921875), step_range=range(34, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.18345840000000635, solving_time=0.060597000000029766, total_time=0.24405540000003612, memory=Memory(rss=386.25390625, vms=390.9921875), step_range=range(45, 46), clingo_stats={'problem': {'lp': {'atoms': 53712.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 457771.0, 'bodies_tr': 457771.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3457.0, 'count_bodies_tr': 3457.0, 'sccs': 268.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11991.0, 'rules': 862986.0, 'rules_normal': 859618.0, 'rules_choice': 3159.0, 'rules_minimize': 11.0, 'rules_acyc': 0.0, 'rules_heuristic': 198.0, 'rules_tr': 862947.0, 'rules_tr_normal': 859618.0, 'rules_tr_choice': 3159.0, 'rules_tr_minimize': 11.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 159.0, 'eqs': 99484.0, 'eqs_atom': 23065.0, 'eqs_body': 4884.0, 'eqs_other': 71535.0}, 'lpStep': {'atoms': 4292.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42302.0, 'bodies_tr': 42302.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 78898.0, 'rules_normal': 78619.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 78898.0, 'rules_tr_normal': 78619.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9132.0, 'eqs_atom': 2114.0, 'eqs_body': 171.0, 'eqs_other': 6847.0}, 'generator': {'vars': 36844.0, 'vars_eliminated': 0.0, 'vars_frozen': 23379.0, 'constraints': 9105.0, 'constraints_binary': 354354.0, 'constraints_ternary': 33936.0, 'acyc_edges': 0.0, 'complexity': 398189.0}}, 'solving': {'solvers': {'choices': 525.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 255.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 30.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 30.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 11.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.24733734130859375, 'cpu': 0.3125, 'solve': 0.028921127319335938, 'unsat': 0.0, 'sat': 0.009973526000976562}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.371255874633789, 'cpu': 2.859375, 'solve': 0.2582283020019531, 'unsat': 0.0059719085693359375, 'sat': 0.07573509216308594}, 'models': {'enumerated': 11.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3359.0, 'conflicts': 178.0, 'conflicts_analyzed': 170.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 276.0, 'models': 11.0, 'models_level': 1495.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 189.0, 'distributed_sum_lbd': 489.0, 'integrated': 781.0, 'lemmas': 2552.0, 'lits_learnt': 38815.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.8125, 'integrated_imps': 166.0, 'integrated_jumps': 114.0, 'guiding_paths_lits': 8247.0, 'guiding_paths': 87.0, 'splits': 0.0, 'lemmas_conflict': 164.0, 'lemmas_loop': 1607.0, 'lemmas_other': 781.0, 'lits_conflict': 1944.0, 'lits_loop': 25433.0, 'lits_other': 11438.0, 'jumps': {'jumps': 170.0, 'jumps_bounded': 10.0, 'levels': 212.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45}

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 11 ( 84.62% solved)

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None)

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 45]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 24)

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 45:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(34)]), ('plan_module', [Number(46), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.179960s.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 46: original = External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(24,45).

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058068s with result Satisfiable.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.23802810000000818, Incremental time limit = None
Running cumulative time = 2.539122999999904, Cumulative time limit = 3600
Used memory = (RSS = 393.304688Mb, VMS = 395.472656Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 12
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.957366s, Solving = 0.581757s, Total = 2.539123s, Memory = (RSS = 393.304688Mb, VMS = 395.472656Mb)), Calls = 12
Final Model :: Total atoms = 13581, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=45, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.9573655000000372, solving_time=0.5817574999998669, total_time=2.539122999999904, memory=Memory(rss=393.3046875, vms=395.47265625), step_range=range(34, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17995999999999412, solving_time=0.058068100000014056, total_time=0.23802810000000818, memory=Memory(rss=393.3046875, vms=395.47265625), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 58021.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 500106.0, 'bodies_tr': 500106.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3766.0, 'count_bodies_tr': 3766.0, 'sccs': 294.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13363.0, 'rules': 941996.0, 'rules_normal': 938349.0, 'rules_choice': 3419.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 941957.0, 'rules_tr_normal': 938349.0, 'rules_tr_choice': 3419.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 177.0, 'eqs': 108688.0, 'eqs_atom': 25192.0, 'eqs_body': 5055.0, 'eqs_other': 78441.0}, 'lpStep': {'atoms': 4309.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42335.0, 'bodies_tr': 42335.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79010.0, 'rules_normal': 78731.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79010.0, 'rules_tr_normal': 78731.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9204.0, 'eqs_atom': 2127.0, 'eqs_body': 171.0, 'eqs_other': 6906.0}, 'generator': {'vars': 40897.0, 'vars_eliminated': 0.0, 'vars_frozen': 25943.0, 'constraints': 10265.0, 'constraints_binary': 401352.0, 'constraints_ternary': 38429.0, 'acyc_edges': 0.0, 'complexity': 450934.0}}, 'solving': {'solvers': {'choices': 567.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 277.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 30.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1372.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 30.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.24135398864746094, 'cpu': 0.25, 'solve': 0.024934768676757812, 'unsat': 0.0, 'sat': 0.010974884033203125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.61260986328125, 'cpu': 3.109375, 'solve': 0.28316307067871094, 'unsat': 0.0059719085693359375, 'sat': 0.08670997619628906}, 'models': {'enumerated': 12.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 3926.0, 'conflicts': 178.0, 'conflicts_analyzed': 170.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 285.0, 'models': 12.0, 'models_level': 1772.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 189.0, 'distributed_sum_lbd': 489.0, 'integrated': 781.0, 'lemmas': 2558.0, 'lits_learnt': 38845.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 15.0, 'cpu_time': 0.84375, 'integrated_imps': 166.0, 'integrated_jumps': 114.0, 'guiding_paths_lits': 9619.0, 'guiding_paths': 94.0, 'splits': 0.0, 'lemmas_conflict': 164.0, 'lemmas_loop': 1613.0, 'lemmas_other': 781.0, 'lits_conflict': 1944.0, 'lits_loop': 25463.0, 'lits_other': 11438.0, 'jumps': {'jumps': 170.0, 'jumps_bounded': 10.0, 'levels': 212.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46}

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 12 ( 92.31% solved)

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None)

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 25, step = 46]:
sub_goal(3, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 25)

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 46:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(34)]), ('plan_module', [Number(47), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177399s.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 47: original = External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None), conversion = current_last_sgoals(25,46).

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067118s with result Satisfiable.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2445169000000078, Incremental time limit = None
Running cumulative time = 2.783639899999912, Cumulative time limit = 3600
Used memory = (RSS = 400.734375Mb, VMS = 400.601562Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.134765s, Solving = 0.648875s, Total = 2.783640s, Memory = (RSS = 400.734375Mb, VMS = 400.601562Mb)), Calls = 13
Final Model :: Total atoms = 14234, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.1347648000000277, solving_time=0.6488750999998842, total_time=2.783639899999912, memory=Memory(rss=400.734375, vms=400.6015625), step_range=range(34, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1773992999999905, solving_time=0.06711760000001732, total_time=0.2445169000000078, memory=Memory(rss=400.734375, vms=400.6015625), step_range=range(47, 48), clingo_stats={'problem': {'lp': {'atoms': 62348.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 542474.0, 'bodies_tr': 542474.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4075.0, 'count_bodies_tr': 4075.0, 'sccs': 320.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14735.0, 'rules': 1021118.0, 'rules_normal': 1017192.0, 'rules_choice': 3679.0, 'rules_minimize': 13.0, 'rules_acyc': 0.0, 'rules_heuristic': 234.0, 'rules_tr': 1021079.0, 'rules_tr_normal': 1017192.0, 'rules_tr_choice': 3679.0, 'rules_tr_minimize': 13.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 195.0, 'eqs': 117969.0, 'eqs_atom': 27333.0, 'eqs_body': 5228.0, 'eqs_other': 85408.0}, 'lpStep': {'atoms': 4327.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42368.0, 'bodies_tr': 42368.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79122.0, 'rules_normal': 78843.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79122.0, 'rules_tr_normal': 78843.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9281.0, 'eqs_atom': 2141.0, 'eqs_body': 173.0, 'eqs_other': 6967.0}, 'generator': {'vars': 44956.0, 'vars_eliminated': 0.0, 'vars_frozen': 28511.0, 'constraints': 11426.0, 'constraints_binary': 448456.0, 'constraints_ternary': 42927.0, 'acyc_edges': 0.0, 'complexity': 503791.0}}, 'solving': {'solvers': {'choices': 609.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 297.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1477.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2483386993408203, 'cpu': 0.359375, 'solve': 0.030920028686523438, 'unsat': 0.0, 'sat': 0.012969970703125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.8609485626220703, 'cpu': 3.46875, 'solve': 0.3140830993652344, 'unsat': 0.0059719085693359375, 'sat': 0.09967994689941406}, 'models': {'enumerated': 13.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 4535.0, 'conflicts': 178.0, 'conflicts_analyzed': 170.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 294.0, 'models': 13.0, 'models_level': 2069.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 189.0, 'distributed_sum_lbd': 489.0, 'integrated': 781.0, 'lemmas': 2558.0, 'lits_learnt': 38845.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 15.0, 'cpu_time': 1.0, 'integrated_imps': 166.0, 'integrated_jumps': 114.0, 'guiding_paths_lits': 11096.0, 'guiding_paths': 101.0, 'splits': 0.0, 'lemmas_conflict': 164.0, 'lemmas_loop': 1613.0, 'lemmas_other': 781.0, 'lits_conflict': 1944.0, 'lits_loop': 25463.0, 'lits_other': 11438.0, 'jumps': {'jumps': 170.0, 'jumps_bounded': 10.0, 'levels': 212.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46, 25: 47}

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 13 (100.00% solved)

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None)

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 47]:
sub_goal(3, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 26)

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(47)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[12-11-2021_15-24-16] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, complete(yellow), false, false)
final_goal(2, complete(yellow), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,1),(block,7)), false, true)
final_goal(2, in_tower((block,1),(block,7)), true, false)
final_goal(2, in_tower((block,1),(block,8)), false, true)
final_goal(2, in_tower((block,1),(block,8)), true, false)
final_goal(2, in_tower((block,1),(block,9)), false, true)
final_goal(2, in_tower((block,1),(block,9)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,7)), false, true)
final_goal(2, in_tower((block,2),(block,7)), true, false)
final_goal(2, in_tower((block,2),(block,8)), false, true)
final_goal(2, in_tower((block,2),(block,8)), true, false)
final_goal(2, in_tower((block,2),(block,9)), false, true)
final_goal(2, in_tower((block,2),(block,9)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,7)), false, true)
final_goal(2, in_tower((block,3),(block,7)), true, false)
final_goal(2, in_tower((block,3),(block,8)), false, true)
final_goal(2, in_tower((block,3),(block,8)), true, false)
final_goal(2, in_tower((block,3),(block,9)), false, true)
final_goal(2, in_tower((block,3),(block,9)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,7)), false, true)
final_goal(2, in_tower((block,4),(block,7)), true, false)
final_goal(2, in_tower((block,4),(block,8)), false, true)
final_goal(2, in_tower((block,4),(block,8)), true, false)
final_goal(2, in_tower((block,4),(block,9)), false, true)
final_goal(2, in_tower((block,4),(block,9)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,7)), false, true)
final_goal(2, in_tower((block,5),(block,7)), true, false)
final_goal(2, in_tower((block,5),(block,8)), false, true)
final_goal(2, in_tower((block,5),(block,8)), true, false)
final_goal(2, in_tower((block,5),(block,9)), false, true)
final_goal(2, in_tower((block,5),(block,9)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, in_tower((block,6),(block,7)), false, true)
final_goal(2, in_tower((block,6),(block,7)), true, false)
final_goal(2, in_tower((block,6),(block,8)), false, true)
final_goal(2, in_tower((block,6),(block,8)), true, false)
final_goal(2, in_tower((block,6),(block,9)), false, true)
final_goal(2, in_tower((block,6),(block,9)), true, false)
final_goal(2, in_tower((block,7),(block,1)), false, true)
final_goal(2, in_tower((block,7),(block,1)), true, false)
final_goal(2, in_tower((block,7),(block,2)), false, true)
final_goal(2, in_tower((block,7),(block,2)), true, false)
final_goal(2, in_tower((block,7),(block,3)), false, true)
final_goal(2, in_tower((block,7),(block,3)), true, false)
final_goal(2, in_tower((block,7),(block,4)), false, true)
final_goal(2, in_tower((block,7),(block,4)), true, false)
final_goal(2, in_tower((block,7),(block,5)), false, true)
final_goal(2, in_tower((block,7),(block,5)), true, false)
final_goal(2, in_tower((block,7),(block,6)), false, true)
final_goal(2, in_tower((block,7),(block,6)), true, false)
final_goal(2, in_tower((block,7),(block,7)), false, true)
final_goal(2, in_tower((block,7),(block,7)), true, false)
final_goal(2, in_tower((block,7),(block,8)), false, true)
final_goal(2, in_tower((block,7),(block,8)), true, false)
final_goal(2, in_tower((block,7),(block,9)), false, true)
final_goal(2, in_tower((block,7),(block,9)), true, false)
final_goal(2, in_tower((block,8),(block,1)), false, true)
final_goal(2, in_tower((block,8),(block,1)), true, false)
final_goal(2, in_tower((block,8),(block,2)), false, true)
final_goal(2, in_tower((block,8),(block,2)), true, false)
final_goal(2, in_tower((block,8),(block,3)), false, true)
final_goal(2, in_tower((block,8),(block,3)), true, false)
final_goal(2, in_tower((block,8),(block,4)), false, true)
final_goal(2, in_tower((block,8),(block,4)), true, false)
final_goal(2, in_tower((block,8),(block,5)), false, true)
final_goal(2, in_tower((block,8),(block,5)), true, false)
final_goal(2, in_tower((block,8),(block,6)), false, true)
final_goal(2, in_tower((block,8),(block,6)), true, false)
final_goal(2, in_tower((block,8),(block,7)), false, true)
final_goal(2, in_tower((block,8),(block,7)), true, false)
final_goal(2, in_tower((block,8),(block,8)), false, true)
final_goal(2, in_tower((block,8),(block,8)), true, false)
final_goal(2, in_tower((block,8),(block,9)), false, true)
final_goal(2, in_tower((block,8),(block,9)), true, false)
final_goal(2, in_tower((block,9),(block,1)), false, true)
final_goal(2, in_tower((block,9),(block,1)), true, false)
final_goal(2, in_tower((block,9),(block,2)), false, true)
final_goal(2, in_tower((block,9),(block,2)), true, false)
final_goal(2, in_tower((block,9),(block,3)), false, true)
final_goal(2, in_tower((block,9),(block,3)), true, false)
final_goal(2, in_tower((block,9),(block,4)), false, true)
final_goal(2, in_tower((block,9),(block,4)), true, false)
final_goal(2, in_tower((block,9),(block,5)), false, true)
final_goal(2, in_tower((block,9),(block,5)), true, false)
final_goal(2, in_tower((block,9),(block,6)), false, true)
final_goal(2, in_tower((block,9),(block,6)), true, false)
final_goal(2, in_tower((block,9),(block,7)), false, false)
final_goal(2, in_tower((block,9),(block,7)), true, true)
final_goal(2, in_tower((block,9),(block,8)), false, false)
final_goal(2, in_tower((block,9),(block,8)), true, true)
final_goal(2, in_tower((block,9),(block,9)), false, false)
final_goal(2, in_tower((block,9),(block,9)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), (block,7), false)
final_goal(2, on((block,1)), (block,8), false)
final_goal(2, on((block,1)), (block,9), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), (block,7), false)
final_goal(2, on((block,2)), (block,8), false)
final_goal(2, on((block,2)), (block,9), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), (block,7), false)
final_goal(2, on((block,3)), (block,8), false)
final_goal(2, on((block,3)), (block,9), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), (block,7), false)
final_goal(2, on((block,4)), (block,8), false)
final_goal(2, on((block,4)), (block,9), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), (block,7), false)
final_goal(2, on((block,5)), (block,8), false)
final_goal(2, on((block,5)), (block,9), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), (block,7), false)
final_goal(2, on((block,6)), (block,8), false)
final_goal(2, on((block,6)), (block,9), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, on((block,7)), (block,1), false)
final_goal(2, on((block,7)), (block,2), false)
final_goal(2, on((block,7)), (block,3), false)
final_goal(2, on((block,7)), (block,4), false)
final_goal(2, on((block,7)), (block,5), false)
final_goal(2, on((block,7)), (block,6), false)
final_goal(2, on((block,7)), (block,8), true)
final_goal(2, on((block,7)), (block,9), false)
final_goal(2, on((block,7)), nothing, false)
final_goal(2, on((block,7)), puzzle_room_table, false)
final_goal(2, on((block,8)), (block,1), false)
final_goal(2, on((block,8)), (block,2), false)
final_goal(2, on((block,8)), (block,3), false)
final_goal(2, on((block,8)), (block,4), false)
final_goal(2, on((block,8)), (block,5), false)
final_goal(2, on((block,8)), (block,6), false)
final_goal(2, on((block,8)), (block,7), false)
final_goal(2, on((block,8)), (block,9), true)
final_goal(2, on((block,8)), nothing, false)
final_goal(2, on((block,8)), puzzle_room_table, false)
final_goal(2, on((block,9)), (block,1), false)
final_goal(2, on((block,9)), (block,2), false)
final_goal(2, on((block,9)), (block,3), false)
final_goal(2, on((block,9)), (block,4), false)
final_goal(2, on((block,9)), (block,5), false)
final_goal(2, on((block,9)), (block,6), false)
final_goal(2, on((block,9)), (block,7), false)
final_goal(2, on((block,9)), (block,8), false)
final_goal(2, on((block,9)), nothing, false)
final_goal(2, on((block,9)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, tower_base((block,7)), false, true)
final_goal(2, tower_base((block,7)), true, false)
final_goal(2, tower_base((block,8)), false, true)
final_goal(2, tower_base((block,8)), true, false)
final_goal(2, tower_base((block,9)), false, false)
final_goal(2, tower_base((block,9)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), false, true)
final_goal(2, unordered_tower((block,6)), true, false)
final_goal(2, unordered_tower((block,7)), false, true)
final_goal(2, unordered_tower((block,7)), true, false)
final_goal(2, unordered_tower((block,8)), false, true)
final_goal(2, unordered_tower((block,8)), true, false)
final_goal(2, unordered_tower((block,9)), false, true)
final_goal(2, unordered_tower((block,9)), true, false)

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(34)]), ('plan_module', [Number(48), Number(34), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(34), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(34), Number(14), Number(26), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.202583s.

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(26,47).

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='seq_achieve_fgoals(47)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(47).

[12-11-2021_15-24-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.142789s with result Satisfiable.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.34537180000000944, Incremental time limit = None
Running cumulative time = 3.1290116999999213, Cumulative time limit = 3600
Used memory = (RSS = 419.980469Mb, VMS = 431.753906Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 14
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.337348s, Solving = 0.791664s, Total = 3.129012s, Memory = (RSS = 419.980469Mb, VMS = 431.753906Mb)), Calls = 14
Final Model :: Total atoms = 15469, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=47, end_step=48, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.3373477000000094, solving_time=0.791663999999912, total_time=3.1290116999999213, memory=Memory(rss=419.98046875, vms=431.75390625), step_range=range(34, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2025828999999817, solving_time=0.14278890000002775, total_time=0.34537180000000944, memory=Memory(rss=419.98046875, vms=431.75390625), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 66688.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 584870.0, 'bodies_tr': 584870.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4384.0, 'count_bodies_tr': 4384.0, 'sccs': 346.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16107.0, 'rules': 1100346.0, 'rules_normal': 1096141.0, 'rules_choice': 3939.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 1100307.0, 'rules_tr_normal': 1096141.0, 'rules_tr_choice': 3939.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 213.0, 'eqs': 127314.0, 'eqs_atom': 29487.0, 'eqs_body': 5400.0, 'eqs_other': 92427.0}, 'lpStep': {'atoms': 4340.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 42396.0, 'bodies_tr': 42396.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 309.0, 'count_bodies_tr': 309.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1372.0, 'rules': 79228.0, 'rules_normal': 78949.0, 'rules_choice': 260.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 79228.0, 'rules_tr_normal': 78949.0, 'rules_tr_choice': 260.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 9345.0, 'eqs_atom': 2154.0, 'eqs_body': 172.0, 'eqs_other': 7019.0}, 'generator': {'vars': 49017.0, 'vars_eliminated': 0.0, 'vars_frozen': 31079.0, 'constraints': 12587.0, 'constraints_binary': 495656.0, 'constraints_ternary': 47427.0, 'acyc_edges': 0.0, 'complexity': 556746.0}}, 'solving': {'solvers': {'choices': 651.0, 'conflicts': 14.0, 'conflicts_analyzed': 14.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 9.0, 'models': 1.0, 'models_level': 318.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 14.0, 'integrated': 0.0, 'lemmas': 230.0, 'lits_learnt': 3356.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.296875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1582.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 14.0, 'lemmas_loop': 216.0, 'lemmas_other': 0.0, 'lits_conflict': 14.0, 'lits_loop': 3342.0, 'lits_other': 0.0, 'jumps': {'jumps': 14.0, 'jumps_bounded': 0.0, 'levels': 14.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.34959983825683594, 'cpu': 0.546875, 'solve': 0.11024093627929688, 'unsat': 0.0, 'sat': 0.017953872680664062}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.2105484008789062, 'cpu': 4.015625, 'solve': 0.42432403564453125, 'unsat': 0.0059719085693359375, 'sat': 0.11763381958007812}, 'models': {'enumerated': 14.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 5186.0, 'conflicts': 192.0, 'conflicts_analyzed': 184.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 303.0, 'models': 14.0, 'models_level': 2387.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 203.0, 'distributed_sum_lbd': 503.0, 'integrated': 781.0, 'lemmas': 2788.0, 'lits_learnt': 42201.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 15.0, 'cpu_time': 1.296875, 'integrated_imps': 166.0, 'integrated_jumps': 114.0, 'guiding_paths_lits': 12678.0, 'guiding_paths': 108.0, 'splits': 0.0, 'lemmas_conflict': 178.0, 'lemmas_loop': 1829.0, 'lemmas_other': 781.0, 'lits_conflict': 1958.0, 'lits_loop': 28805.0, 'lits_other': 11438.0, 'jumps': {'jumps': 184.0, 'jumps_bounded': 10.0, 'levels': 226.0, 'levels_bounded': 10.0, 'max': 5.0, 'max_executed': 5.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{14: 35, 15: 36, 16: 37, 17: 38, 18: 39, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46, 25: 47, 26: 48}

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 13, current total achieved sgoals = 14 (107.69% solved)

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 26 was achieved successfully.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.174869s, Solving = 0.031378s, Total = 0.206247s, Memory = (RSS = 300.632812Mb, VMS = 296.667969Mb)
2 : Statistics :: Grounding = 0.140339s, Solving = 0.017542s, Total = 0.157881s, Memory = (RSS = 303.914062Mb, VMS = 300.585938Mb)
3 : Statistics :: Grounding = 0.138191s, Solving = 0.022593s, Total = 0.160784s, Memory = (RSS = 309.195312Mb, VMS = 307.199219Mb)
4 : Statistics :: Grounding = 0.141075s, Solving = 0.034650s, Total = 0.175725s, Memory = (RSS = 313.609375Mb, VMS = 310.304688Mb)
5 : Statistics :: Grounding = 0.158245s, Solving = 0.037366s, Total = 0.195611s, Memory = (RSS = 324.742188Mb, VMS = 321.812500Mb)
6 : Statistics :: Grounding = 0.150340s, Solving = 0.033452s, Total = 0.183792s, Memory = (RSS = 337.015625Mb, VMS = 335.984375Mb)
7 : Statistics :: Grounding = 0.154497s, Solving = 0.113006s, Total = 0.267503s, Memory = (RSS = 352.558594Mb, VMS = 356.898438Mb)
8 : Statistics :: Grounding = 0.192493s, Solving = 0.065131s, Total = 0.257624s, Memory = (RSS = 359.410156Mb, VMS = 361.742188Mb)
9 : Statistics :: Grounding = 0.173688s, Solving = 0.050098s, Total = 0.223786s, Memory = (RSS = 365.207031Mb, VMS = 364.949219Mb)
10 : Statistics :: Grounding = 0.170211s, Solving = 0.057876s, Total = 0.228087s, Memory = (RSS = 379.019531Mb, VMS = 385.937500Mb)
11 : Statistics :: Grounding = 0.183458s, Solving = 0.060597s, Total = 0.244055s, Memory = (RSS = 386.253906Mb, VMS = 390.992188Mb)
12 : Statistics :: Grounding = 0.179960s, Solving = 0.058068s, Total = 0.238028s, Memory = (RSS = 393.304688Mb, VMS = 395.472656Mb)
13 : Statistics :: Grounding = 0.177399s, Solving = 0.067118s, Total = 0.244517s, Memory = (RSS = 400.734375Mb, VMS = 400.601562Mb)
14 : Statistics :: Grounding = 0.202583s, Solving = 0.142789s, Total = 0.345372s, Memory = (RSS = 419.980469Mb, VMS = 431.753906Mb)

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.129012s due to: External generator exit.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 26, 44: 27, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 31, 53: 31, 54: 32, 55: 32, 56: 32, 57: 33, 58: 33, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 48, 29: 50, 30: 51, 31: 53, 32: 56, 33: 58, 34: 59}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 26, 44: 27, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 31, 53: 31, 54: 32, 55: 32, 56: 32, 57: 33, 58: 33, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 48, 29: 50, 30: 51, 31: 53, 32: 56, 33: 58, 34: 59}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13, 35: 14, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20, 43: 21, 44: 22, 45: 23, 46: 24, 47: 25, 48: 26}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46, 25: 47, 26: 48}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 26, Last requested goal index = 26 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.337348s, Solving = 0.791664s, Total = 3.129012s, Memory = (RSS = 419.980469Mb, VMS = 431.753906Mb)), Calls = 14
Model :: Total atoms = 15469, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 14 :: Actions = 14                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 7] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,8))
Step 23:
    Current Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 8] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_arm_1,(block,8),(block,9))
Step 24:
    Current Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 9] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,8))
Step 25:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 26:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 27:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 28:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 29:
    Current Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 11] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 30:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 31:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 32:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 33:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 34:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 35:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 37:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 38:
    Current Sub-goals:
        [Index = 16] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 16] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 39:
    Current Sub-goals:
        [Index = 17] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 40:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 41:
    Current Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 19] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 42:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 43:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 44:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,4))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 23] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,7))
Step 47:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_arm_1,(block,7),(block,8))
Step 48:
    Current Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 26] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_2,(block,1),(block,2))

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=34, total_plan_length=48, step_range=range(34, 49)

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 59, Actions = 59
Level [2]: Length = 48, Actions = 48
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  14, Actions =  14 (Com = 1.00), Sgs = 14, Time =  32.129s (Gro =   8.691s, Sea =  23.437s), Expan (1.08, 1.08) (Dev = (0.28, 0.28), Bal = (0.26, 0.26))

[12-11-2021_15-24-17] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=14, start_step=34, blend=Blend(left=0, right=0)

[12-11-2021_15-24-17] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=7, large_group_size=8

[12-11-2021_15-24-17] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=41, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  14, Actions =  14 (Com = 1.00), Sgs = 14, Time =  32.129s (Gro =   8.691s, Sea =  23.437s), Expan (1.08, 1.08) (Dev = (0.28, 0.28), Bal = (0.26, 0.26))
Division points [total=1] : [(Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 3:
Divided plan : Level =  2 (par-ref), Length =  14, Actions =  14 (Com = 1.00), Sgs = 14, Time =  32.129s (Gro =   8.691s, Sea =  23.437s), Expan (1.08, 1.08) (Dev = (0.28, 0.28), Bal = (0.26, 0.26))
Division points [total=1] : [(Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-41]

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [35-41], problem number = 3, increment number = 3

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 41)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 35
last_sgoals = 41
start_step = 59
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 65

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [35-41] : Minimum search length bound = disabled with value = 65

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[12-11-2021_15-24-17] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[12-11-2021_15-24-17] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 59 as problem start state.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,5))', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,5)', 'S': 59})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 59})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 59})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 59})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 59})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 59})
Fluent({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 59})

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete(blue), false, 59).
holds(1, complete(red), false, 59).
holds(1, complete(yellow), false, 59).
holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 59).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 59).
holds(1, configuration(manipulator_limb_1), extended, 59).
holds(1, configuration(manipulator_limb_2), retracted, 59).
holds(1, configuration(puzzle_room_door), open, 59).
holds(1, configuration(starting_room_door), closed, 59).
holds(1, configuration(store_room_door), open, 59).
holds(1, grasping(manipulator_arm_1), (block,5), 59).
holds(1, grasping(manipulator_arm_2), (block,4), 59).
holds(1, grasping(manipulator_end_1), (block,5), 59).
holds(1, grasping(manipulator_end_2), (block,4), 59).
holds(1, in((block,1)), (puzzle_room,1), 59).
holds(1, in((block,2)), (puzzle_room,1), 59).
holds(1, in((block,3)), (puzzle_room,1), 59).
holds(1, in((block,4)), (puzzle_room,1), 59).
holds(1, in((block,5)), (puzzle_room,1), 59).
holds(1, in((block,6)), (puzzle_room,1), 59).
holds(1, in((block,7)), (puzzle_room,1), 59).
holds(1, in((block,8)), (puzzle_room,1), 59).
holds(1, in((block,9)), (puzzle_room,1), 59).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 59).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 59).
holds(1, in(manipulator_end_1), (puzzle_room,1), 59).
holds(1, in(manipulator_end_2), (puzzle_room,1), 59).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 59).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 59).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 59).
holds(1, in(talos), (puzzle_room,1), 59).
holds(1, in_tower((block,1),(block,1)), true, 59).
holds(1, in_tower((block,1),(block,2)), false, 59).
holds(1, in_tower((block,1),(block,3)), true, 59).
holds(1, in_tower((block,1),(block,4)), false, 59).
holds(1, in_tower((block,1),(block,5)), false, 59).
holds(1, in_tower((block,1),(block,6)), false, 59).
holds(1, in_tower((block,1),(block,7)), false, 59).
holds(1, in_tower((block,1),(block,8)), false, 59).
holds(1, in_tower((block,1),(block,9)), false, 59).
holds(1, in_tower((block,2),(block,1)), false, 59).
holds(1, in_tower((block,2),(block,2)), true, 59).
holds(1, in_tower((block,2),(block,3)), false, 59).
holds(1, in_tower((block,2),(block,4)), false, 59).
holds(1, in_tower((block,2),(block,5)), false, 59).
holds(1, in_tower((block,2),(block,6)), false, 59).
holds(1, in_tower((block,2),(block,7)), false, 59).
holds(1, in_tower((block,2),(block,8)), false, 59).
holds(1, in_tower((block,2),(block,9)), false, 59).
holds(1, in_tower((block,3),(block,1)), false, 59).
holds(1, in_tower((block,3),(block,2)), false, 59).
holds(1, in_tower((block,3),(block,3)), false, 59).
holds(1, in_tower((block,3),(block,4)), false, 59).
holds(1, in_tower((block,3),(block,5)), false, 59).
holds(1, in_tower((block,3),(block,6)), false, 59).
holds(1, in_tower((block,3),(block,7)), false, 59).
holds(1, in_tower((block,3),(block,8)), false, 59).
holds(1, in_tower((block,3),(block,9)), false, 59).
holds(1, in_tower((block,4),(block,1)), false, 59).
holds(1, in_tower((block,4),(block,2)), false, 59).
holds(1, in_tower((block,4),(block,3)), false, 59).
holds(1, in_tower((block,4),(block,4)), false, 59).
holds(1, in_tower((block,4),(block,5)), false, 59).
holds(1, in_tower((block,4),(block,6)), false, 59).
holds(1, in_tower((block,4),(block,7)), false, 59).
holds(1, in_tower((block,4),(block,8)), false, 59).
holds(1, in_tower((block,4),(block,9)), false, 59).
holds(1, in_tower((block,5),(block,1)), false, 59).
holds(1, in_tower((block,5),(block,2)), false, 59).
holds(1, in_tower((block,5),(block,3)), false, 59).
holds(1, in_tower((block,5),(block,4)), false, 59).
holds(1, in_tower((block,5),(block,5)), false, 59).
holds(1, in_tower((block,5),(block,6)), false, 59).
holds(1, in_tower((block,5),(block,7)), false, 59).
holds(1, in_tower((block,5),(block,8)), false, 59).
holds(1, in_tower((block,5),(block,9)), false, 59).
holds(1, in_tower((block,6),(block,1)), false, 59).
holds(1, in_tower((block,6),(block,2)), false, 59).
holds(1, in_tower((block,6),(block,3)), false, 59).
holds(1, in_tower((block,6),(block,4)), false, 59).
holds(1, in_tower((block,6),(block,5)), true, 59).
holds(1, in_tower((block,6),(block,6)), true, 59).
holds(1, in_tower((block,6),(block,7)), false, 59).
holds(1, in_tower((block,6),(block,8)), false, 59).
holds(1, in_tower((block,6),(block,9)), false, 59).
holds(1, in_tower((block,7),(block,1)), false, 59).
holds(1, in_tower((block,7),(block,2)), false, 59).
holds(1, in_tower((block,7),(block,3)), false, 59).
holds(1, in_tower((block,7),(block,4)), false, 59).
holds(1, in_tower((block,7),(block,5)), false, 59).
holds(1, in_tower((block,7),(block,6)), false, 59).
holds(1, in_tower((block,7),(block,7)), true, 59).
holds(1, in_tower((block,7),(block,8)), false, 59).
holds(1, in_tower((block,7),(block,9)), false, 59).
holds(1, in_tower((block,8),(block,1)), false, 59).
holds(1, in_tower((block,8),(block,2)), false, 59).
holds(1, in_tower((block,8),(block,3)), false, 59).
holds(1, in_tower((block,8),(block,4)), false, 59).
holds(1, in_tower((block,8),(block,5)), false, 59).
holds(1, in_tower((block,8),(block,6)), false, 59).
holds(1, in_tower((block,8),(block,7)), false, 59).
holds(1, in_tower((block,8),(block,8)), false, 59).
holds(1, in_tower((block,8),(block,9)), false, 59).
holds(1, in_tower((block,9),(block,1)), false, 59).
holds(1, in_tower((block,9),(block,2)), false, 59).
holds(1, in_tower((block,9),(block,3)), false, 59).
holds(1, in_tower((block,9),(block,4)), false, 59).
holds(1, in_tower((block,9),(block,5)), false, 59).
holds(1, in_tower((block,9),(block,6)), false, 59).
holds(1, in_tower((block,9),(block,7)), false, 59).
holds(1, in_tower((block,9),(block,8)), true, 59).
holds(1, in_tower((block,9),(block,9)), true, 59).
holds(1, on((block,1)), puzzle_room_table_left, 59).
holds(1, on((block,2)), puzzle_room_table_right, 59).
holds(1, on((block,3)), (block,1), 59).
holds(1, on((block,4)), nothing, 59).
holds(1, on((block,5)), (block,6), 59).
holds(1, on((block,6)), puzzle_room_table_right, 59).
holds(1, on((block,7)), puzzle_room_table_middle, 59).
holds(1, on((block,8)), (block,9), 59).
holds(1, on((block,9)), puzzle_room_table_middle, 59).
holds(1, tower_base((block,1)), true, 59).
holds(1, tower_base((block,2)), true, 59).
holds(1, tower_base((block,3)), false, 59).
holds(1, tower_base((block,4)), false, 59).
holds(1, tower_base((block,5)), false, 59).
holds(1, tower_base((block,6)), true, 59).
holds(1, tower_base((block,7)), true, 59).
holds(1, tower_base((block,8)), false, 59).
holds(1, tower_base((block,9)), true, 59).
holds(1, unordered_tower((block,1)), true, 59).
holds(1, unordered_tower((block,2)), false, 59).
holds(1, unordered_tower((block,3)), false, 59).
holds(1, unordered_tower((block,4)), false, 59).
holds(1, unordered_tower((block,5)), false, 59).
holds(1, unordered_tower((block,6)), false, 59).
holds(1, unordered_tower((block,7)), false, 59).
holds(1, unordered_tower((block,8)), false, 59).
holds(1, unordered_tower((block,9)), false, 59).
holds(2, complete(blue), false, 59).
holds(2, complete(red), false, 59).
holds(2, complete(yellow), false, 59).
holds(2, configuration(manipulator_arm_1), extended, 59).
holds(2, configuration(manipulator_arm_2), retracted, 59).
holds(2, configuration(puzzle_room_door), open, 59).
holds(2, configuration(starting_room_door), closed, 59).
holds(2, configuration(store_room_door), open, 59).
holds(2, grasping(manipulator_arm_1), (block,5), 59).
holds(2, grasping(manipulator_arm_2), (block,4), 59).
holds(2, in((block,1)), puzzle_room, 59).
holds(2, in((block,2)), puzzle_room, 59).
holds(2, in((block,3)), puzzle_room, 59).
holds(2, in((block,4)), puzzle_room, 59).
holds(2, in((block,5)), puzzle_room, 59).
holds(2, in((block,6)), puzzle_room, 59).
holds(2, in((block,7)), puzzle_room, 59).
holds(2, in((block,8)), puzzle_room, 59).
holds(2, in((block,9)), puzzle_room, 59).
holds(2, in(manipulator_arm_1), puzzle_room, 59).
holds(2, in(manipulator_arm_2), puzzle_room, 59).
holds(2, in(puzzle_room_table), puzzle_room, 59).
holds(2, in(talos), puzzle_room, 59).
holds(2, in_tower((block,1),(block,1)), true, 59).
holds(2, in_tower((block,1),(block,2)), false, 59).
holds(2, in_tower((block,1),(block,3)), true, 59).
holds(2, in_tower((block,1),(block,4)), false, 59).
holds(2, in_tower((block,1),(block,5)), false, 59).
holds(2, in_tower((block,1),(block,6)), false, 59).
holds(2, in_tower((block,1),(block,7)), false, 59).
holds(2, in_tower((block,1),(block,8)), false, 59).
holds(2, in_tower((block,1),(block,9)), false, 59).
holds(2, in_tower((block,2),(block,1)), false, 59).
holds(2, in_tower((block,2),(block,2)), true, 59).
holds(2, in_tower((block,2),(block,3)), false, 59).
holds(2, in_tower((block,2),(block,4)), false, 59).
holds(2, in_tower((block,2),(block,5)), false, 59).
holds(2, in_tower((block,2),(block,6)), false, 59).
holds(2, in_tower((block,2),(block,7)), false, 59).
holds(2, in_tower((block,2),(block,8)), false, 59).
holds(2, in_tower((block,2),(block,9)), false, 59).
holds(2, in_tower((block,3),(block,1)), false, 59).
holds(2, in_tower((block,3),(block,2)), false, 59).
holds(2, in_tower((block,3),(block,3)), false, 59).
holds(2, in_tower((block,3),(block,4)), false, 59).
holds(2, in_tower((block,3),(block,5)), false, 59).
holds(2, in_tower((block,3),(block,6)), false, 59).
holds(2, in_tower((block,3),(block,7)), false, 59).
holds(2, in_tower((block,3),(block,8)), false, 59).
holds(2, in_tower((block,3),(block,9)), false, 59).
holds(2, in_tower((block,4),(block,1)), false, 59).
holds(2, in_tower((block,4),(block,2)), false, 59).
holds(2, in_tower((block,4),(block,3)), false, 59).
holds(2, in_tower((block,4),(block,4)), false, 59).
holds(2, in_tower((block,4),(block,5)), false, 59).
holds(2, in_tower((block,4),(block,6)), false, 59).
holds(2, in_tower((block,4),(block,7)), false, 59).
holds(2, in_tower((block,4),(block,8)), false, 59).
holds(2, in_tower((block,4),(block,9)), false, 59).
holds(2, in_tower((block,5),(block,1)), false, 59).
holds(2, in_tower((block,5),(block,2)), false, 59).
holds(2, in_tower((block,5),(block,3)), false, 59).
holds(2, in_tower((block,5),(block,4)), false, 59).
holds(2, in_tower((block,5),(block,5)), false, 59).
holds(2, in_tower((block,5),(block,6)), false, 59).
holds(2, in_tower((block,5),(block,7)), false, 59).
holds(2, in_tower((block,5),(block,8)), false, 59).
holds(2, in_tower((block,5),(block,9)), false, 59).
holds(2, in_tower((block,6),(block,1)), false, 59).
holds(2, in_tower((block,6),(block,2)), false, 59).
holds(2, in_tower((block,6),(block,3)), false, 59).
holds(2, in_tower((block,6),(block,4)), false, 59).
holds(2, in_tower((block,6),(block,5)), true, 59).
holds(2, in_tower((block,6),(block,6)), true, 59).
holds(2, in_tower((block,6),(block,7)), false, 59).
holds(2, in_tower((block,6),(block,8)), false, 59).
holds(2, in_tower((block,6),(block,9)), false, 59).
holds(2, in_tower((block,7),(block,1)), false, 59).
holds(2, in_tower((block,7),(block,2)), false, 59).
holds(2, in_tower((block,7),(block,3)), false, 59).
holds(2, in_tower((block,7),(block,4)), false, 59).
holds(2, in_tower((block,7),(block,5)), false, 59).
holds(2, in_tower((block,7),(block,6)), false, 59).
holds(2, in_tower((block,7),(block,7)), true, 59).
holds(2, in_tower((block,7),(block,8)), false, 59).
holds(2, in_tower((block,7),(block,9)), false, 59).
holds(2, in_tower((block,8),(block,1)), false, 59).
holds(2, in_tower((block,8),(block,2)), false, 59).
holds(2, in_tower((block,8),(block,3)), false, 59).
holds(2, in_tower((block,8),(block,4)), false, 59).
holds(2, in_tower((block,8),(block,5)), false, 59).
holds(2, in_tower((block,8),(block,6)), false, 59).
holds(2, in_tower((block,8),(block,7)), false, 59).
holds(2, in_tower((block,8),(block,8)), false, 59).
holds(2, in_tower((block,8),(block,9)), false, 59).
holds(2, in_tower((block,9),(block,1)), false, 59).
holds(2, in_tower((block,9),(block,2)), false, 59).
holds(2, in_tower((block,9),(block,3)), false, 59).
holds(2, in_tower((block,9),(block,4)), false, 59).
holds(2, in_tower((block,9),(block,5)), false, 59).
holds(2, in_tower((block,9),(block,6)), false, 59).
holds(2, in_tower((block,9),(block,7)), false, 59).
holds(2, in_tower((block,9),(block,8)), true, 59).
holds(2, in_tower((block,9),(block,9)), true, 59).
holds(2, on((block,1)), puzzle_room_table, 59).
holds(2, on((block,2)), puzzle_room_table, 59).
holds(2, on((block,3)), (block,1), 59).
holds(2, on((block,4)), nothing, 59).
holds(2, on((block,5)), (block,6), 59).
holds(2, on((block,6)), puzzle_room_table, 59).
holds(2, on((block,7)), puzzle_room_table, 59).
holds(2, on((block,8)), (block,9), 59).
holds(2, on((block,9)), puzzle_room_table, 59).
holds(2, tower_base((block,1)), true, 59).
holds(2, tower_base((block,2)), true, 59).
holds(2, tower_base((block,3)), false, 59).
holds(2, tower_base((block,4)), false, 59).
holds(2, tower_base((block,5)), false, 59).
holds(2, tower_base((block,6)), true, 59).
holds(2, tower_base((block,7)), true, 59).
holds(2, tower_base((block,8)), false, 59).
holds(2, tower_base((block,9)), true, 59).
holds(2, unordered_tower((block,1)), true, 59).
holds(2, unordered_tower((block,2)), false, 59).
holds(2, unordered_tower((block,3)), false, 59).
holds(2, unordered_tower((block,4)), false, 59).
holds(2, unordered_tower((block,5)), false, 59).
holds(2, unordered_tower((block,6)), false, 59).
holds(2, unordered_tower((block,7)), false, 59).
holds(2, unordered_tower((block,8)), false, 59).
holds(2, unordered_tower((block,9)), false, 59).

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, complete(yellow), false, false).
final_goal(1, complete(yellow), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, tower_base((block,7)), false, true).
final_goal(1, tower_base((block,7)), true, false).
final_goal(1, tower_base((block,8)), false, true).
final_goal(1, tower_base((block,8)), true, false).
final_goal(1, tower_base((block,9)), false, false).
final_goal(1, tower_base((block,9)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(1, unordered_tower((block,7)), false, true).
final_goal(1, unordered_tower((block,7)), true, false).
final_goal(1, unordered_tower((block,8)), false, true).
final_goal(1, unordered_tower((block,8)), true, false).
final_goal(1, unordered_tower((block,9)), false, true).
final_goal(1, unordered_tower((block,9)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, complete(yellow), false, false).
final_goal(2, complete(yellow), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, tower_base((block,7)), false, true).
final_goal(2, tower_base((block,7)), true, false).
final_goal(2, tower_base((block,8)), false, true).
final_goal(2, tower_base((block,8)), true, false).
final_goal(2, tower_base((block,9)), false, false).
final_goal(2, tower_base((block,9)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(2, unordered_tower((block,7)), false, true).
final_goal(2, unordered_tower((block,7)), true, false).
final_goal(2, unordered_tower((block,8)), false, true).
final_goal(2, unordered_tower((block,8)), true, false).
final_goal(2, unordered_tower((block,9)), false, true).
final_goal(2, unordered_tower((block,9)), true, false).

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 41})

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 35).
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 36).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 37).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 38).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 39).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 40).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 41).

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000016E4A2C2EE0>]
	incrementor = SolveIncrementor(step_start=59, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=None, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 59), range_=None), IncPart(name='plan_module', args=('#inc', 59, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 59, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 59, 35, 41, 'sequential', 'true'), range_=None)]

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1249 rules

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.006504500000005464s

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.048025s.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010275s with result Satisfiable.

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016E4D957D10>

[12-11-2021_15-24-17] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))
	('level', 1)
	('start_step', 59)
	('last_sgoals', 41)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('first_sgoals', 35)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016E4D957D10>)

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(35, 60)', truth=True, inc_range=None)

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 59). %* None *%
#program plan_module(#inc, 59, false, false). %* None *%
#program optimisation_module(#inc, 59, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 59, 35, 41, sequential, true). %* None *%

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     58 : Current =     60
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(59), Number(59)]), ('plan_module', [Number(59), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(60), Number(59)]), ('plan_module', [Number(60), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.288521s.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 59: original = External(symbol='current_last_sgoals(35, 60)', truth=True, inc_range=None), conversion = current_last_sgoals(35,60).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 60: original = External(symbol='current_last_sgoals(35, 60)', truth=True, inc_range=None), conversion = current_last_sgoals(35,60).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041692s with result Satisfiable.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.33021330000002536, Incremental time limit = None
Running cumulative time = 0.33021330000002536, Cumulative time limit = 3600
Used memory = (RSS = 302.894531Mb, VMS = 298.562500Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.288521s, Solving = 0.041692s, Total = 0.330213s, Memory = (RSS = 302.894531Mb, VMS = 298.562500Mb)), Calls = 1
Final Model :: Total atoms = 7236, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=58, end_step=60, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2885212000000479, solving_time=0.04169209999997747, total_time=0.33021330000002536, memory=Memory(rss=302.89453125, vms=298.5625), step_range=range(59, 61), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2885212000000479, solving_time=0.04169209999997747, total_time=0.33021330000002536, memory=Memory(rss=302.89453125, vms=298.5625), step_range=range(59, 61), clingo_stats={'problem': {'lp': {'atoms': 21042.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 73699.0, 'bodies_tr': 73699.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1167.0, 'rules': 145686.0, 'rules_normal': 144819.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 145674.0, 'rules_tr_normal': 144819.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 35573.0, 'eqs_atom': 11985.0, 'eqs_body': 2980.0, 'eqs_other': 20608.0}, 'lpStep': {'atoms': 11251.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 69637.0, 'bodies_tr': 69637.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 52.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1167.0, 'rules': 134500.0, 'rules_normal': 133633.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 134488.0, 'rules_tr_normal': 133633.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 15515.0, 'eqs_atom': 4469.0, 'eqs_body': 673.0, 'eqs_other': 10373.0}, 'generator': {'vars': 5122.0, 'vars_eliminated': 0.0, 'vars_frozen': 2986.0, 'constraints': 27.0, 'constraints_binary': 2369.0, 'constraints_ternary': 370.0, 'acyc_edges': 0.0, 'complexity': 2780.0}}, 'solving': {'solvers': {'choices': 107.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 31.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 49.0, 'lemmas': 65.0, 'lits_learnt': 65.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 49.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 152.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 49.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 49.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.33009910583496094, 'cpu': 0.328125, 'solve': 0.00997161865234375, 'unsat': 0.0, 'sat': 0.00202178955078125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.39492034912109375, 'cpu': 0.390625, 'solve': 0.015951156616210938, 'unsat': 0.0, 'sat': 0.002986907958984375}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 107.0, 'conflicts': 8.0, 'conflicts_analyzed': 8.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 8.0, 'integrated': 49.0, 'lemmas': 65.0, 'lits_learnt': 65.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 49.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 160.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 8.0, 'lemmas_loop': 8.0, 'lemmas_other': 49.0, 'lits_conflict': 8.0, 'lits_loop': 8.0, 'lits_other': 49.0, 'jumps': {'jumps': 8.0, 'jumps_bounded': 0.0, 'levels': 8.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 60}

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 36 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(36, 60)', truth=True, inc_range=None)

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 36, step = 60]:
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 36)

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 60:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(59)]), ('plan_module', [Number(61), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200920s.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 61: original = External(symbol='current_last_sgoals(36, 60)', truth=True, inc_range=None), conversion = current_last_sgoals(36,60).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030032s with result Satisfiable.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2309515000000033, Incremental time limit = None
Running cumulative time = 0.5611648000000287, Cumulative time limit = 3600
Used memory = (RSS = 307.632812Mb, VMS = 304.355469Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.489441s, Solving = 0.071724s, Total = 0.561165s, Memory = (RSS = 307.632812Mb, VMS = 304.355469Mb)), Calls = 2
Final Model :: Total atoms = 7965, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=60, end_step=61, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4894412000000443, solving_time=0.07172359999998434, total_time=0.5611648000000287, memory=Memory(rss=307.6328125, vms=304.35546875), step_range=range(59, 62), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20091999999999643, solving_time=0.030031500000006872, total_time=0.2309515000000033, memory=Memory(rss=307.6328125, vms=304.35546875), step_range=range(61, 62), clingo_stats={'problem': {'lp': {'atoms': 24087.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 134912.0, 'bodies_tr': 134912.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 735.0, 'count_bodies_tr': 735.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1204.0, 'rules': 263230.0, 'rules_normal': 262011.0, 'rules_choice': 1181.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 263202.0, 'rules_tr_normal': 262011.0, 'rules_tr_choice': 1181.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 41037.0, 'eqs_atom': 12985.0, 'eqs_body': 3745.0, 'eqs_other': 24307.0}, 'lpStep': {'atoms': 3045.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61213.0, 'bodies_tr': 61213.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 117544.0, 'rules_normal': 117192.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 117528.0, 'rules_tr_normal': 117192.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 5464.0, 'eqs_atom': 1000.0, 'eqs_body': 765.0, 'eqs_other': 3699.0}, 'generator': {'vars': 5519.0, 'vars_eliminated': 0.0, 'vars_frozen': 3280.0, 'constraints': 64.0, 'constraints_binary': 3723.0, 'constraints_ternary': 274.0, 'acyc_edges': 0.0, 'complexity': 4087.0}}, 'solving': {'solvers': {'choices': 144.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 46.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 18.0, 'integrated': 6.0, 'lemmas': 17.0, 'lits_learnt': 18.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 224.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 16.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2319469451904297, 'cpu': 0.25, 'solve': 0.013963699340820312, 'unsat': 0.0, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6268672943115234, 'cpu': 0.640625, 'solve': 0.02991485595703125, 'unsat': 0.0, 'sat': 0.00498199462890625}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 251.0, 'conflicts': 24.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 78.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 26.0, 'integrated': 55.0, 'lemmas': 82.0, 'lits_learnt': 83.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 49.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 384.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 9.0, 'lemmas_other': 49.0, 'lits_conflict': 24.0, 'lits_loop': 10.0, 'lits_other': 49.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 0.0, 'levels': 24.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 60, 36: 61}

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 37 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(37, 61)', truth=True, inc_range=None)

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 37, step = 61]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 37)

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 61:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(59)]), ('plan_module', [Number(62), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199204s.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 62: original = External(symbol='current_last_sgoals(37, 61)', truth=True, inc_range=None), conversion = current_last_sgoals(37,61).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018525s with result Unsatisfiable.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.21772939999999608, Incremental time limit = None
Running cumulative time = 0.7788942000000247, Cumulative time limit = 3600
Used memory = (RSS = 308.996094Mb, VMS = 305.386719Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=61, end_step=62, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6886454000000413, solving_time=0.09024879999998348, total_time=0.7788942000000247, memory=Memory(rss=308.99609375, vms=305.38671875), step_range=range(59, 63), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19920419999999694, solving_time=0.01852519999999913, total_time=0.21772939999999608, memory=Memory(rss=308.99609375, vms=305.38671875), step_range=range(62, 63), clingo_stats={'problem': {'lp': {'atoms': 27437.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 196393.0, 'bodies_tr': 196393.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 66.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1300.0, 'rules': 381064.0, 'rules_normal': 379493.0, 'rules_choice': 1514.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 54.0, 'rules_tr': 381020.0, 'rules_tr_normal': 379493.0, 'rules_tr_choice': 1514.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 47818.0, 'eqs_atom': 13941.0, 'eqs_body': 4499.0, 'eqs_other': 29378.0}, 'lpStep': {'atoms': 3350.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61481.0, 'bodies_tr': 61481.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 12.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 96.0, 'rules': 117834.0, 'rules_normal': 117482.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 117818.0, 'rules_tr_normal': 117482.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 6781.0, 'eqs_atom': 956.0, 'eqs_body': 754.0, 'eqs_other': 5071.0}, 'generator': {'vars': 6087.0, 'vars_eliminated': 0.0, 'vars_frozen': 3697.0, 'constraints': 120.0, 'constraints_binary': 6820.0, 'constraints_ternary': 555.0, 'acyc_edges': 0.0, 'complexity': 7541.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 222.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.21895980834960938, 'cpu': 0.203125, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8458271026611328, 'cpu': 0.84375, 'solve': 0.030914306640625, 'unsat': 0.00099945068359375, 'sat': 0.00498199462890625}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 251.0, 'conflicts': 30.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 78.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 25.0, 'distributed_sum_lbd': 26.0, 'integrated': 55.0, 'lemmas': 82.0, 'lits_learnt': 83.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 49.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 606.0, 'guiding_paths': 30.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 9.0, 'lemmas_other': 49.0, 'lits_conflict': 24.0, 'lits_loop': 10.0, 'lits_other': 49.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 0.0, 'levels': 24.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 62:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(59)]), ('plan_module', [Number(63), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200584s.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041069s with result Satisfiable.

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24165309999995088, Incremental time limit = None
Running cumulative time = 1.0205472999999756, Cumulative time limit = 3600
Used memory = (RSS = 316.992188Mb, VMS = 315.363281Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.889230s, Solving = 0.131318s, Total = 1.020547s, Memory = (RSS = 316.992188Mb, VMS = 315.363281Mb)), Calls = 4
Final Model :: Total atoms = 9425, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=62, end_step=63, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.8892296000000215, solving_time=0.13131769999995413, total_time=1.0205472999999756, memory=Memory(rss=316.9921875, vms=315.36328125), step_range=range(59, 64), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20058419999998023, solving_time=0.041068899999970654, total_time=0.24165309999995088, memory=Memory(rss=316.9921875, vms=315.36328125), step_range=range(63, 64), clingo_stats={'problem': {'lp': {'atoms': 30830.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 258436.0, 'bodies_tr': 258436.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1395.0, 'count_bodies_tr': 1395.0, 'sccs': 97.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2264.0, 'rules': 499724.0, 'rules_normal': 497801.0, 'rules_choice': 1847.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 499670.0, 'rules_tr_normal': 497801.0, 'rules_tr_choice': 1847.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 55686.0, 'eqs_atom': 15094.0, 'eqs_body': 5113.0, 'eqs_other': 35479.0}, 'lpStep': {'atoms': 3393.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 62043.0, 'bodies_tr': 62043.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 964.0, 'rules': 118660.0, 'rules_normal': 118308.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 118650.0, 'rules_tr_normal': 118308.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 7868.0, 'eqs_atom': 1153.0, 'eqs_body': 614.0, 'eqs_other': 6101.0}, 'generator': {'vars': 8949.0, 'vars_eliminated': 0.0, 'vars_frozen': 5482.0, 'constraints': 913.0, 'constraints_binary': 27345.0, 'constraints_ternary': 3213.0, 'acyc_edges': 0.0, 'complexity': 31611.0}}, 'solving': {'solvers': {'choices': 273.0, 'conflicts': 66.0, 'conflicts_analyzed': 66.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 50.0, 'models': 1.0, 'models_level': 77.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 61.0, 'integrated': 120.0, 'lemmas': 256.0, 'lits_learnt': 1472.0, 'lemmas_binary': 61.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.046875, 'integrated_imps': 71.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 322.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 32.0, 'lemmas_loop': 147.0, 'lemmas_other': 77.0, 'lits_conflict': 70.0, 'lits_loop': 1124.0, 'lits_other': 278.0, 'jumps': {'jumps': 66.0, 'jumps_bounded': 4.0, 'levels': 74.0, 'levels_bounded': 4.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.24236488342285156, 'cpu': 0.25, 'solve': 0.0169525146484375, 'unsat': 0.0, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0881919860839844, 'cpu': 1.09375, 'solve': 0.0478668212890625, 'unsat': 0.00099945068359375, 'sat': 0.009969711303710938}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 524.0, 'conflicts': 96.0, 'conflicts_analyzed': 90.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 50.0, 'models': 4.0, 'models_level': 155.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 87.0, 'integrated': 175.0, 'lemmas': 338.0, 'lits_learnt': 1555.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.09375, 'integrated_imps': 120.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 928.0, 'guiding_paths': 37.0, 'splits': 0.0, 'lemmas_conflict': 56.0, 'lemmas_loop': 156.0, 'lemmas_other': 126.0, 'lits_conflict': 94.0, 'lits_loop': 1134.0, 'lits_other': 327.0, 'jumps': {'jumps': 90.0, 'jumps_bounded': 4.0, 'levels': 98.0, 'levels_bounded': 4.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 60, 36: 61, 37: 63}

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 38 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(38, 63)', truth=True, inc_range=None)

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 38, step = 63]:
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 38)

[12-11-2021_15-24-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 63:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(59)]), ('plan_module', [Number(64), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244179s.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 64: original = External(symbol='current_last_sgoals(38, 63)', truth=True, inc_range=None), conversion = current_last_sgoals(38,63).

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065481s with result Satisfiable.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.30965989999998556, Incremental time limit = None
Running cumulative time = 1.3302071999999612, Cumulative time limit = 3600
Used memory = (RSS = 328.460938Mb, VMS = 329.675781Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.133408s, Solving = 0.196799s, Total = 1.330207s, Memory = (RSS = 328.460938Mb, VMS = 329.675781Mb)), Calls = 5
Final Model :: Total atoms = 10156, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=63, end_step=64, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.1334084000000075, solving_time=0.19679879999995364, total_time=1.3302071999999612, memory=Memory(rss=328.4609375, vms=329.67578125), step_range=range(59, 65), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24417879999998604, solving_time=0.06548109999999951, total_time=0.30965989999998556, memory=Memory(rss=328.4609375, vms=329.67578125), step_range=range(64, 65), clingo_stats={'problem': {'lp': {'atoms': 36961.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 324073.0, 'bodies_tr': 324073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1725.0, 'count_bodies_tr': 1725.0, 'sccs': 128.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3298.0, 'rules': 624421.0, 'rules_normal': 622146.0, 'rules_choice': 2180.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 90.0, 'rules_tr': 624363.0, 'rules_tr_normal': 622146.0, 'rules_tr_choice': 2180.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 32.0, 'eqs': 74806.0, 'eqs_atom': 18780.0, 'eqs_body': 5539.0, 'eqs_other': 50487.0}, 'lpStep': {'atoms': 6131.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 65637.0, 'bodies_tr': 65637.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1034.0, 'rules': 124697.0, 'rules_normal': 124345.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 124693.0, 'rules_tr_normal': 124345.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 14.0, 'eqs': 19120.0, 'eqs_atom': 3686.0, 'eqs_body': 426.0, 'eqs_other': 15008.0}, 'generator': {'vars': 12504.0, 'vars_eliminated': 0.0, 'vars_frozen': 7582.0, 'constraints': 1802.0, 'constraints_binary': 71641.0, 'constraints_ternary': 7856.0, 'acyc_edges': 0.0, 'complexity': 81533.0}}, 'solving': {'solvers': {'choices': 266.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 93.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 90.0, 'lits_learnt': 864.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 385.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 90.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 864.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.31119537353515625, 'cpu': 0.328125, 'solve': 0.014987945556640625, 'unsat': 0.0, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3993873596191406, 'cpu': 1.421875, 'solve': 0.06285476684570312, 'unsat': 0.00099945068359375, 'sat': 0.0139617919921875}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 790.0, 'conflicts': 96.0, 'conflicts_analyzed': 90.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 57.0, 'models': 5.0, 'models_level': 248.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 65.0, 'distributed_sum_lbd': 87.0, 'integrated': 175.0, 'lemmas': 428.0, 'lits_learnt': 2419.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.125, 'integrated_imps': 120.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 1313.0, 'guiding_paths': 44.0, 'splits': 0.0, 'lemmas_conflict': 56.0, 'lemmas_loop': 246.0, 'lemmas_other': 126.0, 'lits_conflict': 94.0, 'lits_loop': 1998.0, 'lits_other': 327.0, 'jumps': {'jumps': 90.0, 'jumps_bounded': 4.0, 'levels': 98.0, 'levels_bounded': 4.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 60, 36: 61, 37: 63, 38: 64}

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 39 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(39, 64)', truth=True, inc_range=None)

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 39, step = 64]:
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 39)

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 64:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(59)]), ('plan_module', [Number(65), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235183s.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 65: original = External(symbol='current_last_sgoals(39, 64)', truth=True, inc_range=None), conversion = current_last_sgoals(39,64).

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058328s with result Satisfiable.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.29351109999998926, Incremental time limit = None
Running cumulative time = 1.6237182999999504, Cumulative time limit = 3600
Used memory = (RSS = 343.105469Mb, VMS = 348.621094Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.368591s, Solving = 0.255127s, Total = 1.623718s, Memory = (RSS = 343.105469Mb, VMS = 348.621094Mb)), Calls = 6
Final Model :: Total atoms = 10888, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=64, end_step=65, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3685910000000376, solving_time=0.2551272999999128, total_time=1.6237182999999504, memory=Memory(rss=343.10546875, vms=348.62109375), step_range=range(59, 66), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2351826000000301, solving_time=0.05832849999995915, total_time=0.29351109999998926, memory=Memory(rss=343.10546875, vms=348.62109375), step_range=range(65, 66), clingo_stats={'problem': {'lp': {'atoms': 43169.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 390830.0, 'bodies_tr': 390830.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2055.0, 'count_bodies_tr': 2055.0, 'sccs': 159.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4828.0, 'rules': 750259.0, 'rules_normal': 747632.0, 'rules_choice': 2513.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 750201.0, 'rules_tr_normal': 747632.0, 'rules_tr_choice': 2513.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 50.0, 'eqs': 87614.0, 'eqs_atom': 22300.0, 'eqs_body': 5650.0, 'eqs_other': 59664.0}, 'lpStep': {'atoms': 6208.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 66757.0, 'bodies_tr': 66757.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 125838.0, 'rules_normal': 125486.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 125838.0, 'rules_tr_normal': 125486.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 12808.0, 'eqs_atom': 3520.0, 'eqs_body': 111.0, 'eqs_other': 9177.0}, 'generator': {'vars': 17329.0, 'vars_eliminated': 0.0, 'vars_frozen': 10468.0, 'constraints': 3110.0, 'constraints_binary': 138954.0, 'constraints_ternary': 14496.0, 'acyc_edges': 0.0, 'complexity': 156904.0}}, 'solving': {'solvers': {'choices': 349.0, 'conflicts': 38.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 47.0, 'models': 1.0, 'models_level': 108.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 38.0, 'distributed_sum_lbd': 76.0, 'integrated': 228.0, 'lemmas': 347.0, 'lits_learnt': 6381.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 228.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 448.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 38.0, 'lemmas_loop': 81.0, 'lemmas_other': 228.0, 'lits_conflict': 798.0, 'lits_loop': 795.0, 'lits_other': 4788.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 38.0, 'levels': 76.0, 'levels_bounded': 38.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2952156066894531, 'cpu': 0.390625, 'solve': 0.018930435180664062, 'unsat': 0.0, 'sat': 0.0069580078125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6946029663085938, 'cpu': 1.8125, 'solve': 0.08178520202636719, 'unsat': 0.00099945068359375, 'sat': 0.0209197998046875}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1139.0, 'conflicts': 134.0, 'conflicts_analyzed': 128.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 104.0, 'models': 6.0, 'models_level': 356.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 103.0, 'distributed_sum_lbd': 163.0, 'integrated': 403.0, 'lemmas': 775.0, 'lits_learnt': 8800.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.25, 'integrated_imps': 348.0, 'integrated_jumps': 19.0, 'guiding_paths_lits': 1761.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 94.0, 'lemmas_loop': 327.0, 'lemmas_other': 354.0, 'lits_conflict': 892.0, 'lits_loop': 2793.0, 'lits_other': 5115.0, 'jumps': {'jumps': 128.0, 'jumps_bounded': 42.0, 'levels': 174.0, 'levels_bounded': 42.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 60, 36: 61, 37: 63, 38: 64, 39: 65}

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 40 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(40, 65)', truth=True, inc_range=None)

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 40, step = 65]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 40)

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 65:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(59)]), ('plan_module', [Number(66), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242929s.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 66: original = External(symbol='current_last_sgoals(40, 65)', truth=True, inc_range=None), conversion = current_last_sgoals(40,65).

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048545s with result Unsatisfiable.

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.29147409999995944, Incremental time limit = None
Running cumulative time = 1.9151923999999099, Cumulative time limit = 3600
Used memory = (RSS = 350.550781Mb, VMS = 353.105469Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=65, end_step=66, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.6115197000000308, solving_time=0.3036726999998791, total_time=1.9151923999999099, memory=Memory(rss=350.55078125, vms=353.10546875), step_range=range(59, 67), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24292869999999311, solving_time=0.04854539999996632, total_time=0.29147409999995944, memory=Memory(rss=350.55078125, vms=353.10546875), step_range=range(66, 67), clingo_stats={'problem': {'lp': {'atoms': 49739.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 458362.0, 'bodies_tr': 458362.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2385.0, 'count_bodies_tr': 2385.0, 'sccs': 190.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6358.0, 'rules': 877164.0, 'rules_normal': 874185.0, 'rules_choice': 2846.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 126.0, 'rules_tr': 877106.0, 'rules_tr_normal': 874185.0, 'rules_tr_choice': 2846.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 68.0, 'eqs': 101339.0, 'eqs_atom': 26134.0, 'eqs_body': 5753.0, 'eqs_other': 69452.0}, 'lpStep': {'atoms': 6570.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67532.0, 'bodies_tr': 67532.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 126905.0, 'rules_normal': 126553.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 126905.0, 'rules_tr_normal': 126553.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13725.0, 'eqs_atom': 3834.0, 'eqs_body': 103.0, 'eqs_other': 9788.0}, 'generator': {'vars': 22248.0, 'vars_eliminated': 0.0, 'vars_frozen': 13376.0, 'constraints': 4449.0, 'constraints_binary': 209198.0, 'constraints_ternary': 21835.0, 'acyc_edges': 0.0, 'complexity': 235936.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 438.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2942466735839844, 'cpu': 0.390625, 'solve': 0.00595855712890625, 'unsat': 0.00595855712890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9888496398925781, 'cpu': 2.203125, 'solve': 0.08774375915527344, 'unsat': 0.0069580078125, 'sat': 0.0209197998046875}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1139.0, 'conflicts': 141.0, 'conflicts_analyzed': 128.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 104.0, 'models': 6.0, 'models_level': 356.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 103.0, 'distributed_sum_lbd': 163.0, 'integrated': 403.0, 'lemmas': 775.0, 'lits_learnt': 8800.0, 'lemmas_binary': 62.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.359375, 'integrated_imps': 348.0, 'integrated_jumps': 19.0, 'guiding_paths_lits': 2199.0, 'guiding_paths': 57.0, 'splits': 0.0, 'lemmas_conflict': 94.0, 'lemmas_loop': 327.0, 'lemmas_other': 354.0, 'lits_conflict': 892.0, 'lits_loop': 2793.0, 'lits_other': 5115.0, 'jumps': {'jumps': 128.0, 'jumps_bounded': 42.0, 'levels': 174.0, 'levels_bounded': 42.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-19] DEBUG :: ASH Planner Main #1 >> Reaction at search length 66:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(59)]), ('plan_module', [Number(67), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242269s.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.104269s with result Satisfiable.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3465381999999977, Incremental time limit = None
Running cumulative time = 2.2617305999999076, Cumulative time limit = 3600
Used memory = (RSS = 364.753906Mb, VMS = 373.335938Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.853789s, Solving = 0.407942s, Total = 2.261731s, Memory = (RSS = 364.753906Mb, VMS = 373.335938Mb)), Calls = 8
Final Model :: Total atoms = 12353, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=66, end_step=67, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8537887000000524, solving_time=0.4079418999998552, total_time=2.2617305999999076, memory=Memory(rss=364.75390625, vms=373.3359375), step_range=range(59, 68), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2422690000000216, solving_time=0.10426919999997608, total_time=0.3465381999999977, memory=Memory(rss=364.75390625, vms=373.3359375), step_range=range(67, 68), clingo_stats={'problem': {'lp': {'atoms': 56316.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 525910.0, 'bodies_tr': 525910.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2715.0, 'count_bodies_tr': 2715.0, 'sccs': 221.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7888.0, 'rules': 1004106.0, 'rules_normal': 1000775.0, 'rules_choice': 3179.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 1004048.0, 'rules_tr_normal': 1000775.0, 'rules_tr_choice': 3179.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 86.0, 'eqs': 115099.0, 'eqs_atom': 29975.0, 'eqs_body': 5856.0, 'eqs_other': 79268.0}, 'lpStep': {'atoms': 6577.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67548.0, 'bodies_tr': 67548.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 126942.0, 'rules_normal': 126590.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 126942.0, 'rules_tr_normal': 126590.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13760.0, 'eqs_atom': 3841.0, 'eqs_body': 103.0, 'eqs_other': 9816.0}, 'generator': {'vars': 27169.0, 'vars_eliminated': 0.0, 'vars_frozen': 16284.0, 'constraints': 5788.0, 'constraints_binary': 279475.0, 'constraints_ternary': 29176.0, 'acyc_edges': 0.0, 'complexity': 315003.0}}, 'solving': {'solvers': {'choices': 538.0, 'conflicts': 188.0, 'conflicts_analyzed': 188.0, 'restarts': 0.0, 'restarts_last': 51.0, 'extra': {'domain_choices': 419.0, 'models': 1.0, 'models_level': 139.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 171.0, 'distributed_sum_lbd': 419.0, 'integrated': 874.0, 'lemmas': 1991.0, 'lits_learnt': 29109.0, 'lemmas_binary': 185.0, 'lemmas_ternary': 5.0, 'cpu_time': 0.328125, 'integrated_imps': 379.0, 'integrated_jumps': 99.0, 'guiding_paths_lits': 574.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 171.0, 'lemmas_loop': 982.0, 'lemmas_other': 838.0, 'lits_conflict': 2417.0, 'lits_loop': 14832.0, 'lits_other': 11860.0, 'jumps': {'jumps': 188.0, 'jumps_bounded': 64.0, 'levels': 386.0, 'levels_bounded': 64.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.3506641387939453, 'cpu': 0.609375, 'solve': 0.05983924865722656, 'unsat': 0.0, 'sat': 0.0329132080078125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.3395137786865234, 'cpu': 2.8125, 'solve': 0.1475830078125, 'unsat': 0.0069580078125, 'sat': 0.0538330078125}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1677.0, 'conflicts': 329.0, 'conflicts_analyzed': 316.0, 'restarts': 0.0, 'restarts_last': 51.0, 'extra': {'domain_choices': 523.0, 'models': 7.0, 'models_level': 495.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 274.0, 'distributed_sum_lbd': 582.0, 'integrated': 1277.0, 'lemmas': 2766.0, 'lits_learnt': 37909.0, 'lemmas_binary': 247.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.6875, 'integrated_imps': 727.0, 'integrated_jumps': 118.0, 'guiding_paths_lits': 2773.0, 'guiding_paths': 64.0, 'splits': 0.0, 'lemmas_conflict': 265.0, 'lemmas_loop': 1309.0, 'lemmas_other': 1192.0, 'lits_conflict': 3309.0, 'lits_loop': 17625.0, 'lits_other': 16975.0, 'jumps': {'jumps': 316.0, 'jumps_bounded': 106.0, 'levels': 560.0, 'levels_bounded': 106.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 60, 36: 61, 37: 63, 38: 64, 39: 65, 40: 67}

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 41 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(41, 67)', truth=True, inc_range=None)

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 41, step = 67]:
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 41)

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 67:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(59)]), ('plan_module', [Number(68), Number(59), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(59), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(59), Number(35), Number(41), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.275054s.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 68: original = External(symbol='current_last_sgoals(41, 67)', truth=True, inc_range=None), conversion = current_last_sgoals(41,67).

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.150098s with result Satisfiable.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4251515999999924, Incremental time limit = None
Running cumulative time = 2.6868821999999, Cumulative time limit = 3600
Used memory = (RSS = 373.082031Mb, VMS = 378.304688Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.128842s, Solving = 0.558040s, Total = 2.686882s, Memory = (RSS = 373.082031Mb, VMS = 378.304688Mb)), Calls = 9
Final Model :: Total atoms = 13087, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=67, end_step=68, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.128842400000053, solving_time=0.5580397999998468, total_time=2.6868821999999, memory=Memory(rss=373.08203125, vms=378.3046875), step_range=range(59, 69), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27505370000000084, solving_time=0.15009789999999157, total_time=0.4251515999999924, memory=Memory(rss=373.08203125, vms=378.3046875), step_range=range(68, 69), clingo_stats={'problem': {'lp': {'atoms': 62900.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 593473.0, 'bodies_tr': 593473.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3045.0, 'count_bodies_tr': 3045.0, 'sccs': 252.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9418.0, 'rules': 1131084.0, 'rules_normal': 1127401.0, 'rules_choice': 3512.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 162.0, 'rules_tr': 1131026.0, 'rules_tr_normal': 1127401.0, 'rules_tr_choice': 3512.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 104.0, 'eqs': 128896.0, 'eqs_atom': 33823.0, 'eqs_body': 5959.0, 'eqs_other': 89114.0}, 'lpStep': {'atoms': 6584.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67563.0, 'bodies_tr': 67563.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 126978.0, 'rules_normal': 126626.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 126978.0, 'rules_tr_normal': 126626.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13797.0, 'eqs_atom': 3848.0, 'eqs_body': 103.0, 'eqs_other': 9846.0}, 'generator': {'vars': 32090.0, 'vars_eliminated': 0.0, 'vars_frozen': 19192.0, 'constraints': 7127.0, 'constraints_binary': 349781.0, 'constraints_ternary': 36517.0, 'acyc_edges': 0.0, 'complexity': 394099.0}}, 'solving': {'solvers': {'choices': 483.0, 'conflicts': 47.0, 'conflicts_analyzed': 47.0, 'restarts': 0.0, 'restarts_last': 23.0, 'extra': {'domain_choices': 46.0, 'models': 1.0, 'models_level': 154.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 45.0, 'distributed_sum_lbd': 90.0, 'integrated': 75.0, 'lemmas': 298.0, 'lits_learnt': 4723.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.296875, 'integrated_imps': 7.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 45.0, 'lemmas_loop': 182.0, 'lemmas_other': 71.0, 'lits_conflict': 655.0, 'lits_loop': 2294.0, 'lits_other': 1774.0, 'jumps': {'jumps': 47.0, 'jumps_bounded': 5.0, 'levels': 62.0, 'levels_bounded': 5.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.4281482696533203, 'cpu': 0.625, 'solve': 0.09275436401367188, 'unsat': 0.0, 'sat': 0.01197052001953125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.7676620483398438, 'cpu': 3.4375, 'solve': 0.24033737182617188, 'unsat': 0.0069580078125, 'sat': 0.06580352783203125}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2160.0, 'conflicts': 376.0, 'conflicts_analyzed': 363.0, 'restarts': 0.0, 'restarts_last': 51.0, 'extra': {'domain_choices': 569.0, 'models': 8.0, 'models_level': 649.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 319.0, 'distributed_sum_lbd': 672.0, 'integrated': 1352.0, 'lemmas': 3064.0, 'lits_learnt': 42632.0, 'lemmas_binary': 255.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.984375, 'integrated_imps': 734.0, 'integrated_jumps': 125.0, 'guiding_paths_lits': 3410.0, 'guiding_paths': 71.0, 'splits': 0.0, 'lemmas_conflict': 310.0, 'lemmas_loop': 1491.0, 'lemmas_other': 1263.0, 'lits_conflict': 3964.0, 'lits_loop': 19919.0, 'lits_other': 18749.0, 'jumps': {'jumps': 363.0, 'jumps_bounded': 111.0, 'levels': 622.0, 'levels_bounded': 111.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 60, 36: 61, 37: 63, 38: 64, 39: 65, 40: 67, 41: 68}

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 42 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[12-11-2021_15-24-20] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 41 was achieved successfully.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.288521s, Solving = 0.041692s, Total = 0.330213s, Memory = (RSS = 302.894531Mb, VMS = 298.562500Mb)
2 : Statistics :: Grounding = 0.200920s, Solving = 0.030032s, Total = 0.230952s, Memory = (RSS = 307.632812Mb, VMS = 304.355469Mb)
3 : Statistics :: Grounding = 0.199204s, Solving = 0.018525s, Total = 0.217729s, Memory = (RSS = 308.996094Mb, VMS = 305.386719Mb)
4 : Statistics :: Grounding = 0.200584s, Solving = 0.041069s, Total = 0.241653s, Memory = (RSS = 316.992188Mb, VMS = 315.363281Mb)
5 : Statistics :: Grounding = 0.244179s, Solving = 0.065481s, Total = 0.309660s, Memory = (RSS = 328.460938Mb, VMS = 329.675781Mb)
6 : Statistics :: Grounding = 0.235183s, Solving = 0.058328s, Total = 0.293511s, Memory = (RSS = 343.105469Mb, VMS = 348.621094Mb)
7 : Statistics :: Grounding = 0.242929s, Solving = 0.048545s, Total = 0.291474s, Memory = (RSS = 350.550781Mb, VMS = 353.105469Mb)
8 : Statistics :: Grounding = 0.242269s, Solving = 0.104269s, Total = 0.346538s, Memory = (RSS = 364.753906Mb, VMS = 373.335938Mb)
9 : Statistics :: Grounding = 0.275054s, Solving = 0.150098s, Total = 0.425152s, Memory = (RSS = 373.082031Mb, VMS = 378.304688Mb)

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.686882s due to: External generator exit.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 26, 44: 27, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 31, 53: 31, 54: 32, 55: 32, 56: 32, 57: 33, 58: 33, 59: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 48, 29: 50, 30: 51, 31: 53, 32: 56, 33: 58, 34: 59}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13, 35: 14, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20, 43: 21, 44: 22, 45: 23, 46: 24, 47: 25, 48: 26}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46, 25: 47, 26: 48}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 26, 44: 27, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 31, 53: 31, 54: 32, 55: 32, 56: 32, 57: 33, 58: 33, 59: 34, 60: 35, 61: 35, 62: 36, 63: 37, 64: 38, 65: 39, 66: 40, 67: 40, 68: 41}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 48, 29: 50, 30: 51, 31: 53, 32: 56, 33: 58, 34: 59, 35: 61, 36: 62, 37: 63, 38: 64, 39: 65, 40: 67, 41: 68}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13, 35: 14, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20, 43: 21, 44: 22, 45: 23, 46: 24, 47: 25, 48: 26}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46, 25: 47, 26: 48}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 41, Last requested goal index = 41 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.128842s, Solving = 0.558040s, Total = 2.686882s, Memory = (RSS = 373.082031Mb, VMS = 378.304688Mb)), Calls = 9
Model :: Total atoms = 13087, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_1,(block,8),(block,9))
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,8))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 43:
    Current Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 44:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 59:
    Current Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 60:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 61:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 62:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 63:
    Current Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 64:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 65:
    Current Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 66:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 68:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 2 : Total constraining sgoals = 26 : Achieved sgoals = 26 : Unachieved sgoals = 0
Level = 1 : Solved problems = 3 : Total constraining sgoals = 48 : Achieved sgoals = 41 : Unachieved sgoals = 7

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Current valid planning level range: [1-1]

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Chosen level range for planning increment 4 by method ground-first: [1-1]

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 4:
Divided plan : Level =  2 (par-ref), Length =  14, Actions =  14 (Com = 1.00), Sgs = 14, Time =  32.129s (Gro =   8.691s, Sea =  23.437s), Expan (1.08, 1.08) (Dev = (0.28, 0.28), Bal = (0.26, 0.26))
Division points [total=1] : [(Index = 41, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [42-48]

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [42-48], problem number = 4, increment number = 4

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 42)
	('last_sgoals', 48)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 42
last_sgoals = 48
start_step = 68
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 74

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency disabled : Problem type = partial conformance refinement (sequential) with sgoals range [42-48] : Minimum search length bound = disabled with value = 74

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[12-11-2021_15-24-21] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[12-11-2021_15-24-21] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,7))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,8))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,9))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,7))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,8))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,9))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'S': 68})

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 273 rules into program part ash_initial_state:

holds(1, complete(blue), true, 68).
holds(1, complete(red), false, 68).
holds(1, complete(yellow), false, 68).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 68).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 68).
holds(1, configuration(manipulator_limb_1), extended, 68).
holds(1, configuration(manipulator_limb_2), extended, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), (block,2), 68).
holds(1, grasping(manipulator_arm_2), (block,4), 68).
holds(1, grasping(manipulator_end_1), (block,2), 68).
holds(1, grasping(manipulator_end_2), (block,4), 68).
holds(1, in((block,1)), (puzzle_room,1), 68).
holds(1, in((block,2)), (puzzle_room,1), 68).
holds(1, in((block,3)), (puzzle_room,1), 68).
holds(1, in((block,4)), (puzzle_room,1), 68).
holds(1, in((block,5)), (puzzle_room,1), 68).
holds(1, in((block,6)), (puzzle_room,1), 68).
holds(1, in((block,7)), (puzzle_room,1), 68).
holds(1, in((block,8)), (puzzle_room,1), 68).
holds(1, in((block,9)), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 68).
holds(1, in(manipulator_end_1), (puzzle_room,1), 68).
holds(1, in(manipulator_end_2), (puzzle_room,1), 68).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 68).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_middle), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 68).
holds(1, in(talos), (puzzle_room,1), 68).
holds(1, in_tower((block,1),(block,1)), true, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), false, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,1),(block,7)), false, 68).
holds(1, in_tower((block,1),(block,8)), false, 68).
holds(1, in_tower((block,1),(block,9)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), true, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,7)), false, 68).
holds(1, in_tower((block,2),(block,8)), false, 68).
holds(1, in_tower((block,2),(block,9)), false, 68).
holds(1, in_tower((block,3),(block,1)), false, 68).
holds(1, in_tower((block,3),(block,2)), false, 68).
holds(1, in_tower((block,3),(block,3)), true, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,7)), false, 68).
holds(1, in_tower((block,3),(block,8)), false, 68).
holds(1, in_tower((block,3),(block,9)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,7)), false, 68).
holds(1, in_tower((block,4),(block,8)), false, 68).
holds(1, in_tower((block,4),(block,9)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,7)), false, 68).
holds(1, in_tower((block,5),(block,8)), false, 68).
holds(1, in_tower((block,5),(block,9)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), true, 68).
holds(1, in_tower((block,6),(block,5)), true, 68).
holds(1, in_tower((block,6),(block,6)), true, 68).
holds(1, in_tower((block,6),(block,7)), false, 68).
holds(1, in_tower((block,6),(block,8)), false, 68).
holds(1, in_tower((block,6),(block,9)), false, 68).
holds(1, in_tower((block,7),(block,1)), false, 68).
holds(1, in_tower((block,7),(block,2)), false, 68).
holds(1, in_tower((block,7),(block,3)), false, 68).
holds(1, in_tower((block,7),(block,4)), false, 68).
holds(1, in_tower((block,7),(block,5)), false, 68).
holds(1, in_tower((block,7),(block,6)), false, 68).
holds(1, in_tower((block,7),(block,7)), true, 68).
holds(1, in_tower((block,7),(block,8)), false, 68).
holds(1, in_tower((block,7),(block,9)), false, 68).
holds(1, in_tower((block,8),(block,1)), false, 68).
holds(1, in_tower((block,8),(block,2)), false, 68).
holds(1, in_tower((block,8),(block,3)), false, 68).
holds(1, in_tower((block,8),(block,4)), false, 68).
holds(1, in_tower((block,8),(block,5)), false, 68).
holds(1, in_tower((block,8),(block,6)), false, 68).
holds(1, in_tower((block,8),(block,7)), false, 68).
holds(1, in_tower((block,8),(block,8)), false, 68).
holds(1, in_tower((block,8),(block,9)), false, 68).
holds(1, in_tower((block,9),(block,1)), false, 68).
holds(1, in_tower((block,9),(block,2)), false, 68).
holds(1, in_tower((block,9),(block,3)), false, 68).
holds(1, in_tower((block,9),(block,4)), false, 68).
holds(1, in_tower((block,9),(block,5)), false, 68).
holds(1, in_tower((block,9),(block,6)), false, 68).
holds(1, in_tower((block,9),(block,7)), false, 68).
holds(1, in_tower((block,9),(block,8)), true, 68).
holds(1, in_tower((block,9),(block,9)), true, 68).
holds(1, on((block,1)), puzzle_room_table_left, 68).
holds(1, on((block,2)), puzzle_room_table_right, 68).
holds(1, on((block,3)), puzzle_room_table_left, 68).
holds(1, on((block,4)), (block,5), 68).
holds(1, on((block,5)), (block,6), 68).
holds(1, on((block,6)), puzzle_room_table_right, 68).
holds(1, on((block,7)), puzzle_room_table_middle, 68).
holds(1, on((block,8)), (block,9), 68).
holds(1, on((block,9)), puzzle_room_table_middle, 68).
holds(1, tower_base((block,1)), true, 68).
holds(1, tower_base((block,2)), true, 68).
holds(1, tower_base((block,3)), true, 68).
holds(1, tower_base((block,4)), false, 68).
holds(1, tower_base((block,5)), false, 68).
holds(1, tower_base((block,6)), true, 68).
holds(1, tower_base((block,7)), true, 68).
holds(1, tower_base((block,8)), false, 68).
holds(1, tower_base((block,9)), true, 68).
holds(1, unordered_tower((block,1)), false, 68).
holds(1, unordered_tower((block,2)), false, 68).
holds(1, unordered_tower((block,3)), false, 68).
holds(1, unordered_tower((block,4)), false, 68).
holds(1, unordered_tower((block,5)), false, 68).
holds(1, unordered_tower((block,6)), false, 68).
holds(1, unordered_tower((block,7)), false, 68).
holds(1, unordered_tower((block,8)), false, 68).
holds(1, unordered_tower((block,9)), false, 68).
holds(2, complete(blue), true, 68).
holds(2, complete(red), false, 68).
holds(2, complete(yellow), false, 68).
holds(2, configuration(manipulator_arm_1), extended, 68).
holds(2, configuration(manipulator_arm_2), extended, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), (block,2), 68).
holds(2, grasping(manipulator_arm_2), (block,4), 68).
holds(2, in((block,1)), puzzle_room, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), puzzle_room, 68).
holds(2, in((block,5)), puzzle_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in((block,7)), puzzle_room, 68).
holds(2, in((block,8)), puzzle_room, 68).
holds(2, in((block,9)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), puzzle_room, 68).
holds(2, in(manipulator_arm_2), puzzle_room, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), puzzle_room, 68).
holds(2, in_tower((block,1),(block,1)), true, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), false, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,1),(block,7)), false, 68).
holds(2, in_tower((block,1),(block,8)), false, 68).
holds(2, in_tower((block,1),(block,9)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), true, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,7)), false, 68).
holds(2, in_tower((block,2),(block,8)), false, 68).
holds(2, in_tower((block,2),(block,9)), false, 68).
holds(2, in_tower((block,3),(block,1)), false, 68).
holds(2, in_tower((block,3),(block,2)), false, 68).
holds(2, in_tower((block,3),(block,3)), true, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,7)), false, 68).
holds(2, in_tower((block,3),(block,8)), false, 68).
holds(2, in_tower((block,3),(block,9)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,7)), false, 68).
holds(2, in_tower((block,4),(block,8)), false, 68).
holds(2, in_tower((block,4),(block,9)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,7)), false, 68).
holds(2, in_tower((block,5),(block,8)), false, 68).
holds(2, in_tower((block,5),(block,9)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), true, 68).
holds(2, in_tower((block,6),(block,5)), true, 68).
holds(2, in_tower((block,6),(block,6)), true, 68).
holds(2, in_tower((block,6),(block,7)), false, 68).
holds(2, in_tower((block,6),(block,8)), false, 68).
holds(2, in_tower((block,6),(block,9)), false, 68).
holds(2, in_tower((block,7),(block,1)), false, 68).
holds(2, in_tower((block,7),(block,2)), false, 68).
holds(2, in_tower((block,7),(block,3)), false, 68).
holds(2, in_tower((block,7),(block,4)), false, 68).
holds(2, in_tower((block,7),(block,5)), false, 68).
holds(2, in_tower((block,7),(block,6)), false, 68).
holds(2, in_tower((block,7),(block,7)), true, 68).
holds(2, in_tower((block,7),(block,8)), false, 68).
holds(2, in_tower((block,7),(block,9)), false, 68).
holds(2, in_tower((block,8),(block,1)), false, 68).
holds(2, in_tower((block,8),(block,2)), false, 68).
holds(2, in_tower((block,8),(block,3)), false, 68).
holds(2, in_tower((block,8),(block,4)), false, 68).
holds(2, in_tower((block,8),(block,5)), false, 68).
holds(2, in_tower((block,8),(block,6)), false, 68).
holds(2, in_tower((block,8),(block,7)), false, 68).
holds(2, in_tower((block,8),(block,8)), false, 68).
holds(2, in_tower((block,8),(block,9)), false, 68).
holds(2, in_tower((block,9),(block,1)), false, 68).
holds(2, in_tower((block,9),(block,2)), false, 68).
holds(2, in_tower((block,9),(block,3)), false, 68).
holds(2, in_tower((block,9),(block,4)), false, 68).
holds(2, in_tower((block,9),(block,5)), false, 68).
holds(2, in_tower((block,9),(block,6)), false, 68).
holds(2, in_tower((block,9),(block,7)), false, 68).
holds(2, in_tower((block,9),(block,8)), true, 68).
holds(2, in_tower((block,9),(block,9)), true, 68).
holds(2, on((block,1)), puzzle_room_table, 68).
holds(2, on((block,2)), puzzle_room_table, 68).
holds(2, on((block,3)), puzzle_room_table, 68).
holds(2, on((block,4)), (block,5), 68).
holds(2, on((block,5)), (block,6), 68).
holds(2, on((block,6)), puzzle_room_table, 68).
holds(2, on((block,7)), puzzle_room_table, 68).
holds(2, on((block,8)), (block,9), 68).
holds(2, on((block,9)), puzzle_room_table, 68).
holds(2, tower_base((block,1)), true, 68).
holds(2, tower_base((block,2)), true, 68).
holds(2, tower_base((block,3)), true, 68).
holds(2, tower_base((block,4)), false, 68).
holds(2, tower_base((block,5)), false, 68).
holds(2, tower_base((block,6)), true, 68).
holds(2, tower_base((block,7)), true, 68).
holds(2, tower_base((block,8)), false, 68).
holds(2, tower_base((block,9)), true, 68).
holds(2, unordered_tower((block,1)), false, 68).
holds(2, unordered_tower((block,2)), false, 68).
holds(2, unordered_tower((block,3)), false, 68).
holds(2, unordered_tower((block,4)), false, 68).
holds(2, unordered_tower((block,5)), false, 68).
holds(2, unordered_tower((block,6)), false, 68).
holds(2, unordered_tower((block,7)), false, 68).
holds(2, unordered_tower((block,8)), false, 68).
holds(2, unordered_tower((block,9)), false, 68).

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,7))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,8))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_middle', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,9))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(yellow)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,7))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,8))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,9))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,9))', 'V': 'true', 'T': 'false'})

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 606 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, complete(yellow), false, false).
final_goal(1, complete(yellow), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,1),(block,7)), false, true).
final_goal(1, in_tower((block,1),(block,7)), true, false).
final_goal(1, in_tower((block,1),(block,8)), false, true).
final_goal(1, in_tower((block,1),(block,8)), true, false).
final_goal(1, in_tower((block,1),(block,9)), false, true).
final_goal(1, in_tower((block,1),(block,9)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,7)), false, true).
final_goal(1, in_tower((block,2),(block,7)), true, false).
final_goal(1, in_tower((block,2),(block,8)), false, true).
final_goal(1, in_tower((block,2),(block,8)), true, false).
final_goal(1, in_tower((block,2),(block,9)), false, true).
final_goal(1, in_tower((block,2),(block,9)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,7)), false, true).
final_goal(1, in_tower((block,3),(block,7)), true, false).
final_goal(1, in_tower((block,3),(block,8)), false, true).
final_goal(1, in_tower((block,3),(block,8)), true, false).
final_goal(1, in_tower((block,3),(block,9)), false, true).
final_goal(1, in_tower((block,3),(block,9)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,7)), false, true).
final_goal(1, in_tower((block,4),(block,7)), true, false).
final_goal(1, in_tower((block,4),(block,8)), false, true).
final_goal(1, in_tower((block,4),(block,8)), true, false).
final_goal(1, in_tower((block,4),(block,9)), false, true).
final_goal(1, in_tower((block,4),(block,9)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,7)), false, true).
final_goal(1, in_tower((block,5),(block,7)), true, false).
final_goal(1, in_tower((block,5),(block,8)), false, true).
final_goal(1, in_tower((block,5),(block,8)), true, false).
final_goal(1, in_tower((block,5),(block,9)), false, true).
final_goal(1, in_tower((block,5),(block,9)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, in_tower((block,6),(block,7)), false, true).
final_goal(1, in_tower((block,6),(block,7)), true, false).
final_goal(1, in_tower((block,6),(block,8)), false, true).
final_goal(1, in_tower((block,6),(block,8)), true, false).
final_goal(1, in_tower((block,6),(block,9)), false, true).
final_goal(1, in_tower((block,6),(block,9)), true, false).
final_goal(1, in_tower((block,7),(block,1)), false, true).
final_goal(1, in_tower((block,7),(block,1)), true, false).
final_goal(1, in_tower((block,7),(block,2)), false, true).
final_goal(1, in_tower((block,7),(block,2)), true, false).
final_goal(1, in_tower((block,7),(block,3)), false, true).
final_goal(1, in_tower((block,7),(block,3)), true, false).
final_goal(1, in_tower((block,7),(block,4)), false, true).
final_goal(1, in_tower((block,7),(block,4)), true, false).
final_goal(1, in_tower((block,7),(block,5)), false, true).
final_goal(1, in_tower((block,7),(block,5)), true, false).
final_goal(1, in_tower((block,7),(block,6)), false, true).
final_goal(1, in_tower((block,7),(block,6)), true, false).
final_goal(1, in_tower((block,7),(block,7)), false, true).
final_goal(1, in_tower((block,7),(block,7)), true, false).
final_goal(1, in_tower((block,7),(block,8)), false, true).
final_goal(1, in_tower((block,7),(block,8)), true, false).
final_goal(1, in_tower((block,7),(block,9)), false, true).
final_goal(1, in_tower((block,7),(block,9)), true, false).
final_goal(1, in_tower((block,8),(block,1)), false, true).
final_goal(1, in_tower((block,8),(block,1)), true, false).
final_goal(1, in_tower((block,8),(block,2)), false, true).
final_goal(1, in_tower((block,8),(block,2)), true, false).
final_goal(1, in_tower((block,8),(block,3)), false, true).
final_goal(1, in_tower((block,8),(block,3)), true, false).
final_goal(1, in_tower((block,8),(block,4)), false, true).
final_goal(1, in_tower((block,8),(block,4)), true, false).
final_goal(1, in_tower((block,8),(block,5)), false, true).
final_goal(1, in_tower((block,8),(block,5)), true, false).
final_goal(1, in_tower((block,8),(block,6)), false, true).
final_goal(1, in_tower((block,8),(block,6)), true, false).
final_goal(1, in_tower((block,8),(block,7)), false, true).
final_goal(1, in_tower((block,8),(block,7)), true, false).
final_goal(1, in_tower((block,8),(block,8)), false, true).
final_goal(1, in_tower((block,8),(block,8)), true, false).
final_goal(1, in_tower((block,8),(block,9)), false, true).
final_goal(1, in_tower((block,8),(block,9)), true, false).
final_goal(1, in_tower((block,9),(block,1)), false, true).
final_goal(1, in_tower((block,9),(block,1)), true, false).
final_goal(1, in_tower((block,9),(block,2)), false, true).
final_goal(1, in_tower((block,9),(block,2)), true, false).
final_goal(1, in_tower((block,9),(block,3)), false, true).
final_goal(1, in_tower((block,9),(block,3)), true, false).
final_goal(1, in_tower((block,9),(block,4)), false, true).
final_goal(1, in_tower((block,9),(block,4)), true, false).
final_goal(1, in_tower((block,9),(block,5)), false, true).
final_goal(1, in_tower((block,9),(block,5)), true, false).
final_goal(1, in_tower((block,9),(block,6)), false, true).
final_goal(1, in_tower((block,9),(block,6)), true, false).
final_goal(1, in_tower((block,9),(block,7)), false, false).
final_goal(1, in_tower((block,9),(block,7)), true, true).
final_goal(1, in_tower((block,9),(block,8)), false, false).
final_goal(1, in_tower((block,9),(block,8)), true, true).
final_goal(1, in_tower((block,9),(block,9)), false, false).
final_goal(1, in_tower((block,9),(block,9)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), (block,7), false).
final_goal(1, on((block,1)), (block,8), false).
final_goal(1, on((block,1)), (block,9), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), (block,7), false).
final_goal(1, on((block,2)), (block,8), false).
final_goal(1, on((block,2)), (block,9), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), (block,7), false).
final_goal(1, on((block,3)), (block,8), false).
final_goal(1, on((block,3)), (block,9), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), (block,7), false).
final_goal(1, on((block,4)), (block,8), false).
final_goal(1, on((block,4)), (block,9), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), (block,7), false).
final_goal(1, on((block,5)), (block,8), false).
final_goal(1, on((block,5)), (block,9), false).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), (block,7), false).
final_goal(1, on((block,6)), (block,8), false).
final_goal(1, on((block,6)), (block,9), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, on((block,7)), (block,1), false).
final_goal(1, on((block,7)), (block,2), false).
final_goal(1, on((block,7)), (block,3), false).
final_goal(1, on((block,7)), (block,4), false).
final_goal(1, on((block,7)), (block,5), false).
final_goal(1, on((block,7)), (block,6), false).
final_goal(1, on((block,7)), (block,8), true).
final_goal(1, on((block,7)), (block,9), false).
final_goal(1, on((block,7)), nothing, false).
final_goal(1, on((block,7)), puzzle_room_table_left, false).
final_goal(1, on((block,7)), puzzle_room_table_middle, false).
final_goal(1, on((block,7)), puzzle_room_table_right, false).
final_goal(1, on((block,8)), (block,1), false).
final_goal(1, on((block,8)), (block,2), false).
final_goal(1, on((block,8)), (block,3), false).
final_goal(1, on((block,8)), (block,4), false).
final_goal(1, on((block,8)), (block,5), false).
final_goal(1, on((block,8)), (block,6), false).
final_goal(1, on((block,8)), (block,7), false).
final_goal(1, on((block,8)), (block,9), true).
final_goal(1, on((block,8)), nothing, false).
final_goal(1, on((block,8)), puzzle_room_table_left, false).
final_goal(1, on((block,8)), puzzle_room_table_middle, false).
final_goal(1, on((block,8)), puzzle_room_table_right, false).
final_goal(1, on((block,9)), (block,1), false).
final_goal(1, on((block,9)), (block,2), false).
final_goal(1, on((block,9)), (block,3), false).
final_goal(1, on((block,9)), (block,4), false).
final_goal(1, on((block,9)), (block,5), false).
final_goal(1, on((block,9)), (block,6), false).
final_goal(1, on((block,9)), (block,7), false).
final_goal(1, on((block,9)), (block,8), false).
final_goal(1, on((block,9)), nothing, false).
final_goal(1, on((block,9)), puzzle_room_table_left, false).
final_goal(1, on((block,9)), puzzle_room_table_middle, true).
final_goal(1, on((block,9)), puzzle_room_table_right, false).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, tower_base((block,7)), false, true).
final_goal(1, tower_base((block,7)), true, false).
final_goal(1, tower_base((block,8)), false, true).
final_goal(1, tower_base((block,8)), true, false).
final_goal(1, tower_base((block,9)), false, false).
final_goal(1, tower_base((block,9)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(1, unordered_tower((block,7)), false, true).
final_goal(1, unordered_tower((block,7)), true, false).
final_goal(1, unordered_tower((block,8)), false, true).
final_goal(1, unordered_tower((block,8)), true, false).
final_goal(1, unordered_tower((block,9)), false, true).
final_goal(1, unordered_tower((block,9)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, complete(yellow), false, false).
final_goal(2, complete(yellow), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,1),(block,7)), false, true).
final_goal(2, in_tower((block,1),(block,7)), true, false).
final_goal(2, in_tower((block,1),(block,8)), false, true).
final_goal(2, in_tower((block,1),(block,8)), true, false).
final_goal(2, in_tower((block,1),(block,9)), false, true).
final_goal(2, in_tower((block,1),(block,9)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,7)), false, true).
final_goal(2, in_tower((block,2),(block,7)), true, false).
final_goal(2, in_tower((block,2),(block,8)), false, true).
final_goal(2, in_tower((block,2),(block,8)), true, false).
final_goal(2, in_tower((block,2),(block,9)), false, true).
final_goal(2, in_tower((block,2),(block,9)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,7)), false, true).
final_goal(2, in_tower((block,3),(block,7)), true, false).
final_goal(2, in_tower((block,3),(block,8)), false, true).
final_goal(2, in_tower((block,3),(block,8)), true, false).
final_goal(2, in_tower((block,3),(block,9)), false, true).
final_goal(2, in_tower((block,3),(block,9)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,7)), false, true).
final_goal(2, in_tower((block,4),(block,7)), true, false).
final_goal(2, in_tower((block,4),(block,8)), false, true).
final_goal(2, in_tower((block,4),(block,8)), true, false).
final_goal(2, in_tower((block,4),(block,9)), false, true).
final_goal(2, in_tower((block,4),(block,9)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,7)), false, true).
final_goal(2, in_tower((block,5),(block,7)), true, false).
final_goal(2, in_tower((block,5),(block,8)), false, true).
final_goal(2, in_tower((block,5),(block,8)), true, false).
final_goal(2, in_tower((block,5),(block,9)), false, true).
final_goal(2, in_tower((block,5),(block,9)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, in_tower((block,6),(block,7)), false, true).
final_goal(2, in_tower((block,6),(block,7)), true, false).
final_goal(2, in_tower((block,6),(block,8)), false, true).
final_goal(2, in_tower((block,6),(block,8)), true, false).
final_goal(2, in_tower((block,6),(block,9)), false, true).
final_goal(2, in_tower((block,6),(block,9)), true, false).
final_goal(2, in_tower((block,7),(block,1)), false, true).
final_goal(2, in_tower((block,7),(block,1)), true, false).
final_goal(2, in_tower((block,7),(block,2)), false, true).
final_goal(2, in_tower((block,7),(block,2)), true, false).
final_goal(2, in_tower((block,7),(block,3)), false, true).
final_goal(2, in_tower((block,7),(block,3)), true, false).
final_goal(2, in_tower((block,7),(block,4)), false, true).
final_goal(2, in_tower((block,7),(block,4)), true, false).
final_goal(2, in_tower((block,7),(block,5)), false, true).
final_goal(2, in_tower((block,7),(block,5)), true, false).
final_goal(2, in_tower((block,7),(block,6)), false, true).
final_goal(2, in_tower((block,7),(block,6)), true, false).
final_goal(2, in_tower((block,7),(block,7)), false, true).
final_goal(2, in_tower((block,7),(block,7)), true, false).
final_goal(2, in_tower((block,7),(block,8)), false, true).
final_goal(2, in_tower((block,7),(block,8)), true, false).
final_goal(2, in_tower((block,7),(block,9)), false, true).
final_goal(2, in_tower((block,7),(block,9)), true, false).
final_goal(2, in_tower((block,8),(block,1)), false, true).
final_goal(2, in_tower((block,8),(block,1)), true, false).
final_goal(2, in_tower((block,8),(block,2)), false, true).
final_goal(2, in_tower((block,8),(block,2)), true, false).
final_goal(2, in_tower((block,8),(block,3)), false, true).
final_goal(2, in_tower((block,8),(block,3)), true, false).
final_goal(2, in_tower((block,8),(block,4)), false, true).
final_goal(2, in_tower((block,8),(block,4)), true, false).
final_goal(2, in_tower((block,8),(block,5)), false, true).
final_goal(2, in_tower((block,8),(block,5)), true, false).
final_goal(2, in_tower((block,8),(block,6)), false, true).
final_goal(2, in_tower((block,8),(block,6)), true, false).
final_goal(2, in_tower((block,8),(block,7)), false, true).
final_goal(2, in_tower((block,8),(block,7)), true, false).
final_goal(2, in_tower((block,8),(block,8)), false, true).
final_goal(2, in_tower((block,8),(block,8)), true, false).
final_goal(2, in_tower((block,8),(block,9)), false, true).
final_goal(2, in_tower((block,8),(block,9)), true, false).
final_goal(2, in_tower((block,9),(block,1)), false, true).
final_goal(2, in_tower((block,9),(block,1)), true, false).
final_goal(2, in_tower((block,9),(block,2)), false, true).
final_goal(2, in_tower((block,9),(block,2)), true, false).
final_goal(2, in_tower((block,9),(block,3)), false, true).
final_goal(2, in_tower((block,9),(block,3)), true, false).
final_goal(2, in_tower((block,9),(block,4)), false, true).
final_goal(2, in_tower((block,9),(block,4)), true, false).
final_goal(2, in_tower((block,9),(block,5)), false, true).
final_goal(2, in_tower((block,9),(block,5)), true, false).
final_goal(2, in_tower((block,9),(block,6)), false, true).
final_goal(2, in_tower((block,9),(block,6)), true, false).
final_goal(2, in_tower((block,9),(block,7)), false, false).
final_goal(2, in_tower((block,9),(block,7)), true, true).
final_goal(2, in_tower((block,9),(block,8)), false, false).
final_goal(2, in_tower((block,9),(block,8)), true, true).
final_goal(2, in_tower((block,9),(block,9)), false, false).
final_goal(2, in_tower((block,9),(block,9)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), (block,7), false).
final_goal(2, on((block,1)), (block,8), false).
final_goal(2, on((block,1)), (block,9), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), (block,7), false).
final_goal(2, on((block,2)), (block,8), false).
final_goal(2, on((block,2)), (block,9), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), (block,7), false).
final_goal(2, on((block,3)), (block,8), false).
final_goal(2, on((block,3)), (block,9), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), (block,7), false).
final_goal(2, on((block,4)), (block,8), false).
final_goal(2, on((block,4)), (block,9), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), (block,7), false).
final_goal(2, on((block,5)), (block,8), false).
final_goal(2, on((block,5)), (block,9), false).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), (block,7), false).
final_goal(2, on((block,6)), (block,8), false).
final_goal(2, on((block,6)), (block,9), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, on((block,7)), (block,1), false).
final_goal(2, on((block,7)), (block,2), false).
final_goal(2, on((block,7)), (block,3), false).
final_goal(2, on((block,7)), (block,4), false).
final_goal(2, on((block,7)), (block,5), false).
final_goal(2, on((block,7)), (block,6), false).
final_goal(2, on((block,7)), (block,8), true).
final_goal(2, on((block,7)), (block,9), false).
final_goal(2, on((block,7)), nothing, false).
final_goal(2, on((block,7)), puzzle_room_table, false).
final_goal(2, on((block,8)), (block,1), false).
final_goal(2, on((block,8)), (block,2), false).
final_goal(2, on((block,8)), (block,3), false).
final_goal(2, on((block,8)), (block,4), false).
final_goal(2, on((block,8)), (block,5), false).
final_goal(2, on((block,8)), (block,6), false).
final_goal(2, on((block,8)), (block,7), false).
final_goal(2, on((block,8)), (block,9), true).
final_goal(2, on((block,8)), nothing, false).
final_goal(2, on((block,8)), puzzle_room_table, false).
final_goal(2, on((block,9)), (block,1), false).
final_goal(2, on((block,9)), (block,2), false).
final_goal(2, on((block,9)), (block,3), false).
final_goal(2, on((block,9)), (block,4), false).
final_goal(2, on((block,9)), (block,5), false).
final_goal(2, on((block,9)), (block,6), false).
final_goal(2, on((block,9)), (block,7), false).
final_goal(2, on((block,9)), (block,8), false).
final_goal(2, on((block,9)), nothing, false).
final_goal(2, on((block,9)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, tower_base((block,7)), false, true).
final_goal(2, tower_base((block,7)), true, false).
final_goal(2, tower_base((block,8)), false, true).
final_goal(2, tower_base((block,8)), true, false).
final_goal(2, tower_base((block,9)), false, false).
final_goal(2, tower_base((block,9)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(2, unordered_tower((block,7)), false, true).
final_goal(2, unordered_tower((block,7)), true, false).
final_goal(2, unordered_tower((block,8)), false, true).
final_goal(2, unordered_tower((block,8)), true, false).
final_goal(2, unordered_tower((block,9)), false, true).
final_goal(2, unordered_tower((block,9)), true, false).

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 44})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 45})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,7))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,7)', 'I': 46})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,7),(block,8))', 'F': 'on((block,7))', 'V': '(block,8)', 'I': 47})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 48})

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 7 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 42).
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 43).
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 44).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 45).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 46).
sub_goal(2, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 47).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 48).

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000016E4A2C2820>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=None, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'false', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 42, 48, 'sequential', 'true'), range_=None)]

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1249 rules

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.007114500000000135s

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.040962s.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010625s with result Satisfiable.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000016E5AB26590>

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_large_2.lp'], Anon #1), Main #1, 8, Verbosity.Simple, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 48)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000016E4760D540>)
	('first_sgoals', 42)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000016E5AB26590>)

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(42, 69)', truth=True, inc_range=None)

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, false, false). %* None *%
#program optimisation_module(#inc, 68, false, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 42, 48, sequential, true). %* None *%

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     69
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.273594s.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 68: original = External(symbol='current_last_sgoals(42, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(42,69).

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 69: original = External(symbol='current_last_sgoals(42, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(42,69).

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037133s with result Satisfiable.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3107264000000214, Incremental time limit = None
Running cumulative time = 0.3107264000000214, Cumulative time limit = 3600
Used memory = (RSS = 308.574219Mb, VMS = 316.472656Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.273594s, Solving = 0.037133s, Total = 0.310726s, Memory = (RSS = 308.574219Mb, VMS = 316.472656Mb)), Calls = 1
Final Model :: Total atoms = 7236, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=67, end_step=69, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.2735936000000265, solving_time=0.03713279999999486, total_time=0.3107264000000214, memory=Memory(rss=308.57421875, vms=316.47265625), step_range=range(68, 70), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2735936000000265, solving_time=0.03713279999999486, total_time=0.3107264000000214, memory=Memory(rss=308.57421875, vms=316.47265625), step_range=range(68, 70), clingo_stats={'problem': {'lp': {'atoms': 21032.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 73713.0, 'bodies_tr': 73713.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1155.0, 'rules': 145701.0, 'rules_normal': 144834.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 145694.0, 'rules_tr_normal': 144834.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 35571.0, 'eqs_atom': 11999.0, 'eqs_body': 2983.0, 'eqs_other': 20589.0}, 'lpStep': {'atoms': 11241.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 69651.0, 'bodies_tr': 69651.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 405.0, 'count_bodies_tr': 405.0, 'sccs': 50.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1155.0, 'rules': 134515.0, 'rules_normal': 133648.0, 'rules_choice': 848.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 134508.0, 'rules_tr_normal': 133648.0, 'rules_tr_choice': 848.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 15513.0, 'eqs_atom': 4483.0, 'eqs_body': 676.0, 'eqs_other': 10354.0}, 'generator': {'vars': 5054.0, 'vars_eliminated': 0.0, 'vars_frozen': 2951.0, 'constraints': 36.0, 'constraints_binary': 2741.0, 'constraints_ternary': 413.0, 'acyc_edges': 0.0, 'complexity': 3216.0}}, 'solving': {'solvers': {'choices': 97.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 31.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 8.0, 'lemmas': 25.0, 'lits_learnt': 25.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 8.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 152.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 8.0, 'lemmas_other': 8.0, 'lits_conflict': 9.0, 'lits_loop': 8.0, 'lits_other': 8.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3101959228515625, 'cpu': 0.296875, 'solve': 0.009002685546875, 'unsat': 0.0, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3704872131347656, 'cpu': 0.34375, 'solve': 0.014375686645507812, 'unsat': 0.0, 'sat': 0.0039615631103515625}, 'models': {'enumerated': 2.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 97.0, 'conflicts': 9.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 32.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 9.0, 'integrated': 8.0, 'lemmas': 25.0, 'lits_learnt': 25.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 8.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 160.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 8.0, 'lemmas_other': 8.0, 'lits_conflict': 9.0, 'lits_loop': 8.0, 'lits_other': 8.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 0.0, 'levels': 9.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{42: 69}

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 43 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(43, 69)', truth=True, inc_range=None)

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 43, step = 69]:
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 43)

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 69:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.187303s.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 70: original = External(symbol='current_last_sgoals(43, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(43,69).

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022414s with result Satisfiable.

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20971689999998944, Incremental time limit = None
Running cumulative time = 0.5204433000000108, Cumulative time limit = 3600
Used memory = (RSS = 312.738281Mb, VMS = 320.191406Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.460897s, Solving = 0.059546s, Total = 0.520443s, Memory = (RSS = 312.738281Mb, VMS = 320.191406Mb)), Calls = 2
Final Model :: Total atoms = 7965, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=69, end_step=70, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4608969000000229, solving_time=0.0595463999999879, total_time=0.5204433000000108, memory=Memory(rss=312.73828125, vms=320.19140625), step_range=range(68, 71), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1873032999999964, solving_time=0.02241359999999304, total_time=0.20971689999998944, memory=Memory(rss=312.73828125, vms=320.19140625), step_range=range(70, 71), clingo_stats={'problem': {'lp': {'atoms': 24094.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 135092.0, 'bodies_tr': 135092.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 735.0, 'count_bodies_tr': 735.0, 'sccs': 62.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1251.0, 'rules': 263411.0, 'rules_normal': 262192.0, 'rules_choice': 1181.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 263388.0, 'rules_tr_normal': 262192.0, 'rules_tr_choice': 1181.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 13.0, 'eqs': 40800.0, 'eqs_atom': 12953.0, 'eqs_body': 3673.0, 'eqs_other': 24174.0}, 'lpStep': {'atoms': 3062.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61379.0, 'bodies_tr': 61379.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 12.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 96.0, 'rules': 117710.0, 'rules_normal': 117358.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 117694.0, 'rules_tr_normal': 117358.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 5229.0, 'eqs_atom': 954.0, 'eqs_body': 690.0, 'eqs_other': 3585.0}, 'generator': {'vars': 5597.0, 'vars_eliminated': 0.0, 'vars_frozen': 3350.0, 'constraints': 92.0, 'constraints_binary': 5382.0, 'constraints_ternary': 432.0, 'acyc_edges': 0.0, 'complexity': 5946.0}}, 'solving': {'solvers': {'choices': 126.0, 'conflicts': 31.0, 'conflicts_analyzed': 31.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 46.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 32.0, 'distributed_sum_lbd': 33.0, 'integrated': 7.0, 'lemmas': 32.0, 'lits_learnt': 33.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 224.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 31.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 31.0, 'jumps_bounded': 0.0, 'levels': 31.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.21046829223632812, 'cpu': 0.234375, 'solve': 0.010004043579101562, 'unsat': 0.0, 'sat': 0.0019969940185546875}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5809555053710938, 'cpu': 0.578125, 'solve': 0.024379730224609375, 'unsat': 0.0, 'sat': 0.00595855712890625}, 'models': {'enumerated': 3.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 223.0, 'conflicts': 40.0, 'conflicts_analyzed': 40.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 78.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 41.0, 'distributed_sum_lbd': 42.0, 'integrated': 15.0, 'lemmas': 57.0, 'lits_learnt': 58.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 8.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 384.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 40.0, 'lemmas_loop': 9.0, 'lemmas_other': 8.0, 'lits_conflict': 40.0, 'lits_loop': 10.0, 'lits_other': 8.0, 'jumps': {'jumps': 40.0, 'jumps_bounded': 0.0, 'levels': 40.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{42: 69, 43: 70}

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 44 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(44, 70)', truth=True, inc_range=None)

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 44, step = 70]:
sub_goal(2, talos, release(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), nothing, 44)

[12-11-2021_15-24-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 70:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199980s.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 71: original = External(symbol='current_last_sgoals(44, 70)', truth=True, inc_range=None), conversion = current_last_sgoals(44,70).

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026913s with result Satisfiable.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22689300000001822, Incremental time limit = None
Running cumulative time = 0.747336300000029, Cumulative time limit = 3600
Used memory = (RSS = 314.453125Mb, VMS = 321.742188Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.660877s, Solving = 0.086460s, Total = 0.747336s, Memory = (RSS = 314.453125Mb, VMS = 321.742188Mb)), Calls = 3
Final Model :: Total atoms = 8696, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=70, end_step=71, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.6608765999999946, solving_time=0.08645970000003445, total_time=0.747336300000029, memory=Memory(rss=314.453125, vms=321.7421875), step_range=range(68, 72), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19997969999997167, solving_time=0.026913300000046547, total_time=0.22689300000001822, memory=Memory(rss=314.453125, vms=321.7421875), step_range=range(71, 72), clingo_stats={'problem': {'lp': {'atoms': 27460.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 196682.0, 'bodies_tr': 196682.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 74.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1348.0, 'rules': 381354.0, 'rules_normal': 379783.0, 'rules_choice': 1514.0, 'rules_minimize': 3.0, 'rules_acyc': 0.0, 'rules_heuristic': 54.0, 'rules_tr': 381315.0, 'rules_tr_normal': 379783.0, 'rules_tr_choice': 1514.0, 'rules_tr_minimize': 3.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 15.0, 'eqs': 46518.0, 'eqs_atom': 13919.0, 'eqs_body': 4448.0, 'eqs_other': 28151.0}, 'lpStep': {'atoms': 3366.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 61590.0, 'bodies_tr': 61590.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 12.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 97.0, 'rules': 117943.0, 'rules_normal': 117591.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 117927.0, 'rules_tr_normal': 117591.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 2.0, 'eqs': 5718.0, 'eqs_atom': 966.0, 'eqs_body': 775.0, 'eqs_other': 3977.0}, 'generator': {'vars': 6241.0, 'vars_eliminated': 0.0, 'vars_frozen': 3801.0, 'constraints': 149.0, 'constraints_binary': 8572.0, 'constraints_ternary': 792.0, 'acyc_edges': 0.0, 'complexity': 9579.0}}, 'solving': {'solvers': {'choices': 168.0, 'conflicts': 23.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 61.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 27.0, 'distributed_sum_lbd': 31.0, 'integrated': 28.0, 'lemmas': 31.0, 'lits_learnt': 39.0, 'lemmas_binary': 8.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.03125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 296.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 4.0, 'lemmas_other': 4.0, 'lits_conflict': 23.0, 'lits_loop': 8.0, 'lits_other': 8.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 0.0, 'levels': 23.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.22838973999023438, 'cpu': 0.234375, 'solve': 0.010969161987304688, 'unsat': 0.0, 'sat': 0.0019931793212890625}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8093452453613281, 'cpu': 0.8125, 'solve': 0.03534889221191406, 'unsat': 0.0, 'sat': 0.007951736450195312}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 391.0, 'conflicts': 63.0, 'conflicts_analyzed': 63.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 139.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 68.0, 'distributed_sum_lbd': 73.0, 'integrated': 43.0, 'lemmas': 88.0, 'lits_learnt': 97.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 8.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 680.0, 'guiding_paths': 32.0, 'splits': 0.0, 'lemmas_conflict': 63.0, 'lemmas_loop': 13.0, 'lemmas_other': 12.0, 'lits_conflict': 63.0, 'lits_loop': 18.0, 'lits_other': 16.0, 'jumps': {'jumps': 63.0, 'jumps_bounded': 0.0, 'levels': 63.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{42: 69, 43: 70, 44: 71}

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 45 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(45, 71)', truth=True, inc_range=None)

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 45, step = 71]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 45)

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 71:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(68)]), ('plan_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.212082s.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 72: original = External(symbol='current_last_sgoals(45, 71)', truth=True, inc_range=None), conversion = current_last_sgoals(45,71).

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034912s with result Unsatisfiable.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.24699430000003986, Incremental time limit = None
Running cumulative time = 0.9943306000000689, Cumulative time limit = 3600
Used memory = (RSS = 321.484375Mb, VMS = 329.906250Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=71, end_step=72, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8729587999999922, solving_time=0.12137180000007675, total_time=0.9943306000000689, memory=Memory(rss=321.484375, vms=329.90625), step_range=range(68, 73), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21208219999999756, solving_time=0.0349121000000423, total_time=0.24699430000003986, memory=Memory(rss=321.484375, vms=329.90625), step_range=range(72, 73), clingo_stats={'problem': {'lp': {'atoms': 30871.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 258849.0, 'bodies_tr': 258849.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1395.0, 'count_bodies_tr': 1395.0, 'sccs': 103.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2038.0, 'rules': 500143.0, 'rules_normal': 498220.0, 'rules_choice': 1847.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 500098.0, 'rules_tr_normal': 498220.0, 'rules_tr_choice': 1847.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 27.0, 'eqs': 57177.0, 'eqs_atom': 15133.0, 'eqs_body': 4923.0, 'eqs_other': 37121.0}, 'lpStep': {'atoms': 3411.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 62167.0, 'bodies_tr': 62167.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 29.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 690.0, 'rules': 118789.0, 'rules_normal': 118437.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 118783.0, 'rules_tr_normal': 118437.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10659.0, 'eqs_atom': 1214.0, 'eqs_body': 475.0, 'eqs_other': 8970.0}, 'generator': {'vars': 8674.0, 'vars_eliminated': 0.0, 'vars_frozen': 5291.0, 'constraints': 760.0, 'constraints_binary': 33851.0, 'constraints_ternary': 3012.0, 'acyc_edges': 0.0, 'complexity': 37775.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 18.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 230.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 18.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.2483348846435547, 'cpu': 0.234375, 'solve': 0.0029926300048828125, 'unsat': 0.0029926300048828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0576801300048828, 'cpu': 1.046875, 'solve': 0.038341522216796875, 'unsat': 0.0029926300048828125, 'sat': 0.007951736450195312}, 'models': {'enumerated': 4.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 391.0, 'conflicts': 68.0, 'conflicts_analyzed': 63.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 139.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 68.0, 'distributed_sum_lbd': 73.0, 'integrated': 43.0, 'lemmas': 90.0, 'lits_learnt': 115.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 8.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 910.0, 'guiding_paths': 37.0, 'splits': 0.0, 'lemmas_conflict': 63.0, 'lemmas_loop': 15.0, 'lemmas_other': 12.0, 'lits_conflict': 63.0, 'lits_loop': 36.0, 'lits_other': 16.0, 'jumps': {'jumps': 63.0, 'jumps_bounded': 0.0, 'levels': 63.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 72:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(68)]), ('plan_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.220739s.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061757s with result Satisfiable.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2824957000000268, Incremental time limit = None
Running cumulative time = 1.2768263000000957, Cumulative time limit = 3600
Used memory = (RSS = 331.750000Mb, VMS = 341.839844Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.093698s, Solving = 0.183129s, Total = 1.276826s, Memory = (RSS = 331.750000Mb, VMS = 341.839844Mb)), Calls = 5
Final Model :: Total atoms = 10160, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=72, end_step=73, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0936975000000189, solving_time=0.1831288000000768, total_time=1.2768263000000957, memory=Memory(rss=331.75, vms=341.83984375), step_range=range(68, 74), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2207387000000267, solving_time=0.06175700000000006, total_time=0.2824957000000268, memory=Memory(rss=331.75, vms=341.83984375), step_range=range(73, 74), clingo_stats={'problem': {'lp': {'atoms': 36823.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 324004.0, 'bodies_tr': 324004.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1725.0, 'count_bodies_tr': 1725.0, 'sccs': 134.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3066.0, 'rules': 624222.0, 'rules_normal': 621947.0, 'rules_choice': 2180.0, 'rules_minimize': 5.0, 'rules_acyc': 0.0, 'rules_heuristic': 90.0, 'rules_tr': 624173.0, 'rules_tr_normal': 621947.0, 'rules_tr_choice': 2180.0, 'rules_tr_minimize': 5.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 41.0, 'eqs': 75412.0, 'eqs_atom': 18659.0, 'eqs_body': 5273.0, 'eqs_other': 51480.0}, 'lpStep': {'atoms': 5952.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 65155.0, 'bodies_tr': 65155.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1028.0, 'rules': 124079.0, 'rules_normal': 123727.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 124075.0, 'rules_tr_normal': 123727.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 14.0, 'eqs': 18235.0, 'eqs_atom': 3526.0, 'eqs_body': 350.0, 'eqs_other': 14359.0}, 'generator': {'vars': 12112.0, 'vars_eliminated': 0.0, 'vars_frozen': 7348.0, 'constraints': 1656.0, 'constraints_binary': 76038.0, 'constraints_ternary': 7501.0, 'acyc_edges': 0.0, 'complexity': 85441.0}}, 'solving': {'solvers': {'choices': 364.0, 'conflicts': 93.0, 'conflicts_analyzed': 93.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 106.0, 'models': 1.0, 'models_level': 92.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 100.0, 'distributed_sum_lbd': 243.0, 'integrated': 531.0, 'lemmas': 792.0, 'lits_learnt': 6206.0, 'lemmas_binary': 68.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 27.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 385.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 93.0, 'lemmas_loop': 168.0, 'lemmas_other': 531.0, 'lits_conflict': 751.0, 'lits_loop': 1391.0, 'lits_other': 4064.0, 'jumps': {'jumps': 93.0, 'jumps_bounded': 1.0, 'levels': 94.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2842388153076172, 'cpu': 0.28125, 'solve': 0.016931533813476562, 'unsat': 0.0, 'sat': 0.0049648284912109375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3419189453125, 'cpu': 1.328125, 'solve': 0.05527305603027344, 'unsat': 0.0029926300048828125, 'sat': 0.01291656494140625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 755.0, 'conflicts': 161.0, 'conflicts_analyzed': 156.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 106.0, 'models': 5.0, 'models_level': 231.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 168.0, 'distributed_sum_lbd': 316.0, 'integrated': 574.0, 'lemmas': 882.0, 'lits_learnt': 6321.0, 'lemmas_binary': 77.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.09375, 'integrated_imps': 35.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 1295.0, 'guiding_paths': 44.0, 'splits': 0.0, 'lemmas_conflict': 156.0, 'lemmas_loop': 183.0, 'lemmas_other': 543.0, 'lits_conflict': 814.0, 'lits_loop': 1427.0, 'lits_other': 4080.0, 'jumps': {'jumps': 156.0, 'jumps_bounded': 1.0, 'levels': 157.0, 'levels_bounded': 1.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{42: 69, 43: 70, 44: 71, 45: 73}

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 46 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(46, 73)', truth=True, inc_range=None)

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 46, step = 73]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,7)), grasping(manipulator_arm_1), (block,7), 46)

[12-11-2021_15-24-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 73:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('state_module', [Number(74), Number(68)]), ('plan_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.232571s.

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 74: original = External(symbol='current_last_sgoals(46, 73)', truth=True, inc_range=None), conversion = current_last_sgoals(46,73).

[12-11-2021_15-24-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.057793s with result Unsatisfiable.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2903648000000203, Incremental time limit = None
Running cumulative time = 1.567191100000116, Cumulative time limit = 3600
Used memory = (RSS = 337.046875Mb, VMS = 344.535156Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=73, end_step=74, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.3262689000000023, solving_time=0.24092220000011366, total_time=1.567191100000116, memory=Memory(rss=337.046875, vms=344.53515625), step_range=range(68, 75), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23257139999998344, solving_time=0.057793400000036854, total_time=0.2903648000000203, memory=Memory(rss=337.046875, vms=344.53515625), step_range=range(74, 75), clingo_stats={'problem': {'lp': {'atoms': 43013.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 390251.0, 'bodies_tr': 390251.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2055.0, 'count_bodies_tr': 2055.0, 'sccs': 165.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4333.0, 'rules': 749550.0, 'rules_normal': 746923.0, 'rules_choice': 2513.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 749499.0, 'rules_tr_normal': 746923.0, 'rules_tr_choice': 2513.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 57.0, 'eqs': 95551.0, 'eqs_atom': 22249.0, 'eqs_body': 5532.0, 'eqs_other': 67770.0}, 'lpStep': {'atoms': 6190.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 66247.0, 'bodies_tr': 66247.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1267.0, 'rules': 125328.0, 'rules_normal': 124976.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 125326.0, 'rules_tr_normal': 124976.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 16.0, 'eqs': 20139.0, 'eqs_atom': 3590.0, 'eqs_body': 259.0, 'eqs_other': 16290.0}, 'generator': {'vars': 16322.0, 'vars_eliminated': 0.0, 'vars_frozen': 9851.0, 'constraints': 2762.0, 'constraints_binary': 135410.0, 'constraints_ternary': 13216.0, 'acyc_edges': 0.0, 'complexity': 151736.0}}, 'solving': {'solvers': {'choices': 48.0, 'conflicts': 37.0, 'conflicts_analyzed': 30.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 48.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 30.0, 'distributed_sum_lbd': 68.0, 'integrated': 114.0, 'lemmas': 366.0, 'lits_learnt': 4247.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 60.0, 'integrated_jumps': 13.0, 'guiding_paths_lits': 448.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 30.0, 'lemmas_loop': 264.0, 'lemmas_other': 72.0, 'lits_conflict': 331.0, 'lits_loop': 3213.0, 'lits_other': 703.0, 'jumps': {'jumps': 30.0, 'jumps_bounded': 18.0, 'levels': 53.0, 'levels_bounded': 18.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2922515869140625, 'cpu': 0.390625, 'solve': 0.00698089599609375, 'unsat': 0.00698089599609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6341705322265625, 'cpu': 1.71875, 'solve': 0.06225395202636719, 'unsat': 0.009973526000976562, 'sat': 0.01291656494140625}, 'models': {'enumerated': 5.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 803.0, 'conflicts': 198.0, 'conflicts_analyzed': 186.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 154.0, 'models': 5.0, 'models_level': 231.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 198.0, 'distributed_sum_lbd': 384.0, 'integrated': 688.0, 'lemmas': 1248.0, 'lits_learnt': 10568.0, 'lemmas_binary': 91.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.203125, 'integrated_imps': 95.0, 'integrated_jumps': 20.0, 'guiding_paths_lits': 1743.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 186.0, 'lemmas_loop': 447.0, 'lemmas_other': 615.0, 'lits_conflict': 1145.0, 'lits_loop': 4640.0, 'lits_other': 4783.0, 'jumps': {'jumps': 186.0, 'jumps_bounded': 19.0, 'levels': 210.0, 'levels_bounded': 19.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 74:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     74 : Current =     75
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('state_module', [Number(75), Number(68)]), ('plan_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241028s.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078655s with result Satisfiable.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3196829000000321, Incremental time limit = None
Running cumulative time = 1.886874000000148, Cumulative time limit = 3600
Used memory = (RSS = 355.113281Mb, VMS = 364.449219Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.567297s, Solving = 0.319577s, Total = 1.886874s, Memory = (RSS = 355.113281Mb, VMS = 364.449219Mb)), Calls = 7
Final Model :: Total atoms = 11623, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=74, end_step=75, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.5672972000000414, solving_time=0.3195768000001067, total_time=1.886874000000148, memory=Memory(rss=355.11328125, vms=364.44921875), step_range=range(68, 76), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24102830000003905, solving_time=0.07865459999999302, total_time=0.3196829000000321, memory=Memory(rss=355.11328125, vms=364.44921875), step_range=range(75, 76), clingo_stats={'problem': {'lp': {'atoms': 49408.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 457406.0, 'bodies_tr': 457406.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2385.0, 'count_bodies_tr': 2385.0, 'sccs': 196.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5863.0, 'rules': 875943.0, 'rules_normal': 872964.0, 'rules_choice': 2846.0, 'rules_minimize': 7.0, 'rules_acyc': 0.0, 'rules_heuristic': 126.0, 'rules_tr': 875892.0, 'rules_tr_normal': 872964.0, 'rules_tr_choice': 2846.0, 'rules_tr_minimize': 7.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 75.0, 'eqs': 108836.0, 'eqs_atom': 25930.0, 'eqs_body': 5635.0, 'eqs_other': 77271.0}, 'lpStep': {'atoms': 6395.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67155.0, 'bodies_tr': 67155.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 126393.0, 'rules_normal': 126041.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 126393.0, 'rules_tr_normal': 126041.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13285.0, 'eqs_atom': 3681.0, 'eqs_body': 103.0, 'eqs_other': 9501.0}, 'generator': {'vars': 21197.0, 'vars_eliminated': 0.0, 'vars_frozen': 12750.0, 'constraints': 4086.0, 'constraints_binary': 205558.0, 'constraints_ternary': 20198.0, 'acyc_edges': 0.0, 'complexity': 230300.0}}, 'solving': {'solvers': {'choices': 632.0, 'conflicts': 223.0, 'conflicts_analyzed': 223.0, 'restarts': 0.0, 'restarts_last': 54.0, 'extra': {'domain_choices': 321.0, 'models': 1.0, 'models_level': 122.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 206.0, 'distributed_sum_lbd': 613.0, 'integrated': 1088.0, 'lemmas': 1817.0, 'lits_learnt': 26957.0, 'lemmas_binary': 122.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.25, 'integrated_imps': 271.0, 'integrated_jumps': 130.0, 'guiding_paths_lits': 511.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 206.0, 'lemmas_loop': 523.0, 'lemmas_other': 1088.0, 'lits_conflict': 2993.0, 'lits_loop': 8250.0, 'lits_other': 15714.0, 'jumps': {'jumps': 223.0, 'jumps_bounded': 2.0, 'levels': 239.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.32164955139160156, 'cpu': 0.546875, 'solve': 0.03391075134277344, 'unsat': 0.0, 'sat': 0.014963150024414062}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.955820083618164, 'cpu': 2.265625, 'solve': 0.09616470336914062, 'unsat': 0.009973526000976562, 'sat': 0.027879714965820312}, 'models': {'enumerated': 6.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1435.0, 'conflicts': 421.0, 'conflicts_analyzed': 409.0, 'restarts': 0.0, 'restarts_last': 54.0, 'extra': {'domain_choices': 475.0, 'models': 6.0, 'models_level': 353.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 404.0, 'distributed_sum_lbd': 997.0, 'integrated': 1776.0, 'lemmas': 3065.0, 'lits_learnt': 37525.0, 'lemmas_binary': 213.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.453125, 'integrated_imps': 366.0, 'integrated_jumps': 150.0, 'guiding_paths_lits': 2254.0, 'guiding_paths': 58.0, 'splits': 0.0, 'lemmas_conflict': 392.0, 'lemmas_loop': 970.0, 'lemmas_other': 1703.0, 'lits_conflict': 4138.0, 'lits_loop': 12890.0, 'lits_other': 20497.0, 'jumps': {'jumps': 409.0, 'jumps_bounded': 21.0, 'levels': 449.0, 'levels_bounded': 21.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{42: 69, 43: 70, 44: 71, 45: 73, 46: 75}

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 47 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(47, 75)', truth=True, inc_range=None)

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 47, step = 75]:
sub_goal(2, talos, put(manipulator_arm_1,(block,7),(block,8)), on((block,7)), (block,8), 47)

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 75:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     75 : Current =     76
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(76)]), ('state_module', [Number(76), Number(68)]), ('plan_module', [Number(76), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.246099s.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 76: original = External(symbol='current_last_sgoals(47, 75)', truth=True, inc_range=None), conversion = current_last_sgoals(47,75).

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065185s with result Satisfiable.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.31128359999996746, Incremental time limit = None
Running cumulative time = 2.1981576000001155, Cumulative time limit = 3600
Used memory = (RSS = 367.621094Mb, VMS = 381.414062Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.813396s, Solving = 0.384762s, Total = 2.198158s, Memory = (RSS = 367.621094Mb, VMS = 381.414062Mb)), Calls = 8
Final Model :: Total atoms = 12356, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=75, end_step=76, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.8133958000000234, solving_time=0.3847618000000921, total_time=2.1981576000001155, memory=Memory(rss=367.62109375, vms=381.4140625), step_range=range(68, 77), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24609859999998207, solving_time=0.0651849999999854, total_time=0.31128359999996746, memory=Memory(rss=367.62109375, vms=381.4140625), step_range=range(76, 77), clingo_stats={'problem': {'lp': {'atoms': 55985.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 524954.0, 'bodies_tr': 524954.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2715.0, 'count_bodies_tr': 2715.0, 'sccs': 227.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7393.0, 'rules': 1002885.0, 'rules_normal': 999554.0, 'rules_choice': 3179.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 1002834.0, 'rules_tr_normal': 999554.0, 'rules_tr_choice': 3179.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 93.0, 'eqs': 122596.0, 'eqs_atom': 29771.0, 'eqs_body': 5738.0, 'eqs_other': 87087.0}, 'lpStep': {'atoms': 6577.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67548.0, 'bodies_tr': 67548.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 126942.0, 'rules_normal': 126590.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 126942.0, 'rules_tr_normal': 126590.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13760.0, 'eqs_atom': 3841.0, 'eqs_body': 103.0, 'eqs_other': 9816.0}, 'generator': {'vars': 26118.0, 'vars_eliminated': 0.0, 'vars_frozen': 15658.0, 'constraints': 5425.0, 'constraints_binary': 275835.0, 'constraints_ternary': 27539.0, 'acyc_edges': 0.0, 'complexity': 309367.0}}, 'solving': {'solvers': {'choices': 441.0, 'conflicts': 26.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 41.0, 'models': 1.0, 'models_level': 137.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 67.0, 'integrated': 138.0, 'lemmas': 314.0, 'lits_learnt': 5134.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.15625, 'integrated_imps': 26.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 574.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 153.0, 'lemmas_other': 138.0, 'lits_conflict': 345.0, 'lits_loop': 2719.0, 'lits_other': 2070.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 2.0, 'levels': 30.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 8.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.31316184997558594, 'cpu': 0.4375, 'solve': 0.025899887084960938, 'unsat': 0.0, 'sat': 0.0109405517578125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.26898193359375, 'cpu': 2.703125, 'solve': 0.12206459045410156, 'unsat': 0.009973526000976562, 'sat': 0.03882026672363281}, 'models': {'enumerated': 7.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 1876.0, 'conflicts': 447.0, 'conflicts_analyzed': 435.0, 'restarts': 0.0, 'restarts_last': 54.0, 'extra': {'domain_choices': 516.0, 'models': 7.0, 'models_level': 490.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 427.0, 'distributed_sum_lbd': 1064.0, 'integrated': 1914.0, 'lemmas': 3379.0, 'lits_learnt': 42659.0, 'lemmas_binary': 220.0, 'lemmas_ternary': 13.0, 'cpu_time': 0.609375, 'integrated_imps': 392.0, 'integrated_jumps': 156.0, 'guiding_paths_lits': 2828.0, 'guiding_paths': 65.0, 'splits': 0.0, 'lemmas_conflict': 415.0, 'lemmas_loop': 1123.0, 'lemmas_other': 1841.0, 'lits_conflict': 4483.0, 'lits_loop': 15609.0, 'lits_other': 22567.0, 'jumps': {'jumps': 435.0, 'jumps_bounded': 23.0, 'levels': 479.0, 'levels_bounded': 23.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{42: 69, 43: 70, 44: 71, 45: 73, 46: 75, 47: 76}

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 48 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(48, 76)', truth=True, inc_range=None)

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 48, step = 76]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 48)

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(76)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, complete(yellow), false, false)
final_goal(1, complete(yellow), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,7)), puzzle_room_table_left, false)
final_goal(1, on((block,7)), puzzle_room_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_table_right, false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,8)), puzzle_room_table_left, false)
final_goal(1, on((block,8)), puzzle_room_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_table_right, false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, on((block,9)), puzzle_room_table_left, false)
final_goal(1, on((block,9)), puzzle_room_table_middle, true)
final_goal(1, on((block,9)), puzzle_room_table_right, false)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, tower_base((block,7)), false, true)
final_goal(1, tower_base((block,7)), true, false)
final_goal(1, tower_base((block,8)), false, true)
final_goal(1, tower_base((block,8)), true, false)
final_goal(1, tower_base((block,9)), false, false)
final_goal(1, tower_base((block,9)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), false, true)
final_goal(1, unordered_tower((block,6)), true, false)
final_goal(1, unordered_tower((block,7)), false, true)
final_goal(1, unordered_tower((block,7)), true, false)
final_goal(1, unordered_tower((block,8)), false, true)
final_goal(1, unordered_tower((block,8)), true, false)
final_goal(1, unordered_tower((block,9)), false, true)
final_goal(1, unordered_tower((block,9)), true, false)

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     76 : Current =     77
Incrementor step ends | Minimum  =   None : Maximum =   None

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(77)]), ('state_module', [Number(77), Number(68)]), ('plan_module', [Number(77), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(77), Number(68), Function('false', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(68), Number(42), Number(48), Function('sequential', [], True), Function('true', [], True)])]

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.255837s.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 77: original = External(symbol='current_last_sgoals(48, 76)', truth=True, inc_range=None), conversion = current_last_sgoals(48,76).

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 77: original = External(symbol='seq_achieve_fgoals(76)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(76).

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064617s with result Satisfiable.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.32045370000003004, Incremental time limit = None
Running cumulative time = 2.5186113000001455, Cumulative time limit = 3600
Used memory = (RSS = 374.726562Mb, VMS = 385.285156Mb), Total system virtual memory = 16324.18359375Mb

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.069233s, Solving = 0.449378s, Total = 2.518611s, Memory = (RSS = 374.726562Mb, VMS = 385.285156Mb)), Calls = 9
Final Model :: Total atoms = 13706, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=76, end_step=77, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.0692329000000313, solving_time=0.4493784000001142, total_time=2.5186113000001455, memory=Memory(rss=374.7265625, vms=385.28515625), step_range=range(68, 78), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2558371000000079, solving_time=0.06461660000002212, total_time=0.32045370000003004, memory=Memory(rss=374.7265625, vms=385.28515625), step_range=range(77, 78), clingo_stats={'problem': {'lp': {'atoms': 62569.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 592517.0, 'bodies_tr': 592517.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3045.0, 'count_bodies_tr': 3045.0, 'sccs': 258.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8923.0, 'rules': 1129863.0, 'rules_normal': 1126180.0, 'rules_choice': 3512.0, 'rules_minimize': 9.0, 'rules_acyc': 0.0, 'rules_heuristic': 162.0, 'rules_tr': 1129812.0, 'rules_tr_normal': 1126180.0, 'rules_tr_choice': 3512.0, 'rules_tr_minimize': 9.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 111.0, 'eqs': 136393.0, 'eqs_atom': 33619.0, 'eqs_body': 5841.0, 'eqs_other': 96933.0}, 'lpStep': {'atoms': 6584.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67563.0, 'bodies_tr': 67563.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 330.0, 'count_bodies_tr': 330.0, 'sccs': 31.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1530.0, 'rules': 126978.0, 'rules_normal': 126626.0, 'rules_choice': 333.0, 'rules_minimize': 1.0, 'rules_acyc': 0.0, 'rules_heuristic': 18.0, 'rules_tr': 126978.0, 'rules_tr_normal': 126626.0, 'rules_tr_choice': 333.0, 'rules_tr_minimize': 1.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 13797.0, 'eqs_atom': 3848.0, 'eqs_body': 103.0, 'eqs_other': 9846.0}, 'generator': {'vars': 31039.0, 'vars_eliminated': 0.0, 'vars_frozen': 18566.0, 'constraints': 6764.0, 'constraints_binary': 346141.0, 'constraints_ternary': 34880.0, 'acyc_edges': 0.0, 'complexity': 388463.0}}, 'solving': {'solvers': {'choices': 449.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 7.0, 'models': 1.0, 'models_level': 155.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 38.0, 'lits_learnt': 418.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.140625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 637.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 38.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 418.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 0.0, 'costs': [], 'lower': [], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3231353759765625, 'cpu': 0.421875, 'solve': 0.023935317993164062, 'unsat': 0.0, 'sat': 0.008977890014648438}, 'models': {'enumerated': 1.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5921173095703125, 'cpu': 3.125, 'solve': 0.14599990844726562, 'unsat': 0.009973526000976562, 'sat': 0.04779815673828125}, 'models': {'enumerated': 8.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 2325.0, 'conflicts': 447.0, 'conflicts_analyzed': 435.0, 'restarts': 0.0, 'restarts_last': 54.0, 'extra': {'domain_choices': 523.0, 'models': 8.0, 'models_level': 645.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 427.0, 'distributed_sum_lbd': 1064.0, 'integrated': 1914.0, 'lemmas': 3417.0, 'lits_learnt': 43077.0, 'lemmas_binary': 220.0, 'lemmas_ternary': 13.0, 'cpu_time': 0.75, 'integrated_imps': 392.0, 'integrated_jumps': 156.0, 'guiding_paths_lits': 3465.0, 'guiding_paths': 72.0, 'splits': 0.0, 'lemmas_conflict': 415.0, 'lemmas_loop': 1161.0, 'lemmas_other': 1841.0, 'lits_conflict': 4483.0, 'lits_loop': 16027.0, 'lits_other': 22567.0, 'jumps': {'jumps': 435.0, 'jumps_bounded': 23.0, 'levels': 479.0, 'levels_bounded': 23.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{42: 69, 43: 70, 44: 71, 45: 73, 46: 75, 47: 76, 48: 77}

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 49 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[12-11-2021_15-24-23] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 48 was achieved successfully.

[12-11-2021_15-24-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[12-11-2021_15-24-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.273594s, Solving = 0.037133s, Total = 0.310726s, Memory = (RSS = 308.574219Mb, VMS = 316.472656Mb)
2 : Statistics :: Grounding = 0.187303s, Solving = 0.022414s, Total = 0.209717s, Memory = (RSS = 312.738281Mb, VMS = 320.191406Mb)
3 : Statistics :: Grounding = 0.199980s, Solving = 0.026913s, Total = 0.226893s, Memory = (RSS = 314.453125Mb, VMS = 321.742188Mb)
4 : Statistics :: Grounding = 0.212082s, Solving = 0.034912s, Total = 0.246994s, Memory = (RSS = 321.484375Mb, VMS = 329.906250Mb)
5 : Statistics :: Grounding = 0.220739s, Solving = 0.061757s, Total = 0.282496s, Memory = (RSS = 331.750000Mb, VMS = 341.839844Mb)
6 : Statistics :: Grounding = 0.232571s, Solving = 0.057793s, Total = 0.290365s, Memory = (RSS = 337.046875Mb, VMS = 344.535156Mb)
7 : Statistics :: Grounding = 0.241028s, Solving = 0.078655s, Total = 0.319683s, Memory = (RSS = 355.113281Mb, VMS = 364.449219Mb)
8 : Statistics :: Grounding = 0.246099s, Solving = 0.065185s, Total = 0.311284s, Memory = (RSS = 367.621094Mb, VMS = 381.414062Mb)
9 : Statistics :: Grounding = 0.255837s, Solving = 0.064617s, Total = 0.320454s, Memory = (RSS = 374.726562Mb, VMS = 385.285156Mb)

[12-11-2021_15-24-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.518611s due to: External generator exit.

[12-11-2021_15-24-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[12-11-2021_15-24-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[12-11-2021_15-24-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[12-11-2021_15-24-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[12-11-2021_15-24-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 26, 44: 27, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 31, 53: 31, 54: 32, 55: 32, 56: 32, 57: 33, 58: 33, 59: 34, 60: 35, 61: 35, 62: 36, 63: 37, 64: 38, 65: 39, 66: 40, 67: 40, 68: 41}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 48, 29: 50, 30: 51, 31: 53, 32: 56, 33: 58, 34: 59, 35: 61, 36: 62, 37: 63, 38: 64, 39: 65, 40: 67, 41: 68}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13, 35: 14, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20, 43: 21, 44: 22, 45: 23, 46: 24, 47: 25, 48: 26}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46, 25: 47, 26: 48}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 11, 20: 11, 21: 12, 22: 12, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 16, 29: 17, 30: 18, 31: 18, 32: 18, 33: 19, 34: 19, 35: 20, 36: 21, 37: 22, 38: 22, 39: 23, 40: 24, 41: 25, 42: 26, 43: 26, 44: 27, 45: 27, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 30, 52: 31, 53: 31, 54: 32, 55: 32, 56: 32, 57: 33, 58: 33, 59: 34, 60: 35, 61: 35, 62: 36, 63: 37, 64: 38, 65: 39, 66: 40, 67: 40, 68: 41, 69: 42, 70: 43, 71: 43, 72: 43, 73: 44, 74: 45, 75: 46, 76: 47, 77: 48}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 24, 13: 25, 14: 26, 15: 27, 16: 28, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 38, 23: 39, 24: 40, 25: 41, 26: 43, 27: 46, 28: 48, 29: 50, 30: 51, 31: 53, 32: 56, 33: 58, 34: 59, 35: 61, 36: 62, 37: 63, 38: 64, 39: 65, 40: 67, 41: 68, 42: 69, 43: 72, 44: 73, 45: 74, 46: 75, 47: 76, 48: 77}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 8, 24: 9, 25: 10, 26: 10, 27: 10, 28: 11, 29: 11, 30: 12, 31: 12, 32: 12, 33: 13, 34: 13, 35: 14, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20, 43: 21, 44: 22, 45: 23, 46: 24, 47: 25, 48: 26}
Sub-goal achievement steps: {1: 10, 2: 14, 3: 15, 4: 18, 5: 20, 6: 21, 7: 22, 8: 23, 9: 24, 10: 27, 11: 29, 12: 32, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42, 21: 43, 22: 44, 23: 45, 24: 46, 25: 47, 26: 48}
Current sub-goals: {}
Sub-goal achievement steps: {}

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 48, Last requested goal index = 48 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.069233s, Solving = 0.449378s, Total = 2.518611s, Memory = (RSS = 374.726562Mb, VMS = 385.285156Mb)), Calls = 9
Model :: Total atoms = 13706, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 9 :: Actions = 9                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 22:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 14] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 27:
    Current Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 15] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 28:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 35:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 37:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,8)))
Step 38:
    Current Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Achieved Sub-goals:
        [Index = 22] talos : grasp(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = (block,8)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,8))
Step 39:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_1,(block,8),(block,9)) -> on((block,8)) = (block,9)
    Planned actions:
        talos : put(manipulator_end_1,(block,8),(block,9))
Step 40:
    Current Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 24] talos : release(manipulator_arm_1,(block,8)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,8))
Step 41:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 42:
    Current Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 43:
    Current Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 26] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 44:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 45:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 46:
    Current Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 27] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 47:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 48:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 49:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 50:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 52:
    Current Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 53:
    Current Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 31] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 54:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 55:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 32] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 57:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 58:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 59:
    Current Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 34] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 60:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 61:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 62:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 63:
    Current Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 37] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 64:
    Current Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 38] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 65:
    Current Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 39] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 66:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 67:
    Current Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 40] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 68:
    Current Sub-goals:
        [Index = 41] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 41] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 69:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 70:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 71:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 72:
    Current Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 43] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 73:
    Current Sub-goals:
        [Index = 44] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 44] talos : release(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,7)))
Step 74:
    Current Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 45] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 75:
    Current Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Achieved Sub-goals:
        [Index = 46] talos : grasp(manipulator_arm_1,(block,7)) -> grasping(manipulator_arm_1) = (block,7)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,7))
Step 76:
    Current Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Achieved Sub-goals:
        [Index = 47] talos : put(manipulator_arm_1,(block,7),(block,8)) -> on((block,7)) = (block,8)
    Planned actions:
        talos : put(manipulator_end_1,(block,7),(block,8))
Step 77:
    Current Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 48] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=77, step_range=range(0, 78)

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 77, Actions = 77
Level [2]: Length = 48, Actions = 48
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=48, step_range=range(0, 49)

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 77, Actions = 77
Level [2]: Length = 48, Actions = 48
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=26, step_range=range(0, 27)

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 77, Actions = 77
Level [2]: Length = 48, Actions = 48
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-24-24] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

          ========================================          
                     Ground level plan                      
          ========================================          
                 Steps = 77 :: Actions = 77                 
                ----------------------------                

(1, [Action({'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1})])
(2, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2})])
(3, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 3})])
(4, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 4})])
(5, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 5})])
(6, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 6})])
(7, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 7})])
(8, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 8})])
(9, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 9})])
(10, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 10})])
(11, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 11})])
(12, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 12})])
(13, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))', 'S': 13})])
(14, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,store_room_door_handle_outer)', 'S': 14})])
(15, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,store_room_door)', 'S': 15})])
(16, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,store_room_door_handle_outer)', 'S': 16})])
(17, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 17})])
(18, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 18})])
(19, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 19})])
(20, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 20})])
(21, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 21})])
(22, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 22})])
(23, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,6)))', 'S': 23})])
(24, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 24})])
(25, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 25})])
(26, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,6))', 'S': 26})])
(27, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 27})])
(28, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 28})])
(29, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 29})])
(30, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 30})])
(31, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 31})])
(32, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32})])
(33, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 33})])
(34, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 34})])
(35, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,6),puzzle_room_table_right)', 'S': 35})])
(36, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,6))', 'S': 36})])
(37, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,8)))', 'S': 37})])
(38, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,8))', 'S': 38})])
(39, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,8),(block,9))', 'S': 39})])
(40, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,8))', 'S': 40})])
(41, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 41})])
(42, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 42})])
(43, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 43})])
(44, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 44})])
(45, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 45})])
(46, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 46})])
(47, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 47})])
(48, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 48})])
(49, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 49})])
(50, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 50})])
(51, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 51})])
(52, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 52})])
(53, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 53})])
(54, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 54})])
(55, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 55})])
(56, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 56})])
(57, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 57})])
(58, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 58})])
(59, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 59})])
(60, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 60})])
(61, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 61})])
(62, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 62})])
(63, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 63})])
(64, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 64})])
(65, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 65})])
(66, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 66})])
(67, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 67})])
(68, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,4),(block,5))', 'S': 68})])
(69, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 69})])
(70, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,4))', 'S': 70})])
(71, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,1)))', 'S': 71})])
(72, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 72})])
(73, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,7)))', 'S': 73})])
(74, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,1))', 'S': 74})])
(75, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,7))', 'S': 75})])
(76, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,7),(block,8))', 'S': 76})])
(77, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,1),(block,2))', 'S': 77})])

Hierarchical planning summary: (Execution latency = 220.25930540000002, Grand total planning time = 370.2229841000001)

     ====================================================================================================================================================================================     
 | Level =  3 (classic), Length =  26, Actions =  26 (Com = 1.00), Sgs = 26, Time = 173.028s (Gro =   4.159s, Sea = 168.869s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00)) |  
 | Level =  2 (com-ref), Length =  48, Actions =  48 (Com = 1.00), Sgs = 48, Time =  32.129s (Gro =   8.691s, Sea =  23.437s), Expan (1.85, 1.85) (Dev = (1.87, 1.87), Bal = (1.01, 1.01)) |  
  | Level =  1 (com-ref), Length =  77, Actions =  77 (Com = 1.00), Sgs = 0, Time = 165.066s (Gro =  30.747s, Sea = 134.320s), Expan (1.60, 1.60) (Dev = (0.98, 0.98), Bal = (0.61, 0.61)) |  
     ====================================================================================================================================================================================     

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=77, step_range=range(0, 78)

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 77, Actions = 77
Level [2]: Length = 48, Actions = 48
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=48, step_range=range(0, 49)

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 77, Actions = 77
Level [2]: Length = 48, Actions = 48
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=26, step_range=range(0, 27)

[12-11-2021_15-24-24] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 77, Actions = 77
Level [2]: Length = 48, Actions = 48
Level [3]: Length = 26, Actions = 26

[12-11-2021_15-24-24] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_2021-11-12_15-17-55.txt

[12-11-2021_15-24-24] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_2021-11-12_15-17-55.txt

[12-11-2021_15-24-24] ERROR :: __main__ >> Exception during main:

Traceback (most recent call last):
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 859, in <module>
    exit_code = __main()
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 440, in __main
    func, x_points, y_points, popt, pcov = partial_plan.regress_total_time
  File "C:\Users\Ollie Kampo\Anaconda3\envs\ASH_2\lib\functools.py", line 969, in __get__
    val = self.func(instance)
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\core\Planner.py", line 597, in regress_total_time
    return self.__regress(steps, times)
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\core\Planner.py", line 574, in __regress
    popt, pcov = curve_fit(func, x_points, y_points, [0.035, 0.128])
  File "C:\Users\Ollie Kampo\Anaconda3\envs\ASH_2\lib\site-packages\scipy\optimize\minpack.py", line 789, in curve_fit
    raise RuntimeError("Optimal parameters not found: " + errmsg)
RuntimeError: Optimal parameters not found: Number of calls to function has reached maxfev = 600.
[12-11-2021_15-24-24] INFO :: __main__ >> Overall time: Real = 388.9016644, Process = 2140.75

[12-11-2021_15-24-24] INFO :: __main__ >> Exiting with code -1

