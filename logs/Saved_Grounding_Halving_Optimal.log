[21-09-2021_16-56-24] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[21-09-2021_16-56-24] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[21-09-2021_16-56-24] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[21-09-2021_16-56-24] DEBUG :: __main__ >> Command line arguments:
'./test_problems/blocks_world_plus/BWP_system_laws.lp'
'./test_problems/blocks_world_plus/BWP_problem_small_3.lp'
'-m'
'hcr'
'-t'
'sequential'
'-yield'
'False'
'-method'
'ground-first'
'-conc'
'False'
'-min_bound'
'False'
'-ao'
'verbose'
'-dpos'
'-plc'
'False'
'-pic'
'False'
'-strat'
'basic'
'-bound'
'3=2'
'2=2'
'1=3'
'-lblend'
'3=0'
'2=0'
'-rblend'
'3=0'
'2=0'
'-ll'
'3=50'
'2=100'
'1=150'
'--save_grounding'

[21-09-2021_16-56-24] DEBUG :: __main__ >> Parsed command line argumenys:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'])
('display_loader', None)
('domain_rules', None)
('domain_structure', None)
('problem_specifics', None)
('load_schema', None)
('plan_file', './solutions/plans/ASH_Plan_21-09-2021_16-56-24.txt')
('log_file', './logs/ASH_Log_21-09-2021_16-56-24.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('schema_file', './solutions/schemas/ASH_Schema_21-09-2021_16-56-24.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'verbose')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', True)
('display_graph', True)
('operation', 'standard')
('experimental_runs', 1)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', {3: 50, 2: 100, 1: 150})
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', False)
('minimise_actions', None)
('sequential_yielding', False)
('detect_interleaving', False)
('minimum_search_length_bound', False)
('problem_space_levels', None)
('generate_search_space', False)
('generate_solution_space', False)
('problem_space_size_limit', 0)
('sol_space_type', 'problem-wise')
('pause_on_level_change', False)
('pause_on_increment_change', False)
('top_level', None)
('bottom_level', 1)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', {3: 2, 2: 2, 1: 3})
('left_blend_quantities', {3: 0, 2: 0})
('right_blend_quantities', {3: 0, 2: 0})
('treat_tasks_as_independent', True)
('save_grounding', True)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)

[21-09-2021_16-56-24] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_small_3.lp]

[21-09-2021_16-56-24] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'initial_state': True, 'goal_state': True, 'entities': True, 'static_state': True}.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Instantiating logic program...

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 336 rules

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.002800100000000083s

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:91:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:576:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:589:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:590:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:594:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:595:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:596:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:600:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:601:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:602:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:606:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:607:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:619:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:620:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:621:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:627:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:628:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:633:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:634:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:639:55-82: info: atom does not occur in any rule head:
  state_of(AL_1,DESC,STATE)


[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.010937s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Model found for solve stage [base]:
Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001212s with result Satisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[21-09-2021_16-56-25] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.010937s, Solving = 0.001212s, Total = 0.012149s, Memory = (RSS = 81.191406Mb, VMS = 71.488281Mb)
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-56-25] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Instantiating logic program...

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Logic program instantiated.

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
#const minimum_search_length_bound = 0.
#false :- step <= minimum_search_length_bound; query(step).
{ occurs(AL,ROBOT,A,step): action(AL,_,ROBOT,A) } :- incomplete_plan((step-1)); pl(AL); step > start.
{ occurs(AL,ROBOT,A,step): action(AL,_,ROBOT,A) } :- restart_from((step-1)); pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,ROBOT,A) }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,ROBOT,A) }; incomplete_plan((step-1)); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,ROBOT,A_1); action(AL,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,ROBOT_1,A_1); action(AL,concurrent,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_length, minimise_actions, minimise_cost, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,step); incomplete_plan((step-1)); pl(AL); step > start; minimise_length = true. [1@3,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#program check(step).
#external query(step). [false]
#false :- incomplete_plan(step); query(step).
#false :- restart_from((step-1)); query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; S <= step; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)).
current_sub_goal((AL+1),ROBOT,A,F,V,first,start) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); holds((AL+1),F,V,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); sub_goal((AL+1),ROBOT,A,F,V,I_SG); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),first,start) :- restart_from((step-1)); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL,manipulator_end); AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,sequential,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
1 = { precond(AL,ROBO,move(P_2),in(ROBO),P_1,true,t): is(AL,connected(P_1,P_2)), fluent(AL,inertial,in(ROBO),P_1), static(AL,connected(P_1,P_2)), P_1 != P_2, insta_of(AL,location,P_1) } :- action(AL,_,ROBO,move(P_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,P_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); number(N_1); BLOCK_2 = (block,N_2); number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,on((block,3))) :- al(AL).
goal_fluent(AL,on((block,6))) :- al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
number((1..6)).
entity(block,(block,N)) :- number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Generating initial states...

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Instantiating logic program...

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--parallel-mode=8,compete', '--warn=none', '--enum-mode=auto']
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = [BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 336 rules

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0028573000000000626s

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('entities', []), ('static_state', []), ('initial_state', []), ('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.107860s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Model found for solve stage [base]:
Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.020239s with result Satisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.107860s, Solving = 0.020239s, Total = 0.128099s, Memory = (RSS = 90.144531Mb, VMS = 80.371094Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.107860s, Solving = 0.020239s, Total = 0.128099s, Memory = (RSS = 90.144531Mb, VMS = 80.371094Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 3            
          ========================================          

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), false, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 2            
          ========================================          

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), false, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
            Initial state at abstraction level 1            
          ========================================          

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), false, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> The given partial initial state has a unique interpretation (only one stable model exists).

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Generating final goals.

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Instantiating logic program...

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--parallel-mode=8,compete', '--warn=none']
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = [BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 336 rules

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.0026412999999998465s

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('entities', []), ('static_state', []), ('goal_state', []), ('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.044962s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Model found for solve stage [base]:
Model :: Total atoms = 2599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.007121s with result Satisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.044962s, Solving = 0.007121s, Total = 0.052083s, Memory = (RSS = 87.054688Mb, VMS = 77.093750Mb)
Final Model :: Total atoms = 2599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Final goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED
Statistics :: Grounding = 0.044962s, Solving = 0.007121s, Total = 0.052083s, Memory = (RSS = 87.054688Mb, VMS = 77.093750Mb)
Model :: Total atoms = 2599, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> The given partial final goal has a unique complete interpretation (only one stable model exists).

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Final goal at abstraction level 3              
          ========================================          

final_goal(3, complete(blue), false, false)
final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), false, false)
final_goal(3, complete(red), true, true)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,6)), puzzle_room_table, true)

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Final goal at abstraction level 2              
          ========================================          

final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
             Final goal at abstraction level 1              
          ========================================          

final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001AFFA177AE0>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', True)
	('use_minimum_search_length_bound', False)
	('avoid_refining_sgoals_marked_for_blending', True)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('level_range', range(1, 4))
	('online', True)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 0 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 0 : Achieved sgoals 0 : Unachieved sgoals 0
Level 1 : Total sgoals 0 : Achieved sgoals 0 : Unachieved sgoals 0

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Current planning increment level range: [1-3]

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', False)
	('reactive_callback', <bound method DivisionStrategy.react of <core.Strategies.Basic object at 0x000001AFFA177AE0>>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_minimum_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 0, initial = True, final = True, sgoals = [1-1]

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Minimum search length bound: enabled = False, value = 0

[21-09-2021_16-56-25] INFO :: ASH Planner Main #1 >> Generating monolevel plan : Level 3, Problem type = classical , Concurrency = disabled

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Optimisation details:Action minimisation = False
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Save grounding: requested = True, available = False, chosen = False

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Ignoring attempt to use saved grounding as none exists at the given level.

[21-09-2021_16-56-25] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Adding initial state as start state.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
[{'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0}, {'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0}, {'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0}, {'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0}, {'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0}, {'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0}, {'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0}]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:
holds(3, complete(blue), false, 0).holds(3, complete(red), false, 0).holds(3, grasping(manipulator_arm_1), nothing, 0).holds(3, grasping(manipulator_arm_2), nothing, 0).holds(3, in((block,1)), puzzle_room, 0).holds(3, in((block,2)), puzzle_room, 0).holds(3, in((block,3)), puzzle_room, 0).holds(3, in((block,4)), store_room, 0).holds(3, in((block,5)), store_room, 0).holds(3, in((block,6)), store_room, 0).holds(3, in(manipulator_arm_1), starting_room, 0).holds(3, in(manipulator_arm_2), starting_room, 0).holds(3, in(puzzle_room_table), puzzle_room, 0).holds(3, in(talos), starting_room, 0).holds(3, in_tower((block,1),(block,1)), true, 0).holds(3, in_tower((block,1),(block,2)), false, 0).holds(3, in_tower((block,1),(block,3)), true, 0).holds(3, in_tower((block,1),(block,4)), false, 0).holds(3, in_tower((block,1),(block,5)), false, 0).holds(3, in_tower((block,1),(block,6)), false, 0).holds(3, in_tower((block,2),(block,1)), false, 0).holds(3, in_tower((block,2),(block,2)), true, 0).holds(3, in_tower((block,2),(block,3)), false, 0).holds(3, in_tower((block,2),(block,4)), false, 0).holds(3, in_tower((block,2),(block,5)), false, 0).holds(3, in_tower((block,2),(block,6)), false, 0).holds(3, in_tower((block,3),(block,1)), false, 0).holds(3, in_tower((block,3),(block,2)), false, 0).holds(3, in_tower((block,3),(block,3)), false, 0).holds(3, in_tower((block,3),(block,4)), false, 0).holds(3, in_tower((block,3),(block,5)), false, 0).holds(3, in_tower((block,3),(block,6)), false, 0).holds(3, in_tower((block,4),(block,1)), false, 0).holds(3, in_tower((block,4),(block,2)), false, 0).holds(3, in_tower((block,4),(block,3)), false, 0).holds(3, in_tower((block,4),(block,4)), false, 0).holds(3, in_tower((block,4),(block,5)), false, 0).holds(3, in_tower((block,4),(block,6)), false, 0).holds(3, in_tower((block,5),(block,1)), false, 0).holds(3, in_tower((block,5),(block,2)), false, 0).holds(3, in_tower((block,5),(block,3)), false, 0).holds(3, in_tower((block,5),(block,4)), false, 0).holds(3, in_tower((block,5),(block,5)), false, 0).holds(3, in_tower((block,5),(block,6)), false, 0).holds(3, in_tower((block,6),(block,1)), false, 0).holds(3, in_tower((block,6),(block,2)), false, 0).holds(3, in_tower((block,6),(block,3)), false, 0).holds(3, in_tower((block,6),(block,4)), false, 0).holds(3, in_tower((block,6),(block,5)), false, 0).holds(3, in_tower((block,6),(block,6)), false, 0).holds(3, on((block,1)), puzzle_room_table, 0).holds(3, on((block,2)), puzzle_room_table, 0).holds(3, on((block,3)), (block,1), 0).holds(3, on((block,4)), nothing, 0).holds(3, on((block,5)), nothing, 0).holds(3, on((block,6)), nothing, 0).holds(3, tower_base((block,1)), true, 0).holds(3, tower_base((block,2)), true, 0).holds(3, tower_base((block,3)), false, 0).holds(3, tower_base((block,4)), false, 0).holds(3, tower_base((block,5)), false, 0).holds(3, tower_base((block,6)), false, 0).holds(3, unordered_tower((block,1)), true, 0).holds(3, unordered_tower((block,2)), false, 0).holds(3, unordered_tower((block,3)), false, 0).holds(3, unordered_tower((block,4)), false, 0).holds(3, unordered_tower((block,5)), false, 0).holds(3, unordered_tower((block,6)), false, 0).

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
[{'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'}, {'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'}, {'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'}, {'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'}]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 18 rules into program part ash_goal_state:
final_goal(3, complete(blue), false, false).final_goal(3, complete(blue), true, true).final_goal(3, complete(red), false, false).final_goal(3, complete(red), true, true).final_goal(3, on((block,3)), (block,1), false).final_goal(3, on((block,3)), (block,2), false).final_goal(3, on((block,3)), (block,4), false).final_goal(3, on((block,3)), (block,5), false).final_goal(3, on((block,3)), (block,6), false).final_goal(3, on((block,3)), nothing, false).final_goal(3, on((block,3)), puzzle_room_table, true).final_goal(3, on((block,6)), (block,1), false).final_goal(3, on((block,6)), (block,2), false).final_goal(3, on((block,6)), (block,3), false).final_goal(3, on((block,6)), (block,4), false).final_goal(3, on((block,6)), (block,5), false).final_goal(3, on((block,6)), nothing, false).final_goal(3, on((block,6)), puzzle_room_table, true).

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--models=1', '--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'false', 'false'), range_=None)]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 426 rules

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0036951999999998986s

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.021473s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [base]:
Model :: Total atoms = 1636, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004733s with result Satisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001AFFA14CC70>

[21-09-2021_16-56-25] DEBUG :: ASH Planner Main #1 >> Starting search:
	self
	level
	start_step
	first_sgoals
	last_sgoals
	finalise
	sequential_yield
	detect_interleaving
	generate_search_space
	generate_solution_space
	goal_wise_search_space
	make_observable
	reactive_callback
	solve_signal

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, false, false). %* None *%

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.053705s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006785s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06048999999999993, Incremental time limit = None
Running cumulative time = 0.06048999999999993, Cumulative time limit = 3600
Used memory = (RSS = 89.332031Mb, VMS = 79.609375Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.043629s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.003893s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.047522400000000076, Incremental time limit = None
Running cumulative time = 0.10801240000000001, Cumulative time limit = 3600
Used memory = (RSS = 90.519531Mb, VMS = 80.593750Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.053227s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004973s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.05819999999999981, Incremental time limit = None
Running cumulative time = 0.16621239999999982, Cumulative time limit = 3600
Used memory = (RSS = 91.816406Mb, VMS = 81.945312Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.053817s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006266s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06008350000000018, Incremental time limit = None
Running cumulative time = 0.2262959, Cumulative time limit = 3600
Used memory = (RSS = 93.398438Mb, VMS = 83.500000Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054883s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006629s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06151200000000001, Incremental time limit = None
Running cumulative time = 0.2878079, Cumulative time limit = 3600
Used memory = (RSS = 96.070312Mb, VMS = 86.761719Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.055673s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008980s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0646526999999999, Incremental time limit = None
Running cumulative time = 0.3524605999999999, Cumulative time limit = 3600
Used memory = (RSS = 99.308594Mb, VMS = 89.867188Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.052862s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.009287s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06214900000000001, Incremental time limit = None
Running cumulative time = 0.4146095999999999, Cumulative time limit = 3600
Used memory = (RSS = 102.781250Mb, VMS = 93.410156Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054264s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010065s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06432879999999996, Incremental time limit = None
Running cumulative time = 0.4789383999999999, Cumulative time limit = 3600
Used memory = (RSS = 105.343750Mb, VMS = 95.726562Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057444s.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011366s with result Unsatisfiable.

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0688095999999998, Incremental time limit = None
Running cumulative time = 0.5477479999999997, Cumulative time limit = 3600
Used memory = (RSS = 108.394531Mb, VMS = 99.324219Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.054045s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012229s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06627399999999994, Incremental time limit = None
Running cumulative time = 0.6140219999999996, Cumulative time limit = 3600
Used memory = (RSS = 111.378906Mb, VMS = 102.152344Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.055369s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014395s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.06976410000000022, Incremental time limit = None
Running cumulative time = 0.6837860999999998, Cumulative time limit = 3600
Used memory = (RSS = 114.429688Mb, VMS = 105.042969Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.059423s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024507s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08392969999999988, Incremental time limit = None
Running cumulative time = 0.7677157999999997, Cumulative time limit = 3600
Used memory = (RSS = 116.117188Mb, VMS = 106.542969Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057879s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028695s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08657360000000036, Incremental time limit = None
Running cumulative time = 0.8542894000000001, Cumulative time limit = 3600
Used memory = (RSS = 121.789062Mb, VMS = 113.246094Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.063695s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049490s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11318470000000014, Incremental time limit = None
Running cumulative time = 0.9674741000000002, Cumulative time limit = 3600
Used memory = (RSS = 123.152344Mb, VMS = 114.324219Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.060509s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.063234s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12374290000000032, Incremental time limit = None
Running cumulative time = 1.0912170000000005, Cumulative time limit = 3600
Used memory = (RSS = 125.492188Mb, VMS = 116.621094Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.057293s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.133741s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1910339000000003, Incremental time limit = None
Running cumulative time = 1.2822509000000009, Cumulative time limit = 3600
Used memory = (RSS = 128.050781Mb, VMS = 118.964844Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.058629s.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.184471s with result Unsatisfiable.

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24310039999999988, Incremental time limit = None
Running cumulative time = 1.5253513000000007, Cumulative time limit = 3600
Used memory = (RSS = 131.320312Mb, VMS = 122.300781Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061609s.

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.360363s with result Unsatisfiable.

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4219727, Incremental time limit = None
Running cumulative time = 1.9473240000000007, Cumulative time limit = 3600
Used memory = (RSS = 137.792969Mb, VMS = 130.781250Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.061453s.

[21-09-2021_16-56-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.597420s with result Unsatisfiable.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6588727000000003, Incremental time limit = None
Running cumulative time = 2.606196700000001, Cumulative time limit = 3600
Used memory = (RSS = 143.699219Mb, VMS = 136.738281Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =     50

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.065625s.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [incremental 20]:
Model :: Total atoms = 7476, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.129499s with result Satisfiable.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19512410000000058, Incremental time limit = None
Running cumulative time = 2.801320800000002, Cumulative time limit = 3600
Used memory = (RSS = 148.257812Mb, VMS = 141.328125Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.135031s, Solving = 1.666289s, Total = 2.801321s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 20
Final Model :: Total atoms = 7476, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.053705s, Solving = 0.006785s, Total = 0.060490s, Memory = (RSS = 89.332031Mb, VMS = 79.609375Mb)
2 : Statistics :: Grounding = 0.043629s, Solving = 0.003893s, Total = 0.047522s, Memory = (RSS = 90.519531Mb, VMS = 80.593750Mb)
3 : Statistics :: Grounding = 0.053227s, Solving = 0.004973s, Total = 0.058200s, Memory = (RSS = 91.816406Mb, VMS = 81.945312Mb)
4 : Statistics :: Grounding = 0.053817s, Solving = 0.006266s, Total = 0.060084s, Memory = (RSS = 93.398438Mb, VMS = 83.500000Mb)
5 : Statistics :: Grounding = 0.054883s, Solving = 0.006629s, Total = 0.061512s, Memory = (RSS = 96.070312Mb, VMS = 86.761719Mb)
6 : Statistics :: Grounding = 0.055673s, Solving = 0.008980s, Total = 0.064653s, Memory = (RSS = 99.308594Mb, VMS = 89.867188Mb)
7 : Statistics :: Grounding = 0.052862s, Solving = 0.009287s, Total = 0.062149s, Memory = (RSS = 102.781250Mb, VMS = 93.410156Mb)
8 : Statistics :: Grounding = 0.054264s, Solving = 0.010065s, Total = 0.064329s, Memory = (RSS = 105.343750Mb, VMS = 95.726562Mb)
9 : Statistics :: Grounding = 0.057444s, Solving = 0.011366s, Total = 0.068810s, Memory = (RSS = 108.394531Mb, VMS = 99.324219Mb)
10 : Statistics :: Grounding = 0.054045s, Solving = 0.012229s, Total = 0.066274s, Memory = (RSS = 111.378906Mb, VMS = 102.152344Mb)
11 : Statistics :: Grounding = 0.055369s, Solving = 0.014395s, Total = 0.069764s, Memory = (RSS = 114.429688Mb, VMS = 105.042969Mb)
12 : Statistics :: Grounding = 0.059423s, Solving = 0.024507s, Total = 0.083930s, Memory = (RSS = 116.117188Mb, VMS = 106.542969Mb)
13 : Statistics :: Grounding = 0.057879s, Solving = 0.028695s, Total = 0.086574s, Memory = (RSS = 121.789062Mb, VMS = 113.246094Mb)
14 : Statistics :: Grounding = 0.063695s, Solving = 0.049490s, Total = 0.113185s, Memory = (RSS = 123.152344Mb, VMS = 114.324219Mb)
15 : Statistics :: Grounding = 0.060509s, Solving = 0.063234s, Total = 0.123743s, Memory = (RSS = 125.492188Mb, VMS = 116.621094Mb)
16 : Statistics :: Grounding = 0.057293s, Solving = 0.133741s, Total = 0.191034s, Memory = (RSS = 128.050781Mb, VMS = 118.964844Mb)
17 : Statistics :: Grounding = 0.058629s, Solving = 0.184471s, Total = 0.243100s, Memory = (RSS = 131.320312Mb, VMS = 122.300781Mb)
18 : Statistics :: Grounding = 0.061609s, Solving = 0.360363s, Total = 0.421973s, Memory = (RSS = 137.792969Mb, VMS = 130.781250Mb)
19 : Statistics :: Grounding = 0.061453s, Solving = 0.597420s, Total = 0.658873s, Memory = (RSS = 143.699219Mb, VMS = 136.738281Mb)
20 : Statistics :: Grounding = 0.065625s, Solving = 0.129499s, Total = 0.195124s, Memory = (RSS = 148.257812Mb, VMS = 141.328125Mb)

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.801321s because Stop condition reached.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.135031s, Solving = 1.666289s, Total = 2.801321s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 20
Model :: Total atoms = 7476, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 3:
    Planned actions:
        talos : move(puzzle_room)
Step 4:
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 5:
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 6:
    Planned actions:
        talos : move(store_room)
Step 7:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 8:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 9:
    Planned actions:
        talos : move(puzzle_room)
Step 10:
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 11:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 12:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 13:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 14:
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 15:
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 16:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 17:
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 18:
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 19:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 20:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, plan_length=20, step_range=range(0, 21)

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=0 : level=2 len(self.__actions.get(level, []))=0 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00

[21-09-2021_16-56-28] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=20, start_step=0, blend=Blend(left=0, right=0)

[21-09-2021_16-56-28] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=10, large_group_size=11

[21-09-2021_16-56-28] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=10, blend=Blend(left=0, right=0), inherited=False, reactive=None)]

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2:
Divided plan : Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-28] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-28] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-28] DEBUG :: core.Strategies >> Obtained sgoals range = [11-20].

[21-09-2021_16-56-28] DEBUG :: core.Strategies >> Obtained sgoals range = [1-10].

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-10]

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-10], problem number = 1, increment number = 1

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 10)
	('sequential_yield', False)
	('reactive_callback', <bound method DivisionStrategy.react of <core.Strategies.Basic object at 0x000001AFFA177AE0>>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_minimum_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 0, initial = True, final = False, sgoals = [1-10]

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Minimum search length bound: enabled = False, value = 9

[21-09-2021_16-56-28] INFO :: ASH Planner Main #1 >> Generating monolevel plan : Level 2, Problem type = partial conformance refinement, achievement type = sequential, sgoals range = [1-10], Concurrency = disabled

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Optimisation details:Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Save grounding: requested = True, available = False, chosen = False

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Ignoring attempt to use saved grounding as none exists at the given level.

[21-09-2021_16-56-28] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Adding initial state as start state.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
[{'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0}, {'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0}, {'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0}, {'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0}, {'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0}, {'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0}, {'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0}, {'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0}, {'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0}, {'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0}, {'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0}, {'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0}, {'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0}, {'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0}, {'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0}, {'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0}, {'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0}, {'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0}, {'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0}, {'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0}, {'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0}]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:
holds(2, complete(blue), false, 0).holds(2, complete(red), false, 0).holds(2, configuration(manipulator_arm_1), retracted, 0).holds(2, configuration(manipulator_arm_2), retracted, 0).holds(2, configuration(puzzle_room_door), closed, 0).holds(2, configuration(starting_room_door), closed, 0).holds(2, configuration(store_room_door), closed, 0).holds(2, grasping(manipulator_arm_1), nothing, 0).holds(2, grasping(manipulator_arm_2), nothing, 0).holds(2, in((block,1)), puzzle_room, 0).holds(2, in((block,2)), puzzle_room, 0).holds(2, in((block,3)), puzzle_room, 0).holds(2, in((block,4)), store_room, 0).holds(2, in((block,5)), store_room, 0).holds(2, in((block,6)), store_room, 0).holds(2, in(manipulator_arm_1), starting_room, 0).holds(2, in(manipulator_arm_2), starting_room, 0).holds(2, in(puzzle_room_table), puzzle_room, 0).holds(2, in(talos), starting_room, 0).holds(2, in_tower((block,1),(block,1)), true, 0).holds(2, in_tower((block,1),(block,2)), false, 0).holds(2, in_tower((block,1),(block,3)), true, 0).holds(2, in_tower((block,1),(block,4)), false, 0).holds(2, in_tower((block,1),(block,5)), false, 0).holds(2, in_tower((block,1),(block,6)), false, 0).holds(2, in_tower((block,2),(block,1)), false, 0).holds(2, in_tower((block,2),(block,2)), true, 0).holds(2, in_tower((block,2),(block,3)), false, 0).holds(2, in_tower((block,2),(block,4)), false, 0).holds(2, in_tower((block,2),(block,5)), false, 0).holds(2, in_tower((block,2),(block,6)), false, 0).holds(2, in_tower((block,3),(block,1)), false, 0).holds(2, in_tower((block,3),(block,2)), false, 0).holds(2, in_tower((block,3),(block,3)), false, 0).holds(2, in_tower((block,3),(block,4)), false, 0).holds(2, in_tower((block,3),(block,5)), false, 0).holds(2, in_tower((block,3),(block,6)), false, 0).holds(2, in_tower((block,4),(block,1)), false, 0).holds(2, in_tower((block,4),(block,2)), false, 0).holds(2, in_tower((block,4),(block,3)), false, 0).holds(2, in_tower((block,4),(block,4)), false, 0).holds(2, in_tower((block,4),(block,5)), false, 0).holds(2, in_tower((block,4),(block,6)), false, 0).holds(2, in_tower((block,5),(block,1)), false, 0).holds(2, in_tower((block,5),(block,2)), false, 0).holds(2, in_tower((block,5),(block,3)), false, 0).holds(2, in_tower((block,5),(block,4)), false, 0).holds(2, in_tower((block,5),(block,5)), false, 0).holds(2, in_tower((block,5),(block,6)), false, 0).holds(2, in_tower((block,6),(block,1)), false, 0).holds(2, in_tower((block,6),(block,2)), false, 0).holds(2, in_tower((block,6),(block,3)), false, 0).holds(2, in_tower((block,6),(block,4)), false, 0).holds(2, in_tower((block,6),(block,5)), false, 0).holds(2, in_tower((block,6),(block,6)), false, 0).holds(2, on((block,1)), puzzle_room_table, 0).holds(2, on((block,2)), puzzle_room_table, 0).holds(2, on((block,3)), (block,1), 0).holds(2, on((block,4)), nothing, 0).holds(2, on((block,5)), nothing, 0).holds(2, on((block,6)), nothing, 0).holds(2, tower_base((block,1)), true, 0).holds(2, tower_base((block,2)), true, 0).holds(2, tower_base((block,3)), false, 0).holds(2, tower_base((block,4)), false, 0).holds(2, tower_base((block,5)), false, 0).holds(2, tower_base((block,6)), false, 0).holds(2, unordered_tower((block,1)), true, 0).holds(2, unordered_tower((block,2)), false, 0).holds(2, unordered_tower((block,3)), false, 0).holds(2, unordered_tower((block,4)), false, 0).holds(2, unordered_tower((block,5)), false, 0).holds(2, unordered_tower((block,6)), false, 0).holds(3, complete(blue), false, 0).holds(3, complete(red), false, 0).holds(3, grasping(manipulator_arm_1), nothing, 0).holds(3, grasping(manipulator_arm_2), nothing, 0).holds(3, in((block,1)), puzzle_room, 0).holds(3, in((block,2)), puzzle_room, 0).holds(3, in((block,3)), puzzle_room, 0).holds(3, in((block,4)), store_room, 0).holds(3, in((block,5)), store_room, 0).holds(3, in((block,6)), store_room, 0).holds(3, in(manipulator_arm_1), starting_room, 0).holds(3, in(manipulator_arm_2), starting_room, 0).holds(3, in(puzzle_room_table), puzzle_room, 0).holds(3, in(talos), starting_room, 0).holds(3, in_tower((block,1),(block,1)), true, 0).holds(3, in_tower((block,1),(block,2)), false, 0).holds(3, in_tower((block,1),(block,3)), true, 0).holds(3, in_tower((block,1),(block,4)), false, 0).holds(3, in_tower((block,1),(block,5)), false, 0).holds(3, in_tower((block,1),(block,6)), false, 0).holds(3, in_tower((block,2),(block,1)), false, 0).holds(3, in_tower((block,2),(block,2)), true, 0).holds(3, in_tower((block,2),(block,3)), false, 0).holds(3, in_tower((block,2),(block,4)), false, 0).holds(3, in_tower((block,2),(block,5)), false, 0).holds(3, in_tower((block,2),(block,6)), false, 0).holds(3, in_tower((block,3),(block,1)), false, 0).holds(3, in_tower((block,3),(block,2)), false, 0).holds(3, in_tower((block,3),(block,3)), false, 0).holds(3, in_tower((block,3),(block,4)), false, 0).holds(3, in_tower((block,3),(block,5)), false, 0).holds(3, in_tower((block,3),(block,6)), false, 0).holds(3, in_tower((block,4),(block,1)), false, 0).holds(3, in_tower((block,4),(block,2)), false, 0).holds(3, in_tower((block,4),(block,3)), false, 0).holds(3, in_tower((block,4),(block,4)), false, 0).holds(3, in_tower((block,4),(block,5)), false, 0).holds(3, in_tower((block,4),(block,6)), false, 0).holds(3, in_tower((block,5),(block,1)), false, 0).holds(3, in_tower((block,5),(block,2)), false, 0).holds(3, in_tower((block,5),(block,3)), false, 0).holds(3, in_tower((block,5),(block,4)), false, 0).holds(3, in_tower((block,5),(block,5)), false, 0).holds(3, in_tower((block,5),(block,6)), false, 0).holds(3, in_tower((block,6),(block,1)), false, 0).holds(3, in_tower((block,6),(block,2)), false, 0).holds(3, in_tower((block,6),(block,3)), false, 0).holds(3, in_tower((block,6),(block,4)), false, 0).holds(3, in_tower((block,6),(block,5)), false, 0).holds(3, in_tower((block,6),(block,6)), false, 0).holds(3, on((block,1)), puzzle_room_table, 0).holds(3, on((block,2)), puzzle_room_table, 0).holds(3, on((block,3)), (block,1), 0).holds(3, on((block,4)), nothing, 0).holds(3, on((block,5)), nothing, 0).holds(3, on((block,6)), nothing, 0).holds(3, tower_base((block,1)), true, 0).holds(3, tower_base((block,2)), true, 0).holds(3, tower_base((block,3)), false, 0).holds(3, tower_base((block,4)), false, 0).holds(3, tower_base((block,5)), false, 0).holds(3, tower_base((block,6)), false, 0).holds(3, unordered_tower((block,1)), true, 0).holds(3, unordered_tower((block,2)), false, 0).holds(3, unordered_tower((block,3)), false, 0).holds(3, unordered_tower((block,4)), false, 0).holds(3, unordered_tower((block,5)), false, 0).holds(3, unordered_tower((block,6)), false, 0).

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
[{'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'}, {'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'}, {'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'}, {'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'}, {'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'}, {'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'}, {'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'}, {'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'}, {'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'}, {'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'}]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 36 rules into program part ash_goal_state:
final_goal(2, complete(blue), false, false).final_goal(2, complete(blue), true, true).final_goal(2, complete(red), false, false).final_goal(2, complete(red), true, true).final_goal(2, on((block,3)), (block,1), false).final_goal(2, on((block,3)), (block,2), false).final_goal(2, on((block,3)), (block,4), false).final_goal(2, on((block,3)), (block,5), false).final_goal(2, on((block,3)), (block,6), false).final_goal(2, on((block,3)), nothing, false).final_goal(2, on((block,3)), puzzle_room_table, true).final_goal(2, on((block,6)), (block,1), false).final_goal(2, on((block,6)), (block,2), false).final_goal(2, on((block,6)), (block,3), false).final_goal(2, on((block,6)), (block,4), false).final_goal(2, on((block,6)), (block,5), false).final_goal(2, on((block,6)), nothing, false).final_goal(2, on((block,6)), puzzle_room_table, true).final_goal(3, complete(blue), false, false).final_goal(3, complete(blue), true, true).final_goal(3, complete(red), false, false).final_goal(3, complete(red), true, true).final_goal(3, on((block,3)), (block,1), false).final_goal(3, on((block,3)), (block,2), false).final_goal(3, on((block,3)), (block,4), false).final_goal(3, on((block,3)), (block,5), false).final_goal(3, on((block,3)), (block,6), false).final_goal(3, on((block,3)), nothing, false).final_goal(3, on((block,3)), puzzle_room_table, true).final_goal(3, on((block,6)), (block,1), false).final_goal(3, on((block,6)), (block,2), false).final_goal(3, on((block,6)), (block,3), false).final_goal(3, on((block,6)), (block,4), false).final_goal(3, on((block,6)), (block,5), false).final_goal(3, on((block,6)), nothing, false).final_goal(3, on((block,6)), puzzle_room_table, true).

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
[{'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1}, {'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 2}, {'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 3}, {'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 4}, {'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5}, {'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 6}, {'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 7}, {'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 8}, {'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 9}, {'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 10}]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:
sub_goal(3, talos, move(store_room), in(talos), store_room, 1).sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 2).sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3).sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4).sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 5).sub_goal(3, talos, move(store_room), in(talos), store_room, 6).sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 7).sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 8).sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 9).sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 10).

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--models=1', '--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 10, 'sequential', 'false'), range_=None)]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 529 rules

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0035170000000004364s

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.025073s.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [base]:
Model :: Total atoms = 2102, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004933s with result Satisfiable.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001AFFD2143B0>

[21-09-2021_16-56-28] DEBUG :: ASH Planner Main #1 >> Starting search:
	self
	level
	start_step
	first_sgoals
	last_sgoals
	finalise
	sequential_yield
	detect_interleaving
	generate_search_space
	generate_solution_space
	goal_wise_search_space
	make_observable
	reactive_callback
	solve_signal

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 10, sequential, false). %* None *%

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.084201s.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010832s with result Unsatisfiable.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0950331000000002, Incremental time limit = None
Running cumulative time = 0.0950331000000002, Cumulative time limit = 3600
Used memory = (RSS = 106.343750Mb, VMS = 100.078125Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074409s.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005038s with result Unsatisfiable.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07944640000000014, Incremental time limit = None
Running cumulative time = 0.17447950000000034, Cumulative time limit = 3600
Used memory = (RSS = 109.414062Mb, VMS = 103.519531Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.066821s.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005459s with result Unsatisfiable.

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.07227990000000073, Incremental time limit = None
Running cumulative time = 0.24675940000000107, Cumulative time limit = 3600
Used memory = (RSS = 110.261719Mb, VMS = 104.093750Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.068361s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008626s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0769870000000008, Incremental time limit = None
Running cumulative time = 0.3237464000000019, Cumulative time limit = 3600
Used memory = (RSS = 112.304688Mb, VMS = 105.867188Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.075176s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010769s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08594469999999976, Incremental time limit = None
Running cumulative time = 0.40969110000000164, Cumulative time limit = 3600
Used memory = (RSS = 115.816406Mb, VMS = 109.000000Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.111679s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014115s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12579420000000052, Incremental time limit = None
Running cumulative time = 0.5354853000000022, Cumulative time limit = 3600
Used memory = (RSS = 120.171875Mb, VMS = 114.187500Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.076371s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010758s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08712859999999978, Incremental time limit = None
Running cumulative time = 0.6226139000000019, Cumulative time limit = 3600
Used memory = (RSS = 122.628906Mb, VMS = 115.855469Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.074115s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012432s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08654660000000014, Incremental time limit = None
Running cumulative time = 0.7091605000000021, Cumulative time limit = 3600
Used memory = (RSS = 128.953125Mb, VMS = 121.253906Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.081459s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011463s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09292199999999973, Incremental time limit = None
Running cumulative time = 0.8020825000000018, Cumulative time limit = 3600
Used memory = (RSS = 130.968750Mb, VMS = 122.355469Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082204s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012788s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09499190000000013, Incremental time limit = None
Running cumulative time = 0.8970744000000019, Cumulative time limit = 3600
Used memory = (RSS = 136.519531Mb, VMS = 129.996094Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085312s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013490s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09880189999999978, Incremental time limit = None
Running cumulative time = 0.9958763000000017, Cumulative time limit = 3600
Used memory = (RSS = 137.804688Mb, VMS = 130.164062Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089120s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024373s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11349270000000011, Incremental time limit = None
Running cumulative time = 1.1093690000000018, Cumulative time limit = 3600
Used memory = (RSS = 139.554688Mb, VMS = 131.140625Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.087561s.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013898s with result Unsatisfiable.

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10145850000000056, Incremental time limit = None
Running cumulative time = 1.2108275000000024, Cumulative time limit = 3600
Used memory = (RSS = 141.476562Mb, VMS = 132.527344Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102990s.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017258s with result Unsatisfiable.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12024830000000097, Incremental time limit = None
Running cumulative time = 1.3310758000000034, Cumulative time limit = 3600
Used memory = (RSS = 150.085938Mb, VMS = 143.531250Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.087077s.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018619s with result Unsatisfiable.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10569679999999959, Incremental time limit = None
Running cumulative time = 1.436772600000003, Cumulative time limit = 3600
Used memory = (RSS = 150.804688Mb, VMS = 143.699219Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102011s.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031072s with result Unsatisfiable.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13308300000000006, Incremental time limit = None
Running cumulative time = 1.569855600000003, Cumulative time limit = 3600
Used memory = (RSS = 152.839844Mb, VMS = 145.417969Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.089675s.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045577s with result Unsatisfiable.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1352518000000007, Incremental time limit = None
Running cumulative time = 1.7051074000000037, Cumulative time limit = 3600
Used memory = (RSS = 155.984375Mb, VMS = 148.199219Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.104225s.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.071011s with result Unsatisfiable.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17523580000000027, Incremental time limit = None
Running cumulative time = 1.880343200000004, Cumulative time limit = 3600
Used memory = (RSS = 159.031250Mb, VMS = 150.511719Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097377s.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075775s with result Unsatisfiable.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17315140000000007, Incremental time limit = None
Running cumulative time = 2.053494600000004, Cumulative time limit = 3600
Used memory = (RSS = 165.246094Mb, VMS = 162.914062Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105685s.

[21-09-2021_16-56-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.127035s with result Unsatisfiable.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2327199000000002, Incremental time limit = None
Running cumulative time = 2.2862145000000043, Cumulative time limit = 3600
Used memory = (RSS = 168.152344Mb, VMS = 165.210938Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098141s.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.201606s with result Unsatisfiable.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2997470999999994, Incremental time limit = None
Running cumulative time = 2.5859616000000036, Cumulative time limit = 3600
Used memory = (RSS = 171.273438Mb, VMS = 167.683594Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102055s.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.262650s with result Unsatisfiable.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3647052999999998, Incremental time limit = None
Running cumulative time = 2.9506669000000034, Cumulative time limit = 3600
Used memory = (RSS = 174.632812Mb, VMS = 170.175781Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100197s.

[21-09-2021_16-56-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.542399s with result Unsatisfiable.

[21-09-2021_16-56-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.642595599999999, Incremental time limit = None
Running cumulative time = 3.5932625000000025, Cumulative time limit = 3600
Used memory = (RSS = 179.710938Mb, VMS = 174.656250Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102351s.

[21-09-2021_16-56-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.478622s with result Unsatisfiable.

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5809735000000007, Incremental time limit = None
Running cumulative time = 4.174236000000003, Cumulative time limit = 3600
Used memory = (RSS = 185.476562Mb, VMS = 179.855469Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116643s.

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.570664s with result Unsatisfiable.

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6873064999999983, Incremental time limit = None
Running cumulative time = 4.861542500000001, Cumulative time limit = 3600
Used memory = (RSS = 189.738281Mb, VMS = 183.460938Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125002s.

[21-09-2021_16-56-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.920126s with result Unsatisfiable.

[21-09-2021_16-56-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0451280000000018, Incremental time limit = None
Running cumulative time = 5.906670500000003, Cumulative time limit = 3600
Used memory = (RSS = 196.937500Mb, VMS = 190.019531Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126107s.

[21-09-2021_16-56-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.973729s with result Unsatisfiable.

[21-09-2021_16-56-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0998357000000016, Incremental time limit = None
Running cumulative time = 7.006506200000005, Cumulative time limit = 3600
Used memory = (RSS = 202.894531Mb, VMS = 195.582031Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136444s.

[21-09-2021_16-56-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.930798s with result Unsatisfiable.

[21-09-2021_16-56-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0672419000000009, Incremental time limit = None
Running cumulative time = 8.073748100000007, Cumulative time limit = 3600
Used memory = (RSS = 212.699219Mb, VMS = 214.160156Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124848s.

[21-09-2021_16-56-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.905243s with result Unsatisfiable.

[21-09-2021_16-56-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0300905999999994, Incremental time limit = None
Running cumulative time = 9.103838700000004, Cumulative time limit = 3600
Used memory = (RSS = 216.699219Mb, VMS = 217.476562Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(30), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112701s.

[21-09-2021_16-56-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.765206s with result Unsatisfiable.

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.8779073999999998, Incremental time limit = None
Running cumulative time = 9.981746100000006, Cumulative time limit = 3600
Used memory = (RSS = 220.160156Mb, VMS = 219.988281Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(31), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150283s.

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [incremental 31]:
Model :: Total atoms = 13732, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.613499s with result Satisfiable.

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7637825000000014, Incremental time limit = None
Running cumulative time = 10.745528600000007, Cumulative time limit = 3600
Used memory = (RSS = 227.511719Mb, VMS = 226.921875Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.040600s, Solving = 7.704929s, Total = 10.745529s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 31
Final Model :: Total atoms = 13732, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.084201s, Solving = 0.010832s, Total = 0.095033s, Memory = (RSS = 106.343750Mb, VMS = 100.078125Mb)
2 : Statistics :: Grounding = 0.074409s, Solving = 0.005038s, Total = 0.079446s, Memory = (RSS = 109.414062Mb, VMS = 103.519531Mb)
3 : Statistics :: Grounding = 0.066821s, Solving = 0.005459s, Total = 0.072280s, Memory = (RSS = 110.261719Mb, VMS = 104.093750Mb)
4 : Statistics :: Grounding = 0.068361s, Solving = 0.008626s, Total = 0.076987s, Memory = (RSS = 112.304688Mb, VMS = 105.867188Mb)
5 : Statistics :: Grounding = 0.075176s, Solving = 0.010769s, Total = 0.085945s, Memory = (RSS = 115.816406Mb, VMS = 109.000000Mb)
6 : Statistics :: Grounding = 0.111679s, Solving = 0.014115s, Total = 0.125794s, Memory = (RSS = 120.171875Mb, VMS = 114.187500Mb)
7 : Statistics :: Grounding = 0.076371s, Solving = 0.010758s, Total = 0.087129s, Memory = (RSS = 122.628906Mb, VMS = 115.855469Mb)
8 : Statistics :: Grounding = 0.074115s, Solving = 0.012432s, Total = 0.086547s, Memory = (RSS = 128.953125Mb, VMS = 121.253906Mb)
9 : Statistics :: Grounding = 0.081459s, Solving = 0.011463s, Total = 0.092922s, Memory = (RSS = 130.968750Mb, VMS = 122.355469Mb)
10 : Statistics :: Grounding = 0.082204s, Solving = 0.012788s, Total = 0.094992s, Memory = (RSS = 136.519531Mb, VMS = 129.996094Mb)
11 : Statistics :: Grounding = 0.085312s, Solving = 0.013490s, Total = 0.098802s, Memory = (RSS = 137.804688Mb, VMS = 130.164062Mb)
12 : Statistics :: Grounding = 0.089120s, Solving = 0.024373s, Total = 0.113493s, Memory = (RSS = 139.554688Mb, VMS = 131.140625Mb)
13 : Statistics :: Grounding = 0.087561s, Solving = 0.013898s, Total = 0.101459s, Memory = (RSS = 141.476562Mb, VMS = 132.527344Mb)
14 : Statistics :: Grounding = 0.102990s, Solving = 0.017258s, Total = 0.120248s, Memory = (RSS = 150.085938Mb, VMS = 143.531250Mb)
15 : Statistics :: Grounding = 0.087077s, Solving = 0.018619s, Total = 0.105697s, Memory = (RSS = 150.804688Mb, VMS = 143.699219Mb)
16 : Statistics :: Grounding = 0.102011s, Solving = 0.031072s, Total = 0.133083s, Memory = (RSS = 152.839844Mb, VMS = 145.417969Mb)
17 : Statistics :: Grounding = 0.089675s, Solving = 0.045577s, Total = 0.135252s, Memory = (RSS = 155.984375Mb, VMS = 148.199219Mb)
18 : Statistics :: Grounding = 0.104225s, Solving = 0.071011s, Total = 0.175236s, Memory = (RSS = 159.031250Mb, VMS = 150.511719Mb)
19 : Statistics :: Grounding = 0.097377s, Solving = 0.075775s, Total = 0.173151s, Memory = (RSS = 165.246094Mb, VMS = 162.914062Mb)
20 : Statistics :: Grounding = 0.105685s, Solving = 0.127035s, Total = 0.232720s, Memory = (RSS = 168.152344Mb, VMS = 165.210938Mb)
21 : Statistics :: Grounding = 0.098141s, Solving = 0.201606s, Total = 0.299747s, Memory = (RSS = 171.273438Mb, VMS = 167.683594Mb)
22 : Statistics :: Grounding = 0.102055s, Solving = 0.262650s, Total = 0.364705s, Memory = (RSS = 174.632812Mb, VMS = 170.175781Mb)
23 : Statistics :: Grounding = 0.100197s, Solving = 0.542399s, Total = 0.642596s, Memory = (RSS = 179.710938Mb, VMS = 174.656250Mb)
24 : Statistics :: Grounding = 0.102351s, Solving = 0.478622s, Total = 0.580974s, Memory = (RSS = 185.476562Mb, VMS = 179.855469Mb)
25 : Statistics :: Grounding = 0.116643s, Solving = 0.570664s, Total = 0.687306s, Memory = (RSS = 189.738281Mb, VMS = 183.460938Mb)
26 : Statistics :: Grounding = 0.125002s, Solving = 0.920126s, Total = 1.045128s, Memory = (RSS = 196.937500Mb, VMS = 190.019531Mb)
27 : Statistics :: Grounding = 0.126107s, Solving = 0.973729s, Total = 1.099836s, Memory = (RSS = 202.894531Mb, VMS = 195.582031Mb)
28 : Statistics :: Grounding = 0.136444s, Solving = 0.930798s, Total = 1.067242s, Memory = (RSS = 212.699219Mb, VMS = 214.160156Mb)
29 : Statistics :: Grounding = 0.124848s, Solving = 0.905243s, Total = 1.030091s, Memory = (RSS = 216.699219Mb, VMS = 217.476562Mb)
30 : Statistics :: Grounding = 0.112701s, Solving = 0.765206s, Total = 0.877907s, Memory = (RSS = 220.160156Mb, VMS = 219.988281Mb)
31 : Statistics :: Grounding = 0.150283s, Solving = 0.613499s, Total = 0.763783s, Memory = (RSS = 227.511719Mb, VMS = 226.921875Mb)

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 10.745529s because Stop condition reached.

[21-09-2021_16-56-39] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 2.

[21-09-2021_16-56-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[21-09-2021_16-56-39] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[21-09-2021_16-56-39] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.040600s, Solving = 7.704929s, Total = 10.745529s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 31
Model :: Total atoms = 13732, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[21-09-2021_16-56-40] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{}
{}

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31}}

[21-09-2021_16-56-42] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 31 :: Actions = 31                 
                ----------------------------                

Step 0:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
Step 1:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 5:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 8:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 13:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 14:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 15:
    Current Sub-goals:
        talos : move(puzzle_room) -> [3] in(talos) = puzzle_room
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 16:
    Current Sub-goals:
        talos : move(puzzle_room) -> [3] in(talos) = puzzle_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        talos : move(puzzle_room) -> [3] in(talos) = puzzle_room
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> [4] on((block,6)) = puzzle_room_table
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> [4] on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 20:
    Current Sub-goals:
        talos : release(manipulator_arm_2,(block,6)) -> [5] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        talos : move(store_room) -> [6] in(talos) = store_room
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 22:
    Current Sub-goals:
        talos : move(store_room) -> [6] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 23:
    Current Sub-goals:
        talos : move(store_room) -> [6] in(talos) = store_room
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [7] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : move(store_room)
Step 25:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [8] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 26:
    Current Sub-goals:
        talos : move(puzzle_room) -> [9] in(talos) = puzzle_room
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 27:
    Current Sub-goals:
        talos : move(puzzle_room) -> [9] in(talos) = puzzle_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 28:
    Current Sub-goals:
        talos : move(puzzle_room) -> [9] in(talos) = puzzle_room
    Planned actions:
        talos : move(hallway)
Step 29:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,5),(block,6)) -> [10] on((block,5)) = (block,6)
    Planned actions:
        talos : move(puzzle_room)
Step 30:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,5),(block,6)) -> [10] on((block,5)) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 31:
    Current Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, plan_length=31, step_range=range(0, 32)

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=0 : level=2 len(self.__actions.get(level, []))=31 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-56-42] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88

[21-09-2021_16-56-42] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=31, start_step=0, blend=Blend(left=0, right=0)

[21-09-2021_16-56-42] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=15, large_group_size=16

[21-09-2021_16-56-42] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=15, blend=Blend(left=0, right=0), inherited=False, reactive=None)]

[21-09-2021_16-56-42] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88
Division points [total=1] : [(Index = 15, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-42] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1:
Divided plan : Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88
Division points [total=1] : [(Index = 15, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-42] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88
Division points [total=1] : [(Index = 15, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-42] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88
Division points [total=1] : [(Index = 15, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-42] DEBUG :: core.Strategies >> Obtained sgoals range = [16-31].

[21-09-2021_16-56-42] DEBUG :: core.Strategies >> Obtained sgoals range = [1-15].

[21-09-2021_16-56-42] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-15]

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-15], problem number = 1, increment number = 1

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 15)
	('sequential_yield', False)
	('reactive_callback', <bound method DivisionStrategy.react of <core.Strategies.Basic object at 0x000001AFFA177AE0>>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_minimum_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 0, initial = True, final = False, sgoals = [1-15]

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Minimum search length bound: enabled = False, value = 14

[21-09-2021_16-56-42] INFO :: ASH Planner Main #1 >> Generating monolevel plan : Level 1, Problem type = partial conformance refinement, achievement type = sequential, sgoals range = [1-15], Concurrency = disabled

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Optimisation details:Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Save grounding: requested = True, available = False, chosen = False

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Ignoring attempt to use saved grounding as none exists at the given level.

[21-09-2021_16-56-42] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Instantiating logic program...

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated.

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Adding initial state as start state.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
[{'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0}, {'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0}, {'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0}, {'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0}, {'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0}, {'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0}, {'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0}, {'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0}, {'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0}, {'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0}, {'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0}, {'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0}, {'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0}, {'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0}, {'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0}, {'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0}, {'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0}, {'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0}, {'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0}, {'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0}, {'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0}, {'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0}, {'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0}, {'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0}, {'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0}, {'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0}, {'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0}, {'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0}, {'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0}, {'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0}, {'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0}, {'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0}, {'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0}, {'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0}, {'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0}, {'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0}, {'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0}, {'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0}, {'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0}, {'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0}, {'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0}, {'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0}, {'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0}, {'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0}, {'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0}, {'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0}, {'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0}, {'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0}, {'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0}, {'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0}, {'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0}, {'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0}, {'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0}, {'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0}, {'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0}]

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:
holds(1, complete(blue), false, 0).holds(1, complete(red), false, 0).holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).holds(1, configuration(manipulator_limb_1), retracted, 0).holds(1, configuration(manipulator_limb_2), retracted, 0).holds(1, configuration(puzzle_room_door), closed, 0).holds(1, configuration(starting_room_door), closed, 0).holds(1, configuration(store_room_door), closed, 0).holds(1, grasping(manipulator_arm_1), nothing, 0).holds(1, grasping(manipulator_arm_2), nothing, 0).holds(1, grasping(manipulator_end_1), nothing, 0).holds(1, grasping(manipulator_end_2), nothing, 0).holds(1, in((block,1)), (puzzle_room,1), 0).holds(1, in((block,2)), (puzzle_room,1), 0).holds(1, in((block,3)), (puzzle_room,1), 0).holds(1, in((block,4)), (store_room,0), 0).holds(1, in((block,5)), (store_room,0), 0).holds(1, in((block,6)), (store_room,0), 0).holds(1, in(manipulator_arm_1), (starting_room,0), 0).holds(1, in(manipulator_arm_2), (starting_room,0), 0).holds(1, in(manipulator_end_1), (starting_room,0), 0).holds(1, in(manipulator_end_2), (starting_room,0), 0).holds(1, in(manipulator_limb_1), (starting_room,0), 0).holds(1, in(manipulator_limb_2), (starting_room,0), 0).holds(1, in(puzzle_room_table), (puzzle_room,1), 0).holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).holds(1, in(talos), (starting_room,0), 0).holds(1, in_tower((block,1),(block,1)), true, 0).holds(1, in_tower((block,1),(block,2)), false, 0).holds(1, in_tower((block,1),(block,3)), true, 0).holds(1, in_tower((block,1),(block,4)), false, 0).holds(1, in_tower((block,1),(block,5)), false, 0).holds(1, in_tower((block,1),(block,6)), false, 0).holds(1, in_tower((block,2),(block,1)), false, 0).holds(1, in_tower((block,2),(block,2)), true, 0).holds(1, in_tower((block,2),(block,3)), false, 0).holds(1, in_tower((block,2),(block,4)), false, 0).holds(1, in_tower((block,2),(block,5)), false, 0).holds(1, in_tower((block,2),(block,6)), false, 0).holds(1, in_tower((block,3),(block,1)), false, 0).holds(1, in_tower((block,3),(block,2)), false, 0).holds(1, in_tower((block,3),(block,3)), false, 0).holds(1, in_tower((block,3),(block,4)), false, 0).holds(1, in_tower((block,3),(block,5)), false, 0).holds(1, in_tower((block,3),(block,6)), false, 0).holds(1, in_tower((block,4),(block,1)), false, 0).holds(1, in_tower((block,4),(block,2)), false, 0).holds(1, in_tower((block,4),(block,3)), false, 0).holds(1, in_tower((block,4),(block,4)), false, 0).holds(1, in_tower((block,4),(block,5)), false, 0).holds(1, in_tower((block,4),(block,6)), false, 0).holds(1, in_tower((block,5),(block,1)), false, 0).holds(1, in_tower((block,5),(block,2)), false, 0).holds(1, in_tower((block,5),(block,3)), false, 0).holds(1, in_tower((block,5),(block,4)), false, 0).holds(1, in_tower((block,5),(block,5)), false, 0).holds(1, in_tower((block,5),(block,6)), false, 0).holds(1, in_tower((block,6),(block,1)), false, 0).holds(1, in_tower((block,6),(block,2)), false, 0).holds(1, in_tower((block,6),(block,3)), false, 0).holds(1, in_tower((block,6),(block,4)), false, 0).holds(1, in_tower((block,6),(block,5)), false, 0).holds(1, in_tower((block,6),(block,6)), false, 0).holds(1, on((block,1)), puzzle_room_table_left, 0).holds(1, on((block,2)), puzzle_room_table_right, 0).holds(1, on((block,3)), (block,1), 0).holds(1, on((block,4)), nothing, 0).holds(1, on((block,5)), nothing, 0).holds(1, on((block,6)), nothing, 0).holds(1, tower_base((block,1)), true, 0).holds(1, tower_base((block,2)), true, 0).holds(1, tower_base((block,3)), false, 0).holds(1, tower_base((block,4)), false, 0).holds(1, tower_base((block,5)), false, 0).holds(1, tower_base((block,6)), false, 0).holds(1, unordered_tower((block,1)), true, 0).holds(1, unordered_tower((block,2)), false, 0).holds(1, unordered_tower((block,3)), false, 0).holds(1, unordered_tower((block,4)), false, 0).holds(1, unordered_tower((block,5)), false, 0).holds(1, unordered_tower((block,6)), false, 0).holds(2, complete(blue), false, 0).holds(2, complete(red), false, 0).holds(2, configuration(manipulator_arm_1), retracted, 0).holds(2, configuration(manipulator_arm_2), retracted, 0).holds(2, configuration(puzzle_room_door), closed, 0).holds(2, configuration(starting_room_door), closed, 0).holds(2, configuration(store_room_door), closed, 0).holds(2, grasping(manipulator_arm_1), nothing, 0).holds(2, grasping(manipulator_arm_2), nothing, 0).holds(2, in((block,1)), puzzle_room, 0).holds(2, in((block,2)), puzzle_room, 0).holds(2, in((block,3)), puzzle_room, 0).holds(2, in((block,4)), store_room, 0).holds(2, in((block,5)), store_room, 0).holds(2, in((block,6)), store_room, 0).holds(2, in(manipulator_arm_1), starting_room, 0).holds(2, in(manipulator_arm_2), starting_room, 0).holds(2, in(puzzle_room_table), puzzle_room, 0).holds(2, in(talos), starting_room, 0).holds(2, in_tower((block,1),(block,1)), true, 0).holds(2, in_tower((block,1),(block,2)), false, 0).holds(2, in_tower((block,1),(block,3)), true, 0).holds(2, in_tower((block,1),(block,4)), false, 0).holds(2, in_tower((block,1),(block,5)), false, 0).holds(2, in_tower((block,1),(block,6)), false, 0).holds(2, in_tower((block,2),(block,1)), false, 0).holds(2, in_tower((block,2),(block,2)), true, 0).holds(2, in_tower((block,2),(block,3)), false, 0).holds(2, in_tower((block,2),(block,4)), false, 0).holds(2, in_tower((block,2),(block,5)), false, 0).holds(2, in_tower((block,2),(block,6)), false, 0).holds(2, in_tower((block,3),(block,1)), false, 0).holds(2, in_tower((block,3),(block,2)), false, 0).holds(2, in_tower((block,3),(block,3)), false, 0).holds(2, in_tower((block,3),(block,4)), false, 0).holds(2, in_tower((block,3),(block,5)), false, 0).holds(2, in_tower((block,3),(block,6)), false, 0).holds(2, in_tower((block,4),(block,1)), false, 0).holds(2, in_tower((block,4),(block,2)), false, 0).holds(2, in_tower((block,4),(block,3)), false, 0).holds(2, in_tower((block,4),(block,4)), false, 0).holds(2, in_tower((block,4),(block,5)), false, 0).holds(2, in_tower((block,4),(block,6)), false, 0).holds(2, in_tower((block,5),(block,1)), false, 0).holds(2, in_tower((block,5),(block,2)), false, 0).holds(2, in_tower((block,5),(block,3)), false, 0).holds(2, in_tower((block,5),(block,4)), false, 0).holds(2, in_tower((block,5),(block,5)), false, 0).holds(2, in_tower((block,5),(block,6)), false, 0).holds(2, in_tower((block,6),(block,1)), false, 0).holds(2, in_tower((block,6),(block,2)), false, 0).holds(2, in_tower((block,6),(block,3)), false, 0).holds(2, in_tower((block,6),(block,4)), false, 0).holds(2, in_tower((block,6),(block,5)), false, 0).holds(2, in_tower((block,6),(block,6)), false, 0).holds(2, on((block,1)), puzzle_room_table, 0).holds(2, on((block,2)), puzzle_room_table, 0).holds(2, on((block,3)), (block,1), 0).holds(2, on((block,4)), nothing, 0).holds(2, on((block,5)), nothing, 0).holds(2, on((block,6)), nothing, 0).holds(2, tower_base((block,1)), true, 0).holds(2, tower_base((block,2)), true, 0).holds(2, tower_base((block,3)), false, 0).holds(2, tower_base((block,4)), false, 0).holds(2, tower_base((block,5)), false, 0).holds(2, tower_base((block,6)), false, 0).holds(2, unordered_tower((block,1)), true, 0).holds(2, unordered_tower((block,2)), false, 0).holds(2, unordered_tower((block,3)), false, 0).holds(2, unordered_tower((block,4)), false, 0).holds(2, unordered_tower((block,5)), false, 0).holds(2, unordered_tower((block,6)), false, 0).

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
[{'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'}, {'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'}, {'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'}, {'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'}, {'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'}, {'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'}, {'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'}, {'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'}, {'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'}, {'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'}, {'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'}, {'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'}, {'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'}, {'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'}, {'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'}, {'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'}, {'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'}, {'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'}, {'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'}]

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 38 rules into program part ash_goal_state:
final_goal(1, complete(blue), false, false).final_goal(1, complete(blue), true, true).final_goal(1, complete(red), false, false).final_goal(1, complete(red), true, true).final_goal(1, on((block,3)), (block,1), false).final_goal(1, on((block,3)), (block,2), false).final_goal(1, on((block,3)), (block,4), false).final_goal(1, on((block,3)), (block,5), false).final_goal(1, on((block,3)), (block,6), false).final_goal(1, on((block,3)), nothing, false).final_goal(1, on((block,3)), puzzle_room_table_left, true).final_goal(1, on((block,3)), puzzle_room_table_right, false).final_goal(1, on((block,6)), (block,1), false).final_goal(1, on((block,6)), (block,2), false).final_goal(1, on((block,6)), (block,3), false).final_goal(1, on((block,6)), (block,4), false).final_goal(1, on((block,6)), (block,5), false).final_goal(1, on((block,6)), nothing, false).final_goal(1, on((block,6)), puzzle_room_table_left, false).final_goal(1, on((block,6)), puzzle_room_table_right, true).final_goal(2, complete(blue), false, false).final_goal(2, complete(blue), true, true).final_goal(2, complete(red), false, false).final_goal(2, complete(red), true, true).final_goal(2, on((block,3)), (block,1), false).final_goal(2, on((block,3)), (block,2), false).final_goal(2, on((block,3)), (block,4), false).final_goal(2, on((block,3)), (block,5), false).final_goal(2, on((block,3)), (block,6), false).final_goal(2, on((block,3)), nothing, false).final_goal(2, on((block,3)), puzzle_room_table, true).final_goal(2, on((block,6)), (block,1), false).final_goal(2, on((block,6)), (block,2), false).final_goal(2, on((block,6)), (block,3), false).final_goal(2, on((block,6)), (block,4), false).final_goal(2, on((block,6)), (block,5), false).final_goal(2, on((block,6)), nothing, false).final_goal(2, on((block,6)), puzzle_room_table, true).

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
[{'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'puzzle_room_door_handle_outer', 'I': 3}, {'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4}, {'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 6}, {'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 7}, {'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 9}, {'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 12}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 13}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 14}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 15}]

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permentantly.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 15 rules into program part base:
sub_goal(2, talos, move(hallway), in(talos), hallway, 1).sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).sub_goal(2, talos, grasp(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), puzzle_room_door_handle_outer, 3).sub_goal(2, talos, actuate(manipulator_arm_2,puzzle_room_door), configuration(puzzle_room_door), open, 4).sub_goal(2, talos, release(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 6).sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 7).sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 8).sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 9).sub_goal(2, talos, move(store_room), in(talos), store_room, 10).sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 12).sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 13).sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 14).sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 15).

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--models=1', '--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'true', 'false', 'false'), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 15, 'sequential', 'false'), range_=None)]

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 551 rules

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003487399999997365s

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='entities', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='instance_module', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('entities', []), ('domain_sorts', []), ('instance_module', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.026402s.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [base]:
Model :: Total atoms = 2385, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006860s with result Satisfiable.

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001AF81B7B220>

[21-09-2021_16-56-42] DEBUG :: ASH Planner Main #1 >> Starting search:
	self
	level
	start_step
	first_sgoals
	last_sgoals
	finalise
	sequential_yield
	detect_interleaving
	generate_search_space
	generate_solution_space
	goal_wise_search_space
	make_observable
	reactive_callback
	solve_signal

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 15, sequential, false). %* None *%

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132999s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014637s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14763559999999742, Incremental time limit = None
Running cumulative time = 0.14763559999999742, Cumulative time limit = 3600
Used memory = (RSS = 238.714844Mb, VMS = 238.210938Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096250s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007669s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10391979999999634, Incremental time limit = None
Running cumulative time = 0.25155539999999377, Cumulative time limit = 3600
Used memory = (RSS = 241.664062Mb, VMS = 241.457031Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099445s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008217s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10766210000000243, Incremental time limit = None
Running cumulative time = 0.3592174999999962, Cumulative time limit = 3600
Used memory = (RSS = 243.191406Mb, VMS = 242.722656Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102781s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013362s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11614319999999978, Incremental time limit = None
Running cumulative time = 0.475360699999996, Cumulative time limit = 3600
Used memory = (RSS = 246.804688Mb, VMS = 246.484375Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.144174s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017348s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16152220000000383, Incremental time limit = None
Running cumulative time = 0.6368828999999998, Cumulative time limit = 3600
Used memory = (RSS = 251.082031Mb, VMS = 251.015625Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123696s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016932s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14062809999999715, Incremental time limit = None
Running cumulative time = 0.777510999999997, Cumulative time limit = 3600
Used memory = (RSS = 256.886719Mb, VMS = 257.585938Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.113460s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020208s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13366750000000138, Incremental time limit = None
Running cumulative time = 0.9111784999999983, Cumulative time limit = 3600
Used memory = (RSS = 260.941406Mb, VMS = 261.226562Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.113230s.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019144s with result Unsatisfiable.

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13237419999999744, Incremental time limit = None
Running cumulative time = 1.0435526999999958, Cumulative time limit = 3600
Used memory = (RSS = 267.710938Mb, VMS = 269.445312Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116856s.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018650s with result Unsatisfiable.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1355058999999983, Incremental time limit = None
Running cumulative time = 1.179058599999994, Cumulative time limit = 3600
Used memory = (RSS = 271.332031Mb, VMS = 272.644531Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133264s.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019656s with result Unsatisfiable.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15291990000000055, Incremental time limit = None
Running cumulative time = 1.3319784999999946, Cumulative time limit = 3600
Used memory = (RSS = 276.082031Mb, VMS = 276.718750Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141507s.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020220s with result Unsatisfiable.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16172760000000252, Incremental time limit = None
Running cumulative time = 1.4937060999999972, Cumulative time limit = 3600
Used memory = (RSS = 287.734375Mb, VMS = 291.027344Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.118818s.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019749s with result Unsatisfiable.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13856719999999711, Incremental time limit = None
Running cumulative time = 1.6322732999999943, Cumulative time limit = 3600
Used memory = (RSS = 289.023438Mb, VMS = 291.261719Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122315s.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022523s with result Unsatisfiable.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14483840000000114, Incremental time limit = None
Running cumulative time = 1.7771116999999954, Cumulative time limit = 3600
Used memory = (RSS = 293.417969Mb, VMS = 295.519531Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147640s.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022393s with result Unsatisfiable.

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1700330000000001, Incremental time limit = None
Running cumulative time = 1.9471446999999955, Cumulative time limit = 3600
Used memory = (RSS = 297.812500Mb, VMS = 299.214844Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124233s.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.025934s with result Unsatisfiable.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15016699999999616, Incremental time limit = None
Running cumulative time = 2.0973116999999917, Cumulative time limit = 3600
Used memory = (RSS = 306.441406Mb, VMS = 313.402344Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.136671s.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030872s with result Unsatisfiable.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16754330000000195, Incremental time limit = None
Running cumulative time = 2.2648549999999936, Cumulative time limit = 3600
Used memory = (RSS = 311.691406Mb, VMS = 317.390625Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.127913s.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.031919s with result Unsatisfiable.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1598317999999992, Incremental time limit = None
Running cumulative time = 2.424686799999993, Cumulative time limit = 3600
Used memory = (RSS = 314.550781Mb, VMS = 319.597656Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.127187s.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054646s with result Unsatisfiable.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1818322999999964, Incremental time limit = None
Running cumulative time = 2.606519099999989, Cumulative time limit = 3600
Used memory = (RSS = 318.804688Mb, VMS = 322.593750Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.138225s.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.069262s with result Unsatisfiable.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20748679999999808, Incremental time limit = None
Running cumulative time = 2.8140058999999873, Cumulative time limit = 3600
Used memory = (RSS = 321.910156Mb, VMS = 324.816406Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131520s.

[21-09-2021_16-56-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.111740s with result Unsatisfiable.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24326029999999932, Incremental time limit = None
Running cumulative time = 3.0572661999999866, Cumulative time limit = 3600
Used memory = (RSS = 326.445312Mb, VMS = 328.156250Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.132167s.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.118833s with result Unsatisfiable.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25100030000000473, Incremental time limit = None
Running cumulative time = 3.3082664999999913, Cumulative time limit = 3600
Used memory = (RSS = 335.843750Mb, VMS = 347.093750Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.133417s.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.095931s with result Unsatisfiable.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22934800000000166, Incremental time limit = None
Running cumulative time = 3.537614499999993, Cumulative time limit = 3600
Used memory = (RSS = 337.320312Mb, VMS = 347.332031Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.135303s.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.134824s with result Unsatisfiable.

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.27012719999999746, Incremental time limit = None
Running cumulative time = 3.8077416999999905, Cumulative time limit = 3600
Used memory = (RSS = 341.203125Mb, VMS = 350.492188Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140804s.

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.186496s with result Unsatisfiable.

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3273001999999998, Incremental time limit = None
Running cumulative time = 4.13504189999999, Cumulative time limit = 3600
Used memory = (RSS = 346.550781Mb, VMS = 354.808594Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141790s.

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.234214s with result Unsatisfiable.

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37600420000000057, Incremental time limit = None
Running cumulative time = 4.511046099999991, Cumulative time limit = 3600
Used memory = (RSS = 351.277344Mb, VMS = 358.453125Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146383s.

[21-09-2021_16-56-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [incremental 26]:
Model :: Total atoms = 13761, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[21-09-2021_16-56-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.265753s with result Satisfiable.

[21-09-2021_16-56-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4121356999999968, Incremental time limit = None
Running cumulative time = 4.923181799999988, Cumulative time limit = 3600
Used memory = (RSS = 358.460938Mb, VMS = 364.648438Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.322050s, Solving = 1.601132s, Total = 4.923182s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 26
Final Model :: Total atoms = 13761, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[21-09-2021_16-56-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.132999s, Solving = 0.014637s, Total = 0.147636s, Memory = (RSS = 238.714844Mb, VMS = 238.210938Mb)
2 : Statistics :: Grounding = 0.096250s, Solving = 0.007669s, Total = 0.103920s, Memory = (RSS = 241.664062Mb, VMS = 241.457031Mb)
3 : Statistics :: Grounding = 0.099445s, Solving = 0.008217s, Total = 0.107662s, Memory = (RSS = 243.191406Mb, VMS = 242.722656Mb)
4 : Statistics :: Grounding = 0.102781s, Solving = 0.013362s, Total = 0.116143s, Memory = (RSS = 246.804688Mb, VMS = 246.484375Mb)
5 : Statistics :: Grounding = 0.144174s, Solving = 0.017348s, Total = 0.161522s, Memory = (RSS = 251.082031Mb, VMS = 251.015625Mb)
6 : Statistics :: Grounding = 0.123696s, Solving = 0.016932s, Total = 0.140628s, Memory = (RSS = 256.886719Mb, VMS = 257.585938Mb)
7 : Statistics :: Grounding = 0.113460s, Solving = 0.020208s, Total = 0.133668s, Memory = (RSS = 260.941406Mb, VMS = 261.226562Mb)
8 : Statistics :: Grounding = 0.113230s, Solving = 0.019144s, Total = 0.132374s, Memory = (RSS = 267.710938Mb, VMS = 269.445312Mb)
9 : Statistics :: Grounding = 0.116856s, Solving = 0.018650s, Total = 0.135506s, Memory = (RSS = 271.332031Mb, VMS = 272.644531Mb)
10 : Statistics :: Grounding = 0.133264s, Solving = 0.019656s, Total = 0.152920s, Memory = (RSS = 276.082031Mb, VMS = 276.718750Mb)
11 : Statistics :: Grounding = 0.141507s, Solving = 0.020220s, Total = 0.161728s, Memory = (RSS = 287.734375Mb, VMS = 291.027344Mb)
12 : Statistics :: Grounding = 0.118818s, Solving = 0.019749s, Total = 0.138567s, Memory = (RSS = 289.023438Mb, VMS = 291.261719Mb)
13 : Statistics :: Grounding = 0.122315s, Solving = 0.022523s, Total = 0.144838s, Memory = (RSS = 293.417969Mb, VMS = 295.519531Mb)
14 : Statistics :: Grounding = 0.147640s, Solving = 0.022393s, Total = 0.170033s, Memory = (RSS = 297.812500Mb, VMS = 299.214844Mb)
15 : Statistics :: Grounding = 0.124233s, Solving = 0.025934s, Total = 0.150167s, Memory = (RSS = 306.441406Mb, VMS = 313.402344Mb)
16 : Statistics :: Grounding = 0.136671s, Solving = 0.030872s, Total = 0.167543s, Memory = (RSS = 311.691406Mb, VMS = 317.390625Mb)
17 : Statistics :: Grounding = 0.127913s, Solving = 0.031919s, Total = 0.159832s, Memory = (RSS = 314.550781Mb, VMS = 319.597656Mb)
18 : Statistics :: Grounding = 0.127187s, Solving = 0.054646s, Total = 0.181832s, Memory = (RSS = 318.804688Mb, VMS = 322.593750Mb)
19 : Statistics :: Grounding = 0.138225s, Solving = 0.069262s, Total = 0.207487s, Memory = (RSS = 321.910156Mb, VMS = 324.816406Mb)
20 : Statistics :: Grounding = 0.131520s, Solving = 0.111740s, Total = 0.243260s, Memory = (RSS = 326.445312Mb, VMS = 328.156250Mb)
21 : Statistics :: Grounding = 0.132167s, Solving = 0.118833s, Total = 0.251000s, Memory = (RSS = 335.843750Mb, VMS = 347.093750Mb)
22 : Statistics :: Grounding = 0.133417s, Solving = 0.095931s, Total = 0.229348s, Memory = (RSS = 337.320312Mb, VMS = 347.332031Mb)
23 : Statistics :: Grounding = 0.135303s, Solving = 0.134824s, Total = 0.270127s, Memory = (RSS = 341.203125Mb, VMS = 350.492188Mb)
24 : Statistics :: Grounding = 0.140804s, Solving = 0.186496s, Total = 0.327300s, Memory = (RSS = 346.550781Mb, VMS = 354.808594Mb)
25 : Statistics :: Grounding = 0.141790s, Solving = 0.234214s, Total = 0.376004s, Memory = (RSS = 351.277344Mb, VMS = 358.453125Mb)
26 : Statistics :: Grounding = 0.146383s, Solving = 0.265753s, Total = 0.412136s, Memory = (RSS = 358.460938Mb, VMS = 364.648438Mb)

[21-09-2021_16-56-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.923182s because Stop condition reached.

[21-09-2021_16-56-48] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[21-09-2021_16-56-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[21-09-2021_16-56-48] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 15, Last requested goal index = 15 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[21-09-2021_16-56-48] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.322050s, Solving = 1.601132s, Total = 4.923182s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 26
Model :: Total atoms = 13761, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[21-09-2021_16-56-48] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31}}

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26}}

[21-09-2021_16-56-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 26 :: Actions = 26                 
                ----------------------------                

Step 0:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
Step 1:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,puzzle_room_door) -> [4] configuration(puzzle_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> [5] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,store_room_door) -> [7] configuration(store_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        talos : release(manipulator_arm_2,store_room_door_handle_outer) -> [8] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [9] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        talos : move(store_room) -> [10] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,retracted) -> [13] configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 24:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [14] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 25:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [15] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))

[21-09-2021_16-56-53] INFO :: ASH Planner Main #1 >> Online planning increment 1 finished.

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 31 : Achieved sgoals 10 : Unachieved sgoals 10
Level 1 : Total sgoals 0 : Achieved sgoals 15 : Unachieved sgoals 16

[21-09-2021_16-56-53] INFO :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[21-09-2021_16-56-53] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1:
Divided plan : Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88
Division points [total=1] : [(Index = 15, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-53] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88
Division points [total=1] : [(Index = 15, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-53] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level =  2 (par-ref), Length =  31, Actions =  31, Time =  11.128s (Ground =   3.066s, Search =   7.710s, Overhead =  0.352), Expansion = 3.10, Deviation = 2.73, Balance = 0.88
Division points [total=1] : [(Index = 15, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-56-53] DEBUG :: core.Strategies >> Obtained sgoals range = [1-15].

[21-09-2021_16-56-53] DEBUG :: core.Strategies >> Obtained sgoals range = [16-31].

[21-09-2021_16-56-53] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [16-31]

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [16-31], problem number = 2, increment number = 2

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 16)
	('last_sgoals', 31)
	('sequential_yield', False)
	('reactive_callback', <bound method DivisionStrategy.react of <core.Strategies.Basic object at 0x000001AFFA177AE0>>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_minimum_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 26, initial = False, final = False, sgoals = [16-31]

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Minimum search length bound: enabled = False, value = 41

[21-09-2021_16-56-53] INFO :: ASH Planner Main #1 >> Generating monolevel plan : Level 1, Problem type = partial conformance refinement, achievement type = sequential, sgoals range = [16-31], Concurrency = disabled

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Optimisation details:Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Save grounding: requested = True, available = True, chosen = True

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
restart_from(26)

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:
restart_from(26).

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
[{'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 16}, {'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17}, {'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 19}, {'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 20}, {'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 21}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 22}, {'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 23}, {'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 24}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 25}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 26}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 27}, {'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 28}, {'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 29}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 30}, {'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 31}]

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 16 rules into program part base:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 16).sub_goal(2, talos, move(hallway), in(talos), hallway, 17).sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 19).sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 21).sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 22).sub_goal(2, talos, move(hallway), in(talos), hallway, 23).sub_goal(2, talos, move(store_room), in(talos), store_room, 24).sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 25).sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 26).sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 27).sub_goal(2, talos, move(hallway), in(talos), hallway, 28).sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 29).sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 30).sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 31).

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-56-53] INFO :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001AFFD2FC630>

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[21-09-2021_16-56-53] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000001AFFD2FC630> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix(occurs(1, talos, move((starting_room,1)), 1)).
fix(occurs(1, talos, move((hallway,1)), 2)).
fix(occurs(1, talos, move((hallway,2)), 3)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 4)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix(occurs(1, talos, grasp(manipulator_end_2,puzzle_room_door_handle_outer), 6)).
fix(occurs(1, talos, actuate(manipulator_end_2,puzzle_room_door), 7)).
fix(occurs(1, talos, release(manipulator_end_2,puzzle_room_door_handle_outer), 8)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 9)).
fix(occurs(1, talos, move((hallway,1)), 10)).
fix(occurs(1, talos, move((hallway,0)), 11)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix(occurs(1, talos, move((store_room,1)), 18)).
fix(occurs(1, talos, move((store_room,0)), 19)).
fix(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 21)).
fix(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,5))), 22)).
fix(occurs(1, talos, grasp(manipulator_end_1,(block,5)), 23)).
fix(occurs(1, talos, configure(manipulator_limb_1,retracted), 24)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,6))), 25)).
fix(occurs(1, talos, grasp(manipulator_end_2,(block,6)), 26)).
:- not occurs(L, R, A, S), fix(occurs(L, R, A, S)), pl(L).

[21-09-2021_16-56-53] DEBUG :: ASH Planner Main #1 >> Starting search:
	self
	level
	start_step
	first_sgoals
	last_sgoals
	finalise
	sequential_yield
	detect_interleaving
	generate_search_space
	generate_solution_space
	goal_wise_search_space
	make_observable
	reactive_callback
	solve_signal

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 15, sequential, false). %* None *%
#program conformance_module(#inc, 26, 16, 31, sequential, false). %* None *%
#program plan_module(#inc, 25, false, false). %* None *%

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(27), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(27), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177958s.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.074919s with result Unsatisfiable.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.25287640000000167, Incremental time limit = None
Running cumulative time = 5.176058199999989, Cumulative time limit = 3600
Used memory = (RSS = 365.101562Mb, VMS = 370.398438Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(28), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(28), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.124895s.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022106s with result Unsatisfiable.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1470007000000031, Incremental time limit = None
Running cumulative time = 5.323058899999992, Cumulative time limit = 3600
Used memory = (RSS = 366.675781Mb, VMS = 371.957031Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(29), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(29), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129110s.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021878s with result Unsatisfiable.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15098769999999817, Incremental time limit = None
Running cumulative time = 5.4740465999999905, Cumulative time limit = 3600
Used memory = (RSS = 367.484375Mb, VMS = 372.441406Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(30), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(30), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(30), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.149211s.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026962s with result Unsatisfiable.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17617270000000218, Incremental time limit = None
Running cumulative time = 5.650219299999993, Cumulative time limit = 3600
Used memory = (RSS = 368.242188Mb, VMS = 372.554688Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(31), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(31), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(31), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141013s.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033839s with result Unsatisfiable.

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1748514999999955, Incremental time limit = None
Running cumulative time = 5.825070799999988, Cumulative time limit = 3600
Used memory = (RSS = 372.296875Mb, VMS = 375.691406Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(32), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145354s.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028888s with result Unsatisfiable.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1742415999999949, Incremental time limit = None
Running cumulative time = 5.999312399999983, Cumulative time limit = 3600
Used memory = (RSS = 373.273438Mb, VMS = 375.894531Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(33), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(33), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(33), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.189621s.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036998s with result Unsatisfiable.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2266186999999995, Incremental time limit = None
Running cumulative time = 6.225931099999983, Cumulative time limit = 3600
Used memory = (RSS = 385.710938Mb, VMS = 403.101562Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(34), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(34), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(34), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151856s.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030625s with result Unsatisfiable.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1824817000000003, Incremental time limit = None
Running cumulative time = 6.408412799999983, Cumulative time limit = 3600
Used memory = (RSS = 387.308594Mb, VMS = 403.335938Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [35]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(35), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(35), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(35), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.150505s.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033160s with result Unsatisfiable.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [35]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.183664499999999, Incremental time limit = None
Running cumulative time = 6.592077299999982, Cumulative time limit = 3600
Used memory = (RSS = 388.855469Mb, VMS = 403.566406Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [36]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(36), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(36), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(36), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153214s.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036852s with result Unsatisfiable.

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [36]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19006570000000167, Incremental time limit = None
Running cumulative time = 6.782142999999984, Cumulative time limit = 3600
Used memory = (RSS = 390.710938Mb, VMS = 404.328125Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [37]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(37), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(37), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(37), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173612s.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032268s with result Unsatisfiable.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [37]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20587979999999817, Incremental time limit = None
Running cumulative time = 6.988022799999982, Cumulative time limit = 3600
Used memory = (RSS = 394.476562Mb, VMS = 406.730469Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [38]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(38), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168889s.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035866s with result Unsatisfiable.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [38]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2047553000000022, Incremental time limit = None
Running cumulative time = 7.192778099999984, Cumulative time limit = 3600
Used memory = (RSS = 395.953125Mb, VMS = 406.968750Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [39]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('state_module', [Number(39), Number(0)]), ('plan_module', [Number(39), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(39), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(39), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(39), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.162408s.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035192s with result Unsatisfiable.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [39]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19759969999999782, Incremental time limit = None
Running cumulative time = 7.390377799999982, Cumulative time limit = 3600
Used memory = (RSS = 399.148438Mb, VMS = 408.996094Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [40]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('state_module', [Number(40), Number(0)]), ('plan_module', [Number(40), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(40), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.163274s.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036688s with result Unsatisfiable.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [40]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1999614000000065, Incremental time limit = None
Running cumulative time = 7.590339199999988, Cumulative time limit = 3600
Used memory = (RSS = 401.972656Mb, VMS = 410.671875Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [41]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('state_module', [Number(41), Number(0)]), ('plan_module', [Number(41), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(41), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168295s.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035311s with result Unsatisfiable.

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [41]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.20360569999999711, Incremental time limit = None
Running cumulative time = 7.793944899999985, Cumulative time limit = 3600
Used memory = (RSS = 404.507812Mb, VMS = 412.660156Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [42]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('state_module', [Number(42), Number(0)]), ('plan_module', [Number(42), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(42), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.176034s.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045697s with result Unsatisfiable.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [42]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2217301999999961, Incremental time limit = None
Running cumulative time = 8.015675099999982, Cumulative time limit = 3600
Used memory = (RSS = 409.289062Mb, VMS = 416.757812Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [43]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('state_module', [Number(43), Number(0)]), ('plan_module', [Number(43), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(43), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(43), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(43), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178126s.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050997s with result Unsatisfiable.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [43]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2291226999999978, Incremental time limit = None
Running cumulative time = 8.24479779999998, Cumulative time limit = 3600
Used memory = (RSS = 412.550781Mb, VMS = 418.605469Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [44]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('state_module', [Number(44), Number(0)]), ('plan_module', [Number(44), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(44), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(44), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(44), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.176667s.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.066578s with result Unsatisfiable.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [44]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24324420000000657, Incremental time limit = None
Running cumulative time = 8.488041999999986, Cumulative time limit = 3600
Used memory = (RSS = 414.929688Mb, VMS = 420.453125Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [45]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('state_module', [Number(45), Number(0)]), ('plan_module', [Number(45), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(45), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(45), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(45), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.177397s.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061571s with result Unsatisfiable.

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [45]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2389680999999939, Incremental time limit = None
Running cumulative time = 8.72701009999998, Cumulative time limit = 3600
Used memory = (RSS = 417.539062Mb, VMS = 421.652344Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [46]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('state_module', [Number(46), Number(0)]), ('plan_module', [Number(46), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(46), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(46), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(46), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.194791s.

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083895s with result Unsatisfiable.

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [46]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2786861000000087, Incremental time limit = None
Running cumulative time = 9.005696199999988, Cumulative time limit = 3600
Used memory = (RSS = 426.773438Mb, VMS = 453.949219Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [47]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('state_module', [Number(47), Number(0)]), ('plan_module', [Number(47), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(47), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(47), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(47), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.183922s.

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.097642s with result Unsatisfiable.

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [47]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2815644000000006, Incremental time limit = None
Running cumulative time = 9.287260599999989, Cumulative time limit = 3600
Used memory = (RSS = 432.757812Mb, VMS = 458.707031Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [48]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('state_module', [Number(48), Number(0)]), ('plan_module', [Number(48), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(48), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(48), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(48), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.241629s.

[21-09-2021_16-56-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.174305s with result Unsatisfiable.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [48]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4159343999999976, Incremental time limit = None
Running cumulative time = 9.703194999999987, Cumulative time limit = 3600
Used memory = (RSS = 438.230469Mb, VMS = 462.816406Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [49]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('state_module', [Number(49), Number(0)]), ('plan_module', [Number(49), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(49), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(49), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(49), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.197470s.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.144790s with result Unsatisfiable.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [49]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34225959999999844, Incremental time limit = None
Running cumulative time = 10.045454599999985, Cumulative time limit = 3600
Used memory = (RSS = 442.871094Mb, VMS = 466.042969Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [50]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('state_module', [Number(50), Number(0)]), ('plan_module', [Number(50), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(50), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(50), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(50), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.183075s.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.163000s with result Unsatisfiable.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [50]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3460746999999955, Incremental time limit = None
Running cumulative time = 10.39152929999998, Cumulative time limit = 3600
Used memory = (RSS = 444.250000Mb, VMS = 466.281250Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [51]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('state_module', [Number(51), Number(0)]), ('plan_module', [Number(51), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(51), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(51), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(51), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.174802s.

[21-09-2021_16-56-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.345022s with result Unsatisfiable.

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [51]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5198242999999962, Incremental time limit = None
Running cumulative time = 10.911353599999977, Cumulative time limit = 3600
Used memory = (RSS = 448.027344Mb, VMS = 468.851562Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [52]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('state_module', [Number(52), Number(0)]), ('plan_module', [Number(52), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(52), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(52), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(52), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.208330s.

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.460050s with result Unsatisfiable.

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [52]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6683791999999968, Incremental time limit = None
Running cumulative time = 11.579732799999974, Cumulative time limit = 3600
Used memory = (RSS = 452.652344Mb, VMS = 472.523438Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [53]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('state_module', [Number(53), Number(0)]), ('plan_module', [Number(53), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(53), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(53), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(53), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.185091s.

[21-09-2021_16-57-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.621050s with result Unsatisfiable.

[21-09-2021_16-57-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [53]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.806141199999999, Incremental time limit = None
Running cumulative time = 12.385873999999973, Cumulative time limit = 3600
Used memory = (RSS = 460.410156Mb, VMS = 479.664062Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [54]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('state_module', [Number(54), Number(0)]), ('plan_module', [Number(54), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(54), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(54), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(54), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249161s.

[21-09-2021_16-57-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.169458s with result Unsatisfiable.

[21-09-2021_16-57-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [54]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.4186187999999973, Incremental time limit = None
Running cumulative time = 13.80449279999997, Cumulative time limit = 3600
Used memory = (RSS = 463.539062Mb, VMS = 481.199219Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [55]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('state_module', [Number(55), Number(0)]), ('plan_module', [Number(55), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(55), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(55), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(55), Number(25), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.205687s.

[21-09-2021_16-57-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [incremental 55]:
Model :: Total atoms = 25660, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-57-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.305210s with result Satisfiable.

[21-09-2021_16-57-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [55]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.5108968999999988, Incremental time limit = None
Running cumulative time = 15.315389699999969, Cumulative time limit = 3600
Used memory = (RSS = 477.773438Mb, VMS = 494.230469Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.403442s, Solving = 6.911947s, Total = 15.315390s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 55
Final Model :: Total atoms = 25660, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-57-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.132999s, Solving = 0.014637s, Total = 0.147636s, Memory = (RSS = 238.714844Mb, VMS = 238.210938Mb)
2 : Statistics :: Grounding = 0.096250s, Solving = 0.007669s, Total = 0.103920s, Memory = (RSS = 241.664062Mb, VMS = 241.457031Mb)
3 : Statistics :: Grounding = 0.099445s, Solving = 0.008217s, Total = 0.107662s, Memory = (RSS = 243.191406Mb, VMS = 242.722656Mb)
4 : Statistics :: Grounding = 0.102781s, Solving = 0.013362s, Total = 0.116143s, Memory = (RSS = 246.804688Mb, VMS = 246.484375Mb)
5 : Statistics :: Grounding = 0.144174s, Solving = 0.017348s, Total = 0.161522s, Memory = (RSS = 251.082031Mb, VMS = 251.015625Mb)
6 : Statistics :: Grounding = 0.123696s, Solving = 0.016932s, Total = 0.140628s, Memory = (RSS = 256.886719Mb, VMS = 257.585938Mb)
7 : Statistics :: Grounding = 0.113460s, Solving = 0.020208s, Total = 0.133668s, Memory = (RSS = 260.941406Mb, VMS = 261.226562Mb)
8 : Statistics :: Grounding = 0.113230s, Solving = 0.019144s, Total = 0.132374s, Memory = (RSS = 267.710938Mb, VMS = 269.445312Mb)
9 : Statistics :: Grounding = 0.116856s, Solving = 0.018650s, Total = 0.135506s, Memory = (RSS = 271.332031Mb, VMS = 272.644531Mb)
10 : Statistics :: Grounding = 0.133264s, Solving = 0.019656s, Total = 0.152920s, Memory = (RSS = 276.082031Mb, VMS = 276.718750Mb)
11 : Statistics :: Grounding = 0.141507s, Solving = 0.020220s, Total = 0.161728s, Memory = (RSS = 287.734375Mb, VMS = 291.027344Mb)
12 : Statistics :: Grounding = 0.118818s, Solving = 0.019749s, Total = 0.138567s, Memory = (RSS = 289.023438Mb, VMS = 291.261719Mb)
13 : Statistics :: Grounding = 0.122315s, Solving = 0.022523s, Total = 0.144838s, Memory = (RSS = 293.417969Mb, VMS = 295.519531Mb)
14 : Statistics :: Grounding = 0.147640s, Solving = 0.022393s, Total = 0.170033s, Memory = (RSS = 297.812500Mb, VMS = 299.214844Mb)
15 : Statistics :: Grounding = 0.124233s, Solving = 0.025934s, Total = 0.150167s, Memory = (RSS = 306.441406Mb, VMS = 313.402344Mb)
16 : Statistics :: Grounding = 0.136671s, Solving = 0.030872s, Total = 0.167543s, Memory = (RSS = 311.691406Mb, VMS = 317.390625Mb)
17 : Statistics :: Grounding = 0.127913s, Solving = 0.031919s, Total = 0.159832s, Memory = (RSS = 314.550781Mb, VMS = 319.597656Mb)
18 : Statistics :: Grounding = 0.127187s, Solving = 0.054646s, Total = 0.181832s, Memory = (RSS = 318.804688Mb, VMS = 322.593750Mb)
19 : Statistics :: Grounding = 0.138225s, Solving = 0.069262s, Total = 0.207487s, Memory = (RSS = 321.910156Mb, VMS = 324.816406Mb)
20 : Statistics :: Grounding = 0.131520s, Solving = 0.111740s, Total = 0.243260s, Memory = (RSS = 326.445312Mb, VMS = 328.156250Mb)
21 : Statistics :: Grounding = 0.132167s, Solving = 0.118833s, Total = 0.251000s, Memory = (RSS = 335.843750Mb, VMS = 347.093750Mb)
22 : Statistics :: Grounding = 0.133417s, Solving = 0.095931s, Total = 0.229348s, Memory = (RSS = 337.320312Mb, VMS = 347.332031Mb)
23 : Statistics :: Grounding = 0.135303s, Solving = 0.134824s, Total = 0.270127s, Memory = (RSS = 341.203125Mb, VMS = 350.492188Mb)
24 : Statistics :: Grounding = 0.140804s, Solving = 0.186496s, Total = 0.327300s, Memory = (RSS = 346.550781Mb, VMS = 354.808594Mb)
25 : Statistics :: Grounding = 0.141790s, Solving = 0.234214s, Total = 0.376004s, Memory = (RSS = 351.277344Mb, VMS = 358.453125Mb)
26 : Statistics :: Grounding = 0.146383s, Solving = 0.265753s, Total = 0.412136s, Memory = (RSS = 358.460938Mb, VMS = 364.648438Mb)
27 : Statistics :: Grounding = 0.177958s, Solving = 0.074919s, Total = 0.252876s, Memory = (RSS = 365.101562Mb, VMS = 370.398438Mb)
28 : Statistics :: Grounding = 0.124895s, Solving = 0.022106s, Total = 0.147001s, Memory = (RSS = 366.675781Mb, VMS = 371.957031Mb)
29 : Statistics :: Grounding = 0.129110s, Solving = 0.021878s, Total = 0.150988s, Memory = (RSS = 367.484375Mb, VMS = 372.441406Mb)
30 : Statistics :: Grounding = 0.149211s, Solving = 0.026962s, Total = 0.176173s, Memory = (RSS = 368.242188Mb, VMS = 372.554688Mb)
31 : Statistics :: Grounding = 0.141013s, Solving = 0.033839s, Total = 0.174851s, Memory = (RSS = 372.296875Mb, VMS = 375.691406Mb)
32 : Statistics :: Grounding = 0.145354s, Solving = 0.028888s, Total = 0.174242s, Memory = (RSS = 373.273438Mb, VMS = 375.894531Mb)
33 : Statistics :: Grounding = 0.189621s, Solving = 0.036998s, Total = 0.226619s, Memory = (RSS = 385.710938Mb, VMS = 403.101562Mb)
34 : Statistics :: Grounding = 0.151856s, Solving = 0.030625s, Total = 0.182482s, Memory = (RSS = 387.308594Mb, VMS = 403.335938Mb)
35 : Statistics :: Grounding = 0.150505s, Solving = 0.033160s, Total = 0.183664s, Memory = (RSS = 388.855469Mb, VMS = 403.566406Mb)
36 : Statistics :: Grounding = 0.153214s, Solving = 0.036852s, Total = 0.190066s, Memory = (RSS = 390.710938Mb, VMS = 404.328125Mb)
37 : Statistics :: Grounding = 0.173612s, Solving = 0.032268s, Total = 0.205880s, Memory = (RSS = 394.476562Mb, VMS = 406.730469Mb)
38 : Statistics :: Grounding = 0.168889s, Solving = 0.035866s, Total = 0.204755s, Memory = (RSS = 395.953125Mb, VMS = 406.968750Mb)
39 : Statistics :: Grounding = 0.162408s, Solving = 0.035192s, Total = 0.197600s, Memory = (RSS = 399.148438Mb, VMS = 408.996094Mb)
40 : Statistics :: Grounding = 0.163274s, Solving = 0.036688s, Total = 0.199961s, Memory = (RSS = 401.972656Mb, VMS = 410.671875Mb)
41 : Statistics :: Grounding = 0.168295s, Solving = 0.035311s, Total = 0.203606s, Memory = (RSS = 404.507812Mb, VMS = 412.660156Mb)
42 : Statistics :: Grounding = 0.176034s, Solving = 0.045697s, Total = 0.221730s, Memory = (RSS = 409.289062Mb, VMS = 416.757812Mb)
43 : Statistics :: Grounding = 0.178126s, Solving = 0.050997s, Total = 0.229123s, Memory = (RSS = 412.550781Mb, VMS = 418.605469Mb)
44 : Statistics :: Grounding = 0.176667s, Solving = 0.066578s, Total = 0.243244s, Memory = (RSS = 414.929688Mb, VMS = 420.453125Mb)
45 : Statistics :: Grounding = 0.177397s, Solving = 0.061571s, Total = 0.238968s, Memory = (RSS = 417.539062Mb, VMS = 421.652344Mb)
46 : Statistics :: Grounding = 0.194791s, Solving = 0.083895s, Total = 0.278686s, Memory = (RSS = 426.773438Mb, VMS = 453.949219Mb)
47 : Statistics :: Grounding = 0.183922s, Solving = 0.097642s, Total = 0.281564s, Memory = (RSS = 432.757812Mb, VMS = 458.707031Mb)
48 : Statistics :: Grounding = 0.241629s, Solving = 0.174305s, Total = 0.415934s, Memory = (RSS = 438.230469Mb, VMS = 462.816406Mb)
49 : Statistics :: Grounding = 0.197470s, Solving = 0.144790s, Total = 0.342260s, Memory = (RSS = 442.871094Mb, VMS = 466.042969Mb)
50 : Statistics :: Grounding = 0.183075s, Solving = 0.163000s, Total = 0.346075s, Memory = (RSS = 444.250000Mb, VMS = 466.281250Mb)
51 : Statistics :: Grounding = 0.174802s, Solving = 0.345022s, Total = 0.519824s, Memory = (RSS = 448.027344Mb, VMS = 468.851562Mb)
52 : Statistics :: Grounding = 0.208330s, Solving = 0.460050s, Total = 0.668379s, Memory = (RSS = 452.652344Mb, VMS = 472.523438Mb)
53 : Statistics :: Grounding = 0.185091s, Solving = 0.621050s, Total = 0.806141s, Memory = (RSS = 460.410156Mb, VMS = 479.664062Mb)
54 : Statistics :: Grounding = 0.249161s, Solving = 1.169458s, Total = 1.418619s, Memory = (RSS = 463.539062Mb, VMS = 481.199219Mb)
55 : Statistics :: Grounding = 0.205687s, Solving = 1.305210s, Total = 1.510897s, Memory = (RSS = 477.773438Mb, VMS = 494.230469Mb)

[21-09-2021_16-57-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 15.315390s because Stop condition reached.

[21-09-2021_16-57-04] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[21-09-2021_16-57-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[21-09-2021_16-57-04] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 31, Last requested goal index = 31 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[21-09-2021_16-57-04] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.403442s, Solving = 6.911947s, Total = 15.315390s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 55
Model :: Total atoms = 25660, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-57-06] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26}}

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 17, 29: 18, 30: 18, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 24, 41: 24, 42: 25, 43: 25, 44: 26, 45: 26, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 29, 52: 30, 53: 30, 54: 31}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 37, 23: 39, 24: 42, 25: 44, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55}}

[21-09-2021_16-57-09] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 55 :: Actions = 55                 
                ----------------------------                

Step 0:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
Step 1:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,puzzle_room_door) -> [4] configuration(puzzle_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> [5] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,store_room_door) -> [7] configuration(store_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        talos : release(manipulator_arm_2,store_room_door_handle_outer) -> [8] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [9] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        talos : move(store_room) -> [10] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,retracted) -> [13] configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 24:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [14] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 25:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [15] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [16] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 27:
    Current Sub-goals:
        talos : move(hallway) -> [17] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        talos : move(hallway) -> [17] in(talos) = hallway
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [19] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [19] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> [20] on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 35:
    Current Sub-goals:
        talos : release(manipulator_arm_2,(block,6)) -> [21] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [22] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 37:
    Current Sub-goals:
        talos : move(hallway) -> [23] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 38:
    Current Sub-goals:
        talos : move(hallway) -> [23] in(talos) = hallway
    Planned actions:
        talos : move((puzzle_room,0))
Step 39:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,2))
Step 40:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,1))
Step 41:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,0))
Step 42:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [25] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((store_room,1))
Step 43:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [25] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((store_room,0))
Step 44:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [26] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 45:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [26] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 46:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [27] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 47:
    Current Sub-goals:
        talos : move(hallway) -> [28] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        talos : move(hallway) -> [28] in(talos) = hallway
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,2))
Step 52:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [30] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((puzzle_room,0))
Step 53:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [30] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((puzzle_room,1))
Step 54:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,5),(block,6)) -> [31] on((block,5)) = (block,6)
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))

[21-09-2021_16-57-09] INFO :: ASH Planner Main #1 >> Online planning increment 2 finished.

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 31 : Achieved sgoals 10 : Unachieved sgoals 10
Level 1 : Total sgoals 0 : Achieved sgoals 31 : Unachieved sgoals 0

[21-09-2021_16-57-09] INFO :: ASH Planner Main #1 >> Current planning increment level range: [1-2]

[21-09-2021_16-57-09] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2:
Divided plan : Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-09] DEBUG :: core.Strategies >> Getting sgoals range for problem number 2 from scenario:
Divided plan : Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-09] DEBUG :: core.Strategies >> Getting sgoals range for problem number 1 from scenario:
Divided plan : Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-09] DEBUG :: core.Strategies >> Obtained sgoals range = [1-10].

[21-09-2021_16-57-09] DEBUG :: core.Strategies >> Obtained sgoals range = [11-20].

[21-09-2021_16-57-09] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-20]

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-20], problem number = 2, increment number = 3

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 20)
	('sequential_yield', False)
	('reactive_callback', <bound method DivisionStrategy.react of <core.Strategies.Basic object at 0x000001AFFA177AE0>>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_minimum_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 31, initial = False, final = True, sgoals = [11-20]

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Minimum search length bound: enabled = False, value = 40

[21-09-2021_16-57-09] INFO :: ASH Planner Main #1 >> Generating monolevel plan : Level 2, Problem type = partial conformance refinement, achievement type = sequential, sgoals range = [11-20], Concurrency = disabled

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Optimisation details:Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Save grounding: requested = True, available = True, chosen = True

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
restart_from(31)

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:
restart_from(31).

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
[{'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 11}, {'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 12}, {'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 13}, {'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 14}, {'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 15}, {'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 16}, {'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 17}, {'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18}, {'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 19}, {'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 20}]

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:
sub_goal(3, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 11).sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 12).sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 13).sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 14).sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 15).sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 16).sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 17).sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 18).sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19).sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 20).

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-57-09] INFO :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001AF8BA5C6D0>

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[21-09-2021_16-57-09] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000001AF8BA5C6D0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix(occurs(2, talos, move(hallway), 1)).
fix(occurs(2, talos, configure(manipulator_arm_2,extended), 2)).
fix(occurs(2, talos, grasp(manipulator_arm_2,puzzle_room_door_handle_outer), 3)).
fix(occurs(2, talos, actuate(manipulator_arm_2,puzzle_room_door), 4)).
fix(occurs(2, talos, release(manipulator_arm_2,puzzle_room_door_handle_outer), 5)).
fix(occurs(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), 6)).
fix(occurs(2, talos, actuate(manipulator_arm_2,store_room_door), 7)).
fix(occurs(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), 8)).
fix(occurs(2, talos, configure(manipulator_arm_2,retracted), 9)).
fix(occurs(2, talos, move(store_room), 10)).
fix(occurs(2, talos, configure(manipulator_arm_1,extended), 11)).
fix(occurs(2, talos, grasp(manipulator_arm_1,(block,5)), 12)).
fix(occurs(2, talos, configure(manipulator_arm_1,retracted), 13)).
fix(occurs(2, talos, configure(manipulator_arm_2,extended), 14)).
fix(occurs(2, talos, grasp(manipulator_arm_2,(block,6)), 15)).
fix(occurs(2, talos, configure(manipulator_arm_2,retracted), 16)).
fix(occurs(2, talos, move(hallway), 17)).
fix(occurs(2, talos, move(puzzle_room), 18)).
fix(occurs(2, talos, configure(manipulator_arm_2,extended), 19)).
fix(occurs(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), 20)).
fix(occurs(2, talos, release(manipulator_arm_2,(block,6)), 21)).
fix(occurs(2, talos, configure(manipulator_arm_2,retracted), 22)).
fix(occurs(2, talos, move(hallway), 23)).
fix(occurs(2, talos, move(store_room), 24)).
fix(occurs(2, talos, configure(manipulator_arm_2,extended), 25)).
fix(occurs(2, talos, grasp(manipulator_arm_2,(block,4)), 26)).
fix(occurs(2, talos, configure(manipulator_arm_2,retracted), 27)).
fix(occurs(2, talos, move(hallway), 28)).
fix(occurs(2, talos, move(puzzle_room), 29)).
fix(occurs(2, talos, configure(manipulator_arm_1,extended), 30)).
fix(occurs(2, talos, put(manipulator_arm_1,(block,5),(block,6)), 31)).
:- not occurs(L, R, A, S), fix(occurs(L, R, A, S)), pl(L).

[21-09-2021_16-57-09] DEBUG :: ASH Planner Main #1 >> Starting search:
	self
	level
	start_step
	first_sgoals
	last_sgoals
	finalise
	sequential_yield
	detect_interleaving
	generate_search_space
	generate_solution_space
	goal_wise_search_space
	make_observable
	reactive_callback
	solve_signal

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 10, sequential, false). %* None *%
#program conformance_module(#inc, 31, 11, 20, sequential, false). %* None *%
#program plan_module(#inc, 30, false, true). %* None *%

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(32), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(32), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.129453s.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065452s with result Unsatisfiable.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19490480000000332, Incremental time limit = None
Running cumulative time = 10.94043340000001, Cumulative time limit = 3600
Used memory = (RSS = 485.148438Mb, VMS = 500.687500Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(33), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(33), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(33), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095047s.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021931s with result Unsatisfiable.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1169780999999972, Incremental time limit = None
Running cumulative time = 11.057411500000008, Cumulative time limit = 3600
Used memory = (RSS = 485.957031Mb, VMS = 501.414062Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(34), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(34), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(34), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094778s.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020009s with result Unsatisfiable.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11478689999999858, Incremental time limit = None
Running cumulative time = 11.172198400000006, Cumulative time limit = 3600
Used memory = (RSS = 486.636719Mb, VMS = 501.511719Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [35]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(35), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(35), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(35), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097119s.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024185s with result Unsatisfiable.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [35]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12130479999999721, Incremental time limit = None
Running cumulative time = 11.293503200000004, Cumulative time limit = 3600
Used memory = (RSS = 487.503906Mb, VMS = 502.007812Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [36]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(36), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(36), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(36), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.096754s.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020716s with result Unsatisfiable.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [36]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11746959999999262, Incremental time limit = None
Running cumulative time = 11.410972799999996, Cumulative time limit = 3600
Used memory = (RSS = 490.050781Mb, VMS = 503.464844Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [37]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(37), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(37), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(37), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108748s.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023038s with result Unsatisfiable.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [37]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13178620000000052, Incremental time limit = None
Running cumulative time = 11.542758999999997, Cumulative time limit = 3600
Used memory = (RSS = 491.042969Mb, VMS = 503.625000Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [38]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(38), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(38), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116366s.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023387s with result Unsatisfiable.

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [38]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13975310000000718, Incremental time limit = None
Running cumulative time = 11.682512100000004, Cumulative time limit = 3600
Used memory = (RSS = 491.980469Mb, VMS = 504.035156Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [39]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('state_module', [Number(39), Number(0)]), ('plan_module', [Number(39), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(39), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(39), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(39), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106741s.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022495s with result Unsatisfiable.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [39]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1292359999999917, Incremental time limit = None
Running cumulative time = 11.811748099999996, Cumulative time limit = 3600
Used memory = (RSS = 493.074219Mb, VMS = 504.195312Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [40]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('state_module', [Number(40), Number(0)]), ('plan_module', [Number(40), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(40), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(40), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.117136s.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023414s with result Unsatisfiable.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [40]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1405499999999975, Incremental time limit = None
Running cumulative time = 11.952298099999993, Cumulative time limit = 3600
Used memory = (RSS = 495.710938Mb, VMS = 506.046875Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [41]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('state_module', [Number(41), Number(0)]), ('plan_module', [Number(41), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(41), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(41), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120486s.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027631s with result Unsatisfiable.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [41]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14811650000000753, Incremental time limit = None
Running cumulative time = 12.1004146, Cumulative time limit = 3600
Used memory = (RSS = 496.527344Mb, VMS = 506.203125Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [42]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    100

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('state_module', [Number(42), Number(0)]), ('plan_module', [Number(42), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(42), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(42), Number(30), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116726s.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [incremental 42]:
Model :: Total atoms = 17864, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.063557s with result Satisfiable.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [42]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.18028369999999683, Incremental time limit = None
Running cumulative time = 12.280698299999997, Cumulative time limit = 3600
Used memory = (RSS = 508.273438Mb, VMS = 531.500000Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.239955s, Solving = 8.040743s, Total = 12.280698s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 42
Final Model :: Total atoms = 17864, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.084201s, Solving = 0.010832s, Total = 0.095033s, Memory = (RSS = 106.343750Mb, VMS = 100.078125Mb)
2 : Statistics :: Grounding = 0.074409s, Solving = 0.005038s, Total = 0.079446s, Memory = (RSS = 109.414062Mb, VMS = 103.519531Mb)
3 : Statistics :: Grounding = 0.066821s, Solving = 0.005459s, Total = 0.072280s, Memory = (RSS = 110.261719Mb, VMS = 104.093750Mb)
4 : Statistics :: Grounding = 0.068361s, Solving = 0.008626s, Total = 0.076987s, Memory = (RSS = 112.304688Mb, VMS = 105.867188Mb)
5 : Statistics :: Grounding = 0.075176s, Solving = 0.010769s, Total = 0.085945s, Memory = (RSS = 115.816406Mb, VMS = 109.000000Mb)
6 : Statistics :: Grounding = 0.111679s, Solving = 0.014115s, Total = 0.125794s, Memory = (RSS = 120.171875Mb, VMS = 114.187500Mb)
7 : Statistics :: Grounding = 0.076371s, Solving = 0.010758s, Total = 0.087129s, Memory = (RSS = 122.628906Mb, VMS = 115.855469Mb)
8 : Statistics :: Grounding = 0.074115s, Solving = 0.012432s, Total = 0.086547s, Memory = (RSS = 128.953125Mb, VMS = 121.253906Mb)
9 : Statistics :: Grounding = 0.081459s, Solving = 0.011463s, Total = 0.092922s, Memory = (RSS = 130.968750Mb, VMS = 122.355469Mb)
10 : Statistics :: Grounding = 0.082204s, Solving = 0.012788s, Total = 0.094992s, Memory = (RSS = 136.519531Mb, VMS = 129.996094Mb)
11 : Statistics :: Grounding = 0.085312s, Solving = 0.013490s, Total = 0.098802s, Memory = (RSS = 137.804688Mb, VMS = 130.164062Mb)
12 : Statistics :: Grounding = 0.089120s, Solving = 0.024373s, Total = 0.113493s, Memory = (RSS = 139.554688Mb, VMS = 131.140625Mb)
13 : Statistics :: Grounding = 0.087561s, Solving = 0.013898s, Total = 0.101459s, Memory = (RSS = 141.476562Mb, VMS = 132.527344Mb)
14 : Statistics :: Grounding = 0.102990s, Solving = 0.017258s, Total = 0.120248s, Memory = (RSS = 150.085938Mb, VMS = 143.531250Mb)
15 : Statistics :: Grounding = 0.087077s, Solving = 0.018619s, Total = 0.105697s, Memory = (RSS = 150.804688Mb, VMS = 143.699219Mb)
16 : Statistics :: Grounding = 0.102011s, Solving = 0.031072s, Total = 0.133083s, Memory = (RSS = 152.839844Mb, VMS = 145.417969Mb)
17 : Statistics :: Grounding = 0.089675s, Solving = 0.045577s, Total = 0.135252s, Memory = (RSS = 155.984375Mb, VMS = 148.199219Mb)
18 : Statistics :: Grounding = 0.104225s, Solving = 0.071011s, Total = 0.175236s, Memory = (RSS = 159.031250Mb, VMS = 150.511719Mb)
19 : Statistics :: Grounding = 0.097377s, Solving = 0.075775s, Total = 0.173151s, Memory = (RSS = 165.246094Mb, VMS = 162.914062Mb)
20 : Statistics :: Grounding = 0.105685s, Solving = 0.127035s, Total = 0.232720s, Memory = (RSS = 168.152344Mb, VMS = 165.210938Mb)
21 : Statistics :: Grounding = 0.098141s, Solving = 0.201606s, Total = 0.299747s, Memory = (RSS = 171.273438Mb, VMS = 167.683594Mb)
22 : Statistics :: Grounding = 0.102055s, Solving = 0.262650s, Total = 0.364705s, Memory = (RSS = 174.632812Mb, VMS = 170.175781Mb)
23 : Statistics :: Grounding = 0.100197s, Solving = 0.542399s, Total = 0.642596s, Memory = (RSS = 179.710938Mb, VMS = 174.656250Mb)
24 : Statistics :: Grounding = 0.102351s, Solving = 0.478622s, Total = 0.580974s, Memory = (RSS = 185.476562Mb, VMS = 179.855469Mb)
25 : Statistics :: Grounding = 0.116643s, Solving = 0.570664s, Total = 0.687306s, Memory = (RSS = 189.738281Mb, VMS = 183.460938Mb)
26 : Statistics :: Grounding = 0.125002s, Solving = 0.920126s, Total = 1.045128s, Memory = (RSS = 196.937500Mb, VMS = 190.019531Mb)
27 : Statistics :: Grounding = 0.126107s, Solving = 0.973729s, Total = 1.099836s, Memory = (RSS = 202.894531Mb, VMS = 195.582031Mb)
28 : Statistics :: Grounding = 0.136444s, Solving = 0.930798s, Total = 1.067242s, Memory = (RSS = 212.699219Mb, VMS = 214.160156Mb)
29 : Statistics :: Grounding = 0.124848s, Solving = 0.905243s, Total = 1.030091s, Memory = (RSS = 216.699219Mb, VMS = 217.476562Mb)
30 : Statistics :: Grounding = 0.112701s, Solving = 0.765206s, Total = 0.877907s, Memory = (RSS = 220.160156Mb, VMS = 219.988281Mb)
31 : Statistics :: Grounding = 0.150283s, Solving = 0.613499s, Total = 0.763783s, Memory = (RSS = 227.511719Mb, VMS = 226.921875Mb)
32 : Statistics :: Grounding = 0.129453s, Solving = 0.065452s, Total = 0.194905s, Memory = (RSS = 485.148438Mb, VMS = 500.687500Mb)
33 : Statistics :: Grounding = 0.095047s, Solving = 0.021931s, Total = 0.116978s, Memory = (RSS = 485.957031Mb, VMS = 501.414062Mb)
34 : Statistics :: Grounding = 0.094778s, Solving = 0.020009s, Total = 0.114787s, Memory = (RSS = 486.636719Mb, VMS = 501.511719Mb)
35 : Statistics :: Grounding = 0.097119s, Solving = 0.024185s, Total = 0.121305s, Memory = (RSS = 487.503906Mb, VMS = 502.007812Mb)
36 : Statistics :: Grounding = 0.096754s, Solving = 0.020716s, Total = 0.117470s, Memory = (RSS = 490.050781Mb, VMS = 503.464844Mb)
37 : Statistics :: Grounding = 0.108748s, Solving = 0.023038s, Total = 0.131786s, Memory = (RSS = 491.042969Mb, VMS = 503.625000Mb)
38 : Statistics :: Grounding = 0.116366s, Solving = 0.023387s, Total = 0.139753s, Memory = (RSS = 491.980469Mb, VMS = 504.035156Mb)
39 : Statistics :: Grounding = 0.106741s, Solving = 0.022495s, Total = 0.129236s, Memory = (RSS = 493.074219Mb, VMS = 504.195312Mb)
40 : Statistics :: Grounding = 0.117136s, Solving = 0.023414s, Total = 0.140550s, Memory = (RSS = 495.710938Mb, VMS = 506.046875Mb)
41 : Statistics :: Grounding = 0.120486s, Solving = 0.027631s, Total = 0.148117s, Memory = (RSS = 496.527344Mb, VMS = 506.203125Mb)
42 : Statistics :: Grounding = 0.116726s, Solving = 0.063557s, Total = 0.180284s, Memory = (RSS = 508.273438Mb, VMS = 531.500000Mb)

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 12.280698s because Stop condition reached.

[21-09-2021_16-57-11] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 2.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-57-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[21-09-2021_16-57-11] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[21-09-2021_16-57-11] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.239955s, Solving = 8.040743s, Total = 12.280698s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 42
Model :: Total atoms = 17864, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[21-09-2021_16-57-12] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 17, 29: 18, 30: 18, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 24, 41: 24, 42: 25, 43: 25, 44: 26, 45: 26, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 29, 52: 30, 53: 30, 54: 31}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 37, 23: 39, 24: 42, 25: 44, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55}}

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 12, 33: 13, 34: 14, 35: 14, 36: 15, 37: 16, 38: 17, 39: 18, 40: 19, 41: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 17, 29: 18, 30: 18, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 24, 41: 24, 42: 25, 43: 25, 44: 26, 45: 26, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 29, 52: 30, 53: 30, 54: 31}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31, 11: 32, 12: 33, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 37, 23: 39, 24: 42, 25: 44, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55}}

[21-09-2021_16-57-14] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 42 :: Actions = 42                 
                ----------------------------                

Step 0:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
Step 1:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 5:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 8:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        talos : move(store_room) -> [1] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 13:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 14:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [2] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 15:
    Current Sub-goals:
        talos : move(puzzle_room) -> [3] in(talos) = puzzle_room
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 16:
    Current Sub-goals:
        talos : move(puzzle_room) -> [3] in(talos) = puzzle_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 17:
    Current Sub-goals:
        talos : move(puzzle_room) -> [3] in(talos) = puzzle_room
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> [4] on((block,6)) = puzzle_room_table
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> [4] on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 20:
    Current Sub-goals:
        talos : release(manipulator_arm_2,(block,6)) -> [5] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        talos : move(store_room) -> [6] in(talos) = store_room
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 22:
    Current Sub-goals:
        talos : move(store_room) -> [6] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 23:
    Current Sub-goals:
        talos : move(store_room) -> [6] in(talos) = store_room
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [7] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : move(store_room)
Step 25:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [8] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 26:
    Current Sub-goals:
        talos : move(puzzle_room) -> [9] in(talos) = puzzle_room
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 27:
    Current Sub-goals:
        talos : move(puzzle_room) -> [9] in(talos) = puzzle_room
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 28:
    Current Sub-goals:
        talos : move(puzzle_room) -> [9] in(talos) = puzzle_room
    Planned actions:
        talos : move(hallway)
Step 29:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,5),(block,6)) -> [10] on((block,5)) = (block,6)
    Planned actions:
        talos : move(puzzle_room)
Step 30:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,5),(block,6)) -> [10] on((block,5)) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 31:
    Current Sub-goals:
        talos : release(manipulator_arm_1,(block,5)) -> [11] grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 32:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,3)) -> [12] grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 33:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> [13] on((block,3)) = puzzle_room_table
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 34:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,4),(block,5)) -> [14] on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 35:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,4),(block,5)) -> [14] on((block,4)) = (block,5)
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 36:
    Current Sub-goals:
        talos : release(manipulator_arm_1,(block,3)) -> [15] grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 37:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,2)) -> [16] grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 38:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,2),(block,3)) -> [17] on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 39:
    Current Sub-goals:
        talos : release(manipulator_arm_1,(block,2)) -> [18] grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 40:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,1)) -> [19] grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 41:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,1),(block,2)) -> [20] on((block,1)) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 42:
    Current Sub-goals:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=31, plan_length=42, step_range=range(31, 43)

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=55 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-57-14] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29

[21-09-2021_16-57-14] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=11, start_step=31, blend=Blend(left=0, right=0)

[21-09-2021_16-57-14] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=5, large_group_size=6

[21-09-2021_16-57-14] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=36, blend=Blend(left=0, right=0), inherited=False, reactive=None)]

[21-09-2021_16-57-14] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29
Division points [total=1] : [(Index = 36, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-14] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1:
Divided plan : Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29
Division points [total=1] : [(Index = 36, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29
Division points [total=1] : [(Index = 36, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-14] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29
Division points [total=1] : [(Index = 36, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-14] DEBUG :: core.Strategies >> Obtained sgoals range = [37-42].

[21-09-2021_16-57-14] DEBUG :: core.Strategies >> Obtained sgoals range = [32-36].

[21-09-2021_16-57-14] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [32-36]

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [32-36], problem number = 3, increment number = 3

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 32)
	('last_sgoals', 36)
	('sequential_yield', False)
	('reactive_callback', <bound method DivisionStrategy.react of <core.Strategies.Basic object at 0x000001AFFA177AE0>>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_minimum_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 55, initial = False, final = False, sgoals = [32-36]

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Minimum search length bound: enabled = False, value = 59

[21-09-2021_16-57-14] INFO :: ASH Planner Main #1 >> Generating monolevel plan : Level 1, Problem type = partial conformance refinement, achievement type = sequential, sgoals range = [32-36], Concurrency = disabled

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Optimisation details:Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Save grounding: requested = True, available = True, chosen = True

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
restart_from(55)

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:
restart_from(55).

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
[{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 32}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 33}, {'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 34}, {'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 35}, {'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 36}]

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:
sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 32).sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 33).sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 34).sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 35).sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 36).

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-57-14] INFO :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001AF8BA67EA0>

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[21-09-2021_16-57-14] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000001AF8BA67EA0> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix(occurs(1, talos, move((starting_room,1)), 1)).
fix(occurs(1, talos, move((hallway,1)), 2)).
fix(occurs(1, talos, move((hallway,2)), 3)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 4)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix(occurs(1, talos, grasp(manipulator_end_2,puzzle_room_door_handle_outer), 6)).
fix(occurs(1, talos, actuate(manipulator_end_2,puzzle_room_door), 7)).
fix(occurs(1, talos, release(manipulator_end_2,puzzle_room_door_handle_outer), 8)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 9)).
fix(occurs(1, talos, move((hallway,1)), 10)).
fix(occurs(1, talos, move((hallway,0)), 11)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix(occurs(1, talos, move((store_room,1)), 18)).
fix(occurs(1, talos, move((store_room,0)), 19)).
fix(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 21)).
fix(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,5))), 22)).
fix(occurs(1, talos, grasp(manipulator_end_1,(block,5)), 23)).
fix(occurs(1, talos, configure(manipulator_limb_1,retracted), 24)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,6))), 25)).
fix(occurs(1, talos, grasp(manipulator_end_2,(block,6)), 26)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 27)).
fix(occurs(1, talos, move((store_room,1)), 28)).
fix(occurs(1, talos, move((hallway,0)), 29)).
fix(occurs(1, talos, move((hallway,1)), 30)).
fix(occurs(1, talos, move((hallway,2)), 31)).
fix(occurs(1, talos, move((puzzle_room,0)), 32)).
fix(occurs(1, talos, move((puzzle_room,1)), 33)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 34)).
fix(occurs(1, talos, put(manipulator_end_2,(block,6),puzzle_room_table_right), 35)).
fix(occurs(1, talos, release(manipulator_end_2,(block,6)), 36)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 37)).
fix(occurs(1, talos, move((puzzle_room,0)), 38)).
fix(occurs(1, talos, move((hallway,2)), 39)).
fix(occurs(1, talos, move((hallway,1)), 40)).
fix(occurs(1, talos, move((hallway,0)), 41)).
fix(occurs(1, talos, move((store_room,1)), 42)).
fix(occurs(1, talos, move((store_room,0)), 43)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 44)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,4))), 45)).
fix(occurs(1, talos, grasp(manipulator_end_2,(block,4)), 46)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 47)).
fix(occurs(1, talos, move((store_room,1)), 48)).
fix(occurs(1, talos, move((hallway,0)), 49)).
fix(occurs(1, talos, move((hallway,1)), 50)).
fix(occurs(1, talos, move((hallway,2)), 51)).
fix(occurs(1, talos, move((puzzle_room,0)), 52)).
fix(occurs(1, talos, move((puzzle_room,1)), 53)).
fix(occurs(1, talos, configure(manipulator_limb_1,extended), 54)).
fix(occurs(1, talos, put(manipulator_end_1,(block,5),(block,6)), 55)).
:- not occurs(L, R, A, S), fix(occurs(L, R, A, S)), pl(L).

[21-09-2021_16-57-14] DEBUG :: ASH Planner Main #1 >> Starting search:
	self
	level
	start_step
	first_sgoals
	last_sgoals
	finalise
	sequential_yield
	detect_interleaving
	generate_search_space
	generate_solution_space
	goal_wise_search_space
	make_observable
	reactive_callback
	solve_signal

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 15, sequential, false). %* None *%
#program conformance_module(#inc, 26, 16, 31, sequential, false). %* None *%
#program plan_module(#inc, 25, false, false). %* None *%
#program conformance_module(#inc, 55, 32, 36, sequential, false). %* None *%
#program plan_module(#inc, 54, false, false). %* None *%

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [56]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('state_module', [Number(56), Number(0)]), ('plan_module', [Number(56), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(56), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(56), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(56), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(56), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(56), Number(54), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.249636s.

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.098723s with result Unsatisfiable.

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [56]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.348358300000001, Incremental time limit = None
Running cumulative time = 15.66374799999997, Cumulative time limit = 3600
Used memory = (RSS = 419.171875Mb, VMS = 434.683594Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [57]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('state_module', [Number(57), Number(0)]), ('plan_module', [Number(57), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(57), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(57), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(57), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(57), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(57), Number(54), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.180095s.

[21-09-2021_16-57-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040581s with result Unsatisfiable.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [57]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22067590000001047, Incremental time limit = None
Running cumulative time = 15.88442389999998, Cumulative time limit = 3600
Used memory = (RSS = 425.906250Mb, VMS = 443.363281Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [58]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('state_module', [Number(58), Number(0)]), ('plan_module', [Number(58), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(58), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(58), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(58), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(58), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(58), Number(54), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.182009s.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043506s with result Unsatisfiable.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [58]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22551589999999777, Incremental time limit = None
Running cumulative time = 16.109939799999978, Cumulative time limit = 3600
Used memory = (RSS = 432.171875Mb, VMS = 450.171875Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [59]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('state_module', [Number(59), Number(0)]), ('plan_module', [Number(59), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(59), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(59), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(59), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(59), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(59), Number(54), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.178644s.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053146s with result Unsatisfiable.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [59]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23178959999999904, Incremental time limit = None
Running cumulative time = 16.341729399999977, Cumulative time limit = 3600
Used memory = (RSS = 434.644531Mb, VMS = 452.015625Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [60]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('state_module', [Number(60), Number(0)]), ('plan_module', [Number(60), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(60), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(60), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(60), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(60), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(60), Number(54), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.174559s.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048669s with result Unsatisfiable.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [60]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2232278999999977, Incremental time limit = None
Running cumulative time = 16.564957299999975, Cumulative time limit = 3600
Used memory = (RSS = 435.789062Mb, VMS = 451.101562Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [61]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('state_module', [Number(61), Number(0)]), ('plan_module', [Number(61), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(61), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(61), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(61), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(61), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(61), Number(54), Function('false', [], True), Function('false', [], True)])]

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.183052s.

[21-09-2021_16-57-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [incremental 61]:
Model :: Total atoms = 28178, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[21-09-2021_16-57-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.121283s with result Satisfiable.

[21-09-2021_16-57-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [61]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3043352999999982, Incremental time limit = None
Running cumulative time = 16.869292599999973, Cumulative time limit = 3600
Used memory = (RSS = 442.726562Mb, VMS = 455.910156Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.551438s, Solving = 7.317854s, Total = 16.869293s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 61
Final Model :: Total atoms = 28178, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[21-09-2021_16-57-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.132999s, Solving = 0.014637s, Total = 0.147636s, Memory = (RSS = 238.714844Mb, VMS = 238.210938Mb)
2 : Statistics :: Grounding = 0.096250s, Solving = 0.007669s, Total = 0.103920s, Memory = (RSS = 241.664062Mb, VMS = 241.457031Mb)
3 : Statistics :: Grounding = 0.099445s, Solving = 0.008217s, Total = 0.107662s, Memory = (RSS = 243.191406Mb, VMS = 242.722656Mb)
4 : Statistics :: Grounding = 0.102781s, Solving = 0.013362s, Total = 0.116143s, Memory = (RSS = 246.804688Mb, VMS = 246.484375Mb)
5 : Statistics :: Grounding = 0.144174s, Solving = 0.017348s, Total = 0.161522s, Memory = (RSS = 251.082031Mb, VMS = 251.015625Mb)
6 : Statistics :: Grounding = 0.123696s, Solving = 0.016932s, Total = 0.140628s, Memory = (RSS = 256.886719Mb, VMS = 257.585938Mb)
7 : Statistics :: Grounding = 0.113460s, Solving = 0.020208s, Total = 0.133668s, Memory = (RSS = 260.941406Mb, VMS = 261.226562Mb)
8 : Statistics :: Grounding = 0.113230s, Solving = 0.019144s, Total = 0.132374s, Memory = (RSS = 267.710938Mb, VMS = 269.445312Mb)
9 : Statistics :: Grounding = 0.116856s, Solving = 0.018650s, Total = 0.135506s, Memory = (RSS = 271.332031Mb, VMS = 272.644531Mb)
10 : Statistics :: Grounding = 0.133264s, Solving = 0.019656s, Total = 0.152920s, Memory = (RSS = 276.082031Mb, VMS = 276.718750Mb)
11 : Statistics :: Grounding = 0.141507s, Solving = 0.020220s, Total = 0.161728s, Memory = (RSS = 287.734375Mb, VMS = 291.027344Mb)
12 : Statistics :: Grounding = 0.118818s, Solving = 0.019749s, Total = 0.138567s, Memory = (RSS = 289.023438Mb, VMS = 291.261719Mb)
13 : Statistics :: Grounding = 0.122315s, Solving = 0.022523s, Total = 0.144838s, Memory = (RSS = 293.417969Mb, VMS = 295.519531Mb)
14 : Statistics :: Grounding = 0.147640s, Solving = 0.022393s, Total = 0.170033s, Memory = (RSS = 297.812500Mb, VMS = 299.214844Mb)
15 : Statistics :: Grounding = 0.124233s, Solving = 0.025934s, Total = 0.150167s, Memory = (RSS = 306.441406Mb, VMS = 313.402344Mb)
16 : Statistics :: Grounding = 0.136671s, Solving = 0.030872s, Total = 0.167543s, Memory = (RSS = 311.691406Mb, VMS = 317.390625Mb)
17 : Statistics :: Grounding = 0.127913s, Solving = 0.031919s, Total = 0.159832s, Memory = (RSS = 314.550781Mb, VMS = 319.597656Mb)
18 : Statistics :: Grounding = 0.127187s, Solving = 0.054646s, Total = 0.181832s, Memory = (RSS = 318.804688Mb, VMS = 322.593750Mb)
19 : Statistics :: Grounding = 0.138225s, Solving = 0.069262s, Total = 0.207487s, Memory = (RSS = 321.910156Mb, VMS = 324.816406Mb)
20 : Statistics :: Grounding = 0.131520s, Solving = 0.111740s, Total = 0.243260s, Memory = (RSS = 326.445312Mb, VMS = 328.156250Mb)
21 : Statistics :: Grounding = 0.132167s, Solving = 0.118833s, Total = 0.251000s, Memory = (RSS = 335.843750Mb, VMS = 347.093750Mb)
22 : Statistics :: Grounding = 0.133417s, Solving = 0.095931s, Total = 0.229348s, Memory = (RSS = 337.320312Mb, VMS = 347.332031Mb)
23 : Statistics :: Grounding = 0.135303s, Solving = 0.134824s, Total = 0.270127s, Memory = (RSS = 341.203125Mb, VMS = 350.492188Mb)
24 : Statistics :: Grounding = 0.140804s, Solving = 0.186496s, Total = 0.327300s, Memory = (RSS = 346.550781Mb, VMS = 354.808594Mb)
25 : Statistics :: Grounding = 0.141790s, Solving = 0.234214s, Total = 0.376004s, Memory = (RSS = 351.277344Mb, VMS = 358.453125Mb)
26 : Statistics :: Grounding = 0.146383s, Solving = 0.265753s, Total = 0.412136s, Memory = (RSS = 358.460938Mb, VMS = 364.648438Mb)
27 : Statistics :: Grounding = 0.177958s, Solving = 0.074919s, Total = 0.252876s, Memory = (RSS = 365.101562Mb, VMS = 370.398438Mb)
28 : Statistics :: Grounding = 0.124895s, Solving = 0.022106s, Total = 0.147001s, Memory = (RSS = 366.675781Mb, VMS = 371.957031Mb)
29 : Statistics :: Grounding = 0.129110s, Solving = 0.021878s, Total = 0.150988s, Memory = (RSS = 367.484375Mb, VMS = 372.441406Mb)
30 : Statistics :: Grounding = 0.149211s, Solving = 0.026962s, Total = 0.176173s, Memory = (RSS = 368.242188Mb, VMS = 372.554688Mb)
31 : Statistics :: Grounding = 0.141013s, Solving = 0.033839s, Total = 0.174851s, Memory = (RSS = 372.296875Mb, VMS = 375.691406Mb)
32 : Statistics :: Grounding = 0.145354s, Solving = 0.028888s, Total = 0.174242s, Memory = (RSS = 373.273438Mb, VMS = 375.894531Mb)
33 : Statistics :: Grounding = 0.189621s, Solving = 0.036998s, Total = 0.226619s, Memory = (RSS = 385.710938Mb, VMS = 403.101562Mb)
34 : Statistics :: Grounding = 0.151856s, Solving = 0.030625s, Total = 0.182482s, Memory = (RSS = 387.308594Mb, VMS = 403.335938Mb)
35 : Statistics :: Grounding = 0.150505s, Solving = 0.033160s, Total = 0.183664s, Memory = (RSS = 388.855469Mb, VMS = 403.566406Mb)
36 : Statistics :: Grounding = 0.153214s, Solving = 0.036852s, Total = 0.190066s, Memory = (RSS = 390.710938Mb, VMS = 404.328125Mb)
37 : Statistics :: Grounding = 0.173612s, Solving = 0.032268s, Total = 0.205880s, Memory = (RSS = 394.476562Mb, VMS = 406.730469Mb)
38 : Statistics :: Grounding = 0.168889s, Solving = 0.035866s, Total = 0.204755s, Memory = (RSS = 395.953125Mb, VMS = 406.968750Mb)
39 : Statistics :: Grounding = 0.162408s, Solving = 0.035192s, Total = 0.197600s, Memory = (RSS = 399.148438Mb, VMS = 408.996094Mb)
40 : Statistics :: Grounding = 0.163274s, Solving = 0.036688s, Total = 0.199961s, Memory = (RSS = 401.972656Mb, VMS = 410.671875Mb)
41 : Statistics :: Grounding = 0.168295s, Solving = 0.035311s, Total = 0.203606s, Memory = (RSS = 404.507812Mb, VMS = 412.660156Mb)
42 : Statistics :: Grounding = 0.176034s, Solving = 0.045697s, Total = 0.221730s, Memory = (RSS = 409.289062Mb, VMS = 416.757812Mb)
43 : Statistics :: Grounding = 0.178126s, Solving = 0.050997s, Total = 0.229123s, Memory = (RSS = 412.550781Mb, VMS = 418.605469Mb)
44 : Statistics :: Grounding = 0.176667s, Solving = 0.066578s, Total = 0.243244s, Memory = (RSS = 414.929688Mb, VMS = 420.453125Mb)
45 : Statistics :: Grounding = 0.177397s, Solving = 0.061571s, Total = 0.238968s, Memory = (RSS = 417.539062Mb, VMS = 421.652344Mb)
46 : Statistics :: Grounding = 0.194791s, Solving = 0.083895s, Total = 0.278686s, Memory = (RSS = 426.773438Mb, VMS = 453.949219Mb)
47 : Statistics :: Grounding = 0.183922s, Solving = 0.097642s, Total = 0.281564s, Memory = (RSS = 432.757812Mb, VMS = 458.707031Mb)
48 : Statistics :: Grounding = 0.241629s, Solving = 0.174305s, Total = 0.415934s, Memory = (RSS = 438.230469Mb, VMS = 462.816406Mb)
49 : Statistics :: Grounding = 0.197470s, Solving = 0.144790s, Total = 0.342260s, Memory = (RSS = 442.871094Mb, VMS = 466.042969Mb)
50 : Statistics :: Grounding = 0.183075s, Solving = 0.163000s, Total = 0.346075s, Memory = (RSS = 444.250000Mb, VMS = 466.281250Mb)
51 : Statistics :: Grounding = 0.174802s, Solving = 0.345022s, Total = 0.519824s, Memory = (RSS = 448.027344Mb, VMS = 468.851562Mb)
52 : Statistics :: Grounding = 0.208330s, Solving = 0.460050s, Total = 0.668379s, Memory = (RSS = 452.652344Mb, VMS = 472.523438Mb)
53 : Statistics :: Grounding = 0.185091s, Solving = 0.621050s, Total = 0.806141s, Memory = (RSS = 460.410156Mb, VMS = 479.664062Mb)
54 : Statistics :: Grounding = 0.249161s, Solving = 1.169458s, Total = 1.418619s, Memory = (RSS = 463.539062Mb, VMS = 481.199219Mb)
55 : Statistics :: Grounding = 0.205687s, Solving = 1.305210s, Total = 1.510897s, Memory = (RSS = 477.773438Mb, VMS = 494.230469Mb)
56 : Statistics :: Grounding = 0.249636s, Solving = 0.098723s, Total = 0.348358s, Memory = (RSS = 419.171875Mb, VMS = 434.683594Mb)
57 : Statistics :: Grounding = 0.180095s, Solving = 0.040581s, Total = 0.220676s, Memory = (RSS = 425.906250Mb, VMS = 443.363281Mb)
58 : Statistics :: Grounding = 0.182009s, Solving = 0.043506s, Total = 0.225516s, Memory = (RSS = 432.171875Mb, VMS = 450.171875Mb)
59 : Statistics :: Grounding = 0.178644s, Solving = 0.053146s, Total = 0.231790s, Memory = (RSS = 434.644531Mb, VMS = 452.015625Mb)
60 : Statistics :: Grounding = 0.174559s, Solving = 0.048669s, Total = 0.223228s, Memory = (RSS = 435.789062Mb, VMS = 451.101562Mb)
61 : Statistics :: Grounding = 0.183052s, Solving = 0.121283s, Total = 0.304335s, Memory = (RSS = 442.726562Mb, VMS = 455.910156Mb)

[21-09-2021_16-57-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 16.869293s because Stop condition reached.

[21-09-2021_16-57-16] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[21-09-2021_16-57-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[21-09-2021_16-57-16] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[21-09-2021_16-57-16] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.551438s, Solving = 7.317854s, Total = 16.869293s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 61
Model :: Total atoms = 28178, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[21-09-2021_16-57-17] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 12, 33: 13, 34: 14, 35: 14, 36: 15, 37: 16, 38: 17, 39: 18, 40: 19, 41: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 17, 29: 18, 30: 18, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 24, 41: 24, 42: 25, 43: 25, 44: 26, 45: 26, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 29, 52: 30, 53: 30, 54: 31}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31, 11: 32, 12: 33, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 37, 23: 39, 24: 42, 25: 44, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55}}

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 12, 33: 13, 34: 14, 35: 14, 36: 15, 37: 16, 38: 17, 39: 18, 40: 19, 41: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 17, 29: 18, 30: 18, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 24, 41: 24, 42: 25, 43: 25, 44: 26, 45: 26, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 29, 52: 30, 53: 30, 54: 31, 55: 32, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31, 11: 32, 12: 33, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 37, 23: 39, 24: 42, 25: 44, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55, 32: 56, 33: 58, 34: 59, 35: 60, 36: 61}}

[21-09-2021_16-57-19] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 61 :: Actions = 61                 
                ----------------------------                

Step 0:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
Step 1:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,puzzle_room_door) -> [4] configuration(puzzle_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> [5] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,store_room_door) -> [7] configuration(store_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        talos : release(manipulator_arm_2,store_room_door_handle_outer) -> [8] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [9] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        talos : move(store_room) -> [10] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,retracted) -> [13] configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 24:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [14] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 25:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [15] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [16] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 27:
    Current Sub-goals:
        talos : move(hallway) -> [17] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        talos : move(hallway) -> [17] in(talos) = hallway
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [19] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [19] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> [20] on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 35:
    Current Sub-goals:
        talos : release(manipulator_arm_2,(block,6)) -> [21] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [22] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 37:
    Current Sub-goals:
        talos : move(hallway) -> [23] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 38:
    Current Sub-goals:
        talos : move(hallway) -> [23] in(talos) = hallway
    Planned actions:
        talos : move((puzzle_room,0))
Step 39:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,2))
Step 40:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,1))
Step 41:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,0))
Step 42:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [25] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((store_room,1))
Step 43:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [25] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((store_room,0))
Step 44:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [26] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 45:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [26] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 46:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [27] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 47:
    Current Sub-goals:
        talos : move(hallway) -> [28] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        talos : move(hallway) -> [28] in(talos) = hallway
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,2))
Step 52:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [30] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((puzzle_room,0))
Step 53:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [30] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((puzzle_room,1))
Step 54:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,5),(block,6)) -> [31] on((block,5)) = (block,6)
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        talos : release(manipulator_arm_1,(block,5)) -> [32] grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 56:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,3)) -> [33] grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 57:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,3)) -> [33] grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 58:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> [34] on((block,3)) = puzzle_room_table
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 59:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [35] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 60:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,4),(block,5)) -> [36] on((block,4)) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 61:
    Current Sub-goals:
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))

[21-09-2021_16-57-19] INFO :: ASH Planner Main #1 >> Online planning increment 3 finished.

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Current refinement diagram progress:
Level 3 : Total sgoals 20 : Achieved sgoals 0 : Unachieved sgoals 0
Level 2 : Total sgoals 42 : Achieved sgoals 20 : Unachieved sgoals 0
Level 1 : Total sgoals 0 : Achieved sgoals 36 : Unachieved sgoals 6

[21-09-2021_16-57-19] INFO :: ASH Planner Main #1 >> Current planning increment level range: [1-1]

[21-09-2021_16-57-19] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1:
Divided plan : Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29
Division points [total=1] : [(Index = 36, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 4 from scenario:
Divided plan : Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29
Division points [total=1] : [(Index = 36, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-19] DEBUG :: core.Strategies >> Getting sgoals range for problem number 3 from scenario:
Divided plan : Level =  2 (par-ref), Length =  11, Actions =  11, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 1.10, Deviation = 0.32, Balance = 0.29
Division points [total=1] : [(Index = 36, Blend = (Left = 0, Right = 0))]

[21-09-2021_16-57-19] DEBUG :: core.Strategies >> Obtained sgoals range = [32-36].

[21-09-2021_16-57-19] DEBUG :: core.Strategies >> Obtained sgoals range = [37-42].

[21-09-2021_16-57-19] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-42]

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-42], problem number = 4, increment number = 4

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 42)
	('sequential_yield', False)
	('reactive_callback', <bound method DivisionStrategy.react of <core.Strategies.Basic object at 0x000001AFFA177AE0>>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_minimum_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('goal_wise_search_space', False)
	('problem_space_limit', 0)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Problem type obtained: start step = 61, initial = False, final = True, sgoals = [37-42]

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Minimum search length bound: enabled = False, value = 66

[21-09-2021_16-57-19] INFO :: ASH Planner Main #1 >> Generating monolevel plan : Level 1, Problem type = partial conformance refinement, achievement type = sequential, sgoals range = [37-42], Concurrency = disabled

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Optimisation details:Action minimisation = False
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = False
Final goal intermediate achievement ordering preferences = False

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Save grounding: requested = True, available = True, chosen = True

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
restart_from(61)

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:
restart_from(61).

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
[{'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 37}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 38}, {'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 39}, {'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 40}, {'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 41}, {'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 42}]

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 37).sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 38).sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 39).sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 40).sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 41).sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 42).

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[21-09-2021_16-57-19] INFO :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001AFFD2FE770>

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[21-09-2021_16-57-19] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x000001AFFD2FE770> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix(occurs(1, talos, move((starting_room,1)), 1)).
fix(occurs(1, talos, move((hallway,1)), 2)).
fix(occurs(1, talos, move((hallway,2)), 3)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 4)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix(occurs(1, talos, grasp(manipulator_end_2,puzzle_room_door_handle_outer), 6)).
fix(occurs(1, talos, actuate(manipulator_end_2,puzzle_room_door), 7)).
fix(occurs(1, talos, release(manipulator_end_2,puzzle_room_door_handle_outer), 8)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 9)).
fix(occurs(1, talos, move((hallway,1)), 10)).
fix(occurs(1, talos, move((hallway,0)), 11)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix(occurs(1, talos, move((store_room,1)), 18)).
fix(occurs(1, talos, move((store_room,0)), 19)).
fix(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 21)).
fix(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,5))), 22)).
fix(occurs(1, talos, grasp(manipulator_end_1,(block,5)), 23)).
fix(occurs(1, talos, configure(manipulator_limb_1,retracted), 24)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,6))), 25)).
fix(occurs(1, talos, grasp(manipulator_end_2,(block,6)), 26)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 27)).
fix(occurs(1, talos, move((store_room,1)), 28)).
fix(occurs(1, talos, move((hallway,0)), 29)).
fix(occurs(1, talos, move((hallway,1)), 30)).
fix(occurs(1, talos, move((hallway,2)), 31)).
fix(occurs(1, talos, move((puzzle_room,0)), 32)).
fix(occurs(1, talos, move((puzzle_room,1)), 33)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 34)).
fix(occurs(1, talos, put(manipulator_end_2,(block,6),puzzle_room_table_right), 35)).
fix(occurs(1, talos, release(manipulator_end_2,(block,6)), 36)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 37)).
fix(occurs(1, talos, move((puzzle_room,0)), 38)).
fix(occurs(1, talos, move((hallway,2)), 39)).
fix(occurs(1, talos, move((hallway,1)), 40)).
fix(occurs(1, talos, move((hallway,0)), 41)).
fix(occurs(1, talos, move((store_room,1)), 42)).
fix(occurs(1, talos, move((store_room,0)), 43)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 44)).
fix(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,4))), 45)).
fix(occurs(1, talos, grasp(manipulator_end_2,(block,4)), 46)).
fix(occurs(1, talos, configure(manipulator_limb_2,retracted), 47)).
fix(occurs(1, talos, move((store_room,1)), 48)).
fix(occurs(1, talos, move((hallway,0)), 49)).
fix(occurs(1, talos, move((hallway,1)), 50)).
fix(occurs(1, talos, move((hallway,2)), 51)).
fix(occurs(1, talos, move((puzzle_room,0)), 52)).
fix(occurs(1, talos, move((puzzle_room,1)), 53)).
fix(occurs(1, talos, configure(manipulator_limb_1,extended), 54)).
fix(occurs(1, talos, put(manipulator_end_1,(block,5),(block,6)), 55)).
fix(occurs(1, talos, release(manipulator_end_1,(block,5)), 56)).
fix(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 57)).
fix(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 58)).
fix(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 59)).
fix(occurs(1, talos, configure(manipulator_limb_2,extended), 60)).
fix(occurs(1, talos, put(manipulator_end_2,(block,4),(block,5)), 61)).
:- not occurs(L, R, A, S), fix(occurs(L, R, A, S)), pl(L).

[21-09-2021_16-57-19] DEBUG :: ASH Planner Main #1 >> Starting search:
	self
	level
	start_step
	first_sgoals
	last_sgoals
	finalise
	sequential_yield
	detect_interleaving
	generate_search_space
	generate_solution_space
	goal_wise_search_space
	make_observable
	reactive_callback
	solve_signal

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, true, false, false). %* None *%
#program conformance_module(#inc, 0, 1, 15, sequential, false). %* None *%
#program conformance_module(#inc, 26, 16, 31, sequential, false). %* None *%
#program plan_module(#inc, 25, false, false). %* None *%
#program conformance_module(#inc, 55, 32, 36, sequential, false). %* None *%
#program plan_module(#inc, 54, false, false). %* None *%
#program conformance_module(#inc, 61, 37, 42, sequential, false). %* None *%
#program plan_module(#inc, 60, false, true). %* None *%

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [62]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('state_module', [Number(62), Number(0)]), ('plan_module', [Number(62), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(62), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(62), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(62), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(62), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(62), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(62), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(62), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.225827s.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.056752s with result Unsatisfiable.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [62]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28257900000000546, Incremental time limit = None
Running cumulative time = 17.15187159999998, Cumulative time limit = 3600
Used memory = (RSS = 451.261719Mb, VMS = 463.300781Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [63]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('state_module', [Number(63), Number(0)]), ('plan_module', [Number(63), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(63), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(63), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(63), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(63), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(63), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(63), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(63), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.229076s.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054518s with result Unsatisfiable.

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [63]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2835939999999937, Incremental time limit = None
Running cumulative time = 17.435465599999972, Cumulative time limit = 3600
Used memory = (RSS = 452.757812Mb, VMS = 465.140625Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [64]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('state_module', [Number(64), Number(0)]), ('plan_module', [Number(64), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(64), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(64), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(64), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(64), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(64), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(64), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(64), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.200212s.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049158s with result Unsatisfiable.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [64]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.24936960000000852, Incremental time limit = None
Running cumulative time = 17.68483519999998, Cumulative time limit = 3600
Used memory = (RSS = 451.542969Mb, VMS = 464.468750Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [65]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('state_module', [Number(65), Number(0)]), ('plan_module', [Number(65), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(65), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(65), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(65), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(65), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(65), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(65), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(65), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.209885s.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051681s with result Unsatisfiable.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [65]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2615654999999961, Incremental time limit = None
Running cumulative time = 17.946400699999977, Cumulative time limit = 3600
Used memory = (RSS = 454.960938Mb, VMS = 466.621094Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [66]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('state_module', [Number(66), Number(0)]), ('plan_module', [Number(66), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(66), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(66), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(66), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(66), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(66), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(66), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(66), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.209790s.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052125s with result Unsatisfiable.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [66]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2619147000000055, Incremental time limit = None
Running cumulative time = 18.208315399999982, Cumulative time limit = 3600
Used memory = (RSS = 458.003906Mb, VMS = 468.386719Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [67]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('state_module', [Number(67), Number(0)]), ('plan_module', [Number(67), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(67), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(67), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(67), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(67), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(67), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(67), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(67), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.211684s.

[21-09-2021_16-57-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047881s with result Unsatisfiable.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [67]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2595655000000079, Incremental time limit = None
Running cumulative time = 18.46788089999999, Cumulative time limit = 3600
Used memory = (RSS = 458.882812Mb, VMS = 468.250000Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [68]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('state_module', [Number(68), Number(0)]), ('plan_module', [Number(68), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(68), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(68), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(68), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(68), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(68), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(68), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(68), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.223629s.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051853s with result Unsatisfiable.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [68]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.275482199999999, Incremental time limit = None
Running cumulative time = 18.74336309999999, Cumulative time limit = 3600
Used memory = (RSS = 464.246094Mb, VMS = 471.421875Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [69]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =   None : Maximum =    150

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('state_module', [Number(69), Number(0)]), ('plan_module', [Number(69), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(69), Number(0), Number(1), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('conformance_module', [Number(69), Number(26), Number(16), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(69), Number(25), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(69), Number(55), Number(32), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(69), Number(54), Function('false', [], True), Function('false', [], True)]), ('conformance_module', [Number(69), Number(61), Number(37), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('plan_module', [Number(69), Number(60), Function('false', [], True), Function('true', [], True)])]

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218211s.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Model found for solve stage [incremental 69]:
Model :: Total atoms = 31704, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.163251s with result Satisfiable.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [69]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3814617000000027, Incremental time limit = None
Running cumulative time = 19.124824799999992, Cumulative time limit = 3600
Used memory = (RSS = 472.019531Mb, VMS = 477.765625Mb), Total system virtual memory = 17117147136b

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found a model, current answer:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.279752s, Solving = 7.845073s, Total = 19.124825s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 69
Final Model :: Total atoms = 31704, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.132999s, Solving = 0.014637s, Total = 0.147636s, Memory = (RSS = 238.714844Mb, VMS = 238.210938Mb)
2 : Statistics :: Grounding = 0.096250s, Solving = 0.007669s, Total = 0.103920s, Memory = (RSS = 241.664062Mb, VMS = 241.457031Mb)
3 : Statistics :: Grounding = 0.099445s, Solving = 0.008217s, Total = 0.107662s, Memory = (RSS = 243.191406Mb, VMS = 242.722656Mb)
4 : Statistics :: Grounding = 0.102781s, Solving = 0.013362s, Total = 0.116143s, Memory = (RSS = 246.804688Mb, VMS = 246.484375Mb)
5 : Statistics :: Grounding = 0.144174s, Solving = 0.017348s, Total = 0.161522s, Memory = (RSS = 251.082031Mb, VMS = 251.015625Mb)
6 : Statistics :: Grounding = 0.123696s, Solving = 0.016932s, Total = 0.140628s, Memory = (RSS = 256.886719Mb, VMS = 257.585938Mb)
7 : Statistics :: Grounding = 0.113460s, Solving = 0.020208s, Total = 0.133668s, Memory = (RSS = 260.941406Mb, VMS = 261.226562Mb)
8 : Statistics :: Grounding = 0.113230s, Solving = 0.019144s, Total = 0.132374s, Memory = (RSS = 267.710938Mb, VMS = 269.445312Mb)
9 : Statistics :: Grounding = 0.116856s, Solving = 0.018650s, Total = 0.135506s, Memory = (RSS = 271.332031Mb, VMS = 272.644531Mb)
10 : Statistics :: Grounding = 0.133264s, Solving = 0.019656s, Total = 0.152920s, Memory = (RSS = 276.082031Mb, VMS = 276.718750Mb)
11 : Statistics :: Grounding = 0.141507s, Solving = 0.020220s, Total = 0.161728s, Memory = (RSS = 287.734375Mb, VMS = 291.027344Mb)
12 : Statistics :: Grounding = 0.118818s, Solving = 0.019749s, Total = 0.138567s, Memory = (RSS = 289.023438Mb, VMS = 291.261719Mb)
13 : Statistics :: Grounding = 0.122315s, Solving = 0.022523s, Total = 0.144838s, Memory = (RSS = 293.417969Mb, VMS = 295.519531Mb)
14 : Statistics :: Grounding = 0.147640s, Solving = 0.022393s, Total = 0.170033s, Memory = (RSS = 297.812500Mb, VMS = 299.214844Mb)
15 : Statistics :: Grounding = 0.124233s, Solving = 0.025934s, Total = 0.150167s, Memory = (RSS = 306.441406Mb, VMS = 313.402344Mb)
16 : Statistics :: Grounding = 0.136671s, Solving = 0.030872s, Total = 0.167543s, Memory = (RSS = 311.691406Mb, VMS = 317.390625Mb)
17 : Statistics :: Grounding = 0.127913s, Solving = 0.031919s, Total = 0.159832s, Memory = (RSS = 314.550781Mb, VMS = 319.597656Mb)
18 : Statistics :: Grounding = 0.127187s, Solving = 0.054646s, Total = 0.181832s, Memory = (RSS = 318.804688Mb, VMS = 322.593750Mb)
19 : Statistics :: Grounding = 0.138225s, Solving = 0.069262s, Total = 0.207487s, Memory = (RSS = 321.910156Mb, VMS = 324.816406Mb)
20 : Statistics :: Grounding = 0.131520s, Solving = 0.111740s, Total = 0.243260s, Memory = (RSS = 326.445312Mb, VMS = 328.156250Mb)
21 : Statistics :: Grounding = 0.132167s, Solving = 0.118833s, Total = 0.251000s, Memory = (RSS = 335.843750Mb, VMS = 347.093750Mb)
22 : Statistics :: Grounding = 0.133417s, Solving = 0.095931s, Total = 0.229348s, Memory = (RSS = 337.320312Mb, VMS = 347.332031Mb)
23 : Statistics :: Grounding = 0.135303s, Solving = 0.134824s, Total = 0.270127s, Memory = (RSS = 341.203125Mb, VMS = 350.492188Mb)
24 : Statistics :: Grounding = 0.140804s, Solving = 0.186496s, Total = 0.327300s, Memory = (RSS = 346.550781Mb, VMS = 354.808594Mb)
25 : Statistics :: Grounding = 0.141790s, Solving = 0.234214s, Total = 0.376004s, Memory = (RSS = 351.277344Mb, VMS = 358.453125Mb)
26 : Statistics :: Grounding = 0.146383s, Solving = 0.265753s, Total = 0.412136s, Memory = (RSS = 358.460938Mb, VMS = 364.648438Mb)
27 : Statistics :: Grounding = 0.177958s, Solving = 0.074919s, Total = 0.252876s, Memory = (RSS = 365.101562Mb, VMS = 370.398438Mb)
28 : Statistics :: Grounding = 0.124895s, Solving = 0.022106s, Total = 0.147001s, Memory = (RSS = 366.675781Mb, VMS = 371.957031Mb)
29 : Statistics :: Grounding = 0.129110s, Solving = 0.021878s, Total = 0.150988s, Memory = (RSS = 367.484375Mb, VMS = 372.441406Mb)
30 : Statistics :: Grounding = 0.149211s, Solving = 0.026962s, Total = 0.176173s, Memory = (RSS = 368.242188Mb, VMS = 372.554688Mb)
31 : Statistics :: Grounding = 0.141013s, Solving = 0.033839s, Total = 0.174851s, Memory = (RSS = 372.296875Mb, VMS = 375.691406Mb)
32 : Statistics :: Grounding = 0.145354s, Solving = 0.028888s, Total = 0.174242s, Memory = (RSS = 373.273438Mb, VMS = 375.894531Mb)
33 : Statistics :: Grounding = 0.189621s, Solving = 0.036998s, Total = 0.226619s, Memory = (RSS = 385.710938Mb, VMS = 403.101562Mb)
34 : Statistics :: Grounding = 0.151856s, Solving = 0.030625s, Total = 0.182482s, Memory = (RSS = 387.308594Mb, VMS = 403.335938Mb)
35 : Statistics :: Grounding = 0.150505s, Solving = 0.033160s, Total = 0.183664s, Memory = (RSS = 388.855469Mb, VMS = 403.566406Mb)
36 : Statistics :: Grounding = 0.153214s, Solving = 0.036852s, Total = 0.190066s, Memory = (RSS = 390.710938Mb, VMS = 404.328125Mb)
37 : Statistics :: Grounding = 0.173612s, Solving = 0.032268s, Total = 0.205880s, Memory = (RSS = 394.476562Mb, VMS = 406.730469Mb)
38 : Statistics :: Grounding = 0.168889s, Solving = 0.035866s, Total = 0.204755s, Memory = (RSS = 395.953125Mb, VMS = 406.968750Mb)
39 : Statistics :: Grounding = 0.162408s, Solving = 0.035192s, Total = 0.197600s, Memory = (RSS = 399.148438Mb, VMS = 408.996094Mb)
40 : Statistics :: Grounding = 0.163274s, Solving = 0.036688s, Total = 0.199961s, Memory = (RSS = 401.972656Mb, VMS = 410.671875Mb)
41 : Statistics :: Grounding = 0.168295s, Solving = 0.035311s, Total = 0.203606s, Memory = (RSS = 404.507812Mb, VMS = 412.660156Mb)
42 : Statistics :: Grounding = 0.176034s, Solving = 0.045697s, Total = 0.221730s, Memory = (RSS = 409.289062Mb, VMS = 416.757812Mb)
43 : Statistics :: Grounding = 0.178126s, Solving = 0.050997s, Total = 0.229123s, Memory = (RSS = 412.550781Mb, VMS = 418.605469Mb)
44 : Statistics :: Grounding = 0.176667s, Solving = 0.066578s, Total = 0.243244s, Memory = (RSS = 414.929688Mb, VMS = 420.453125Mb)
45 : Statistics :: Grounding = 0.177397s, Solving = 0.061571s, Total = 0.238968s, Memory = (RSS = 417.539062Mb, VMS = 421.652344Mb)
46 : Statistics :: Grounding = 0.194791s, Solving = 0.083895s, Total = 0.278686s, Memory = (RSS = 426.773438Mb, VMS = 453.949219Mb)
47 : Statistics :: Grounding = 0.183922s, Solving = 0.097642s, Total = 0.281564s, Memory = (RSS = 432.757812Mb, VMS = 458.707031Mb)
48 : Statistics :: Grounding = 0.241629s, Solving = 0.174305s, Total = 0.415934s, Memory = (RSS = 438.230469Mb, VMS = 462.816406Mb)
49 : Statistics :: Grounding = 0.197470s, Solving = 0.144790s, Total = 0.342260s, Memory = (RSS = 442.871094Mb, VMS = 466.042969Mb)
50 : Statistics :: Grounding = 0.183075s, Solving = 0.163000s, Total = 0.346075s, Memory = (RSS = 444.250000Mb, VMS = 466.281250Mb)
51 : Statistics :: Grounding = 0.174802s, Solving = 0.345022s, Total = 0.519824s, Memory = (RSS = 448.027344Mb, VMS = 468.851562Mb)
52 : Statistics :: Grounding = 0.208330s, Solving = 0.460050s, Total = 0.668379s, Memory = (RSS = 452.652344Mb, VMS = 472.523438Mb)
53 : Statistics :: Grounding = 0.185091s, Solving = 0.621050s, Total = 0.806141s, Memory = (RSS = 460.410156Mb, VMS = 479.664062Mb)
54 : Statistics :: Grounding = 0.249161s, Solving = 1.169458s, Total = 1.418619s, Memory = (RSS = 463.539062Mb, VMS = 481.199219Mb)
55 : Statistics :: Grounding = 0.205687s, Solving = 1.305210s, Total = 1.510897s, Memory = (RSS = 477.773438Mb, VMS = 494.230469Mb)
56 : Statistics :: Grounding = 0.249636s, Solving = 0.098723s, Total = 0.348358s, Memory = (RSS = 419.171875Mb, VMS = 434.683594Mb)
57 : Statistics :: Grounding = 0.180095s, Solving = 0.040581s, Total = 0.220676s, Memory = (RSS = 425.906250Mb, VMS = 443.363281Mb)
58 : Statistics :: Grounding = 0.182009s, Solving = 0.043506s, Total = 0.225516s, Memory = (RSS = 432.171875Mb, VMS = 450.171875Mb)
59 : Statistics :: Grounding = 0.178644s, Solving = 0.053146s, Total = 0.231790s, Memory = (RSS = 434.644531Mb, VMS = 452.015625Mb)
60 : Statistics :: Grounding = 0.174559s, Solving = 0.048669s, Total = 0.223228s, Memory = (RSS = 435.789062Mb, VMS = 451.101562Mb)
61 : Statistics :: Grounding = 0.183052s, Solving = 0.121283s, Total = 0.304335s, Memory = (RSS = 442.726562Mb, VMS = 455.910156Mb)
62 : Statistics :: Grounding = 0.225827s, Solving = 0.056752s, Total = 0.282579s, Memory = (RSS = 451.261719Mb, VMS = 463.300781Mb)
63 : Statistics :: Grounding = 0.229076s, Solving = 0.054518s, Total = 0.283594s, Memory = (RSS = 452.757812Mb, VMS = 465.140625Mb)
64 : Statistics :: Grounding = 0.200212s, Solving = 0.049158s, Total = 0.249370s, Memory = (RSS = 451.542969Mb, VMS = 464.468750Mb)
65 : Statistics :: Grounding = 0.209885s, Solving = 0.051681s, Total = 0.261565s, Memory = (RSS = 454.960938Mb, VMS = 466.621094Mb)
66 : Statistics :: Grounding = 0.209790s, Solving = 0.052125s, Total = 0.261915s, Memory = (RSS = 458.003906Mb, VMS = 468.386719Mb)
67 : Statistics :: Grounding = 0.211684s, Solving = 0.047881s, Total = 0.259566s, Memory = (RSS = 458.882812Mb, VMS = 468.250000Mb)
68 : Statistics :: Grounding = 0.223629s, Solving = 0.051853s, Total = 0.275482s, Memory = (RSS = 464.246094Mb, VMS = 471.421875Mb)
69 : Statistics :: Grounding = 0.218211s, Solving = 0.163251s, Total = 0.381462s, Memory = (RSS = 472.019531Mb, VMS = 477.765625Mb)

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 19.124825s because Stop condition reached.

[21-09-2021_16-57-21] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 1.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = None
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[21-09-2021_16-57-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[21-09-2021_16-57-21] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 42, Last requested goal index = 42 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[21-09-2021_16-57-21] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.279752s, Solving = 7.845073s, Total = 19.124825s, Memory = (RSS = 0.000000Mb, VMS = 0.000000Mb)), Calls = 69
Model :: Total atoms = 31704, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[21-09-2021_16-57-23] DEBUG :: ASH Planner Main #1 >> Previous conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 12, 33: 13, 34: 14, 35: 14, 36: 15, 37: 16, 38: 17, 39: 18, 40: 19, 41: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 17, 29: 18, 30: 18, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 24, 41: 24, 42: 25, 43: 25, 44: 26, 45: 26, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 29, 52: 30, 53: 30, 54: 31, 55: 32, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31, 11: 32, 12: 33, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 37, 23: 39, 24: 42, 25: 44, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55, 32: 56, 33: 58, 34: 59, 35: 60, 36: 61}}

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Updated conformance mapping:
{2: {0: 1, 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 2, 12: 2, 13: 2, 14: 2, 15: 3, 16: 3, 17: 3, 18: 4, 19: 4, 20: 5, 21: 6, 22: 6, 23: 6, 24: 7, 25: 8, 26: 9, 27: 9, 28: 9, 29: 10, 30: 10, 31: 11, 32: 12, 33: 13, 34: 14, 35: 14, 36: 15, 37: 16, 38: 17, 39: 18, 40: 19, 41: 20}, 1: {0: 1, 1: 1, 2: 2, 3: 2, 4: 3, 5: 3, 6: 4, 7: 5, 8: 6, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 7, 15: 8, 16: 9, 17: 10, 18: 11, 19: 11, 20: 12, 21: 12, 22: 12, 23: 13, 24: 14, 25: 15, 26: 16, 27: 17, 28: 17, 29: 18, 30: 18, 31: 18, 32: 19, 33: 19, 34: 20, 35: 21, 36: 22, 37: 23, 38: 23, 39: 24, 40: 24, 41: 24, 42: 25, 43: 25, 44: 26, 45: 26, 46: 27, 47: 28, 48: 28, 49: 29, 50: 29, 51: 29, 52: 30, 53: 30, 54: 31, 55: 32, 56: 33, 57: 33, 58: 34, 59: 35, 60: 36, 61: 37, 62: 38, 63: 38, 64: 39, 65: 40, 66: 41, 67: 41, 68: 42}}
{2: {1: 10, 2: 15, 3: 18, 4: 20, 5: 21, 6: 24, 7: 25, 8: 26, 9: 29, 10: 31, 11: 32, 12: 33, 13: 34, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}, 1: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 18, 11: 20, 12: 23, 13: 24, 14: 25, 15: 26, 16: 27, 17: 29, 18: 32, 19: 34, 20: 35, 21: 36, 22: 37, 23: 39, 24: 42, 25: 44, 26: 46, 27: 47, 28: 49, 29: 52, 30: 54, 31: 55, 32: 56, 33: 58, 34: 59, 35: 60, 36: 61, 37: 62, 38: 64, 39: 65, 40: 66, 41: 68, 42: 69}}

[21-09-2021_16-57-25] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 69 :: Actions = 69                 
                ----------------------------                

Step 0:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
Step 1:
    Current Sub-goals:
        talos : move(hallway) -> [1] in(talos) = hallway
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [2] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 5:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> [3] grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,puzzle_room_door) -> [4] configuration(puzzle_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> [5] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 8:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 10:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> [6] grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        talos : actuate(manipulator_arm_2,store_room_door) -> [7] configuration(store_room_door) = open
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        talos : release(manipulator_arm_2,store_room_door_handle_outer) -> [8] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [9] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        talos : move(store_room) -> [10] in(talos) = store_room
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [11] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 21:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 22:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,5)) -> [12] grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 23:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,retracted) -> [13] configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 24:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [14] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 25:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,6)) -> [15] grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 26:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [16] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 27:
    Current Sub-goals:
        talos : move(hallway) -> [17] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 28:
    Current Sub-goals:
        talos : move(hallway) -> [17] in(talos) = hallway
    Planned actions:
        talos : move((store_room,1))
Step 29:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,0))
Step 30:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,1))
Step 31:
    Current Sub-goals:
        talos : move(puzzle_room) -> [18] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,2))
Step 32:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [19] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((puzzle_room,0))
Step 33:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [19] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((puzzle_room,1))
Step 34:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> [20] on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 35:
    Current Sub-goals:
        talos : release(manipulator_arm_2,(block,6)) -> [21] grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_right)
Step 36:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [22] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 37:
    Current Sub-goals:
        talos : move(hallway) -> [23] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 38:
    Current Sub-goals:
        talos : move(hallway) -> [23] in(talos) = hallway
    Planned actions:
        talos : move((puzzle_room,0))
Step 39:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,2))
Step 40:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,1))
Step 41:
    Current Sub-goals:
        talos : move(store_room) -> [24] in(talos) = store_room
    Planned actions:
        talos : move((hallway,0))
Step 42:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [25] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((store_room,1))
Step 43:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [25] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : move((store_room,0))
Step 44:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [26] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 45:
    Current Sub-goals:
        talos : grasp(manipulator_arm_2,(block,4)) -> [26] grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 46:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,retracted) -> [27] configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 47:
    Current Sub-goals:
        talos : move(hallway) -> [28] in(talos) = hallway
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 48:
    Current Sub-goals:
        talos : move(hallway) -> [28] in(talos) = hallway
    Planned actions:
        talos : move((store_room,1))
Step 49:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,0))
Step 50:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,1))
Step 51:
    Current Sub-goals:
        talos : move(puzzle_room) -> [29] in(talos) = puzzle_room
    Planned actions:
        talos : move((hallway,2))
Step 52:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [30] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((puzzle_room,0))
Step 53:
    Current Sub-goals:
        talos : configure(manipulator_arm_1,extended) -> [30] configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : move((puzzle_room,1))
Step 54:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,5),(block,6)) -> [31] on((block,5)) = (block,6)
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 55:
    Current Sub-goals:
        talos : release(manipulator_arm_1,(block,5)) -> [32] grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 56:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,3)) -> [33] grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 57:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,3)) -> [33] grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 58:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> [34] on((block,3)) = puzzle_room_table
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 59:
    Current Sub-goals:
        talos : configure(manipulator_arm_2,extended) -> [35] configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 60:
    Current Sub-goals:
        talos : put(manipulator_arm_2,(block,4),(block,5)) -> [36] on((block,4)) = (block,5)
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 61:
    Current Sub-goals:
        talos : release(manipulator_arm_1,(block,3)) -> [37] grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 62:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,2)) -> [38] grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 63:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,2)) -> [38] grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 64:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,2),(block,3)) -> [39] on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 65:
    Current Sub-goals:
        talos : release(manipulator_arm_1,(block,2)) -> [40] grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 66:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,1)) -> [41] grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 67:
    Current Sub-goals:
        talos : grasp(manipulator_arm_1,(block,1)) -> [41] grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 68:
    Current Sub-goals:
        talos : put(manipulator_arm_1,(block,1),(block,2)) -> [42] on((block,1)) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 69:
    Current Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))

[21-09-2021_16-57-25] INFO :: ASH Planner Main #1 >> Online planning increment 4 finished.

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, plan_length=69, step_range=range(0, 70)

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=69 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, plan_length=42, step_range=range(0, 43)

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=69 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, plan_length=20, step_range=range(0, 21)

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=69 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-57-25] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully:

          ========================================          
                     Ground level plan                      
          ========================================          
                 Steps = 69 :: Actions = 69                 
                ----------------------------                

(1, [{'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1}])
(2, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2}])
(3, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 3}])
(4, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 4}])
(5, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))', 'S': 5}])
(6, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,puzzle_room_door_handle_outer)', 'S': 6}])
(7, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_2,puzzle_room_door)', 'S': 7}])
(8, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,puzzle_room_door_handle_outer)', 'S': 8}])
(9, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 9}])
(10, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 10}])
(11, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 11}])
(12, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 12}])
(13, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))', 'S': 13}])
(14, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,store_room_door_handle_outer)', 'S': 14}])
(15, [{'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_2,store_room_door)', 'S': 15}])
(16, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,store_room_door_handle_outer)', 'S': 16}])
(17, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 17}])
(18, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 18}])
(19, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 19}])
(20, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 20}])
(21, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 21}])
(22, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,5)))', 'S': 22}])
(23, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,5))', 'S': 23}])
(24, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 24}])
(25, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,6)))', 'S': 25}])
(26, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,6))', 'S': 26}])
(27, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 27}])
(28, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 28}])
(29, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 29}])
(30, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 30}])
(31, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 31}])
(32, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 32}])
(33, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 33}])
(34, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 34}])
(35, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,6),puzzle_room_table_right)', 'S': 35}])
(36, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,6))', 'S': 36}])
(37, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 37}])
(38, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 38}])
(39, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 39}])
(40, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 40}])
(41, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 41}])
(42, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 42}])
(43, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 43}])
(44, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 44}])
(45, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 45}])
(46, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 46}])
(47, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 47}])
(48, [{'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 48}])
(49, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 49}])
(50, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 50}])
(51, [{'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 51}])
(52, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 52}])
(53, [{'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 53}])
(54, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 54}])
(55, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,5),(block,6))', 'S': 55}])
(56, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,5))', 'S': 56}])
(57, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 57}])
(58, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 58}])
(59, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 59}])
(60, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 60}])
(61, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,4),(block,5))', 'S': 61}])
(62, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 62}])
(63, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,2)))', 'S': 63}])
(64, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,2))', 'S': 64}])
(65, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,2),(block,3))', 'S': 65}])
(66, [{'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,2))', 'S': 66}])
(67, [{'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 67}])
(68, [{'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 68}])
(69, [{'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 69}])

Hierarchical planning summary: (Execution latency = 18.559503899999996, Grand total planning time = 97.07901989999989)

     ==========================================================================================================================================================================     
| Level =  3 (classic), Length =  20, Actions =  20, Time =   2.942s (Ground =   1.157s, Search =   1.671s, Overhead =  0.114), Expansion = 1.00, Deviation = 0.00, Balance = 0.00 |
| Level =  2 (com-ref), Length =  42, Actions =  42, Time =  14.271s (Ground =   8.505s, Search =  16.086s, Overhead = -10.320), Expansion = 2.10, Deviation = 2.15, Balance = 1.02 
                                                                                         |                                                                                          
| Level =  1 (com-ref), Length =  69, Actions =  69, Time =  33.309s (Ground =  44.367s, Search =  25.293s, Overhead = -36.351), Expansion = 1.64, Deviation = 0.96, Balance = 0.58 
                                                                                         |                                                                                          
     ==========================================================================================================================================================================     

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, plan_length=69, step_range=range(0, 70)

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=69 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, plan_length=42, step_range=range(0, 43)

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=69 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, plan_length=20, step_range=range(0, 21)

[21-09-2021_16-57-25] DEBUG :: ASH Planner Main #1 >> Current plan lengths: level=1 len(self.__actions.get(level, []))=69 : level=2 len(self.__actions.get(level, []))=42 : level=3 len(self.__actions.get(level, []))=20

[21-09-2021_16-57-25] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_21-09-2021_16-56-24.txt

[21-09-2021_16-57-25] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_21-09-2021_16-56-24.txt

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[21-09-2021_16-57-25] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Ollie Kampo\\Anaconda3\\envs\\ASH_2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

