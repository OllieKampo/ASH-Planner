[19-01-2022_12-49-56] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[19-01-2022_12-49-56] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[19-01-2022_12-49-56] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[19-01-2022_12-49-56] DEBUG :: __main__ >> Command line arguments:
'.\\problems\\blocks_world_plus\\single_puzzle\\BWP_problem_multi_puzzle_large_1.lp'
'.\\problems\\blocks_world_plus\\single_puzzle\\BWP_system_laws_tasking_double_condensed.lp'
'-ao'
'verbose'
'-op'
'test'
'-cfn'
'--bottom_level=5'
'-conc'
'True'
'-order_fgoals'
'True'

[19-01-2022_12-49-56] DEBUG :: __main__ >> Parsed command line arguments:
('files', ['.\\problems\\blocks_world_plus\\single_puzzle\\BWP_problem_multi_puzzle_large_1.lp', '.\\problems\\blocks_world_plus\\single_puzzle\\BWP_system_laws_tasking_double_condensed.lp'])
('load_schema', None)
('config_file_naming', True)
('plan_file', './solutions/plans/ASH_Plan_2022-01-19_12-49-56.txt')
('log_file', './logs/ASH_Log_2022-01-19_12-49-56.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2022-01-19_12-49-56.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'verbose')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'test')
('experimental_runs', 1)
('initial_runs', 0)
('optimum', None)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', None)
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('problem_space_level', 1)
('top_level', None)
('bottom_level', 5)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('online_method', 'ground-first')
('division_strategy', 'none')
('division_strategy_bounds', None)
('bound_type', 'incremental_time')
('save_grounding', False)
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', False)
('divide_tasks_on_final_goal_intermediate_achievement_ordering', False)
('final_goal_intermediate_achievement_ordering_preferences', True)
('positive_final_goal_preemptive_achievement', None)
('negative_final_goal_preemptive_achievement', None)
('final_goal_preemptive_achievement_mode', 'heuristic')

[19-01-2022_12-49-56] DEBUG :: __main__ >> Configuration file output file naming enabled: 

[19-01-2022_12-49-57] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [.\problems\blocks_world_plus\single_puzzle\BWP_problem_multi_puzzle_large_1.lp
                .\problems\blocks_world_plus\single_puzzle\BWP_system_laws_tasking_double_condensed.lp]

[19-01-2022_12-49-57] DEBUG :: core.Planner >> The domain files ['.\\problems\\blocks_world_plus\\single_puzzle\\BWP_problem_multi_puzzle_large_1.lp', '.\\problems\\blocks_world_plus\\single_puzzle\\BWP_system_laws_tasking_double_condensed.lp'] were loaded successfully, contain all domain program parts, and contain problem program parts: {'entities': True, 'initial_state': True, 'static_state': True, 'goal_state': True}.

[19-01-2022_12-49-57] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 3                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table,             %%
%% and with 3-4 times larger number of cells per room.                   %%
%% This problem has longer manipulation plans at all levels,             %%
%% and longer ground level locomotion plans.                             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected(((starting_room_1, 3), 7, 1), ((hallway_1, 3), 7, 0))).
is(1, connected(((store_room_1, 3), 7, 1), ((hallway_1, 0), 0, 1))).
is(1, connected(((hallway_1, 5), 11, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected(((hallway_1, 3), 7, 1), ((hallway_2, 3), 7, 0))).

is(1, connected(((store_room_2, 3), 7, 1), ((hallway_2, 0), 0, 1))).
is(1, connected(((hallway_2, 5), 11, 1), ((puzzle_room_2, 0), 0, 1))).

%% Door connection between the hallway and the puzzle room
% is(1, connected_by_door(starting_room_1_door, ((starting_room_1, 3), 7, 1), ((hallway_1, 3), 7, 0))).
is(1, connected_by_door(store_room_1_door, ((store_room_1, 3), 7, 1), ((hallway_1, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_1_door, ((hallway_1, 5), 11, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected_by_door(store_room_2_door, ((store_room_2, 3), 7, 1), ((hallway_2, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_2_door, ((hallway_2, 5), 11, 1), ((puzzle_room_2, 0), 0, 1))).

%% The door's handles are located on either side of it
is(1, in(starting_room_1_door_handle_inner, ((starting_room_1, 3), 7, 1))).
is(1, in(starting_room_1_door_handle_outer, ((hallway_1, 3), 7, 0))).
is(1, in(store_room_1_door_handle_inner, ((store_room_1, 3), 7, 1))).
is(1, in(store_room_1_door_handle_outer, ((hallway_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_inner, ((puzzle_room_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_outer, ((hallway_1, 5), 11, 1))).
is(1, in(store_room_2_door_handle_inner, ((store_room_2, 3), 7, 1))).
is(1, in(store_room_2_door_handle_outer, ((hallway_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_inner, ((puzzle_room_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_outer, ((hallway_2, 5), 11, 1))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N > 9, N <= 12, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 12, N <= 15, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 15, N <= 18, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected(((R, N_1), X_1, Y), ((R, N_2), X_2, Y))) :- insta_of(1, cell, ((R, N_1), X_1, Y)),
                                                            insta_of(1, cell, ((R, N_2), X_2, Y)),
                                                            X_2 = X_1 + 1.
is(1, connected((A, X, Y_1), (A, X, Y_2))) :- insta_of(1, cell, (A, X, Y_1)),
                                              insta_of(1, cell, (A, X, Y_2)),
                                              Y_2 = Y_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

goal_order(AL, complete_tower(COLOUR, puzzle_room_1_table), true, true, 1) :- insta_of(AL, colour, COLOUR), al(AL).
goal_order(AL, complete_tower(COLOUR, puzzle_room_2_table), true, true, 2) :- insta_of(AL, colour, COLOUR), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room_1, 0), 0, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_1_table), ((puzzle_room_1, 3), 7, 0), 0).
holds(1, in(puzzle_room_2_table), ((puzzle_room_2, 3), 7, 0), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_1_table_left, 0).
holds(1, on((block, 2)), puzzle_room_1_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 10)), puzzle_room_2_table_left, 0).
holds(1, on((block, 11)), puzzle_room_2_table_right, 0).
holds(1, on((block, 12)), (block, 10), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 5)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 6)), ((store_room_1, 0), 0, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).
holds(1, in((block, 13)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 14)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 15)), ((store_room_2, 0), 0, 0), 0).
holds(1, on((block, 13)), nothing, 0).
holds(1, on((block, 14)), nothing, 0).
holds(1, on((block, 15)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_1_table_middle, 0).
holds(1, in((block, 8)), ((store_room_1, 0), 0, 1), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).
holds(1, on((block, 16)), puzzle_room_2_table_middle, 0).
holds(1, in((block, 17)), ((store_room_2, 0), 0, 1), 0).
holds(1, on((block, 18)), (block, 16), 0).
holds(1, on((block, 17)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% 
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_1_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_1_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_1_table_middle, true).
final_goal(1, on((block, 12)), puzzle_room_2_table_left, true).
final_goal(1, on((block, 15)), puzzle_room_2_table_right, true).
final_goal(1, on((block, 18)), puzzle_room_2_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..18).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room_1).
entity(room, store_room_1).
entity(room, puzzle_room_1).
entity(room, hallway_1).
entity(room, store_room_2).
entity(room, puzzle_room_2).
entity(room, hallway_2).

%% All the rooms have two cells except the hallway which has three
n(0..12).
size(starting_room_1, 8, 2).
size(store_room_1, 8, 2).
size(hallway_1, 12, 2).
size(puzzle_room_1, 8, 2).
size(store_room_2, 8, 2).
size(hallway_2, 12, 2).
size(puzzle_room_2, 8, 2).

%% Zones with two cell widths
zone_width(2).
entity(zone, (ROOM, N)) :- entity(room, ROOM), size(ROOM, N_MAX, _), N < (N_MAX / W), zone_width(W), n(N).
zone_x((ROOM, N), (N * W) + P) :- P >= 0, P < W, zone_width(W), entity(zone, (ROOM, N)), n(P), n(N).
entity(cell, ((ROOM, N), X, Y)) :- zone_x((ROOM, N), X), entity(room, ROOM), entity(zone, (ROOM, N)), size(ROOM, X_MAX, Y_MAX), X < X_MAX, Y < Y_MAX, n(N), n(X), n(Y).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_1_door).
entity(door, starting_room_1_door).
entity(door, puzzle_room_1_door).
entity(door, store_room_2_door).
entity(door, puzzle_room_2_door).

%% The door has two handles
entity(handle, store_room_1_door_handle_inner).
entity(handle, store_room_1_door_handle_outer).
entity(handle, starting_room_1_door_handle_inner).
entity(handle, starting_room_1_door_handle_outer).
entity(handle, puzzle_room_1_door_handle_inner).
entity(handle, puzzle_room_1_door_handle_outer).
entity(handle, store_room_2_door_handle_inner).
entity(handle, store_room_2_door_handle_outer).
entity(handle, puzzle_room_2_door_handle_inner).
entity(handle, puzzle_room_2_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_1_table).
entity(table, puzzle_room_2_table).

%% The table has three sides
entity(side, puzzle_room_1_table_left).
entity(side, puzzle_room_1_table_middle).
entity(side, puzzle_room_1_table_right).
entity(side, puzzle_room_2_table_left).
entity(side, puzzle_room_2_table_middle).
entity(side, puzzle_room_2_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, N)) :- entity(room, ROOM), entity(zone, (ROOM, N)), n(N).
ancestry_relation((ROOM, N), ((ROOM, N), X, Y)) :- entity(room, ROOM), entity(zone, (ROOM, N)), entity(cell, ((ROOM, N), X, Y)), n(N), n(X), n(Y).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_1_door, store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door, store_room_1_door_handle_outer).
ancestry_relation(starting_room_1_door, starting_room_1_door_handle_inner).
ancestry_relation(starting_room_1_door, starting_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door, store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door, store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_right).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const reduc = 4. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking). % Classical
model_type(4, reduced).
model_type(3, condensed).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by redefinition
class(4, manipulator_arm).
class(4, grasper).

%% Classes deleted by reduction
class(3, door).
class(3, handle).
class(3, configurable).
class(3, extensible).

%% Classes deleted in second condensed model
class(2, zone).
class(2, manipulator_limb).
class(2, manipulator_end).
class(2, side).

%% Classes deleted in first condensed model
class(1, cell).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of cells
override_class(room, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 448 rules

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.009020599999999934s

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:992:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1005:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1006:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1010:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1011:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1012:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1016:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1017:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1018:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1022:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1023:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1035:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1036:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1037:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1043:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1044:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1049:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1050:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.015821s.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.003857s with result Satisfiable.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[19-01-2022_12-49-57] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.015821s, Solving = 0.003857s, Total = 0.019678s, Memory = (RSS = 105.542969Mb, VMS = 92.503906Mb)
Final Model :: Total atoms = 82, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_12-49-57] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-5] instantiated successfully

[19-01-2022_12-49-57] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Medium Problem Specification :: Version 3                             %%
%%                                                                       %%
%% Nine block setup, with the additional three on the table,             %%
%% and with 3-4 times larger number of cells per room.                   %%
%% This problem has longer manipulation plans at all levels,             %%
%% and longer ground level locomotion plans.                             %%
%%                                                                       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected(((starting_room_1, 3), 7, 1), ((hallway_1, 3), 7, 0))).
is(1, connected(((store_room_1, 3), 7, 1), ((hallway_1, 0), 0, 1))).
is(1, connected(((hallway_1, 5), 11, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected(((hallway_1, 3), 7, 1), ((hallway_2, 3), 7, 0))).

is(1, connected(((store_room_2, 3), 7, 1), ((hallway_2, 0), 0, 1))).
is(1, connected(((hallway_2, 5), 11, 1), ((puzzle_room_2, 0), 0, 1))).

%% Door connection between the hallway and the puzzle room
% is(1, connected_by_door(starting_room_1_door, ((starting_room_1, 3), 7, 1), ((hallway_1, 3), 7, 0))).
is(1, connected_by_door(store_room_1_door, ((store_room_1, 3), 7, 1), ((hallway_1, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_1_door, ((hallway_1, 5), 11, 1), ((puzzle_room_1, 0), 0, 1))).

is(1, connected_by_door(store_room_2_door, ((store_room_2, 3), 7, 1), ((hallway_2, 0), 0, 1))).
is(1, connected_by_door(puzzle_room_2_door, ((hallway_2, 5), 11, 1), ((puzzle_room_2, 0), 0, 1))).

%% The door's handles are located on either side of it
is(1, in(starting_room_1_door_handle_inner, ((starting_room_1, 3), 7, 1))).
is(1, in(starting_room_1_door_handle_outer, ((hallway_1, 3), 7, 0))).
is(1, in(store_room_1_door_handle_inner, ((store_room_1, 3), 7, 1))).
is(1, in(store_room_1_door_handle_outer, ((hallway_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_inner, ((puzzle_room_1, 0), 0, 1))).
is(1, in(puzzle_room_1_door_handle_outer, ((hallway_1, 5), 11, 1))).
is(1, in(store_room_2_door_handle_inner, ((store_room_2, 3), 7, 1))).
is(1, in(store_room_2_door_handle_outer, ((hallway_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_inner, ((puzzle_room_2, 0), 0, 1))).
is(1, in(puzzle_room_2_door_handle_outer, ((hallway_2, 5), 11, 1))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 6, N <= 9, al(AL).
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N > 9, N <= 12, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 12, N <= 15, al(AL).
is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
                                         insta_of(AL, block, (BLOCK, N)),
                                         N > 15, N <= 18, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected(((R, N_1), X_1, Y), ((R, N_2), X_2, Y))) :- insta_of(1, cell, ((R, N_1), X_1, Y)),
                                                            insta_of(1, cell, ((R, N_2), X_2, Y)),
                                                            X_2 = X_1 + 1.
is(1, connected((A, X, Y_1), (A, X, Y_2))) :- insta_of(1, cell, (A, X, Y_1)),
                                              insta_of(1, cell, (A, X, Y_2)),
                                              Y_2 = Y_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

goal_order(AL, complete_tower(COLOUR, puzzle_room_1_table), true, true, 1) :- insta_of(AL, colour, COLOUR), al(AL).
goal_order(AL, complete_tower(COLOUR, puzzle_room_2_table), true, true, 2) :- insta_of(AL, colour, COLOUR), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room_1, 0), 0, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_1_table), ((puzzle_room_1, 3), 7, 0), 0).
holds(1, in(puzzle_room_2_table), ((puzzle_room_2, 3), 7, 0), 0).

%% The first three blocks are stacked on the puzzle room table:
%%      - This configuration presents the Sussman anomoly.
holds(1, on((block, 1)), puzzle_room_1_table_left, 0).
holds(1, on((block, 2)), puzzle_room_1_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
holds(1, on((block, 10)), puzzle_room_2_table_left, 0).
holds(1, on((block, 11)), puzzle_room_2_table_right, 0).
holds(1, on((block, 12)), (block, 10), 0).

%% The other three blocks are on the floor in the store room:
%%      - Talos will have to make at least two trips to the store room to collect these.
holds(1, in((block, 4)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 5)), ((store_room_1, 0), 0, 0), 0).
holds(1, in((block, 6)), ((store_room_1, 0), 0, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).
holds(1, in((block, 13)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 14)), ((store_room_2, 0), 0, 0), 0).
holds(1, in((block, 15)), ((store_room_2, 0), 0, 0), 0).
holds(1, on((block, 13)), nothing, 0).
holds(1, on((block, 14)), nothing, 0).
holds(1, on((block, 15)), nothing, 0).

%% The additional three blocks are placed with two in the middle of the table and one in the store room:
%%      - Talos will not have to make additional trips to the store room as a result of this.
holds(1, on((block, 7)), puzzle_room_1_table_middle, 0).
holds(1, in((block, 8)), ((store_room_1, 0), 0, 1), 0).
holds(1, on((block, 9)), (block, 7), 0).
holds(1, on((block, 8)), nothing, 0).
holds(1, on((block, 16)), puzzle_room_2_table_middle, 0).
holds(1, in((block, 17)), ((store_room_2, 0), 0, 1), 0).
holds(1, on((block, 18)), (block, 16), 0).
holds(1, on((block, 17)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% 
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, 3)), puzzle_room_1_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_1_table_right, true).
final_goal(1, on((block, 9)), puzzle_room_1_table_middle, true).
final_goal(1, on((block, 12)), puzzle_room_2_table_left, true).
final_goal(1, on((block, 15)), puzzle_room_2_table_right, true).
final_goal(1, on((block, 18)), puzzle_room_2_table_middle, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Ancestry Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are nine blocks
block_number(1..18).
blocks_per_tower(3).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room_1).
entity(room, store_room_1).
entity(room, puzzle_room_1).
entity(room, hallway_1).
entity(room, store_room_2).
entity(room, puzzle_room_2).
entity(room, hallway_2).

%% All the rooms have two cells except the hallway which has three
n(0..12).
size(starting_room_1, 8, 2).
size(store_room_1, 8, 2).
size(hallway_1, 12, 2).
size(puzzle_room_1, 8, 2).
size(store_room_2, 8, 2).
size(hallway_2, 12, 2).
size(puzzle_room_2, 8, 2).

%% Zones with two cell widths
zone_width(2).
entity(zone, (ROOM, N)) :- entity(room, ROOM), size(ROOM, N_MAX, _), N < (N_MAX / W), zone_width(W), n(N).
zone_x((ROOM, N), (N * W) + P) :- P >= 0, P < W, zone_width(W), entity(zone, (ROOM, N)), n(P), n(N).
entity(cell, ((ROOM, N), X, Y)) :- zone_x((ROOM, N), X), entity(room, ROOM), entity(zone, (ROOM, N)), size(ROOM, X_MAX, Y_MAX), X < X_MAX, Y < Y_MAX, n(N), n(X), n(Y).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_1_door).
entity(door, starting_room_1_door).
entity(door, puzzle_room_1_door).
entity(door, store_room_2_door).
entity(door, puzzle_room_2_door).

%% The door has two handles
entity(handle, store_room_1_door_handle_inner).
entity(handle, store_room_1_door_handle_outer).
entity(handle, starting_room_1_door_handle_inner).
entity(handle, starting_room_1_door_handle_outer).
entity(handle, puzzle_room_1_door_handle_inner).
entity(handle, puzzle_room_1_door_handle_outer).
entity(handle, store_room_2_door_handle_inner).
entity(handle, store_room_2_door_handle_outer).
entity(handle, puzzle_room_2_door_handle_inner).
entity(handle, puzzle_room_2_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_1_table).
entity(table, puzzle_room_2_table).

%% The table has three sides
entity(side, puzzle_room_1_table_left).
entity(side, puzzle_room_1_table_middle).
entity(side, puzzle_room_1_table_right).
entity(side, puzzle_room_2_table_left).
entity(side, puzzle_room_2_table_middle).
entity(side, puzzle_room_2_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).
entity(colour, yellow).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, N)) :- entity(room, ROOM), entity(zone, (ROOM, N)), n(N).
ancestry_relation((ROOM, N), ((ROOM, N), X, Y)) :- entity(room, ROOM), entity(zone, (ROOM, N)), entity(cell, ((ROOM, N), X, Y)), n(N), n(X), n(Y).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_1_door, store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door, store_room_1_door_handle_outer).
ancestry_relation(starting_room_1_door, starting_room_1_door_handle_inner).
ancestry_relation(starting_room_1_door, starting_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door, puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door, store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door, store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door, puzzle_room_2_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table, puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table, puzzle_room_2_table_right).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const reduc = 4. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking). % Classical
model_type(4, reduced).
model_type(3, condensed).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by redefinition
class(4, manipulator_arm).
class(4, grasper).

%% Classes deleted by reduction
class(3, door).
class(3, handle).
class(3, configurable).
class(3, extensible).

%% Classes deleted in second condensed model
class(2, zone).
class(2, manipulator_limb).
class(2, manipulator_end).
class(2, side).

%% Classes deleted in first condensed model
class(1, cell).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Manipulator arms can grasp objects because they are composed of a end effector
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator arms are extensible because they are composed of a manipulator limb
override_class(manipulator_arm, manipulator_limb, extensible).

%% A room is composed from a set of cells
override_class(room, cell, location).

%% A table has multiple sides that compose its surface
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < TL, AL_2 < TL,
                                               model_type(TL, tasking),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= TL, model_type(TL, tasking),
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < TL, model_type(TL, tasking), sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < TL, model_type(TL, tasking), AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                              insta_of(AL, graspable, OBJ), OBJ != nothing,
                                              AL >= TL, model_type(TL, tasking), sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, placeable, OBJ),
                                                          insta_of(AL, surface, SURFACE),
                                                          AL >= TL, model_type(TL, tasking), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= TL, model_type(TL, tasking), pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= TL, model_type(TL, tasking), pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= TL, model_type(TL, tasking), pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot grasp an object with two graspers simultaneously
:- holds(AL, grasping(DESC_1), OBJ, t),
   holds(AL, grasping(DESC_2), OBJ, t),
   fluent(AL, inertial, grasping(DESC_1), OBJ),
   fluent(AL, inertial, grasping(DESC_2), OBJ),
   DESC_1 != DESC_2,
   desce_of(AL, ROBO, DESC_1),
   desce_of(AL, ROBO, DESC_2),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC_1),
   insta_of(AL, grasper, DESC_2),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
% :- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
%                       fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
%                       insta_of(AL_1, graspable, OBJ) },
%    M = #count { ARM : desce_of(AL_2, ROBO, ARM),
%                       insta_of(AL_2, manipulator_arm, ARM),
%                       al(AL_2), AL_1 >= AL_2 },
%    N > M, block_number(N), block_number(M),
%    insta_of(AL_1, robot, ROBO),
%    AL_1 >= TL, model_type(TL, tasking), sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE, TABLE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        insta_of(AL, surface, SURFACE),
                                        sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= TL, model_type(TL, tasking),
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= TL, model_type(TL, tasking),
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[19-01-2022_12-49-57] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); minimise_actions = true. [1@2,ROBOT,A,step]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M); order_fgoals = true. [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); order_fgoals = true.
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- step > minimum_search_length_bound; incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program static_state.
is(1,connected(((starting_room_1,3),7,1),((hallway_1,3),7,0))).
is(1,connected(((store_room_1,3),7,1),((hallway_1,0),0,1))).
is(1,connected(((hallway_1,5),11,1),((puzzle_room_1,0),0,1))).
is(1,connected(((hallway_1,3),7,1),((hallway_2,3),7,0))).
is(1,connected(((store_room_2,3),7,1),((hallway_2,0),0,1))).
is(1,connected(((hallway_2,5),11,1),((puzzle_room_2,0),0,1))).
is(1,connected_by_door(store_room_1_door,((store_room_1,3),7,1),((hallway_1,0),0,1))).
is(1,connected_by_door(puzzle_room_1_door,((hallway_1,5),11,1),((puzzle_room_1,0),0,1))).
is(1,connected_by_door(store_room_2_door,((store_room_2,3),7,1),((hallway_2,0),0,1))).
is(1,connected_by_door(puzzle_room_2_door,((hallway_2,5),11,1),((puzzle_room_2,0),0,1))).
is(1,in(starting_room_1_door_handle_inner,((starting_room_1,3),7,1))).
is(1,in(starting_room_1_door_handle_outer,((hallway_1,3),7,0))).
is(1,in(store_room_1_door_handle_inner,((store_room_1,3),7,1))).
is(1,in(store_room_1_door_handle_outer,((hallway_1,0),0,1))).
is(1,in(puzzle_room_1_door_handle_inner,((puzzle_room_1,0),0,1))).
is(1,in(puzzle_room_1_door_handle_outer,((hallway_1,5),11,1))).
is(1,in(store_room_2_door_handle_inner,((store_room_2,3),7,1))).
is(1,in(store_room_2_door_handle_outer,((hallway_2,0),0,1))).
is(1,in(puzzle_room_2_door_handle_inner,((puzzle_room_2,0),0,1))).
is(1,in(puzzle_room_2_door_handle_outer,((hallway_2,5),11,1))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 6; N <= 9; al(AL).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N > 9; N <= 12; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 12; N <= 15; al(AL).
is(AL,colour_of((BLOCK,N),yellow)) :- static(AL,colour_of((BLOCK,N),yellow)); insta_of(AL,block,(BLOCK,N)); N > 15; N <= 18; al(AL).
is(1,connected(((R,N_1),X_1,Y),((R,N_2),X_2,Y))) :- insta_of(1,cell,((R,N_1),X_1,Y)); insta_of(1,cell,((R,N_2),X_2,Y)); X_2 = (X_1+1).
is(1,connected((A,X,Y_1),(A,X,Y_2))) :- insta_of(1,cell,(A,X,Y_1)); insta_of(1,cell,(A,X,Y_2)); Y_2 = (Y_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
goal_order(AL,complete_tower(COLOUR,puzzle_room_1_table),true,true,1) :- insta_of(AL,colour,COLOUR); al(AL).
goal_order(AL,complete_tower(COLOUR,puzzle_room_2_table),true,true,2) :- insta_of(AL,colour,COLOUR); al(AL).
#program initial_state.
holds(1,in(talos),((starting_room_1,0),0,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_1_table),((puzzle_room_1,3),7,0),0).
holds(1,in(puzzle_room_2_table),((puzzle_room_2,3),7,0),0).
holds(1,on((block,1)),puzzle_room_1_table_left,0).
holds(1,on((block,2)),puzzle_room_1_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,on((block,10)),puzzle_room_2_table_left,0).
holds(1,on((block,11)),puzzle_room_2_table_right,0).
holds(1,on((block,12)),(block,10),0).
holds(1,in((block,4)),((store_room_1,0),0,0),0).
holds(1,in((block,5)),((store_room_1,0),0,0),0).
holds(1,in((block,6)),((store_room_1,0),0,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
holds(1,in((block,13)),((store_room_2,0),0,0),0).
holds(1,in((block,14)),((store_room_2,0),0,0),0).
holds(1,in((block,15)),((store_room_2,0),0,0),0).
holds(1,on((block,13)),nothing,0).
holds(1,on((block,14)),nothing,0).
holds(1,on((block,15)),nothing,0).
holds(1,on((block,7)),puzzle_room_1_table_middle,0).
holds(1,in((block,8)),((store_room_1,0),0,1),0).
holds(1,on((block,9)),(block,7),0).
holds(1,on((block,8)),nothing,0).
holds(1,on((block,16)),puzzle_room_2_table_middle,0).
holds(1,in((block,17)),((store_room_2,0),0,1),0).
holds(1,on((block,18)),(block,16),0).
holds(1,on((block,17)),nothing,0).
#program goal_state.
goal_fluent(AL,complete_tower(COLOUR,TABLE)) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,unordered_tower(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete_tower(COLOUR,TABLE),true,true) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
final_goal(1,on((block,3)),puzzle_room_1_table_left,true).
final_goal(1,on((block,6)),puzzle_room_1_table_right,true).
final_goal(1,on((block,9)),puzzle_room_1_table_middle,true).
final_goal(1,on((block,12)),puzzle_room_2_table_left,true).
final_goal(1,on((block,15)),puzzle_room_2_table_right,true).
final_goal(1,on((block,18)),puzzle_room_2_table_middle,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..18)).
blocks_per_tower(3).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room_1).
entity(room,store_room_1).
entity(room,puzzle_room_1).
entity(room,hallway_1).
entity(room,store_room_2).
entity(room,puzzle_room_2).
entity(room,hallway_2).
n((0..12)).
size(starting_room_1,8,2).
size(store_room_1,8,2).
size(hallway_1,12,2).
size(puzzle_room_1,8,2).
size(store_room_2,8,2).
size(hallway_2,12,2).
size(puzzle_room_2,8,2).
zone_width(2).
entity(zone,(ROOM,N)) :- entity(room,ROOM); size(ROOM,N_MAX,_); N < (N_MAX/W); zone_width(W); n(N).
zone_x((ROOM,N),((N*W)+P)) :- P >= 0; P < W; zone_width(W); entity(zone,(ROOM,N)); n(P); n(N).
entity(cell,((ROOM,N),X,Y)) :- zone_x((ROOM,N),X); entity(room,ROOM); entity(zone,(ROOM,N)); size(ROOM,X_MAX,Y_MAX); X < X_MAX; Y < Y_MAX; n(N); n(X); n(Y).
entity(door,store_room_1_door).
entity(door,starting_room_1_door).
entity(door,puzzle_room_1_door).
entity(door,store_room_2_door).
entity(door,puzzle_room_2_door).
entity(handle,store_room_1_door_handle_inner).
entity(handle,store_room_1_door_handle_outer).
entity(handle,starting_room_1_door_handle_inner).
entity(handle,starting_room_1_door_handle_outer).
entity(handle,puzzle_room_1_door_handle_inner).
entity(handle,puzzle_room_1_door_handle_outer).
entity(handle,store_room_2_door_handle_inner).
entity(handle,store_room_2_door_handle_outer).
entity(handle,puzzle_room_2_door_handle_inner).
entity(handle,puzzle_room_2_door_handle_outer).
entity(table,puzzle_room_1_table).
entity(table,puzzle_room_2_table).
entity(side,puzzle_room_1_table_left).
entity(side,puzzle_room_1_table_middle).
entity(side,puzzle_room_1_table_right).
entity(side,puzzle_room_2_table_left).
entity(side,puzzle_room_2_table_middle).
entity(side,puzzle_room_2_table_right).
entity(colour,red).
entity(colour,blue).
entity(colour,yellow).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,N)) :- entity(room,ROOM); entity(zone,(ROOM,N)); n(N).
ancestry_relation((ROOM,N),((ROOM,N),X,Y)) :- entity(room,ROOM); entity(zone,(ROOM,N)); entity(cell,((ROOM,N),X,Y)); n(N); n(X); n(Y).
ancestry_relation(store_room_1_door,store_room_1_door_handle_inner).
ancestry_relation(store_room_1_door,store_room_1_door_handle_outer).
ancestry_relation(starting_room_1_door,starting_room_1_door_handle_inner).
ancestry_relation(starting_room_1_door,starting_room_1_door_handle_outer).
ancestry_relation(puzzle_room_1_door,puzzle_room_1_door_handle_inner).
ancestry_relation(puzzle_room_1_door,puzzle_room_1_door_handle_outer).
ancestry_relation(store_room_2_door,store_room_2_door_handle_inner).
ancestry_relation(store_room_2_door,store_room_2_door_handle_outer).
ancestry_relation(puzzle_room_2_door,puzzle_room_2_door_handle_inner).
ancestry_relation(puzzle_room_2_door,puzzle_room_2_door_handle_outer).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_left).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_middle).
ancestry_relation(puzzle_room_1_table,puzzle_room_1_table_right).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_left).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_middle).
ancestry_relation(puzzle_room_2_table,puzzle_room_2_table_right).
#program domain_sorts.
#const abstraction_max = 5.
#const reduc = 4.
#const conde = 2.
#const groun = 1.
model_type(5,tasking).
model_type(4,reduced).
model_type(3,condensed).
model_type(2,condensed).
model_type(1,ground).
class(5,robot).
class(5,armed_robot).
class(5,location).
class(5,room).
class(5,object).
class(5,grounded).
class(5,graspable).
class(5,placeable).
class(5,block).
class(5,surface).
class(5,table).
class(5,colour).
class(4,manipulator_arm).
class(4,grasper).
class(3,door).
class(3,handle).
class(3,configurable).
class(3,extensible).
class(2,zone).
class(2,manipulator_limb).
class(2,manipulator_end).
class(2,side).
class(1,cell).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1 < TL; AL_2 < TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,transporting(ROBO,OBJ),B) :- insta_of(AL_2,armed_robot,ROBO); insta_of(AL_1,graspable,OBJ); OBJ != nothing; AL_1 >= TL; model_type(TL,tasking); sl(AL_2); sl(AL_1); AL_2 >= AL_1; boolean(B).
fluent(AL,defined,tower_base(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,complete_tower(COLOUR,TABLE),B) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); AL < TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < TL; model_type(TL,tasking); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,collect(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,deposit(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL >= TL; model_type(TL,tasking); sl(AL).
action(AL,concurrent,manipulation,ROBO,place_upon(OBJ,SURFACE)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
effect(AL,ROBO,collect(OBJ),transporting(ROBO,OBJ),true) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,collect(OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,on(OBJ),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),false); insta_of(RL,armed_robot,ROBO); insta_of(RL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,transporting(ROBO,OBJ),false); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= TL; model_type(TL,tasking); pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO,collect(OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,collect(OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,collect(OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),true,true) :- OBJ != nothing; action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,SURFACE),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,OBJ_2),on(OBJ_2),nothing,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ_2),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,surface,OBJ_2); AL >= TL; model_type(TL,tasking); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
#false :- holds(AL,grasping(DESC_1),OBJ,t); holds(AL,grasping(DESC_2),OBJ,t); fluent(AL,inertial,grasping(DESC_1),OBJ); fluent(AL,inertial,grasping(DESC_2),OBJ); DESC_1 != DESC_2; desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); insta_of(AL,surface,SURFACE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE,TABLE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,complete_tower(COLOUR,TABLE),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; blocks_per_tower(N); holds(AL,unordered_tower(BASE,TABLE),false,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,complete_tower(COLOUR,TABLE),true); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,transporting(ROBO,OBJ),true,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,transporting(ROBO,OBJ),true); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3.
holds(AL_1,transporting(ROBO,OBJ),true,t) :- holds(AL_2,grasping(COMP),OBJ,t); fluent(AL_1,inertial,transporting(ROBO,OBJ),true); fluent(AL_2,inertial,grasping(COMP),OBJ); desce_of(AL_2,ROBO,COMP); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_3,grasper,COMP); insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,transporting(ROBO,OBJ),false,t) :- 0 = #count { COMP: holds(AL_2,grasping(COMP),OBJ,t), fluent(AL_2,inertial,grasping(COMP),OBJ), desce_of(AL_2,ROBO,COMP), insta_of(AL_3,grasper,COMP), sl(AL_3), AL_3 >= AL_2 }; fluent(AL_1,inertial,transporting(ROBO,OBJ),false); has_desce(AL_2,ROBO,grasper); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_4,robot,ROBO); AL_1 >= TL; model_type(TL,tasking); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_4); AL_4 >= AL_1., ASH #1)

[19-01-2022_12-49-57] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[19-01-2022_12-49-57] INFO :: ASH Planner Main #1 >> Generating initial states...

[19-01-2022_12-49-57] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[19-01-2022_12-49-57] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 448 rules

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0037807000000000812s

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[19-01-2022_12-49-57] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[19-01-2022_12-49-57] WARNING :: Logic Program Main #1 || Generate Initial States #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[19-01-2022_12-50-01] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 3.832449s.

[19-01-2022_12-50-01] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[19-01-2022_12-50-02] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 1.131741s with result Satisfiable.

[19-01-2022_12-50-02] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[19-01-2022_12-50-02] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-50-02] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[19-01-2022_12-50-02] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[19-01-2022_12-50-02] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 3.832449s, Solving = 1.131741s, Total = 4.964190s, Memory = (RSS = 338.453125Mb, VMS = 338.050781Mb)
Final Model :: Total atoms = 122992, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[19-01-2022_12-50-02] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 3.832449s, Solving = 1.131741s, Total = 4.964190s, Memory = (RSS = 338.453125Mb, VMS = 338.050781Mb)
Final Model :: Total atoms = 122992, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[19-01-2022_12-50-02] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 5            
      ================================================      

holds(5, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(5, complete_tower(red,puzzle_room_1_table), false, 0)
holds(5, complete_tower(red,puzzle_room_2_table), false, 0)
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(5, in((block,1)), puzzle_room_1, 0)
holds(5, in((block,10)), puzzle_room_2, 0)
holds(5, in((block,11)), puzzle_room_2, 0)
holds(5, in((block,12)), puzzle_room_2, 0)
holds(5, in((block,13)), store_room_2, 0)
holds(5, in((block,14)), store_room_2, 0)
holds(5, in((block,15)), store_room_2, 0)
holds(5, in((block,16)), puzzle_room_2, 0)
holds(5, in((block,17)), store_room_2, 0)
holds(5, in((block,18)), puzzle_room_2, 0)
holds(5, in((block,2)), puzzle_room_1, 0)
holds(5, in((block,3)), puzzle_room_1, 0)
holds(5, in((block,4)), store_room_1, 0)
holds(5, in((block,5)), store_room_1, 0)
holds(5, in((block,6)), store_room_1, 0)
holds(5, in((block,7)), puzzle_room_1, 0)
holds(5, in((block,8)), store_room_1, 0)
holds(5, in((block,9)), puzzle_room_1, 0)
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(5, in(talos), starting_room_1, 0)
holds(5, in_tower((block,1),(block,1)), true, 0)
holds(5, in_tower((block,1),(block,10)), false, 0)
holds(5, in_tower((block,1),(block,11)), false, 0)
holds(5, in_tower((block,1),(block,12)), false, 0)
holds(5, in_tower((block,1),(block,13)), false, 0)
holds(5, in_tower((block,1),(block,14)), false, 0)
holds(5, in_tower((block,1),(block,15)), false, 0)
holds(5, in_tower((block,1),(block,16)), false, 0)
holds(5, in_tower((block,1),(block,17)), false, 0)
holds(5, in_tower((block,1),(block,18)), false, 0)
holds(5, in_tower((block,1),(block,2)), false, 0)
holds(5, in_tower((block,1),(block,3)), true, 0)
holds(5, in_tower((block,1),(block,4)), false, 0)
holds(5, in_tower((block,1),(block,5)), false, 0)
holds(5, in_tower((block,1),(block,6)), false, 0)
holds(5, in_tower((block,1),(block,7)), false, 0)
holds(5, in_tower((block,1),(block,8)), false, 0)
holds(5, in_tower((block,1),(block,9)), false, 0)
holds(5, in_tower((block,10),(block,1)), false, 0)
holds(5, in_tower((block,10),(block,10)), true, 0)
holds(5, in_tower((block,10),(block,11)), false, 0)
holds(5, in_tower((block,10),(block,12)), true, 0)
holds(5, in_tower((block,10),(block,13)), false, 0)
holds(5, in_tower((block,10),(block,14)), false, 0)
holds(5, in_tower((block,10),(block,15)), false, 0)
holds(5, in_tower((block,10),(block,16)), false, 0)
holds(5, in_tower((block,10),(block,17)), false, 0)
holds(5, in_tower((block,10),(block,18)), false, 0)
holds(5, in_tower((block,10),(block,2)), false, 0)
holds(5, in_tower((block,10),(block,3)), false, 0)
holds(5, in_tower((block,10),(block,4)), false, 0)
holds(5, in_tower((block,10),(block,5)), false, 0)
holds(5, in_tower((block,10),(block,6)), false, 0)
holds(5, in_tower((block,10),(block,7)), false, 0)
holds(5, in_tower((block,10),(block,8)), false, 0)
holds(5, in_tower((block,10),(block,9)), false, 0)
holds(5, in_tower((block,11),(block,1)), false, 0)
holds(5, in_tower((block,11),(block,10)), false, 0)
holds(5, in_tower((block,11),(block,11)), true, 0)
holds(5, in_tower((block,11),(block,12)), false, 0)
holds(5, in_tower((block,11),(block,13)), false, 0)
holds(5, in_tower((block,11),(block,14)), false, 0)
holds(5, in_tower((block,11),(block,15)), false, 0)
holds(5, in_tower((block,11),(block,16)), false, 0)
holds(5, in_tower((block,11),(block,17)), false, 0)
holds(5, in_tower((block,11),(block,18)), false, 0)
holds(5, in_tower((block,11),(block,2)), false, 0)
holds(5, in_tower((block,11),(block,3)), false, 0)
holds(5, in_tower((block,11),(block,4)), false, 0)
holds(5, in_tower((block,11),(block,5)), false, 0)
holds(5, in_tower((block,11),(block,6)), false, 0)
holds(5, in_tower((block,11),(block,7)), false, 0)
holds(5, in_tower((block,11),(block,8)), false, 0)
holds(5, in_tower((block,11),(block,9)), false, 0)
holds(5, in_tower((block,12),(block,1)), false, 0)
holds(5, in_tower((block,12),(block,10)), false, 0)
holds(5, in_tower((block,12),(block,11)), false, 0)
holds(5, in_tower((block,12),(block,12)), false, 0)
holds(5, in_tower((block,12),(block,13)), false, 0)
holds(5, in_tower((block,12),(block,14)), false, 0)
holds(5, in_tower((block,12),(block,15)), false, 0)
holds(5, in_tower((block,12),(block,16)), false, 0)
holds(5, in_tower((block,12),(block,17)), false, 0)
holds(5, in_tower((block,12),(block,18)), false, 0)
holds(5, in_tower((block,12),(block,2)), false, 0)
holds(5, in_tower((block,12),(block,3)), false, 0)
holds(5, in_tower((block,12),(block,4)), false, 0)
holds(5, in_tower((block,12),(block,5)), false, 0)
holds(5, in_tower((block,12),(block,6)), false, 0)
holds(5, in_tower((block,12),(block,7)), false, 0)
holds(5, in_tower((block,12),(block,8)), false, 0)
holds(5, in_tower((block,12),(block,9)), false, 0)
holds(5, in_tower((block,13),(block,1)), false, 0)
holds(5, in_tower((block,13),(block,10)), false, 0)
holds(5, in_tower((block,13),(block,11)), false, 0)
holds(5, in_tower((block,13),(block,12)), false, 0)
holds(5, in_tower((block,13),(block,13)), false, 0)
holds(5, in_tower((block,13),(block,14)), false, 0)
holds(5, in_tower((block,13),(block,15)), false, 0)
holds(5, in_tower((block,13),(block,16)), false, 0)
holds(5, in_tower((block,13),(block,17)), false, 0)
holds(5, in_tower((block,13),(block,18)), false, 0)
holds(5, in_tower((block,13),(block,2)), false, 0)
holds(5, in_tower((block,13),(block,3)), false, 0)
holds(5, in_tower((block,13),(block,4)), false, 0)
holds(5, in_tower((block,13),(block,5)), false, 0)
holds(5, in_tower((block,13),(block,6)), false, 0)
holds(5, in_tower((block,13),(block,7)), false, 0)
holds(5, in_tower((block,13),(block,8)), false, 0)
holds(5, in_tower((block,13),(block,9)), false, 0)
holds(5, in_tower((block,14),(block,1)), false, 0)
holds(5, in_tower((block,14),(block,10)), false, 0)
holds(5, in_tower((block,14),(block,11)), false, 0)
holds(5, in_tower((block,14),(block,12)), false, 0)
holds(5, in_tower((block,14),(block,13)), false, 0)
holds(5, in_tower((block,14),(block,14)), false, 0)
holds(5, in_tower((block,14),(block,15)), false, 0)
holds(5, in_tower((block,14),(block,16)), false, 0)
holds(5, in_tower((block,14),(block,17)), false, 0)
holds(5, in_tower((block,14),(block,18)), false, 0)
holds(5, in_tower((block,14),(block,2)), false, 0)
holds(5, in_tower((block,14),(block,3)), false, 0)
holds(5, in_tower((block,14),(block,4)), false, 0)
holds(5, in_tower((block,14),(block,5)), false, 0)
holds(5, in_tower((block,14),(block,6)), false, 0)
holds(5, in_tower((block,14),(block,7)), false, 0)
holds(5, in_tower((block,14),(block,8)), false, 0)
holds(5, in_tower((block,14),(block,9)), false, 0)
holds(5, in_tower((block,15),(block,1)), false, 0)
holds(5, in_tower((block,15),(block,10)), false, 0)
holds(5, in_tower((block,15),(block,11)), false, 0)
holds(5, in_tower((block,15),(block,12)), false, 0)
holds(5, in_tower((block,15),(block,13)), false, 0)
holds(5, in_tower((block,15),(block,14)), false, 0)
holds(5, in_tower((block,15),(block,15)), false, 0)
holds(5, in_tower((block,15),(block,16)), false, 0)
holds(5, in_tower((block,15),(block,17)), false, 0)
holds(5, in_tower((block,15),(block,18)), false, 0)
holds(5, in_tower((block,15),(block,2)), false, 0)
holds(5, in_tower((block,15),(block,3)), false, 0)
holds(5, in_tower((block,15),(block,4)), false, 0)
holds(5, in_tower((block,15),(block,5)), false, 0)
holds(5, in_tower((block,15),(block,6)), false, 0)
holds(5, in_tower((block,15),(block,7)), false, 0)
holds(5, in_tower((block,15),(block,8)), false, 0)
holds(5, in_tower((block,15),(block,9)), false, 0)
holds(5, in_tower((block,16),(block,1)), false, 0)
holds(5, in_tower((block,16),(block,10)), false, 0)
holds(5, in_tower((block,16),(block,11)), false, 0)
holds(5, in_tower((block,16),(block,12)), false, 0)
holds(5, in_tower((block,16),(block,13)), false, 0)
holds(5, in_tower((block,16),(block,14)), false, 0)
holds(5, in_tower((block,16),(block,15)), false, 0)
holds(5, in_tower((block,16),(block,16)), true, 0)
holds(5, in_tower((block,16),(block,17)), false, 0)
holds(5, in_tower((block,16),(block,18)), true, 0)
holds(5, in_tower((block,16),(block,2)), false, 0)
holds(5, in_tower((block,16),(block,3)), false, 0)
holds(5, in_tower((block,16),(block,4)), false, 0)
holds(5, in_tower((block,16),(block,5)), false, 0)
holds(5, in_tower((block,16),(block,6)), false, 0)
holds(5, in_tower((block,16),(block,7)), false, 0)
holds(5, in_tower((block,16),(block,8)), false, 0)
holds(5, in_tower((block,16),(block,9)), false, 0)
holds(5, in_tower((block,17),(block,1)), false, 0)
holds(5, in_tower((block,17),(block,10)), false, 0)
holds(5, in_tower((block,17),(block,11)), false, 0)
holds(5, in_tower((block,17),(block,12)), false, 0)
holds(5, in_tower((block,17),(block,13)), false, 0)
holds(5, in_tower((block,17),(block,14)), false, 0)
holds(5, in_tower((block,17),(block,15)), false, 0)
holds(5, in_tower((block,17),(block,16)), false, 0)
holds(5, in_tower((block,17),(block,17)), false, 0)
holds(5, in_tower((block,17),(block,18)), false, 0)
holds(5, in_tower((block,17),(block,2)), false, 0)
holds(5, in_tower((block,17),(block,3)), false, 0)
holds(5, in_tower((block,17),(block,4)), false, 0)
holds(5, in_tower((block,17),(block,5)), false, 0)
holds(5, in_tower((block,17),(block,6)), false, 0)
holds(5, in_tower((block,17),(block,7)), false, 0)
holds(5, in_tower((block,17),(block,8)), false, 0)
holds(5, in_tower((block,17),(block,9)), false, 0)
holds(5, in_tower((block,18),(block,1)), false, 0)
holds(5, in_tower((block,18),(block,10)), false, 0)
holds(5, in_tower((block,18),(block,11)), false, 0)
holds(5, in_tower((block,18),(block,12)), false, 0)
holds(5, in_tower((block,18),(block,13)), false, 0)
holds(5, in_tower((block,18),(block,14)), false, 0)
holds(5, in_tower((block,18),(block,15)), false, 0)
holds(5, in_tower((block,18),(block,16)), false, 0)
holds(5, in_tower((block,18),(block,17)), false, 0)
holds(5, in_tower((block,18),(block,18)), false, 0)
holds(5, in_tower((block,18),(block,2)), false, 0)
holds(5, in_tower((block,18),(block,3)), false, 0)
holds(5, in_tower((block,18),(block,4)), false, 0)
holds(5, in_tower((block,18),(block,5)), false, 0)
holds(5, in_tower((block,18),(block,6)), false, 0)
holds(5, in_tower((block,18),(block,7)), false, 0)
holds(5, in_tower((block,18),(block,8)), false, 0)
holds(5, in_tower((block,18),(block,9)), false, 0)
holds(5, in_tower((block,2),(block,1)), false, 0)
holds(5, in_tower((block,2),(block,10)), false, 0)
holds(5, in_tower((block,2),(block,11)), false, 0)
holds(5, in_tower((block,2),(block,12)), false, 0)
holds(5, in_tower((block,2),(block,13)), false, 0)
holds(5, in_tower((block,2),(block,14)), false, 0)
holds(5, in_tower((block,2),(block,15)), false, 0)
holds(5, in_tower((block,2),(block,16)), false, 0)
holds(5, in_tower((block,2),(block,17)), false, 0)
holds(5, in_tower((block,2),(block,18)), false, 0)
holds(5, in_tower((block,2),(block,2)), true, 0)
holds(5, in_tower((block,2),(block,3)), false, 0)
holds(5, in_tower((block,2),(block,4)), false, 0)
holds(5, in_tower((block,2),(block,5)), false, 0)
holds(5, in_tower((block,2),(block,6)), false, 0)
holds(5, in_tower((block,2),(block,7)), false, 0)
holds(5, in_tower((block,2),(block,8)), false, 0)
holds(5, in_tower((block,2),(block,9)), false, 0)
holds(5, in_tower((block,3),(block,1)), false, 0)
holds(5, in_tower((block,3),(block,10)), false, 0)
holds(5, in_tower((block,3),(block,11)), false, 0)
holds(5, in_tower((block,3),(block,12)), false, 0)
holds(5, in_tower((block,3),(block,13)), false, 0)
holds(5, in_tower((block,3),(block,14)), false, 0)
holds(5, in_tower((block,3),(block,15)), false, 0)
holds(5, in_tower((block,3),(block,16)), false, 0)
holds(5, in_tower((block,3),(block,17)), false, 0)
holds(5, in_tower((block,3),(block,18)), false, 0)
holds(5, in_tower((block,3),(block,2)), false, 0)
holds(5, in_tower((block,3),(block,3)), false, 0)
holds(5, in_tower((block,3),(block,4)), false, 0)
holds(5, in_tower((block,3),(block,5)), false, 0)
holds(5, in_tower((block,3),(block,6)), false, 0)
holds(5, in_tower((block,3),(block,7)), false, 0)
holds(5, in_tower((block,3),(block,8)), false, 0)
holds(5, in_tower((block,3),(block,9)), false, 0)
holds(5, in_tower((block,4),(block,1)), false, 0)
holds(5, in_tower((block,4),(block,10)), false, 0)
holds(5, in_tower((block,4),(block,11)), false, 0)
holds(5, in_tower((block,4),(block,12)), false, 0)
holds(5, in_tower((block,4),(block,13)), false, 0)
holds(5, in_tower((block,4),(block,14)), false, 0)
holds(5, in_tower((block,4),(block,15)), false, 0)
holds(5, in_tower((block,4),(block,16)), false, 0)
holds(5, in_tower((block,4),(block,17)), false, 0)
holds(5, in_tower((block,4),(block,18)), false, 0)
holds(5, in_tower((block,4),(block,2)), false, 0)
holds(5, in_tower((block,4),(block,3)), false, 0)
holds(5, in_tower((block,4),(block,4)), false, 0)
holds(5, in_tower((block,4),(block,5)), false, 0)
holds(5, in_tower((block,4),(block,6)), false, 0)
holds(5, in_tower((block,4),(block,7)), false, 0)
holds(5, in_tower((block,4),(block,8)), false, 0)
holds(5, in_tower((block,4),(block,9)), false, 0)
holds(5, in_tower((block,5),(block,1)), false, 0)
holds(5, in_tower((block,5),(block,10)), false, 0)
holds(5, in_tower((block,5),(block,11)), false, 0)
holds(5, in_tower((block,5),(block,12)), false, 0)
holds(5, in_tower((block,5),(block,13)), false, 0)
holds(5, in_tower((block,5),(block,14)), false, 0)
holds(5, in_tower((block,5),(block,15)), false, 0)
holds(5, in_tower((block,5),(block,16)), false, 0)
holds(5, in_tower((block,5),(block,17)), false, 0)
holds(5, in_tower((block,5),(block,18)), false, 0)
holds(5, in_tower((block,5),(block,2)), false, 0)
holds(5, in_tower((block,5),(block,3)), false, 0)
holds(5, in_tower((block,5),(block,4)), false, 0)
holds(5, in_tower((block,5),(block,5)), false, 0)
holds(5, in_tower((block,5),(block,6)), false, 0)
holds(5, in_tower((block,5),(block,7)), false, 0)
holds(5, in_tower((block,5),(block,8)), false, 0)
holds(5, in_tower((block,5),(block,9)), false, 0)
holds(5, in_tower((block,6),(block,1)), false, 0)
holds(5, in_tower((block,6),(block,10)), false, 0)
holds(5, in_tower((block,6),(block,11)), false, 0)
holds(5, in_tower((block,6),(block,12)), false, 0)
holds(5, in_tower((block,6),(block,13)), false, 0)
holds(5, in_tower((block,6),(block,14)), false, 0)
holds(5, in_tower((block,6),(block,15)), false, 0)
holds(5, in_tower((block,6),(block,16)), false, 0)
holds(5, in_tower((block,6),(block,17)), false, 0)
holds(5, in_tower((block,6),(block,18)), false, 0)
holds(5, in_tower((block,6),(block,2)), false, 0)
holds(5, in_tower((block,6),(block,3)), false, 0)
holds(5, in_tower((block,6),(block,4)), false, 0)
holds(5, in_tower((block,6),(block,5)), false, 0)
holds(5, in_tower((block,6),(block,6)), false, 0)
holds(5, in_tower((block,6),(block,7)), false, 0)
holds(5, in_tower((block,6),(block,8)), false, 0)
holds(5, in_tower((block,6),(block,9)), false, 0)
holds(5, in_tower((block,7),(block,1)), false, 0)
holds(5, in_tower((block,7),(block,10)), false, 0)
holds(5, in_tower((block,7),(block,11)), false, 0)
holds(5, in_tower((block,7),(block,12)), false, 0)
holds(5, in_tower((block,7),(block,13)), false, 0)
holds(5, in_tower((block,7),(block,14)), false, 0)
holds(5, in_tower((block,7),(block,15)), false, 0)
holds(5, in_tower((block,7),(block,16)), false, 0)
holds(5, in_tower((block,7),(block,17)), false, 0)
holds(5, in_tower((block,7),(block,18)), false, 0)
holds(5, in_tower((block,7),(block,2)), false, 0)
holds(5, in_tower((block,7),(block,3)), false, 0)
holds(5, in_tower((block,7),(block,4)), false, 0)
holds(5, in_tower((block,7),(block,5)), false, 0)
holds(5, in_tower((block,7),(block,6)), false, 0)
holds(5, in_tower((block,7),(block,7)), true, 0)
holds(5, in_tower((block,7),(block,8)), false, 0)
holds(5, in_tower((block,7),(block,9)), true, 0)
holds(5, in_tower((block,8),(block,1)), false, 0)
holds(5, in_tower((block,8),(block,10)), false, 0)
holds(5, in_tower((block,8),(block,11)), false, 0)
holds(5, in_tower((block,8),(block,12)), false, 0)
holds(5, in_tower((block,8),(block,13)), false, 0)
holds(5, in_tower((block,8),(block,14)), false, 0)
holds(5, in_tower((block,8),(block,15)), false, 0)
holds(5, in_tower((block,8),(block,16)), false, 0)
holds(5, in_tower((block,8),(block,17)), false, 0)
holds(5, in_tower((block,8),(block,18)), false, 0)
holds(5, in_tower((block,8),(block,2)), false, 0)
holds(5, in_tower((block,8),(block,3)), false, 0)
holds(5, in_tower((block,8),(block,4)), false, 0)
holds(5, in_tower((block,8),(block,5)), false, 0)
holds(5, in_tower((block,8),(block,6)), false, 0)
holds(5, in_tower((block,8),(block,7)), false, 0)
holds(5, in_tower((block,8),(block,8)), false, 0)
holds(5, in_tower((block,8),(block,9)), false, 0)
holds(5, in_tower((block,9),(block,1)), false, 0)
holds(5, in_tower((block,9),(block,10)), false, 0)
holds(5, in_tower((block,9),(block,11)), false, 0)
holds(5, in_tower((block,9),(block,12)), false, 0)
holds(5, in_tower((block,9),(block,13)), false, 0)
holds(5, in_tower((block,9),(block,14)), false, 0)
holds(5, in_tower((block,9),(block,15)), false, 0)
holds(5, in_tower((block,9),(block,16)), false, 0)
holds(5, in_tower((block,9),(block,17)), false, 0)
holds(5, in_tower((block,9),(block,18)), false, 0)
holds(5, in_tower((block,9),(block,2)), false, 0)
holds(5, in_tower((block,9),(block,3)), false, 0)
holds(5, in_tower((block,9),(block,4)), false, 0)
holds(5, in_tower((block,9),(block,5)), false, 0)
holds(5, in_tower((block,9),(block,6)), false, 0)
holds(5, in_tower((block,9),(block,7)), false, 0)
holds(5, in_tower((block,9),(block,8)), false, 0)
holds(5, in_tower((block,9),(block,9)), false, 0)
holds(5, on((block,1)), puzzle_room_1_table, 0)
holds(5, on((block,10)), puzzle_room_2_table, 0)
holds(5, on((block,11)), puzzle_room_2_table, 0)
holds(5, on((block,12)), (block,10), 0)
holds(5, on((block,13)), nothing, 0)
holds(5, on((block,14)), nothing, 0)
holds(5, on((block,15)), nothing, 0)
holds(5, on((block,16)), puzzle_room_2_table, 0)
holds(5, on((block,17)), nothing, 0)
holds(5, on((block,18)), (block,16), 0)
holds(5, on((block,2)), puzzle_room_1_table, 0)
holds(5, on((block,3)), (block,1), 0)
holds(5, on((block,4)), nothing, 0)
holds(5, on((block,5)), nothing, 0)
holds(5, on((block,6)), nothing, 0)
holds(5, on((block,7)), puzzle_room_1_table, 0)
holds(5, on((block,8)), nothing, 0)
holds(5, on((block,9)), (block,7), 0)
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(5, transporting(talos,(block,1)), false, 0)
holds(5, transporting(talos,(block,10)), false, 0)
holds(5, transporting(talos,(block,11)), false, 0)
holds(5, transporting(talos,(block,12)), false, 0)
holds(5, transporting(talos,(block,13)), false, 0)
holds(5, transporting(talos,(block,14)), false, 0)
holds(5, transporting(talos,(block,15)), false, 0)
holds(5, transporting(talos,(block,16)), false, 0)
holds(5, transporting(talos,(block,17)), false, 0)
holds(5, transporting(talos,(block,18)), false, 0)
holds(5, transporting(talos,(block,2)), false, 0)
holds(5, transporting(talos,(block,3)), false, 0)
holds(5, transporting(talos,(block,4)), false, 0)
holds(5, transporting(talos,(block,5)), false, 0)
holds(5, transporting(talos,(block,6)), false, 0)
holds(5, transporting(talos,(block,7)), false, 0)
holds(5, transporting(talos,(block,8)), false, 0)
holds(5, transporting(talos,(block,9)), false, 0)
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[19-01-2022_12-50-03] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 4            
      ================================================      

holds(4, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(4, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(4, complete_tower(red,puzzle_room_1_table), false, 0)
holds(4, complete_tower(red,puzzle_room_2_table), false, 0)
holds(4, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(4, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(4, grasping(manipulator_arm_1), nothing, 0)
holds(4, grasping(manipulator_arm_2), nothing, 0)
holds(4, in((block,1)), puzzle_room_1, 0)
holds(4, in((block,10)), puzzle_room_2, 0)
holds(4, in((block,11)), puzzle_room_2, 0)
holds(4, in((block,12)), puzzle_room_2, 0)
holds(4, in((block,13)), store_room_2, 0)
holds(4, in((block,14)), store_room_2, 0)
holds(4, in((block,15)), store_room_2, 0)
holds(4, in((block,16)), puzzle_room_2, 0)
holds(4, in((block,17)), store_room_2, 0)
holds(4, in((block,18)), puzzle_room_2, 0)
holds(4, in((block,2)), puzzle_room_1, 0)
holds(4, in((block,3)), puzzle_room_1, 0)
holds(4, in((block,4)), store_room_1, 0)
holds(4, in((block,5)), store_room_1, 0)
holds(4, in((block,6)), store_room_1, 0)
holds(4, in((block,7)), puzzle_room_1, 0)
holds(4, in((block,8)), store_room_1, 0)
holds(4, in((block,9)), puzzle_room_1, 0)
holds(4, in(manipulator_arm_1), starting_room_1, 0)
holds(4, in(manipulator_arm_2), starting_room_1, 0)
holds(4, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(4, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(4, in(talos), starting_room_1, 0)
holds(4, in_tower((block,1),(block,1)), true, 0)
holds(4, in_tower((block,1),(block,10)), false, 0)
holds(4, in_tower((block,1),(block,11)), false, 0)
holds(4, in_tower((block,1),(block,12)), false, 0)
holds(4, in_tower((block,1),(block,13)), false, 0)
holds(4, in_tower((block,1),(block,14)), false, 0)
holds(4, in_tower((block,1),(block,15)), false, 0)
holds(4, in_tower((block,1),(block,16)), false, 0)
holds(4, in_tower((block,1),(block,17)), false, 0)
holds(4, in_tower((block,1),(block,18)), false, 0)
holds(4, in_tower((block,1),(block,2)), false, 0)
holds(4, in_tower((block,1),(block,3)), true, 0)
holds(4, in_tower((block,1),(block,4)), false, 0)
holds(4, in_tower((block,1),(block,5)), false, 0)
holds(4, in_tower((block,1),(block,6)), false, 0)
holds(4, in_tower((block,1),(block,7)), false, 0)
holds(4, in_tower((block,1),(block,8)), false, 0)
holds(4, in_tower((block,1),(block,9)), false, 0)
holds(4, in_tower((block,10),(block,1)), false, 0)
holds(4, in_tower((block,10),(block,10)), true, 0)
holds(4, in_tower((block,10),(block,11)), false, 0)
holds(4, in_tower((block,10),(block,12)), true, 0)
holds(4, in_tower((block,10),(block,13)), false, 0)
holds(4, in_tower((block,10),(block,14)), false, 0)
holds(4, in_tower((block,10),(block,15)), false, 0)
holds(4, in_tower((block,10),(block,16)), false, 0)
holds(4, in_tower((block,10),(block,17)), false, 0)
holds(4, in_tower((block,10),(block,18)), false, 0)
holds(4, in_tower((block,10),(block,2)), false, 0)
holds(4, in_tower((block,10),(block,3)), false, 0)
holds(4, in_tower((block,10),(block,4)), false, 0)
holds(4, in_tower((block,10),(block,5)), false, 0)
holds(4, in_tower((block,10),(block,6)), false, 0)
holds(4, in_tower((block,10),(block,7)), false, 0)
holds(4, in_tower((block,10),(block,8)), false, 0)
holds(4, in_tower((block,10),(block,9)), false, 0)
holds(4, in_tower((block,11),(block,1)), false, 0)
holds(4, in_tower((block,11),(block,10)), false, 0)
holds(4, in_tower((block,11),(block,11)), true, 0)
holds(4, in_tower((block,11),(block,12)), false, 0)
holds(4, in_tower((block,11),(block,13)), false, 0)
holds(4, in_tower((block,11),(block,14)), false, 0)
holds(4, in_tower((block,11),(block,15)), false, 0)
holds(4, in_tower((block,11),(block,16)), false, 0)
holds(4, in_tower((block,11),(block,17)), false, 0)
holds(4, in_tower((block,11),(block,18)), false, 0)
holds(4, in_tower((block,11),(block,2)), false, 0)
holds(4, in_tower((block,11),(block,3)), false, 0)
holds(4, in_tower((block,11),(block,4)), false, 0)
holds(4, in_tower((block,11),(block,5)), false, 0)
holds(4, in_tower((block,11),(block,6)), false, 0)
holds(4, in_tower((block,11),(block,7)), false, 0)
holds(4, in_tower((block,11),(block,8)), false, 0)
holds(4, in_tower((block,11),(block,9)), false, 0)
holds(4, in_tower((block,12),(block,1)), false, 0)
holds(4, in_tower((block,12),(block,10)), false, 0)
holds(4, in_tower((block,12),(block,11)), false, 0)
holds(4, in_tower((block,12),(block,12)), false, 0)
holds(4, in_tower((block,12),(block,13)), false, 0)
holds(4, in_tower((block,12),(block,14)), false, 0)
holds(4, in_tower((block,12),(block,15)), false, 0)
holds(4, in_tower((block,12),(block,16)), false, 0)
holds(4, in_tower((block,12),(block,17)), false, 0)
holds(4, in_tower((block,12),(block,18)), false, 0)
holds(4, in_tower((block,12),(block,2)), false, 0)
holds(4, in_tower((block,12),(block,3)), false, 0)
holds(4, in_tower((block,12),(block,4)), false, 0)
holds(4, in_tower((block,12),(block,5)), false, 0)
holds(4, in_tower((block,12),(block,6)), false, 0)
holds(4, in_tower((block,12),(block,7)), false, 0)
holds(4, in_tower((block,12),(block,8)), false, 0)
holds(4, in_tower((block,12),(block,9)), false, 0)
holds(4, in_tower((block,13),(block,1)), false, 0)
holds(4, in_tower((block,13),(block,10)), false, 0)
holds(4, in_tower((block,13),(block,11)), false, 0)
holds(4, in_tower((block,13),(block,12)), false, 0)
holds(4, in_tower((block,13),(block,13)), false, 0)
holds(4, in_tower((block,13),(block,14)), false, 0)
holds(4, in_tower((block,13),(block,15)), false, 0)
holds(4, in_tower((block,13),(block,16)), false, 0)
holds(4, in_tower((block,13),(block,17)), false, 0)
holds(4, in_tower((block,13),(block,18)), false, 0)
holds(4, in_tower((block,13),(block,2)), false, 0)
holds(4, in_tower((block,13),(block,3)), false, 0)
holds(4, in_tower((block,13),(block,4)), false, 0)
holds(4, in_tower((block,13),(block,5)), false, 0)
holds(4, in_tower((block,13),(block,6)), false, 0)
holds(4, in_tower((block,13),(block,7)), false, 0)
holds(4, in_tower((block,13),(block,8)), false, 0)
holds(4, in_tower((block,13),(block,9)), false, 0)
holds(4, in_tower((block,14),(block,1)), false, 0)
holds(4, in_tower((block,14),(block,10)), false, 0)
holds(4, in_tower((block,14),(block,11)), false, 0)
holds(4, in_tower((block,14),(block,12)), false, 0)
holds(4, in_tower((block,14),(block,13)), false, 0)
holds(4, in_tower((block,14),(block,14)), false, 0)
holds(4, in_tower((block,14),(block,15)), false, 0)
holds(4, in_tower((block,14),(block,16)), false, 0)
holds(4, in_tower((block,14),(block,17)), false, 0)
holds(4, in_tower((block,14),(block,18)), false, 0)
holds(4, in_tower((block,14),(block,2)), false, 0)
holds(4, in_tower((block,14),(block,3)), false, 0)
holds(4, in_tower((block,14),(block,4)), false, 0)
holds(4, in_tower((block,14),(block,5)), false, 0)
holds(4, in_tower((block,14),(block,6)), false, 0)
holds(4, in_tower((block,14),(block,7)), false, 0)
holds(4, in_tower((block,14),(block,8)), false, 0)
holds(4, in_tower((block,14),(block,9)), false, 0)
holds(4, in_tower((block,15),(block,1)), false, 0)
holds(4, in_tower((block,15),(block,10)), false, 0)
holds(4, in_tower((block,15),(block,11)), false, 0)
holds(4, in_tower((block,15),(block,12)), false, 0)
holds(4, in_tower((block,15),(block,13)), false, 0)
holds(4, in_tower((block,15),(block,14)), false, 0)
holds(4, in_tower((block,15),(block,15)), false, 0)
holds(4, in_tower((block,15),(block,16)), false, 0)
holds(4, in_tower((block,15),(block,17)), false, 0)
holds(4, in_tower((block,15),(block,18)), false, 0)
holds(4, in_tower((block,15),(block,2)), false, 0)
holds(4, in_tower((block,15),(block,3)), false, 0)
holds(4, in_tower((block,15),(block,4)), false, 0)
holds(4, in_tower((block,15),(block,5)), false, 0)
holds(4, in_tower((block,15),(block,6)), false, 0)
holds(4, in_tower((block,15),(block,7)), false, 0)
holds(4, in_tower((block,15),(block,8)), false, 0)
holds(4, in_tower((block,15),(block,9)), false, 0)
holds(4, in_tower((block,16),(block,1)), false, 0)
holds(4, in_tower((block,16),(block,10)), false, 0)
holds(4, in_tower((block,16),(block,11)), false, 0)
holds(4, in_tower((block,16),(block,12)), false, 0)
holds(4, in_tower((block,16),(block,13)), false, 0)
holds(4, in_tower((block,16),(block,14)), false, 0)
holds(4, in_tower((block,16),(block,15)), false, 0)
holds(4, in_tower((block,16),(block,16)), true, 0)
holds(4, in_tower((block,16),(block,17)), false, 0)
holds(4, in_tower((block,16),(block,18)), true, 0)
holds(4, in_tower((block,16),(block,2)), false, 0)
holds(4, in_tower((block,16),(block,3)), false, 0)
holds(4, in_tower((block,16),(block,4)), false, 0)
holds(4, in_tower((block,16),(block,5)), false, 0)
holds(4, in_tower((block,16),(block,6)), false, 0)
holds(4, in_tower((block,16),(block,7)), false, 0)
holds(4, in_tower((block,16),(block,8)), false, 0)
holds(4, in_tower((block,16),(block,9)), false, 0)
holds(4, in_tower((block,17),(block,1)), false, 0)
holds(4, in_tower((block,17),(block,10)), false, 0)
holds(4, in_tower((block,17),(block,11)), false, 0)
holds(4, in_tower((block,17),(block,12)), false, 0)
holds(4, in_tower((block,17),(block,13)), false, 0)
holds(4, in_tower((block,17),(block,14)), false, 0)
holds(4, in_tower((block,17),(block,15)), false, 0)
holds(4, in_tower((block,17),(block,16)), false, 0)
holds(4, in_tower((block,17),(block,17)), false, 0)
holds(4, in_tower((block,17),(block,18)), false, 0)
holds(4, in_tower((block,17),(block,2)), false, 0)
holds(4, in_tower((block,17),(block,3)), false, 0)
holds(4, in_tower((block,17),(block,4)), false, 0)
holds(4, in_tower((block,17),(block,5)), false, 0)
holds(4, in_tower((block,17),(block,6)), false, 0)
holds(4, in_tower((block,17),(block,7)), false, 0)
holds(4, in_tower((block,17),(block,8)), false, 0)
holds(4, in_tower((block,17),(block,9)), false, 0)
holds(4, in_tower((block,18),(block,1)), false, 0)
holds(4, in_tower((block,18),(block,10)), false, 0)
holds(4, in_tower((block,18),(block,11)), false, 0)
holds(4, in_tower((block,18),(block,12)), false, 0)
holds(4, in_tower((block,18),(block,13)), false, 0)
holds(4, in_tower((block,18),(block,14)), false, 0)
holds(4, in_tower((block,18),(block,15)), false, 0)
holds(4, in_tower((block,18),(block,16)), false, 0)
holds(4, in_tower((block,18),(block,17)), false, 0)
holds(4, in_tower((block,18),(block,18)), false, 0)
holds(4, in_tower((block,18),(block,2)), false, 0)
holds(4, in_tower((block,18),(block,3)), false, 0)
holds(4, in_tower((block,18),(block,4)), false, 0)
holds(4, in_tower((block,18),(block,5)), false, 0)
holds(4, in_tower((block,18),(block,6)), false, 0)
holds(4, in_tower((block,18),(block,7)), false, 0)
holds(4, in_tower((block,18),(block,8)), false, 0)
holds(4, in_tower((block,18),(block,9)), false, 0)
holds(4, in_tower((block,2),(block,1)), false, 0)
holds(4, in_tower((block,2),(block,10)), false, 0)
holds(4, in_tower((block,2),(block,11)), false, 0)
holds(4, in_tower((block,2),(block,12)), false, 0)
holds(4, in_tower((block,2),(block,13)), false, 0)
holds(4, in_tower((block,2),(block,14)), false, 0)
holds(4, in_tower((block,2),(block,15)), false, 0)
holds(4, in_tower((block,2),(block,16)), false, 0)
holds(4, in_tower((block,2),(block,17)), false, 0)
holds(4, in_tower((block,2),(block,18)), false, 0)
holds(4, in_tower((block,2),(block,2)), true, 0)
holds(4, in_tower((block,2),(block,3)), false, 0)
holds(4, in_tower((block,2),(block,4)), false, 0)
holds(4, in_tower((block,2),(block,5)), false, 0)
holds(4, in_tower((block,2),(block,6)), false, 0)
holds(4, in_tower((block,2),(block,7)), false, 0)
holds(4, in_tower((block,2),(block,8)), false, 0)
holds(4, in_tower((block,2),(block,9)), false, 0)
holds(4, in_tower((block,3),(block,1)), false, 0)
holds(4, in_tower((block,3),(block,10)), false, 0)
holds(4, in_tower((block,3),(block,11)), false, 0)
holds(4, in_tower((block,3),(block,12)), false, 0)
holds(4, in_tower((block,3),(block,13)), false, 0)
holds(4, in_tower((block,3),(block,14)), false, 0)
holds(4, in_tower((block,3),(block,15)), false, 0)
holds(4, in_tower((block,3),(block,16)), false, 0)
holds(4, in_tower((block,3),(block,17)), false, 0)
holds(4, in_tower((block,3),(block,18)), false, 0)
holds(4, in_tower((block,3),(block,2)), false, 0)
holds(4, in_tower((block,3),(block,3)), false, 0)
holds(4, in_tower((block,3),(block,4)), false, 0)
holds(4, in_tower((block,3),(block,5)), false, 0)
holds(4, in_tower((block,3),(block,6)), false, 0)
holds(4, in_tower((block,3),(block,7)), false, 0)
holds(4, in_tower((block,3),(block,8)), false, 0)
holds(4, in_tower((block,3),(block,9)), false, 0)
holds(4, in_tower((block,4),(block,1)), false, 0)
holds(4, in_tower((block,4),(block,10)), false, 0)
holds(4, in_tower((block,4),(block,11)), false, 0)
holds(4, in_tower((block,4),(block,12)), false, 0)
holds(4, in_tower((block,4),(block,13)), false, 0)
holds(4, in_tower((block,4),(block,14)), false, 0)
holds(4, in_tower((block,4),(block,15)), false, 0)
holds(4, in_tower((block,4),(block,16)), false, 0)
holds(4, in_tower((block,4),(block,17)), false, 0)
holds(4, in_tower((block,4),(block,18)), false, 0)
holds(4, in_tower((block,4),(block,2)), false, 0)
holds(4, in_tower((block,4),(block,3)), false, 0)
holds(4, in_tower((block,4),(block,4)), false, 0)
holds(4, in_tower((block,4),(block,5)), false, 0)
holds(4, in_tower((block,4),(block,6)), false, 0)
holds(4, in_tower((block,4),(block,7)), false, 0)
holds(4, in_tower((block,4),(block,8)), false, 0)
holds(4, in_tower((block,4),(block,9)), false, 0)
holds(4, in_tower((block,5),(block,1)), false, 0)
holds(4, in_tower((block,5),(block,10)), false, 0)
holds(4, in_tower((block,5),(block,11)), false, 0)
holds(4, in_tower((block,5),(block,12)), false, 0)
holds(4, in_tower((block,5),(block,13)), false, 0)
holds(4, in_tower((block,5),(block,14)), false, 0)
holds(4, in_tower((block,5),(block,15)), false, 0)
holds(4, in_tower((block,5),(block,16)), false, 0)
holds(4, in_tower((block,5),(block,17)), false, 0)
holds(4, in_tower((block,5),(block,18)), false, 0)
holds(4, in_tower((block,5),(block,2)), false, 0)
holds(4, in_tower((block,5),(block,3)), false, 0)
holds(4, in_tower((block,5),(block,4)), false, 0)
holds(4, in_tower((block,5),(block,5)), false, 0)
holds(4, in_tower((block,5),(block,6)), false, 0)
holds(4, in_tower((block,5),(block,7)), false, 0)
holds(4, in_tower((block,5),(block,8)), false, 0)
holds(4, in_tower((block,5),(block,9)), false, 0)
holds(4, in_tower((block,6),(block,1)), false, 0)
holds(4, in_tower((block,6),(block,10)), false, 0)
holds(4, in_tower((block,6),(block,11)), false, 0)
holds(4, in_tower((block,6),(block,12)), false, 0)
holds(4, in_tower((block,6),(block,13)), false, 0)
holds(4, in_tower((block,6),(block,14)), false, 0)
holds(4, in_tower((block,6),(block,15)), false, 0)
holds(4, in_tower((block,6),(block,16)), false, 0)
holds(4, in_tower((block,6),(block,17)), false, 0)
holds(4, in_tower((block,6),(block,18)), false, 0)
holds(4, in_tower((block,6),(block,2)), false, 0)
holds(4, in_tower((block,6),(block,3)), false, 0)
holds(4, in_tower((block,6),(block,4)), false, 0)
holds(4, in_tower((block,6),(block,5)), false, 0)
holds(4, in_tower((block,6),(block,6)), false, 0)
holds(4, in_tower((block,6),(block,7)), false, 0)
holds(4, in_tower((block,6),(block,8)), false, 0)
holds(4, in_tower((block,6),(block,9)), false, 0)
holds(4, in_tower((block,7),(block,1)), false, 0)
holds(4, in_tower((block,7),(block,10)), false, 0)
holds(4, in_tower((block,7),(block,11)), false, 0)
holds(4, in_tower((block,7),(block,12)), false, 0)
holds(4, in_tower((block,7),(block,13)), false, 0)
holds(4, in_tower((block,7),(block,14)), false, 0)
holds(4, in_tower((block,7),(block,15)), false, 0)
holds(4, in_tower((block,7),(block,16)), false, 0)
holds(4, in_tower((block,7),(block,17)), false, 0)
holds(4, in_tower((block,7),(block,18)), false, 0)
holds(4, in_tower((block,7),(block,2)), false, 0)
holds(4, in_tower((block,7),(block,3)), false, 0)
holds(4, in_tower((block,7),(block,4)), false, 0)
holds(4, in_tower((block,7),(block,5)), false, 0)
holds(4, in_tower((block,7),(block,6)), false, 0)
holds(4, in_tower((block,7),(block,7)), true, 0)
holds(4, in_tower((block,7),(block,8)), false, 0)
holds(4, in_tower((block,7),(block,9)), true, 0)
holds(4, in_tower((block,8),(block,1)), false, 0)
holds(4, in_tower((block,8),(block,10)), false, 0)
holds(4, in_tower((block,8),(block,11)), false, 0)
holds(4, in_tower((block,8),(block,12)), false, 0)
holds(4, in_tower((block,8),(block,13)), false, 0)
holds(4, in_tower((block,8),(block,14)), false, 0)
holds(4, in_tower((block,8),(block,15)), false, 0)
holds(4, in_tower((block,8),(block,16)), false, 0)
holds(4, in_tower((block,8),(block,17)), false, 0)
holds(4, in_tower((block,8),(block,18)), false, 0)
holds(4, in_tower((block,8),(block,2)), false, 0)
holds(4, in_tower((block,8),(block,3)), false, 0)
holds(4, in_tower((block,8),(block,4)), false, 0)
holds(4, in_tower((block,8),(block,5)), false, 0)
holds(4, in_tower((block,8),(block,6)), false, 0)
holds(4, in_tower((block,8),(block,7)), false, 0)
holds(4, in_tower((block,8),(block,8)), false, 0)
holds(4, in_tower((block,8),(block,9)), false, 0)
holds(4, in_tower((block,9),(block,1)), false, 0)
holds(4, in_tower((block,9),(block,10)), false, 0)
holds(4, in_tower((block,9),(block,11)), false, 0)
holds(4, in_tower((block,9),(block,12)), false, 0)
holds(4, in_tower((block,9),(block,13)), false, 0)
holds(4, in_tower((block,9),(block,14)), false, 0)
holds(4, in_tower((block,9),(block,15)), false, 0)
holds(4, in_tower((block,9),(block,16)), false, 0)
holds(4, in_tower((block,9),(block,17)), false, 0)
holds(4, in_tower((block,9),(block,18)), false, 0)
holds(4, in_tower((block,9),(block,2)), false, 0)
holds(4, in_tower((block,9),(block,3)), false, 0)
holds(4, in_tower((block,9),(block,4)), false, 0)
holds(4, in_tower((block,9),(block,5)), false, 0)
holds(4, in_tower((block,9),(block,6)), false, 0)
holds(4, in_tower((block,9),(block,7)), false, 0)
holds(4, in_tower((block,9),(block,8)), false, 0)
holds(4, in_tower((block,9),(block,9)), false, 0)
holds(4, on((block,1)), puzzle_room_1_table, 0)
holds(4, on((block,10)), puzzle_room_2_table, 0)
holds(4, on((block,11)), puzzle_room_2_table, 0)
holds(4, on((block,12)), (block,10), 0)
holds(4, on((block,13)), nothing, 0)
holds(4, on((block,14)), nothing, 0)
holds(4, on((block,15)), nothing, 0)
holds(4, on((block,16)), puzzle_room_2_table, 0)
holds(4, on((block,17)), nothing, 0)
holds(4, on((block,18)), (block,16), 0)
holds(4, on((block,2)), puzzle_room_1_table, 0)
holds(4, on((block,3)), (block,1), 0)
holds(4, on((block,4)), nothing, 0)
holds(4, on((block,5)), nothing, 0)
holds(4, on((block,6)), nothing, 0)
holds(4, on((block,7)), puzzle_room_1_table, 0)
holds(4, on((block,8)), nothing, 0)
holds(4, on((block,9)), (block,7), 0)
holds(4, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(4, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(4, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(4, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(4, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(4, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(4, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(4, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(4, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(4, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(4, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[19-01-2022_12-50-03] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(3, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(3, complete_tower(red,puzzle_room_1_table), false, 0)
holds(3, complete_tower(red,puzzle_room_2_table), false, 0)
holds(3, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(3, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(3, configuration(manipulator_arm_1), retracted, 0)
holds(3, configuration(manipulator_arm_2), retracted, 0)
holds(3, configuration(puzzle_room_1_door), closed, 0)
holds(3, configuration(puzzle_room_2_door), closed, 0)
holds(3, configuration(starting_room_1_door), closed, 0)
holds(3, configuration(store_room_1_door), closed, 0)
holds(3, configuration(store_room_2_door), closed, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room_1, 0)
holds(3, in((block,10)), puzzle_room_2, 0)
holds(3, in((block,11)), puzzle_room_2, 0)
holds(3, in((block,12)), puzzle_room_2, 0)
holds(3, in((block,13)), store_room_2, 0)
holds(3, in((block,14)), store_room_2, 0)
holds(3, in((block,15)), store_room_2, 0)
holds(3, in((block,16)), puzzle_room_2, 0)
holds(3, in((block,17)), store_room_2, 0)
holds(3, in((block,18)), puzzle_room_2, 0)
holds(3, in((block,2)), puzzle_room_1, 0)
holds(3, in((block,3)), puzzle_room_1, 0)
holds(3, in((block,4)), store_room_1, 0)
holds(3, in((block,5)), store_room_1, 0)
holds(3, in((block,6)), store_room_1, 0)
holds(3, in((block,7)), puzzle_room_1, 0)
holds(3, in((block,8)), store_room_1, 0)
holds(3, in((block,9)), puzzle_room_1, 0)
holds(3, in(manipulator_arm_1), starting_room_1, 0)
holds(3, in(manipulator_arm_2), starting_room_1, 0)
holds(3, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(3, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(3, in(talos), starting_room_1, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,10)), false, 0)
holds(3, in_tower((block,1),(block,11)), false, 0)
holds(3, in_tower((block,1),(block,12)), false, 0)
holds(3, in_tower((block,1),(block,13)), false, 0)
holds(3, in_tower((block,1),(block,14)), false, 0)
holds(3, in_tower((block,1),(block,15)), false, 0)
holds(3, in_tower((block,1),(block,16)), false, 0)
holds(3, in_tower((block,1),(block,17)), false, 0)
holds(3, in_tower((block,1),(block,18)), false, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,1),(block,7)), false, 0)
holds(3, in_tower((block,1),(block,8)), false, 0)
holds(3, in_tower((block,1),(block,9)), false, 0)
holds(3, in_tower((block,10),(block,1)), false, 0)
holds(3, in_tower((block,10),(block,10)), true, 0)
holds(3, in_tower((block,10),(block,11)), false, 0)
holds(3, in_tower((block,10),(block,12)), true, 0)
holds(3, in_tower((block,10),(block,13)), false, 0)
holds(3, in_tower((block,10),(block,14)), false, 0)
holds(3, in_tower((block,10),(block,15)), false, 0)
holds(3, in_tower((block,10),(block,16)), false, 0)
holds(3, in_tower((block,10),(block,17)), false, 0)
holds(3, in_tower((block,10),(block,18)), false, 0)
holds(3, in_tower((block,10),(block,2)), false, 0)
holds(3, in_tower((block,10),(block,3)), false, 0)
holds(3, in_tower((block,10),(block,4)), false, 0)
holds(3, in_tower((block,10),(block,5)), false, 0)
holds(3, in_tower((block,10),(block,6)), false, 0)
holds(3, in_tower((block,10),(block,7)), false, 0)
holds(3, in_tower((block,10),(block,8)), false, 0)
holds(3, in_tower((block,10),(block,9)), false, 0)
holds(3, in_tower((block,11),(block,1)), false, 0)
holds(3, in_tower((block,11),(block,10)), false, 0)
holds(3, in_tower((block,11),(block,11)), true, 0)
holds(3, in_tower((block,11),(block,12)), false, 0)
holds(3, in_tower((block,11),(block,13)), false, 0)
holds(3, in_tower((block,11),(block,14)), false, 0)
holds(3, in_tower((block,11),(block,15)), false, 0)
holds(3, in_tower((block,11),(block,16)), false, 0)
holds(3, in_tower((block,11),(block,17)), false, 0)
holds(3, in_tower((block,11),(block,18)), false, 0)
holds(3, in_tower((block,11),(block,2)), false, 0)
holds(3, in_tower((block,11),(block,3)), false, 0)
holds(3, in_tower((block,11),(block,4)), false, 0)
holds(3, in_tower((block,11),(block,5)), false, 0)
holds(3, in_tower((block,11),(block,6)), false, 0)
holds(3, in_tower((block,11),(block,7)), false, 0)
holds(3, in_tower((block,11),(block,8)), false, 0)
holds(3, in_tower((block,11),(block,9)), false, 0)
holds(3, in_tower((block,12),(block,1)), false, 0)
holds(3, in_tower((block,12),(block,10)), false, 0)
holds(3, in_tower((block,12),(block,11)), false, 0)
holds(3, in_tower((block,12),(block,12)), false, 0)
holds(3, in_tower((block,12),(block,13)), false, 0)
holds(3, in_tower((block,12),(block,14)), false, 0)
holds(3, in_tower((block,12),(block,15)), false, 0)
holds(3, in_tower((block,12),(block,16)), false, 0)
holds(3, in_tower((block,12),(block,17)), false, 0)
holds(3, in_tower((block,12),(block,18)), false, 0)
holds(3, in_tower((block,12),(block,2)), false, 0)
holds(3, in_tower((block,12),(block,3)), false, 0)
holds(3, in_tower((block,12),(block,4)), false, 0)
holds(3, in_tower((block,12),(block,5)), false, 0)
holds(3, in_tower((block,12),(block,6)), false, 0)
holds(3, in_tower((block,12),(block,7)), false, 0)
holds(3, in_tower((block,12),(block,8)), false, 0)
holds(3, in_tower((block,12),(block,9)), false, 0)
holds(3, in_tower((block,13),(block,1)), false, 0)
holds(3, in_tower((block,13),(block,10)), false, 0)
holds(3, in_tower((block,13),(block,11)), false, 0)
holds(3, in_tower((block,13),(block,12)), false, 0)
holds(3, in_tower((block,13),(block,13)), false, 0)
holds(3, in_tower((block,13),(block,14)), false, 0)
holds(3, in_tower((block,13),(block,15)), false, 0)
holds(3, in_tower((block,13),(block,16)), false, 0)
holds(3, in_tower((block,13),(block,17)), false, 0)
holds(3, in_tower((block,13),(block,18)), false, 0)
holds(3, in_tower((block,13),(block,2)), false, 0)
holds(3, in_tower((block,13),(block,3)), false, 0)
holds(3, in_tower((block,13),(block,4)), false, 0)
holds(3, in_tower((block,13),(block,5)), false, 0)
holds(3, in_tower((block,13),(block,6)), false, 0)
holds(3, in_tower((block,13),(block,7)), false, 0)
holds(3, in_tower((block,13),(block,8)), false, 0)
holds(3, in_tower((block,13),(block,9)), false, 0)
holds(3, in_tower((block,14),(block,1)), false, 0)
holds(3, in_tower((block,14),(block,10)), false, 0)
holds(3, in_tower((block,14),(block,11)), false, 0)
holds(3, in_tower((block,14),(block,12)), false, 0)
holds(3, in_tower((block,14),(block,13)), false, 0)
holds(3, in_tower((block,14),(block,14)), false, 0)
holds(3, in_tower((block,14),(block,15)), false, 0)
holds(3, in_tower((block,14),(block,16)), false, 0)
holds(3, in_tower((block,14),(block,17)), false, 0)
holds(3, in_tower((block,14),(block,18)), false, 0)
holds(3, in_tower((block,14),(block,2)), false, 0)
holds(3, in_tower((block,14),(block,3)), false, 0)
holds(3, in_tower((block,14),(block,4)), false, 0)
holds(3, in_tower((block,14),(block,5)), false, 0)
holds(3, in_tower((block,14),(block,6)), false, 0)
holds(3, in_tower((block,14),(block,7)), false, 0)
holds(3, in_tower((block,14),(block,8)), false, 0)
holds(3, in_tower((block,14),(block,9)), false, 0)
holds(3, in_tower((block,15),(block,1)), false, 0)
holds(3, in_tower((block,15),(block,10)), false, 0)
holds(3, in_tower((block,15),(block,11)), false, 0)
holds(3, in_tower((block,15),(block,12)), false, 0)
holds(3, in_tower((block,15),(block,13)), false, 0)
holds(3, in_tower((block,15),(block,14)), false, 0)
holds(3, in_tower((block,15),(block,15)), false, 0)
holds(3, in_tower((block,15),(block,16)), false, 0)
holds(3, in_tower((block,15),(block,17)), false, 0)
holds(3, in_tower((block,15),(block,18)), false, 0)
holds(3, in_tower((block,15),(block,2)), false, 0)
holds(3, in_tower((block,15),(block,3)), false, 0)
holds(3, in_tower((block,15),(block,4)), false, 0)
holds(3, in_tower((block,15),(block,5)), false, 0)
holds(3, in_tower((block,15),(block,6)), false, 0)
holds(3, in_tower((block,15),(block,7)), false, 0)
holds(3, in_tower((block,15),(block,8)), false, 0)
holds(3, in_tower((block,15),(block,9)), false, 0)
holds(3, in_tower((block,16),(block,1)), false, 0)
holds(3, in_tower((block,16),(block,10)), false, 0)
holds(3, in_tower((block,16),(block,11)), false, 0)
holds(3, in_tower((block,16),(block,12)), false, 0)
holds(3, in_tower((block,16),(block,13)), false, 0)
holds(3, in_tower((block,16),(block,14)), false, 0)
holds(3, in_tower((block,16),(block,15)), false, 0)
holds(3, in_tower((block,16),(block,16)), true, 0)
holds(3, in_tower((block,16),(block,17)), false, 0)
holds(3, in_tower((block,16),(block,18)), true, 0)
holds(3, in_tower((block,16),(block,2)), false, 0)
holds(3, in_tower((block,16),(block,3)), false, 0)
holds(3, in_tower((block,16),(block,4)), false, 0)
holds(3, in_tower((block,16),(block,5)), false, 0)
holds(3, in_tower((block,16),(block,6)), false, 0)
holds(3, in_tower((block,16),(block,7)), false, 0)
holds(3, in_tower((block,16),(block,8)), false, 0)
holds(3, in_tower((block,16),(block,9)), false, 0)
holds(3, in_tower((block,17),(block,1)), false, 0)
holds(3, in_tower((block,17),(block,10)), false, 0)
holds(3, in_tower((block,17),(block,11)), false, 0)
holds(3, in_tower((block,17),(block,12)), false, 0)
holds(3, in_tower((block,17),(block,13)), false, 0)
holds(3, in_tower((block,17),(block,14)), false, 0)
holds(3, in_tower((block,17),(block,15)), false, 0)
holds(3, in_tower((block,17),(block,16)), false, 0)
holds(3, in_tower((block,17),(block,17)), false, 0)
holds(3, in_tower((block,17),(block,18)), false, 0)
holds(3, in_tower((block,17),(block,2)), false, 0)
holds(3, in_tower((block,17),(block,3)), false, 0)
holds(3, in_tower((block,17),(block,4)), false, 0)
holds(3, in_tower((block,17),(block,5)), false, 0)
holds(3, in_tower((block,17),(block,6)), false, 0)
holds(3, in_tower((block,17),(block,7)), false, 0)
holds(3, in_tower((block,17),(block,8)), false, 0)
holds(3, in_tower((block,17),(block,9)), false, 0)
holds(3, in_tower((block,18),(block,1)), false, 0)
holds(3, in_tower((block,18),(block,10)), false, 0)
holds(3, in_tower((block,18),(block,11)), false, 0)
holds(3, in_tower((block,18),(block,12)), false, 0)
holds(3, in_tower((block,18),(block,13)), false, 0)
holds(3, in_tower((block,18),(block,14)), false, 0)
holds(3, in_tower((block,18),(block,15)), false, 0)
holds(3, in_tower((block,18),(block,16)), false, 0)
holds(3, in_tower((block,18),(block,17)), false, 0)
holds(3, in_tower((block,18),(block,18)), false, 0)
holds(3, in_tower((block,18),(block,2)), false, 0)
holds(3, in_tower((block,18),(block,3)), false, 0)
holds(3, in_tower((block,18),(block,4)), false, 0)
holds(3, in_tower((block,18),(block,5)), false, 0)
holds(3, in_tower((block,18),(block,6)), false, 0)
holds(3, in_tower((block,18),(block,7)), false, 0)
holds(3, in_tower((block,18),(block,8)), false, 0)
holds(3, in_tower((block,18),(block,9)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,10)), false, 0)
holds(3, in_tower((block,2),(block,11)), false, 0)
holds(3, in_tower((block,2),(block,12)), false, 0)
holds(3, in_tower((block,2),(block,13)), false, 0)
holds(3, in_tower((block,2),(block,14)), false, 0)
holds(3, in_tower((block,2),(block,15)), false, 0)
holds(3, in_tower((block,2),(block,16)), false, 0)
holds(3, in_tower((block,2),(block,17)), false, 0)
holds(3, in_tower((block,2),(block,18)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,7)), false, 0)
holds(3, in_tower((block,2),(block,8)), false, 0)
holds(3, in_tower((block,2),(block,9)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,10)), false, 0)
holds(3, in_tower((block,3),(block,11)), false, 0)
holds(3, in_tower((block,3),(block,12)), false, 0)
holds(3, in_tower((block,3),(block,13)), false, 0)
holds(3, in_tower((block,3),(block,14)), false, 0)
holds(3, in_tower((block,3),(block,15)), false, 0)
holds(3, in_tower((block,3),(block,16)), false, 0)
holds(3, in_tower((block,3),(block,17)), false, 0)
holds(3, in_tower((block,3),(block,18)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,7)), false, 0)
holds(3, in_tower((block,3),(block,8)), false, 0)
holds(3, in_tower((block,3),(block,9)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,10)), false, 0)
holds(3, in_tower((block,4),(block,11)), false, 0)
holds(3, in_tower((block,4),(block,12)), false, 0)
holds(3, in_tower((block,4),(block,13)), false, 0)
holds(3, in_tower((block,4),(block,14)), false, 0)
holds(3, in_tower((block,4),(block,15)), false, 0)
holds(3, in_tower((block,4),(block,16)), false, 0)
holds(3, in_tower((block,4),(block,17)), false, 0)
holds(3, in_tower((block,4),(block,18)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,7)), false, 0)
holds(3, in_tower((block,4),(block,8)), false, 0)
holds(3, in_tower((block,4),(block,9)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,10)), false, 0)
holds(3, in_tower((block,5),(block,11)), false, 0)
holds(3, in_tower((block,5),(block,12)), false, 0)
holds(3, in_tower((block,5),(block,13)), false, 0)
holds(3, in_tower((block,5),(block,14)), false, 0)
holds(3, in_tower((block,5),(block,15)), false, 0)
holds(3, in_tower((block,5),(block,16)), false, 0)
holds(3, in_tower((block,5),(block,17)), false, 0)
holds(3, in_tower((block,5),(block,18)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,7)), false, 0)
holds(3, in_tower((block,5),(block,8)), false, 0)
holds(3, in_tower((block,5),(block,9)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,10)), false, 0)
holds(3, in_tower((block,6),(block,11)), false, 0)
holds(3, in_tower((block,6),(block,12)), false, 0)
holds(3, in_tower((block,6),(block,13)), false, 0)
holds(3, in_tower((block,6),(block,14)), false, 0)
holds(3, in_tower((block,6),(block,15)), false, 0)
holds(3, in_tower((block,6),(block,16)), false, 0)
holds(3, in_tower((block,6),(block,17)), false, 0)
holds(3, in_tower((block,6),(block,18)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,7)), false, 0)
holds(3, in_tower((block,6),(block,8)), false, 0)
holds(3, in_tower((block,6),(block,9)), false, 0)
holds(3, in_tower((block,7),(block,1)), false, 0)
holds(3, in_tower((block,7),(block,10)), false, 0)
holds(3, in_tower((block,7),(block,11)), false, 0)
holds(3, in_tower((block,7),(block,12)), false, 0)
holds(3, in_tower((block,7),(block,13)), false, 0)
holds(3, in_tower((block,7),(block,14)), false, 0)
holds(3, in_tower((block,7),(block,15)), false, 0)
holds(3, in_tower((block,7),(block,16)), false, 0)
holds(3, in_tower((block,7),(block,17)), false, 0)
holds(3, in_tower((block,7),(block,18)), false, 0)
holds(3, in_tower((block,7),(block,2)), false, 0)
holds(3, in_tower((block,7),(block,3)), false, 0)
holds(3, in_tower((block,7),(block,4)), false, 0)
holds(3, in_tower((block,7),(block,5)), false, 0)
holds(3, in_tower((block,7),(block,6)), false, 0)
holds(3, in_tower((block,7),(block,7)), true, 0)
holds(3, in_tower((block,7),(block,8)), false, 0)
holds(3, in_tower((block,7),(block,9)), true, 0)
holds(3, in_tower((block,8),(block,1)), false, 0)
holds(3, in_tower((block,8),(block,10)), false, 0)
holds(3, in_tower((block,8),(block,11)), false, 0)
holds(3, in_tower((block,8),(block,12)), false, 0)
holds(3, in_tower((block,8),(block,13)), false, 0)
holds(3, in_tower((block,8),(block,14)), false, 0)
holds(3, in_tower((block,8),(block,15)), false, 0)
holds(3, in_tower((block,8),(block,16)), false, 0)
holds(3, in_tower((block,8),(block,17)), false, 0)
holds(3, in_tower((block,8),(block,18)), false, 0)
holds(3, in_tower((block,8),(block,2)), false, 0)
holds(3, in_tower((block,8),(block,3)), false, 0)
holds(3, in_tower((block,8),(block,4)), false, 0)
holds(3, in_tower((block,8),(block,5)), false, 0)
holds(3, in_tower((block,8),(block,6)), false, 0)
holds(3, in_tower((block,8),(block,7)), false, 0)
holds(3, in_tower((block,8),(block,8)), false, 0)
holds(3, in_tower((block,8),(block,9)), false, 0)
holds(3, in_tower((block,9),(block,1)), false, 0)
holds(3, in_tower((block,9),(block,10)), false, 0)
holds(3, in_tower((block,9),(block,11)), false, 0)
holds(3, in_tower((block,9),(block,12)), false, 0)
holds(3, in_tower((block,9),(block,13)), false, 0)
holds(3, in_tower((block,9),(block,14)), false, 0)
holds(3, in_tower((block,9),(block,15)), false, 0)
holds(3, in_tower((block,9),(block,16)), false, 0)
holds(3, in_tower((block,9),(block,17)), false, 0)
holds(3, in_tower((block,9),(block,18)), false, 0)
holds(3, in_tower((block,9),(block,2)), false, 0)
holds(3, in_tower((block,9),(block,3)), false, 0)
holds(3, in_tower((block,9),(block,4)), false, 0)
holds(3, in_tower((block,9),(block,5)), false, 0)
holds(3, in_tower((block,9),(block,6)), false, 0)
holds(3, in_tower((block,9),(block,7)), false, 0)
holds(3, in_tower((block,9),(block,8)), false, 0)
holds(3, in_tower((block,9),(block,9)), false, 0)
holds(3, on((block,1)), puzzle_room_1_table, 0)
holds(3, on((block,10)), puzzle_room_2_table, 0)
holds(3, on((block,11)), puzzle_room_2_table, 0)
holds(3, on((block,12)), (block,10), 0)
holds(3, on((block,13)), nothing, 0)
holds(3, on((block,14)), nothing, 0)
holds(3, on((block,15)), nothing, 0)
holds(3, on((block,16)), puzzle_room_2_table, 0)
holds(3, on((block,17)), nothing, 0)
holds(3, on((block,18)), (block,16), 0)
holds(3, on((block,2)), puzzle_room_1_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, on((block,7)), puzzle_room_1_table, 0)
holds(3, on((block,8)), nothing, 0)
holds(3, on((block,9)), (block,7), 0)
holds(3, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(3, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(3, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(3, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(3, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(3, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(3, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(3, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(3, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(3, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(3, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[19-01-2022_12-50-03] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(2, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(2, complete_tower(red,puzzle_room_1_table), false, 0)
holds(2, complete_tower(red,puzzle_room_2_table), false, 0)
holds(2, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(2, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(2, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(2, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(2, configuration(manipulator_limb_1), retracted, 0)
holds(2, configuration(manipulator_limb_2), retracted, 0)
holds(2, configuration(puzzle_room_1_door), closed, 0)
holds(2, configuration(puzzle_room_2_door), closed, 0)
holds(2, configuration(starting_room_1_door), closed, 0)
holds(2, configuration(store_room_1_door), closed, 0)
holds(2, configuration(store_room_2_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, grasping(manipulator_end_1), nothing, 0)
holds(2, grasping(manipulator_end_2), nothing, 0)
holds(2, in((block,1)), puzzle_room_1, 0)
holds(2, in((block,10)), puzzle_room_2, 0)
holds(2, in((block,11)), puzzle_room_2, 0)
holds(2, in((block,12)), puzzle_room_2, 0)
holds(2, in((block,13)), store_room_2, 0)
holds(2, in((block,14)), store_room_2, 0)
holds(2, in((block,15)), store_room_2, 0)
holds(2, in((block,16)), puzzle_room_2, 0)
holds(2, in((block,17)), store_room_2, 0)
holds(2, in((block,18)), puzzle_room_2, 0)
holds(2, in((block,2)), puzzle_room_1, 0)
holds(2, in((block,3)), puzzle_room_1, 0)
holds(2, in((block,4)), store_room_1, 0)
holds(2, in((block,5)), store_room_1, 0)
holds(2, in((block,6)), store_room_1, 0)
holds(2, in((block,7)), puzzle_room_1, 0)
holds(2, in((block,8)), store_room_1, 0)
holds(2, in((block,9)), puzzle_room_1, 0)
holds(2, in(manipulator_arm_1), starting_room_1, 0)
holds(2, in(manipulator_arm_2), starting_room_1, 0)
holds(2, in(manipulator_end_1), starting_room_1, 0)
holds(2, in(manipulator_end_2), starting_room_1, 0)
holds(2, in(manipulator_limb_1), starting_room_1, 0)
holds(2, in(manipulator_limb_2), starting_room_1, 0)
holds(2, in(puzzle_room_1_table), puzzle_room_1, 0)
holds(2, in(puzzle_room_1_table_left), puzzle_room_1, 0)
holds(2, in(puzzle_room_1_table_middle), puzzle_room_1, 0)
holds(2, in(puzzle_room_1_table_right), puzzle_room_1, 0)
holds(2, in(puzzle_room_2_table), puzzle_room_2, 0)
holds(2, in(puzzle_room_2_table_left), puzzle_room_2, 0)
holds(2, in(puzzle_room_2_table_middle), puzzle_room_2, 0)
holds(2, in(puzzle_room_2_table_right), puzzle_room_2, 0)
holds(2, in(talos), starting_room_1, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,10)), false, 0)
holds(2, in_tower((block,1),(block,11)), false, 0)
holds(2, in_tower((block,1),(block,12)), false, 0)
holds(2, in_tower((block,1),(block,13)), false, 0)
holds(2, in_tower((block,1),(block,14)), false, 0)
holds(2, in_tower((block,1),(block,15)), false, 0)
holds(2, in_tower((block,1),(block,16)), false, 0)
holds(2, in_tower((block,1),(block,17)), false, 0)
holds(2, in_tower((block,1),(block,18)), false, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,1),(block,7)), false, 0)
holds(2, in_tower((block,1),(block,8)), false, 0)
holds(2, in_tower((block,1),(block,9)), false, 0)
holds(2, in_tower((block,10),(block,1)), false, 0)
holds(2, in_tower((block,10),(block,10)), true, 0)
holds(2, in_tower((block,10),(block,11)), false, 0)
holds(2, in_tower((block,10),(block,12)), true, 0)
holds(2, in_tower((block,10),(block,13)), false, 0)
holds(2, in_tower((block,10),(block,14)), false, 0)
holds(2, in_tower((block,10),(block,15)), false, 0)
holds(2, in_tower((block,10),(block,16)), false, 0)
holds(2, in_tower((block,10),(block,17)), false, 0)
holds(2, in_tower((block,10),(block,18)), false, 0)
holds(2, in_tower((block,10),(block,2)), false, 0)
holds(2, in_tower((block,10),(block,3)), false, 0)
holds(2, in_tower((block,10),(block,4)), false, 0)
holds(2, in_tower((block,10),(block,5)), false, 0)
holds(2, in_tower((block,10),(block,6)), false, 0)
holds(2, in_tower((block,10),(block,7)), false, 0)
holds(2, in_tower((block,10),(block,8)), false, 0)
holds(2, in_tower((block,10),(block,9)), false, 0)
holds(2, in_tower((block,11),(block,1)), false, 0)
holds(2, in_tower((block,11),(block,10)), false, 0)
holds(2, in_tower((block,11),(block,11)), true, 0)
holds(2, in_tower((block,11),(block,12)), false, 0)
holds(2, in_tower((block,11),(block,13)), false, 0)
holds(2, in_tower((block,11),(block,14)), false, 0)
holds(2, in_tower((block,11),(block,15)), false, 0)
holds(2, in_tower((block,11),(block,16)), false, 0)
holds(2, in_tower((block,11),(block,17)), false, 0)
holds(2, in_tower((block,11),(block,18)), false, 0)
holds(2, in_tower((block,11),(block,2)), false, 0)
holds(2, in_tower((block,11),(block,3)), false, 0)
holds(2, in_tower((block,11),(block,4)), false, 0)
holds(2, in_tower((block,11),(block,5)), false, 0)
holds(2, in_tower((block,11),(block,6)), false, 0)
holds(2, in_tower((block,11),(block,7)), false, 0)
holds(2, in_tower((block,11),(block,8)), false, 0)
holds(2, in_tower((block,11),(block,9)), false, 0)
holds(2, in_tower((block,12),(block,1)), false, 0)
holds(2, in_tower((block,12),(block,10)), false, 0)
holds(2, in_tower((block,12),(block,11)), false, 0)
holds(2, in_tower((block,12),(block,12)), false, 0)
holds(2, in_tower((block,12),(block,13)), false, 0)
holds(2, in_tower((block,12),(block,14)), false, 0)
holds(2, in_tower((block,12),(block,15)), false, 0)
holds(2, in_tower((block,12),(block,16)), false, 0)
holds(2, in_tower((block,12),(block,17)), false, 0)
holds(2, in_tower((block,12),(block,18)), false, 0)
holds(2, in_tower((block,12),(block,2)), false, 0)
holds(2, in_tower((block,12),(block,3)), false, 0)
holds(2, in_tower((block,12),(block,4)), false, 0)
holds(2, in_tower((block,12),(block,5)), false, 0)
holds(2, in_tower((block,12),(block,6)), false, 0)
holds(2, in_tower((block,12),(block,7)), false, 0)
holds(2, in_tower((block,12),(block,8)), false, 0)
holds(2, in_tower((block,12),(block,9)), false, 0)
holds(2, in_tower((block,13),(block,1)), false, 0)
holds(2, in_tower((block,13),(block,10)), false, 0)
holds(2, in_tower((block,13),(block,11)), false, 0)
holds(2, in_tower((block,13),(block,12)), false, 0)
holds(2, in_tower((block,13),(block,13)), false, 0)
holds(2, in_tower((block,13),(block,14)), false, 0)
holds(2, in_tower((block,13),(block,15)), false, 0)
holds(2, in_tower((block,13),(block,16)), false, 0)
holds(2, in_tower((block,13),(block,17)), false, 0)
holds(2, in_tower((block,13),(block,18)), false, 0)
holds(2, in_tower((block,13),(block,2)), false, 0)
holds(2, in_tower((block,13),(block,3)), false, 0)
holds(2, in_tower((block,13),(block,4)), false, 0)
holds(2, in_tower((block,13),(block,5)), false, 0)
holds(2, in_tower((block,13),(block,6)), false, 0)
holds(2, in_tower((block,13),(block,7)), false, 0)
holds(2, in_tower((block,13),(block,8)), false, 0)
holds(2, in_tower((block,13),(block,9)), false, 0)
holds(2, in_tower((block,14),(block,1)), false, 0)
holds(2, in_tower((block,14),(block,10)), false, 0)
holds(2, in_tower((block,14),(block,11)), false, 0)
holds(2, in_tower((block,14),(block,12)), false, 0)
holds(2, in_tower((block,14),(block,13)), false, 0)
holds(2, in_tower((block,14),(block,14)), false, 0)
holds(2, in_tower((block,14),(block,15)), false, 0)
holds(2, in_tower((block,14),(block,16)), false, 0)
holds(2, in_tower((block,14),(block,17)), false, 0)
holds(2, in_tower((block,14),(block,18)), false, 0)
holds(2, in_tower((block,14),(block,2)), false, 0)
holds(2, in_tower((block,14),(block,3)), false, 0)
holds(2, in_tower((block,14),(block,4)), false, 0)
holds(2, in_tower((block,14),(block,5)), false, 0)
holds(2, in_tower((block,14),(block,6)), false, 0)
holds(2, in_tower((block,14),(block,7)), false, 0)
holds(2, in_tower((block,14),(block,8)), false, 0)
holds(2, in_tower((block,14),(block,9)), false, 0)
holds(2, in_tower((block,15),(block,1)), false, 0)
holds(2, in_tower((block,15),(block,10)), false, 0)
holds(2, in_tower((block,15),(block,11)), false, 0)
holds(2, in_tower((block,15),(block,12)), false, 0)
holds(2, in_tower((block,15),(block,13)), false, 0)
holds(2, in_tower((block,15),(block,14)), false, 0)
holds(2, in_tower((block,15),(block,15)), false, 0)
holds(2, in_tower((block,15),(block,16)), false, 0)
holds(2, in_tower((block,15),(block,17)), false, 0)
holds(2, in_tower((block,15),(block,18)), false, 0)
holds(2, in_tower((block,15),(block,2)), false, 0)
holds(2, in_tower((block,15),(block,3)), false, 0)
holds(2, in_tower((block,15),(block,4)), false, 0)
holds(2, in_tower((block,15),(block,5)), false, 0)
holds(2, in_tower((block,15),(block,6)), false, 0)
holds(2, in_tower((block,15),(block,7)), false, 0)
holds(2, in_tower((block,15),(block,8)), false, 0)
holds(2, in_tower((block,15),(block,9)), false, 0)
holds(2, in_tower((block,16),(block,1)), false, 0)
holds(2, in_tower((block,16),(block,10)), false, 0)
holds(2, in_tower((block,16),(block,11)), false, 0)
holds(2, in_tower((block,16),(block,12)), false, 0)
holds(2, in_tower((block,16),(block,13)), false, 0)
holds(2, in_tower((block,16),(block,14)), false, 0)
holds(2, in_tower((block,16),(block,15)), false, 0)
holds(2, in_tower((block,16),(block,16)), true, 0)
holds(2, in_tower((block,16),(block,17)), false, 0)
holds(2, in_tower((block,16),(block,18)), true, 0)
holds(2, in_tower((block,16),(block,2)), false, 0)
holds(2, in_tower((block,16),(block,3)), false, 0)
holds(2, in_tower((block,16),(block,4)), false, 0)
holds(2, in_tower((block,16),(block,5)), false, 0)
holds(2, in_tower((block,16),(block,6)), false, 0)
holds(2, in_tower((block,16),(block,7)), false, 0)
holds(2, in_tower((block,16),(block,8)), false, 0)
holds(2, in_tower((block,16),(block,9)), false, 0)
holds(2, in_tower((block,17),(block,1)), false, 0)
holds(2, in_tower((block,17),(block,10)), false, 0)
holds(2, in_tower((block,17),(block,11)), false, 0)
holds(2, in_tower((block,17),(block,12)), false, 0)
holds(2, in_tower((block,17),(block,13)), false, 0)
holds(2, in_tower((block,17),(block,14)), false, 0)
holds(2, in_tower((block,17),(block,15)), false, 0)
holds(2, in_tower((block,17),(block,16)), false, 0)
holds(2, in_tower((block,17),(block,17)), false, 0)
holds(2, in_tower((block,17),(block,18)), false, 0)
holds(2, in_tower((block,17),(block,2)), false, 0)
holds(2, in_tower((block,17),(block,3)), false, 0)
holds(2, in_tower((block,17),(block,4)), false, 0)
holds(2, in_tower((block,17),(block,5)), false, 0)
holds(2, in_tower((block,17),(block,6)), false, 0)
holds(2, in_tower((block,17),(block,7)), false, 0)
holds(2, in_tower((block,17),(block,8)), false, 0)
holds(2, in_tower((block,17),(block,9)), false, 0)
holds(2, in_tower((block,18),(block,1)), false, 0)
holds(2, in_tower((block,18),(block,10)), false, 0)
holds(2, in_tower((block,18),(block,11)), false, 0)
holds(2, in_tower((block,18),(block,12)), false, 0)
holds(2, in_tower((block,18),(block,13)), false, 0)
holds(2, in_tower((block,18),(block,14)), false, 0)
holds(2, in_tower((block,18),(block,15)), false, 0)
holds(2, in_tower((block,18),(block,16)), false, 0)
holds(2, in_tower((block,18),(block,17)), false, 0)
holds(2, in_tower((block,18),(block,18)), false, 0)
holds(2, in_tower((block,18),(block,2)), false, 0)
holds(2, in_tower((block,18),(block,3)), false, 0)
holds(2, in_tower((block,18),(block,4)), false, 0)
holds(2, in_tower((block,18),(block,5)), false, 0)
holds(2, in_tower((block,18),(block,6)), false, 0)
holds(2, in_tower((block,18),(block,7)), false, 0)
holds(2, in_tower((block,18),(block,8)), false, 0)
holds(2, in_tower((block,18),(block,9)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,10)), false, 0)
holds(2, in_tower((block,2),(block,11)), false, 0)
holds(2, in_tower((block,2),(block,12)), false, 0)
holds(2, in_tower((block,2),(block,13)), false, 0)
holds(2, in_tower((block,2),(block,14)), false, 0)
holds(2, in_tower((block,2),(block,15)), false, 0)
holds(2, in_tower((block,2),(block,16)), false, 0)
holds(2, in_tower((block,2),(block,17)), false, 0)
holds(2, in_tower((block,2),(block,18)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,7)), false, 0)
holds(2, in_tower((block,2),(block,8)), false, 0)
holds(2, in_tower((block,2),(block,9)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,10)), false, 0)
holds(2, in_tower((block,3),(block,11)), false, 0)
holds(2, in_tower((block,3),(block,12)), false, 0)
holds(2, in_tower((block,3),(block,13)), false, 0)
holds(2, in_tower((block,3),(block,14)), false, 0)
holds(2, in_tower((block,3),(block,15)), false, 0)
holds(2, in_tower((block,3),(block,16)), false, 0)
holds(2, in_tower((block,3),(block,17)), false, 0)
holds(2, in_tower((block,3),(block,18)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,7)), false, 0)
holds(2, in_tower((block,3),(block,8)), false, 0)
holds(2, in_tower((block,3),(block,9)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,10)), false, 0)
holds(2, in_tower((block,4),(block,11)), false, 0)
holds(2, in_tower((block,4),(block,12)), false, 0)
holds(2, in_tower((block,4),(block,13)), false, 0)
holds(2, in_tower((block,4),(block,14)), false, 0)
holds(2, in_tower((block,4),(block,15)), false, 0)
holds(2, in_tower((block,4),(block,16)), false, 0)
holds(2, in_tower((block,4),(block,17)), false, 0)
holds(2, in_tower((block,4),(block,18)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,7)), false, 0)
holds(2, in_tower((block,4),(block,8)), false, 0)
holds(2, in_tower((block,4),(block,9)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,10)), false, 0)
holds(2, in_tower((block,5),(block,11)), false, 0)
holds(2, in_tower((block,5),(block,12)), false, 0)
holds(2, in_tower((block,5),(block,13)), false, 0)
holds(2, in_tower((block,5),(block,14)), false, 0)
holds(2, in_tower((block,5),(block,15)), false, 0)
holds(2, in_tower((block,5),(block,16)), false, 0)
holds(2, in_tower((block,5),(block,17)), false, 0)
holds(2, in_tower((block,5),(block,18)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,7)), false, 0)
holds(2, in_tower((block,5),(block,8)), false, 0)
holds(2, in_tower((block,5),(block,9)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,10)), false, 0)
holds(2, in_tower((block,6),(block,11)), false, 0)
holds(2, in_tower((block,6),(block,12)), false, 0)
holds(2, in_tower((block,6),(block,13)), false, 0)
holds(2, in_tower((block,6),(block,14)), false, 0)
holds(2, in_tower((block,6),(block,15)), false, 0)
holds(2, in_tower((block,6),(block,16)), false, 0)
holds(2, in_tower((block,6),(block,17)), false, 0)
holds(2, in_tower((block,6),(block,18)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,7)), false, 0)
holds(2, in_tower((block,6),(block,8)), false, 0)
holds(2, in_tower((block,6),(block,9)), false, 0)
holds(2, in_tower((block,7),(block,1)), false, 0)
holds(2, in_tower((block,7),(block,10)), false, 0)
holds(2, in_tower((block,7),(block,11)), false, 0)
holds(2, in_tower((block,7),(block,12)), false, 0)
holds(2, in_tower((block,7),(block,13)), false, 0)
holds(2, in_tower((block,7),(block,14)), false, 0)
holds(2, in_tower((block,7),(block,15)), false, 0)
holds(2, in_tower((block,7),(block,16)), false, 0)
holds(2, in_tower((block,7),(block,17)), false, 0)
holds(2, in_tower((block,7),(block,18)), false, 0)
holds(2, in_tower((block,7),(block,2)), false, 0)
holds(2, in_tower((block,7),(block,3)), false, 0)
holds(2, in_tower((block,7),(block,4)), false, 0)
holds(2, in_tower((block,7),(block,5)), false, 0)
holds(2, in_tower((block,7),(block,6)), false, 0)
holds(2, in_tower((block,7),(block,7)), true, 0)
holds(2, in_tower((block,7),(block,8)), false, 0)
holds(2, in_tower((block,7),(block,9)), true, 0)
holds(2, in_tower((block,8),(block,1)), false, 0)
holds(2, in_tower((block,8),(block,10)), false, 0)
holds(2, in_tower((block,8),(block,11)), false, 0)
holds(2, in_tower((block,8),(block,12)), false, 0)
holds(2, in_tower((block,8),(block,13)), false, 0)
holds(2, in_tower((block,8),(block,14)), false, 0)
holds(2, in_tower((block,8),(block,15)), false, 0)
holds(2, in_tower((block,8),(block,16)), false, 0)
holds(2, in_tower((block,8),(block,17)), false, 0)
holds(2, in_tower((block,8),(block,18)), false, 0)
holds(2, in_tower((block,8),(block,2)), false, 0)
holds(2, in_tower((block,8),(block,3)), false, 0)
holds(2, in_tower((block,8),(block,4)), false, 0)
holds(2, in_tower((block,8),(block,5)), false, 0)
holds(2, in_tower((block,8),(block,6)), false, 0)
holds(2, in_tower((block,8),(block,7)), false, 0)
holds(2, in_tower((block,8),(block,8)), false, 0)
holds(2, in_tower((block,8),(block,9)), false, 0)
holds(2, in_tower((block,9),(block,1)), false, 0)
holds(2, in_tower((block,9),(block,10)), false, 0)
holds(2, in_tower((block,9),(block,11)), false, 0)
holds(2, in_tower((block,9),(block,12)), false, 0)
holds(2, in_tower((block,9),(block,13)), false, 0)
holds(2, in_tower((block,9),(block,14)), false, 0)
holds(2, in_tower((block,9),(block,15)), false, 0)
holds(2, in_tower((block,9),(block,16)), false, 0)
holds(2, in_tower((block,9),(block,17)), false, 0)
holds(2, in_tower((block,9),(block,18)), false, 0)
holds(2, in_tower((block,9),(block,2)), false, 0)
holds(2, in_tower((block,9),(block,3)), false, 0)
holds(2, in_tower((block,9),(block,4)), false, 0)
holds(2, in_tower((block,9),(block,5)), false, 0)
holds(2, in_tower((block,9),(block,6)), false, 0)
holds(2, in_tower((block,9),(block,7)), false, 0)
holds(2, in_tower((block,9),(block,8)), false, 0)
holds(2, in_tower((block,9),(block,9)), false, 0)
holds(2, on((block,1)), puzzle_room_1_table_left, 0)
holds(2, on((block,10)), puzzle_room_2_table_left, 0)
holds(2, on((block,11)), puzzle_room_2_table_right, 0)
holds(2, on((block,12)), (block,10), 0)
holds(2, on((block,13)), nothing, 0)
holds(2, on((block,14)), nothing, 0)
holds(2, on((block,15)), nothing, 0)
holds(2, on((block,16)), puzzle_room_2_table_middle, 0)
holds(2, on((block,17)), nothing, 0)
holds(2, on((block,18)), (block,16), 0)
holds(2, on((block,2)), puzzle_room_1_table_right, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, on((block,7)), puzzle_room_1_table_middle, 0)
holds(2, on((block,8)), nothing, 0)
holds(2, on((block,9)), (block,7), 0)
holds(2, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(2, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(2, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(2, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(2, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(2, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(2, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(2, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(2, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(2, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(2, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[19-01-2022_12-50-03] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete_tower(blue,puzzle_room_1_table), false, 0)
holds(1, complete_tower(blue,puzzle_room_2_table), false, 0)
holds(1, complete_tower(red,puzzle_room_1_table), false, 0)
holds(1, complete_tower(red,puzzle_room_2_table), false, 0)
holds(1, complete_tower(yellow,puzzle_room_1_table), false, 0)
holds(1, complete_tower(yellow,puzzle_room_2_table), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_1_door), closed, 0)
holds(1, configuration(puzzle_room_2_door), closed, 0)
holds(1, configuration(starting_room_1_door), closed, 0)
holds(1, configuration(store_room_1_door), closed, 0)
holds(1, configuration(store_room_2_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), ((puzzle_room_1,3),7,0), 0)
holds(1, in((block,10)), ((puzzle_room_2,3),7,0), 0)
holds(1, in((block,11)), ((puzzle_room_2,3),7,0), 0)
holds(1, in((block,12)), ((puzzle_room_2,3),7,0), 0)
holds(1, in((block,13)), ((store_room_2,0),0,0), 0)
holds(1, in((block,14)), ((store_room_2,0),0,0), 0)
holds(1, in((block,15)), ((store_room_2,0),0,0), 0)
holds(1, in((block,16)), ((puzzle_room_2,3),7,0), 0)
holds(1, in((block,17)), ((store_room_2,0),0,1), 0)
holds(1, in((block,18)), ((puzzle_room_2,3),7,0), 0)
holds(1, in((block,2)), ((puzzle_room_1,3),7,0), 0)
holds(1, in((block,3)), ((puzzle_room_1,3),7,0), 0)
holds(1, in((block,4)), ((store_room_1,0),0,0), 0)
holds(1, in((block,5)), ((store_room_1,0),0,0), 0)
holds(1, in((block,6)), ((store_room_1,0),0,0), 0)
holds(1, in((block,7)), ((puzzle_room_1,3),7,0), 0)
holds(1, in((block,8)), ((store_room_1,0),0,1), 0)
holds(1, in((block,9)), ((puzzle_room_1,3),7,0), 0)
holds(1, in(manipulator_arm_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_arm_2), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_end_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_end_2), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_limb_1), ((starting_room_1,0),0,0), 0)
holds(1, in(manipulator_limb_2), ((starting_room_1,0),0,0), 0)
holds(1, in(puzzle_room_1_table), ((puzzle_room_1,3),7,0), 0)
holds(1, in(puzzle_room_1_table_left), ((puzzle_room_1,3),7,0), 0)
holds(1, in(puzzle_room_1_table_middle), ((puzzle_room_1,3),7,0), 0)
holds(1, in(puzzle_room_1_table_right), ((puzzle_room_1,3),7,0), 0)
holds(1, in(puzzle_room_2_table), ((puzzle_room_2,3),7,0), 0)
holds(1, in(puzzle_room_2_table_left), ((puzzle_room_2,3),7,0), 0)
holds(1, in(puzzle_room_2_table_middle), ((puzzle_room_2,3),7,0), 0)
holds(1, in(puzzle_room_2_table_right), ((puzzle_room_2,3),7,0), 0)
holds(1, in(talos), ((starting_room_1,0),0,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,10)), false, 0)
holds(1, in_tower((block,1),(block,11)), false, 0)
holds(1, in_tower((block,1),(block,12)), false, 0)
holds(1, in_tower((block,1),(block,13)), false, 0)
holds(1, in_tower((block,1),(block,14)), false, 0)
holds(1, in_tower((block,1),(block,15)), false, 0)
holds(1, in_tower((block,1),(block,16)), false, 0)
holds(1, in_tower((block,1),(block,17)), false, 0)
holds(1, in_tower((block,1),(block,18)), false, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,1),(block,7)), false, 0)
holds(1, in_tower((block,1),(block,8)), false, 0)
holds(1, in_tower((block,1),(block,9)), false, 0)
holds(1, in_tower((block,10),(block,1)), false, 0)
holds(1, in_tower((block,10),(block,10)), true, 0)
holds(1, in_tower((block,10),(block,11)), false, 0)
holds(1, in_tower((block,10),(block,12)), true, 0)
holds(1, in_tower((block,10),(block,13)), false, 0)
holds(1, in_tower((block,10),(block,14)), false, 0)
holds(1, in_tower((block,10),(block,15)), false, 0)
holds(1, in_tower((block,10),(block,16)), false, 0)
holds(1, in_tower((block,10),(block,17)), false, 0)
holds(1, in_tower((block,10),(block,18)), false, 0)
holds(1, in_tower((block,10),(block,2)), false, 0)
holds(1, in_tower((block,10),(block,3)), false, 0)
holds(1, in_tower((block,10),(block,4)), false, 0)
holds(1, in_tower((block,10),(block,5)), false, 0)
holds(1, in_tower((block,10),(block,6)), false, 0)
holds(1, in_tower((block,10),(block,7)), false, 0)
holds(1, in_tower((block,10),(block,8)), false, 0)
holds(1, in_tower((block,10),(block,9)), false, 0)
holds(1, in_tower((block,11),(block,1)), false, 0)
holds(1, in_tower((block,11),(block,10)), false, 0)
holds(1, in_tower((block,11),(block,11)), true, 0)
holds(1, in_tower((block,11),(block,12)), false, 0)
holds(1, in_tower((block,11),(block,13)), false, 0)
holds(1, in_tower((block,11),(block,14)), false, 0)
holds(1, in_tower((block,11),(block,15)), false, 0)
holds(1, in_tower((block,11),(block,16)), false, 0)
holds(1, in_tower((block,11),(block,17)), false, 0)
holds(1, in_tower((block,11),(block,18)), false, 0)
holds(1, in_tower((block,11),(block,2)), false, 0)
holds(1, in_tower((block,11),(block,3)), false, 0)
holds(1, in_tower((block,11),(block,4)), false, 0)
holds(1, in_tower((block,11),(block,5)), false, 0)
holds(1, in_tower((block,11),(block,6)), false, 0)
holds(1, in_tower((block,11),(block,7)), false, 0)
holds(1, in_tower((block,11),(block,8)), false, 0)
holds(1, in_tower((block,11),(block,9)), false, 0)
holds(1, in_tower((block,12),(block,1)), false, 0)
holds(1, in_tower((block,12),(block,10)), false, 0)
holds(1, in_tower((block,12),(block,11)), false, 0)
holds(1, in_tower((block,12),(block,12)), false, 0)
holds(1, in_tower((block,12),(block,13)), false, 0)
holds(1, in_tower((block,12),(block,14)), false, 0)
holds(1, in_tower((block,12),(block,15)), false, 0)
holds(1, in_tower((block,12),(block,16)), false, 0)
holds(1, in_tower((block,12),(block,17)), false, 0)
holds(1, in_tower((block,12),(block,18)), false, 0)
holds(1, in_tower((block,12),(block,2)), false, 0)
holds(1, in_tower((block,12),(block,3)), false, 0)
holds(1, in_tower((block,12),(block,4)), false, 0)
holds(1, in_tower((block,12),(block,5)), false, 0)
holds(1, in_tower((block,12),(block,6)), false, 0)
holds(1, in_tower((block,12),(block,7)), false, 0)
holds(1, in_tower((block,12),(block,8)), false, 0)
holds(1, in_tower((block,12),(block,9)), false, 0)
holds(1, in_tower((block,13),(block,1)), false, 0)
holds(1, in_tower((block,13),(block,10)), false, 0)
holds(1, in_tower((block,13),(block,11)), false, 0)
holds(1, in_tower((block,13),(block,12)), false, 0)
holds(1, in_tower((block,13),(block,13)), false, 0)
holds(1, in_tower((block,13),(block,14)), false, 0)
holds(1, in_tower((block,13),(block,15)), false, 0)
holds(1, in_tower((block,13),(block,16)), false, 0)
holds(1, in_tower((block,13),(block,17)), false, 0)
holds(1, in_tower((block,13),(block,18)), false, 0)
holds(1, in_tower((block,13),(block,2)), false, 0)
holds(1, in_tower((block,13),(block,3)), false, 0)
holds(1, in_tower((block,13),(block,4)), false, 0)
holds(1, in_tower((block,13),(block,5)), false, 0)
holds(1, in_tower((block,13),(block,6)), false, 0)
holds(1, in_tower((block,13),(block,7)), false, 0)
holds(1, in_tower((block,13),(block,8)), false, 0)
holds(1, in_tower((block,13),(block,9)), false, 0)
holds(1, in_tower((block,14),(block,1)), false, 0)
holds(1, in_tower((block,14),(block,10)), false, 0)
holds(1, in_tower((block,14),(block,11)), false, 0)
holds(1, in_tower((block,14),(block,12)), false, 0)
holds(1, in_tower((block,14),(block,13)), false, 0)
holds(1, in_tower((block,14),(block,14)), false, 0)
holds(1, in_tower((block,14),(block,15)), false, 0)
holds(1, in_tower((block,14),(block,16)), false, 0)
holds(1, in_tower((block,14),(block,17)), false, 0)
holds(1, in_tower((block,14),(block,18)), false, 0)
holds(1, in_tower((block,14),(block,2)), false, 0)
holds(1, in_tower((block,14),(block,3)), false, 0)
holds(1, in_tower((block,14),(block,4)), false, 0)
holds(1, in_tower((block,14),(block,5)), false, 0)
holds(1, in_tower((block,14),(block,6)), false, 0)
holds(1, in_tower((block,14),(block,7)), false, 0)
holds(1, in_tower((block,14),(block,8)), false, 0)
holds(1, in_tower((block,14),(block,9)), false, 0)
holds(1, in_tower((block,15),(block,1)), false, 0)
holds(1, in_tower((block,15),(block,10)), false, 0)
holds(1, in_tower((block,15),(block,11)), false, 0)
holds(1, in_tower((block,15),(block,12)), false, 0)
holds(1, in_tower((block,15),(block,13)), false, 0)
holds(1, in_tower((block,15),(block,14)), false, 0)
holds(1, in_tower((block,15),(block,15)), false, 0)
holds(1, in_tower((block,15),(block,16)), false, 0)
holds(1, in_tower((block,15),(block,17)), false, 0)
holds(1, in_tower((block,15),(block,18)), false, 0)
holds(1, in_tower((block,15),(block,2)), false, 0)
holds(1, in_tower((block,15),(block,3)), false, 0)
holds(1, in_tower((block,15),(block,4)), false, 0)
holds(1, in_tower((block,15),(block,5)), false, 0)
holds(1, in_tower((block,15),(block,6)), false, 0)
holds(1, in_tower((block,15),(block,7)), false, 0)
holds(1, in_tower((block,15),(block,8)), false, 0)
holds(1, in_tower((block,15),(block,9)), false, 0)
holds(1, in_tower((block,16),(block,1)), false, 0)
holds(1, in_tower((block,16),(block,10)), false, 0)
holds(1, in_tower((block,16),(block,11)), false, 0)
holds(1, in_tower((block,16),(block,12)), false, 0)
holds(1, in_tower((block,16),(block,13)), false, 0)
holds(1, in_tower((block,16),(block,14)), false, 0)
holds(1, in_tower((block,16),(block,15)), false, 0)
holds(1, in_tower((block,16),(block,16)), true, 0)
holds(1, in_tower((block,16),(block,17)), false, 0)
holds(1, in_tower((block,16),(block,18)), true, 0)
holds(1, in_tower((block,16),(block,2)), false, 0)
holds(1, in_tower((block,16),(block,3)), false, 0)
holds(1, in_tower((block,16),(block,4)), false, 0)
holds(1, in_tower((block,16),(block,5)), false, 0)
holds(1, in_tower((block,16),(block,6)), false, 0)
holds(1, in_tower((block,16),(block,7)), false, 0)
holds(1, in_tower((block,16),(block,8)), false, 0)
holds(1, in_tower((block,16),(block,9)), false, 0)
holds(1, in_tower((block,17),(block,1)), false, 0)
holds(1, in_tower((block,17),(block,10)), false, 0)
holds(1, in_tower((block,17),(block,11)), false, 0)
holds(1, in_tower((block,17),(block,12)), false, 0)
holds(1, in_tower((block,17),(block,13)), false, 0)
holds(1, in_tower((block,17),(block,14)), false, 0)
holds(1, in_tower((block,17),(block,15)), false, 0)
holds(1, in_tower((block,17),(block,16)), false, 0)
holds(1, in_tower((block,17),(block,17)), false, 0)
holds(1, in_tower((block,17),(block,18)), false, 0)
holds(1, in_tower((block,17),(block,2)), false, 0)
holds(1, in_tower((block,17),(block,3)), false, 0)
holds(1, in_tower((block,17),(block,4)), false, 0)
holds(1, in_tower((block,17),(block,5)), false, 0)
holds(1, in_tower((block,17),(block,6)), false, 0)
holds(1, in_tower((block,17),(block,7)), false, 0)
holds(1, in_tower((block,17),(block,8)), false, 0)
holds(1, in_tower((block,17),(block,9)), false, 0)
holds(1, in_tower((block,18),(block,1)), false, 0)
holds(1, in_tower((block,18),(block,10)), false, 0)
holds(1, in_tower((block,18),(block,11)), false, 0)
holds(1, in_tower((block,18),(block,12)), false, 0)
holds(1, in_tower((block,18),(block,13)), false, 0)
holds(1, in_tower((block,18),(block,14)), false, 0)
holds(1, in_tower((block,18),(block,15)), false, 0)
holds(1, in_tower((block,18),(block,16)), false, 0)
holds(1, in_tower((block,18),(block,17)), false, 0)
holds(1, in_tower((block,18),(block,18)), false, 0)
holds(1, in_tower((block,18),(block,2)), false, 0)
holds(1, in_tower((block,18),(block,3)), false, 0)
holds(1, in_tower((block,18),(block,4)), false, 0)
holds(1, in_tower((block,18),(block,5)), false, 0)
holds(1, in_tower((block,18),(block,6)), false, 0)
holds(1, in_tower((block,18),(block,7)), false, 0)
holds(1, in_tower((block,18),(block,8)), false, 0)
holds(1, in_tower((block,18),(block,9)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,10)), false, 0)
holds(1, in_tower((block,2),(block,11)), false, 0)
holds(1, in_tower((block,2),(block,12)), false, 0)
holds(1, in_tower((block,2),(block,13)), false, 0)
holds(1, in_tower((block,2),(block,14)), false, 0)
holds(1, in_tower((block,2),(block,15)), false, 0)
holds(1, in_tower((block,2),(block,16)), false, 0)
holds(1, in_tower((block,2),(block,17)), false, 0)
holds(1, in_tower((block,2),(block,18)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,7)), false, 0)
holds(1, in_tower((block,2),(block,8)), false, 0)
holds(1, in_tower((block,2),(block,9)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,10)), false, 0)
holds(1, in_tower((block,3),(block,11)), false, 0)
holds(1, in_tower((block,3),(block,12)), false, 0)
holds(1, in_tower((block,3),(block,13)), false, 0)
holds(1, in_tower((block,3),(block,14)), false, 0)
holds(1, in_tower((block,3),(block,15)), false, 0)
holds(1, in_tower((block,3),(block,16)), false, 0)
holds(1, in_tower((block,3),(block,17)), false, 0)
holds(1, in_tower((block,3),(block,18)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,7)), false, 0)
holds(1, in_tower((block,3),(block,8)), false, 0)
holds(1, in_tower((block,3),(block,9)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,10)), false, 0)
holds(1, in_tower((block,4),(block,11)), false, 0)
holds(1, in_tower((block,4),(block,12)), false, 0)
holds(1, in_tower((block,4),(block,13)), false, 0)
holds(1, in_tower((block,4),(block,14)), false, 0)
holds(1, in_tower((block,4),(block,15)), false, 0)
holds(1, in_tower((block,4),(block,16)), false, 0)
holds(1, in_tower((block,4),(block,17)), false, 0)
holds(1, in_tower((block,4),(block,18)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,7)), false, 0)
holds(1, in_tower((block,4),(block,8)), false, 0)
holds(1, in_tower((block,4),(block,9)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,10)), false, 0)
holds(1, in_tower((block,5),(block,11)), false, 0)
holds(1, in_tower((block,5),(block,12)), false, 0)
holds(1, in_tower((block,5),(block,13)), false, 0)
holds(1, in_tower((block,5),(block,14)), false, 0)
holds(1, in_tower((block,5),(block,15)), false, 0)
holds(1, in_tower((block,5),(block,16)), false, 0)
holds(1, in_tower((block,5),(block,17)), false, 0)
holds(1, in_tower((block,5),(block,18)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,7)), false, 0)
holds(1, in_tower((block,5),(block,8)), false, 0)
holds(1, in_tower((block,5),(block,9)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,10)), false, 0)
holds(1, in_tower((block,6),(block,11)), false, 0)
holds(1, in_tower((block,6),(block,12)), false, 0)
holds(1, in_tower((block,6),(block,13)), false, 0)
holds(1, in_tower((block,6),(block,14)), false, 0)
holds(1, in_tower((block,6),(block,15)), false, 0)
holds(1, in_tower((block,6),(block,16)), false, 0)
holds(1, in_tower((block,6),(block,17)), false, 0)
holds(1, in_tower((block,6),(block,18)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,7)), false, 0)
holds(1, in_tower((block,6),(block,8)), false, 0)
holds(1, in_tower((block,6),(block,9)), false, 0)
holds(1, in_tower((block,7),(block,1)), false, 0)
holds(1, in_tower((block,7),(block,10)), false, 0)
holds(1, in_tower((block,7),(block,11)), false, 0)
holds(1, in_tower((block,7),(block,12)), false, 0)
holds(1, in_tower((block,7),(block,13)), false, 0)
holds(1, in_tower((block,7),(block,14)), false, 0)
holds(1, in_tower((block,7),(block,15)), false, 0)
holds(1, in_tower((block,7),(block,16)), false, 0)
holds(1, in_tower((block,7),(block,17)), false, 0)
holds(1, in_tower((block,7),(block,18)), false, 0)
holds(1, in_tower((block,7),(block,2)), false, 0)
holds(1, in_tower((block,7),(block,3)), false, 0)
holds(1, in_tower((block,7),(block,4)), false, 0)
holds(1, in_tower((block,7),(block,5)), false, 0)
holds(1, in_tower((block,7),(block,6)), false, 0)
holds(1, in_tower((block,7),(block,7)), true, 0)
holds(1, in_tower((block,7),(block,8)), false, 0)
holds(1, in_tower((block,7),(block,9)), true, 0)
holds(1, in_tower((block,8),(block,1)), false, 0)
holds(1, in_tower((block,8),(block,10)), false, 0)
holds(1, in_tower((block,8),(block,11)), false, 0)
holds(1, in_tower((block,8),(block,12)), false, 0)
holds(1, in_tower((block,8),(block,13)), false, 0)
holds(1, in_tower((block,8),(block,14)), false, 0)
holds(1, in_tower((block,8),(block,15)), false, 0)
holds(1, in_tower((block,8),(block,16)), false, 0)
holds(1, in_tower((block,8),(block,17)), false, 0)
holds(1, in_tower((block,8),(block,18)), false, 0)
holds(1, in_tower((block,8),(block,2)), false, 0)
holds(1, in_tower((block,8),(block,3)), false, 0)
holds(1, in_tower((block,8),(block,4)), false, 0)
holds(1, in_tower((block,8),(block,5)), false, 0)
holds(1, in_tower((block,8),(block,6)), false, 0)
holds(1, in_tower((block,8),(block,7)), false, 0)
holds(1, in_tower((block,8),(block,8)), false, 0)
holds(1, in_tower((block,8),(block,9)), false, 0)
holds(1, in_tower((block,9),(block,1)), false, 0)
holds(1, in_tower((block,9),(block,10)), false, 0)
holds(1, in_tower((block,9),(block,11)), false, 0)
holds(1, in_tower((block,9),(block,12)), false, 0)
holds(1, in_tower((block,9),(block,13)), false, 0)
holds(1, in_tower((block,9),(block,14)), false, 0)
holds(1, in_tower((block,9),(block,15)), false, 0)
holds(1, in_tower((block,9),(block,16)), false, 0)
holds(1, in_tower((block,9),(block,17)), false, 0)
holds(1, in_tower((block,9),(block,18)), false, 0)
holds(1, in_tower((block,9),(block,2)), false, 0)
holds(1, in_tower((block,9),(block,3)), false, 0)
holds(1, in_tower((block,9),(block,4)), false, 0)
holds(1, in_tower((block,9),(block,5)), false, 0)
holds(1, in_tower((block,9),(block,6)), false, 0)
holds(1, in_tower((block,9),(block,7)), false, 0)
holds(1, in_tower((block,9),(block,8)), false, 0)
holds(1, in_tower((block,9),(block,9)), false, 0)
holds(1, on((block,1)), puzzle_room_1_table_left, 0)
holds(1, on((block,10)), puzzle_room_2_table_left, 0)
holds(1, on((block,11)), puzzle_room_2_table_right, 0)
holds(1, on((block,12)), (block,10), 0)
holds(1, on((block,13)), nothing, 0)
holds(1, on((block,14)), nothing, 0)
holds(1, on((block,15)), nothing, 0)
holds(1, on((block,16)), puzzle_room_2_table_middle, 0)
holds(1, on((block,17)), nothing, 0)
holds(1, on((block,18)), (block,16), 0)
holds(1, on((block,2)), puzzle_room_1_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, on((block,7)), puzzle_room_1_table_middle, 0)
holds(1, on((block,8)), nothing, 0)
holds(1, on((block,9)), (block,7), 0)
holds(1, tower_base((block,1),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,1),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,10),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,10),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,11),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,11),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,12),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,12),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,13),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,13),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,14),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,14),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,15),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,15),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,16),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,16),puzzle_room_2_table), true, 0)
holds(1, tower_base((block,17),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,17),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,18),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,18),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,2),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,2),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,3),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,3),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,4),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,5),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,6),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,7),puzzle_room_1_table), true, 0)
holds(1, tower_base((block,7),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,8),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,8),puzzle_room_2_table), false, 0)
holds(1, tower_base((block,9),puzzle_room_1_table), false, 0)
holds(1, tower_base((block,9),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,1),puzzle_room_1_table), true, 0)
holds(1, unordered_tower((block,1),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,10),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,10),puzzle_room_2_table), true, 0)
holds(1, unordered_tower((block,11),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,11),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,12),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,12),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,13),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,13),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,14),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,14),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,15),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,15),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,16),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,16),puzzle_room_2_table), true, 0)
holds(1, unordered_tower((block,17),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,17),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,18),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,18),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,2),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,2),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,3),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,4),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,5),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,6),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,7),puzzle_room_1_table), true, 0)
holds(1, unordered_tower((block,7),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,8),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,8),puzzle_room_2_table), false, 0)
holds(1, unordered_tower((block,9),puzzle_room_1_table), false, 0)
holds(1, unordered_tower((block,9),puzzle_room_2_table), false, 0)

[19-01-2022_12-50-03] INFO :: ASH Planner Main #1 >> Generating final-goals...

[19-01-2022_12-50-03] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[19-01-2022_12-50-03] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 448 rules

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.00340010000000035s

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[19-01-2022_12-50-03] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[19-01-2022_12-50-03] WARNING :: Logic Program Main #1 || Generate Final Goals #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[19-01-2022_12-50-04] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 1.564037s.

[19-01-2022_12-50-04] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[19-01-2022_12-50-07] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 2.679970s with result Satisfiable.

[19-01-2022_12-50-07] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[19-01-2022_12-50-07] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-50-07] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[19-01-2022_12-50-07] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[19-01-2022_12-50-07] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 1.564037s, Solving = 2.679970s, Total = 4.244006s, Memory = (RSS = 312.976562Mb, VMS = 307.207031Mb)
Final Model :: Total atoms = 130886, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_12-50-07] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 1.564037s, Solving = 2.679970s, Total = 4.244006s, Memory = (RSS = 312.976562Mb, VMS = 307.207031Mb)
Final Model :: Total atoms = 130886, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(5, in_tower((block,1),(block,1)), false, true)
final_goal(5, in_tower((block,1),(block,10)), false, true)
final_goal(5, in_tower((block,1),(block,11)), false, true)
final_goal(5, in_tower((block,1),(block,12)), false, true)
final_goal(5, in_tower((block,1),(block,13)), false, true)
final_goal(5, in_tower((block,1),(block,14)), false, true)
final_goal(5, in_tower((block,1),(block,15)), false, true)
final_goal(5, in_tower((block,1),(block,16)), false, true)
final_goal(5, in_tower((block,1),(block,17)), false, true)
final_goal(5, in_tower((block,1),(block,18)), false, true)
final_goal(5, in_tower((block,1),(block,2)), false, true)
final_goal(5, in_tower((block,1),(block,3)), false, true)
final_goal(5, in_tower((block,1),(block,4)), false, true)
final_goal(5, in_tower((block,1),(block,5)), false, true)
final_goal(5, in_tower((block,1),(block,6)), false, true)
final_goal(5, in_tower((block,1),(block,7)), false, true)
final_goal(5, in_tower((block,1),(block,8)), false, true)
final_goal(5, in_tower((block,1),(block,9)), false, true)
final_goal(5, in_tower((block,10),(block,1)), false, true)
final_goal(5, in_tower((block,10),(block,10)), false, true)
final_goal(5, in_tower((block,10),(block,11)), false, true)
final_goal(5, in_tower((block,10),(block,12)), false, true)
final_goal(5, in_tower((block,10),(block,13)), false, true)
final_goal(5, in_tower((block,10),(block,14)), false, true)
final_goal(5, in_tower((block,10),(block,15)), false, true)
final_goal(5, in_tower((block,10),(block,16)), false, true)
final_goal(5, in_tower((block,10),(block,17)), false, true)
final_goal(5, in_tower((block,10),(block,18)), false, true)
final_goal(5, in_tower((block,10),(block,2)), false, true)
final_goal(5, in_tower((block,10),(block,3)), false, true)
final_goal(5, in_tower((block,10),(block,4)), false, true)
final_goal(5, in_tower((block,10),(block,5)), false, true)
final_goal(5, in_tower((block,10),(block,6)), false, true)
final_goal(5, in_tower((block,10),(block,7)), false, true)
final_goal(5, in_tower((block,10),(block,8)), false, true)
final_goal(5, in_tower((block,10),(block,9)), false, true)
final_goal(5, in_tower((block,11),(block,1)), false, true)
final_goal(5, in_tower((block,11),(block,10)), false, true)
final_goal(5, in_tower((block,11),(block,11)), false, true)
final_goal(5, in_tower((block,11),(block,12)), false, true)
final_goal(5, in_tower((block,11),(block,13)), false, true)
final_goal(5, in_tower((block,11),(block,14)), false, true)
final_goal(5, in_tower((block,11),(block,15)), false, true)
final_goal(5, in_tower((block,11),(block,16)), false, true)
final_goal(5, in_tower((block,11),(block,17)), false, true)
final_goal(5, in_tower((block,11),(block,18)), false, true)
final_goal(5, in_tower((block,11),(block,2)), false, true)
final_goal(5, in_tower((block,11),(block,3)), false, true)
final_goal(5, in_tower((block,11),(block,4)), false, true)
final_goal(5, in_tower((block,11),(block,5)), false, true)
final_goal(5, in_tower((block,11),(block,6)), false, true)
final_goal(5, in_tower((block,11),(block,7)), false, true)
final_goal(5, in_tower((block,11),(block,8)), false, true)
final_goal(5, in_tower((block,11),(block,9)), false, true)
final_goal(5, in_tower((block,12),(block,1)), false, true)
final_goal(5, in_tower((block,12),(block,10)), true, true)
final_goal(5, in_tower((block,12),(block,11)), true, true)
final_goal(5, in_tower((block,12),(block,12)), true, true)
final_goal(5, in_tower((block,12),(block,13)), false, true)
final_goal(5, in_tower((block,12),(block,14)), false, true)
final_goal(5, in_tower((block,12),(block,15)), false, true)
final_goal(5, in_tower((block,12),(block,16)), false, true)
final_goal(5, in_tower((block,12),(block,17)), false, true)
final_goal(5, in_tower((block,12),(block,18)), false, true)
final_goal(5, in_tower((block,12),(block,2)), false, true)
final_goal(5, in_tower((block,12),(block,3)), false, true)
final_goal(5, in_tower((block,12),(block,4)), false, true)
final_goal(5, in_tower((block,12),(block,5)), false, true)
final_goal(5, in_tower((block,12),(block,6)), false, true)
final_goal(5, in_tower((block,12),(block,7)), false, true)
final_goal(5, in_tower((block,12),(block,8)), false, true)
final_goal(5, in_tower((block,12),(block,9)), false, true)
final_goal(5, in_tower((block,13),(block,1)), false, true)
final_goal(5, in_tower((block,13),(block,10)), false, true)
final_goal(5, in_tower((block,13),(block,11)), false, true)
final_goal(5, in_tower((block,13),(block,12)), false, true)
final_goal(5, in_tower((block,13),(block,13)), false, true)
final_goal(5, in_tower((block,13),(block,14)), false, true)
final_goal(5, in_tower((block,13),(block,15)), false, true)
final_goal(5, in_tower((block,13),(block,16)), false, true)
final_goal(5, in_tower((block,13),(block,17)), false, true)
final_goal(5, in_tower((block,13),(block,18)), false, true)
final_goal(5, in_tower((block,13),(block,2)), false, true)
final_goal(5, in_tower((block,13),(block,3)), false, true)
final_goal(5, in_tower((block,13),(block,4)), false, true)
final_goal(5, in_tower((block,13),(block,5)), false, true)
final_goal(5, in_tower((block,13),(block,6)), false, true)
final_goal(5, in_tower((block,13),(block,7)), false, true)
final_goal(5, in_tower((block,13),(block,8)), false, true)
final_goal(5, in_tower((block,13),(block,9)), false, true)
final_goal(5, in_tower((block,14),(block,1)), false, true)
final_goal(5, in_tower((block,14),(block,10)), false, true)
final_goal(5, in_tower((block,14),(block,11)), false, true)
final_goal(5, in_tower((block,14),(block,12)), false, true)
final_goal(5, in_tower((block,14),(block,13)), false, true)
final_goal(5, in_tower((block,14),(block,14)), false, true)
final_goal(5, in_tower((block,14),(block,15)), false, true)
final_goal(5, in_tower((block,14),(block,16)), false, true)
final_goal(5, in_tower((block,14),(block,17)), false, true)
final_goal(5, in_tower((block,14),(block,18)), false, true)
final_goal(5, in_tower((block,14),(block,2)), false, true)
final_goal(5, in_tower((block,14),(block,3)), false, true)
final_goal(5, in_tower((block,14),(block,4)), false, true)
final_goal(5, in_tower((block,14),(block,5)), false, true)
final_goal(5, in_tower((block,14),(block,6)), false, true)
final_goal(5, in_tower((block,14),(block,7)), false, true)
final_goal(5, in_tower((block,14),(block,8)), false, true)
final_goal(5, in_tower((block,14),(block,9)), false, true)
final_goal(5, in_tower((block,15),(block,1)), false, true)
final_goal(5, in_tower((block,15),(block,10)), false, true)
final_goal(5, in_tower((block,15),(block,11)), false, true)
final_goal(5, in_tower((block,15),(block,12)), false, true)
final_goal(5, in_tower((block,15),(block,13)), true, true)
final_goal(5, in_tower((block,15),(block,14)), true, true)
final_goal(5, in_tower((block,15),(block,15)), true, true)
final_goal(5, in_tower((block,15),(block,16)), false, true)
final_goal(5, in_tower((block,15),(block,17)), false, true)
final_goal(5, in_tower((block,15),(block,18)), false, true)
final_goal(5, in_tower((block,15),(block,2)), false, true)
final_goal(5, in_tower((block,15),(block,3)), false, true)
final_goal(5, in_tower((block,15),(block,4)), false, true)
final_goal(5, in_tower((block,15),(block,5)), false, true)
final_goal(5, in_tower((block,15),(block,6)), false, true)
final_goal(5, in_tower((block,15),(block,7)), false, true)
final_goal(5, in_tower((block,15),(block,8)), false, true)
final_goal(5, in_tower((block,15),(block,9)), false, true)
final_goal(5, in_tower((block,16),(block,1)), false, true)
final_goal(5, in_tower((block,16),(block,10)), false, true)
final_goal(5, in_tower((block,16),(block,11)), false, true)
final_goal(5, in_tower((block,16),(block,12)), false, true)
final_goal(5, in_tower((block,16),(block,13)), false, true)
final_goal(5, in_tower((block,16),(block,14)), false, true)
final_goal(5, in_tower((block,16),(block,15)), false, true)
final_goal(5, in_tower((block,16),(block,16)), false, true)
final_goal(5, in_tower((block,16),(block,17)), false, true)
final_goal(5, in_tower((block,16),(block,18)), false, true)
final_goal(5, in_tower((block,16),(block,2)), false, true)
final_goal(5, in_tower((block,16),(block,3)), false, true)
final_goal(5, in_tower((block,16),(block,4)), false, true)
final_goal(5, in_tower((block,16),(block,5)), false, true)
final_goal(5, in_tower((block,16),(block,6)), false, true)
final_goal(5, in_tower((block,16),(block,7)), false, true)
final_goal(5, in_tower((block,16),(block,8)), false, true)
final_goal(5, in_tower((block,16),(block,9)), false, true)
final_goal(5, in_tower((block,17),(block,1)), false, true)
final_goal(5, in_tower((block,17),(block,10)), false, true)
final_goal(5, in_tower((block,17),(block,11)), false, true)
final_goal(5, in_tower((block,17),(block,12)), false, true)
final_goal(5, in_tower((block,17),(block,13)), false, true)
final_goal(5, in_tower((block,17),(block,14)), false, true)
final_goal(5, in_tower((block,17),(block,15)), false, true)
final_goal(5, in_tower((block,17),(block,16)), false, true)
final_goal(5, in_tower((block,17),(block,17)), false, true)
final_goal(5, in_tower((block,17),(block,18)), false, true)
final_goal(5, in_tower((block,17),(block,2)), false, true)
final_goal(5, in_tower((block,17),(block,3)), false, true)
final_goal(5, in_tower((block,17),(block,4)), false, true)
final_goal(5, in_tower((block,17),(block,5)), false, true)
final_goal(5, in_tower((block,17),(block,6)), false, true)
final_goal(5, in_tower((block,17),(block,7)), false, true)
final_goal(5, in_tower((block,17),(block,8)), false, true)
final_goal(5, in_tower((block,17),(block,9)), false, true)
final_goal(5, in_tower((block,18),(block,1)), false, true)
final_goal(5, in_tower((block,18),(block,10)), false, true)
final_goal(5, in_tower((block,18),(block,11)), false, true)
final_goal(5, in_tower((block,18),(block,12)), false, true)
final_goal(5, in_tower((block,18),(block,13)), false, true)
final_goal(5, in_tower((block,18),(block,14)), false, true)
final_goal(5, in_tower((block,18),(block,15)), false, true)
final_goal(5, in_tower((block,18),(block,16)), true, true)
final_goal(5, in_tower((block,18),(block,17)), true, true)
final_goal(5, in_tower((block,18),(block,18)), true, true)
final_goal(5, in_tower((block,18),(block,2)), false, true)
final_goal(5, in_tower((block,18),(block,3)), false, true)
final_goal(5, in_tower((block,18),(block,4)), false, true)
final_goal(5, in_tower((block,18),(block,5)), false, true)
final_goal(5, in_tower((block,18),(block,6)), false, true)
final_goal(5, in_tower((block,18),(block,7)), false, true)
final_goal(5, in_tower((block,18),(block,8)), false, true)
final_goal(5, in_tower((block,18),(block,9)), false, true)
final_goal(5, in_tower((block,2),(block,1)), false, true)
final_goal(5, in_tower((block,2),(block,10)), false, true)
final_goal(5, in_tower((block,2),(block,11)), false, true)
final_goal(5, in_tower((block,2),(block,12)), false, true)
final_goal(5, in_tower((block,2),(block,13)), false, true)
final_goal(5, in_tower((block,2),(block,14)), false, true)
final_goal(5, in_tower((block,2),(block,15)), false, true)
final_goal(5, in_tower((block,2),(block,16)), false, true)
final_goal(5, in_tower((block,2),(block,17)), false, true)
final_goal(5, in_tower((block,2),(block,18)), false, true)
final_goal(5, in_tower((block,2),(block,2)), false, true)
final_goal(5, in_tower((block,2),(block,3)), false, true)
final_goal(5, in_tower((block,2),(block,4)), false, true)
final_goal(5, in_tower((block,2),(block,5)), false, true)
final_goal(5, in_tower((block,2),(block,6)), false, true)
final_goal(5, in_tower((block,2),(block,7)), false, true)
final_goal(5, in_tower((block,2),(block,8)), false, true)
final_goal(5, in_tower((block,2),(block,9)), false, true)
final_goal(5, in_tower((block,3),(block,1)), true, true)
final_goal(5, in_tower((block,3),(block,10)), false, true)
final_goal(5, in_tower((block,3),(block,11)), false, true)
final_goal(5, in_tower((block,3),(block,12)), false, true)
final_goal(5, in_tower((block,3),(block,13)), false, true)
final_goal(5, in_tower((block,3),(block,14)), false, true)
final_goal(5, in_tower((block,3),(block,15)), false, true)
final_goal(5, in_tower((block,3),(block,16)), false, true)
final_goal(5, in_tower((block,3),(block,17)), false, true)
final_goal(5, in_tower((block,3),(block,18)), false, true)
final_goal(5, in_tower((block,3),(block,2)), true, true)
final_goal(5, in_tower((block,3),(block,3)), true, true)
final_goal(5, in_tower((block,3),(block,4)), false, true)
final_goal(5, in_tower((block,3),(block,5)), false, true)
final_goal(5, in_tower((block,3),(block,6)), false, true)
final_goal(5, in_tower((block,3),(block,7)), false, true)
final_goal(5, in_tower((block,3),(block,8)), false, true)
final_goal(5, in_tower((block,3),(block,9)), false, true)
final_goal(5, in_tower((block,4),(block,1)), false, true)
final_goal(5, in_tower((block,4),(block,10)), false, true)
final_goal(5, in_tower((block,4),(block,11)), false, true)
final_goal(5, in_tower((block,4),(block,12)), false, true)
final_goal(5, in_tower((block,4),(block,13)), false, true)
final_goal(5, in_tower((block,4),(block,14)), false, true)
final_goal(5, in_tower((block,4),(block,15)), false, true)
final_goal(5, in_tower((block,4),(block,16)), false, true)
final_goal(5, in_tower((block,4),(block,17)), false, true)
final_goal(5, in_tower((block,4),(block,18)), false, true)
final_goal(5, in_tower((block,4),(block,2)), false, true)
final_goal(5, in_tower((block,4),(block,3)), false, true)
final_goal(5, in_tower((block,4),(block,4)), false, true)
final_goal(5, in_tower((block,4),(block,5)), false, true)
final_goal(5, in_tower((block,4),(block,6)), false, true)
final_goal(5, in_tower((block,4),(block,7)), false, true)
final_goal(5, in_tower((block,4),(block,8)), false, true)
final_goal(5, in_tower((block,4),(block,9)), false, true)
final_goal(5, in_tower((block,5),(block,1)), false, true)
final_goal(5, in_tower((block,5),(block,10)), false, true)
final_goal(5, in_tower((block,5),(block,11)), false, true)
final_goal(5, in_tower((block,5),(block,12)), false, true)
final_goal(5, in_tower((block,5),(block,13)), false, true)
final_goal(5, in_tower((block,5),(block,14)), false, true)
final_goal(5, in_tower((block,5),(block,15)), false, true)
final_goal(5, in_tower((block,5),(block,16)), false, true)
final_goal(5, in_tower((block,5),(block,17)), false, true)
final_goal(5, in_tower((block,5),(block,18)), false, true)
final_goal(5, in_tower((block,5),(block,2)), false, true)
final_goal(5, in_tower((block,5),(block,3)), false, true)
final_goal(5, in_tower((block,5),(block,4)), false, true)
final_goal(5, in_tower((block,5),(block,5)), false, true)
final_goal(5, in_tower((block,5),(block,6)), false, true)
final_goal(5, in_tower((block,5),(block,7)), false, true)
final_goal(5, in_tower((block,5),(block,8)), false, true)
final_goal(5, in_tower((block,5),(block,9)), false, true)
final_goal(5, in_tower((block,6),(block,1)), false, true)
final_goal(5, in_tower((block,6),(block,10)), false, true)
final_goal(5, in_tower((block,6),(block,11)), false, true)
final_goal(5, in_tower((block,6),(block,12)), false, true)
final_goal(5, in_tower((block,6),(block,13)), false, true)
final_goal(5, in_tower((block,6),(block,14)), false, true)
final_goal(5, in_tower((block,6),(block,15)), false, true)
final_goal(5, in_tower((block,6),(block,16)), false, true)
final_goal(5, in_tower((block,6),(block,17)), false, true)
final_goal(5, in_tower((block,6),(block,18)), false, true)
final_goal(5, in_tower((block,6),(block,2)), false, true)
final_goal(5, in_tower((block,6),(block,3)), false, true)
final_goal(5, in_tower((block,6),(block,4)), true, true)
final_goal(5, in_tower((block,6),(block,5)), true, true)
final_goal(5, in_tower((block,6),(block,6)), true, true)
final_goal(5, in_tower((block,6),(block,7)), false, true)
final_goal(5, in_tower((block,6),(block,8)), false, true)
final_goal(5, in_tower((block,6),(block,9)), false, true)
final_goal(5, in_tower((block,7),(block,1)), false, true)
final_goal(5, in_tower((block,7),(block,10)), false, true)
final_goal(5, in_tower((block,7),(block,11)), false, true)
final_goal(5, in_tower((block,7),(block,12)), false, true)
final_goal(5, in_tower((block,7),(block,13)), false, true)
final_goal(5, in_tower((block,7),(block,14)), false, true)
final_goal(5, in_tower((block,7),(block,15)), false, true)
final_goal(5, in_tower((block,7),(block,16)), false, true)
final_goal(5, in_tower((block,7),(block,17)), false, true)
final_goal(5, in_tower((block,7),(block,18)), false, true)
final_goal(5, in_tower((block,7),(block,2)), false, true)
final_goal(5, in_tower((block,7),(block,3)), false, true)
final_goal(5, in_tower((block,7),(block,4)), false, true)
final_goal(5, in_tower((block,7),(block,5)), false, true)
final_goal(5, in_tower((block,7),(block,6)), false, true)
final_goal(5, in_tower((block,7),(block,7)), false, true)
final_goal(5, in_tower((block,7),(block,8)), false, true)
final_goal(5, in_tower((block,7),(block,9)), false, true)
final_goal(5, in_tower((block,8),(block,1)), false, true)
final_goal(5, in_tower((block,8),(block,10)), false, true)
final_goal(5, in_tower((block,8),(block,11)), false, true)
final_goal(5, in_tower((block,8),(block,12)), false, true)
final_goal(5, in_tower((block,8),(block,13)), false, true)
final_goal(5, in_tower((block,8),(block,14)), false, true)
final_goal(5, in_tower((block,8),(block,15)), false, true)
final_goal(5, in_tower((block,8),(block,16)), false, true)
final_goal(5, in_tower((block,8),(block,17)), false, true)
final_goal(5, in_tower((block,8),(block,18)), false, true)
final_goal(5, in_tower((block,8),(block,2)), false, true)
final_goal(5, in_tower((block,8),(block,3)), false, true)
final_goal(5, in_tower((block,8),(block,4)), false, true)
final_goal(5, in_tower((block,8),(block,5)), false, true)
final_goal(5, in_tower((block,8),(block,6)), false, true)
final_goal(5, in_tower((block,8),(block,7)), false, true)
final_goal(5, in_tower((block,8),(block,8)), false, true)
final_goal(5, in_tower((block,8),(block,9)), false, true)
final_goal(5, in_tower((block,9),(block,1)), false, true)
final_goal(5, in_tower((block,9),(block,10)), false, true)
final_goal(5, in_tower((block,9),(block,11)), false, true)
final_goal(5, in_tower((block,9),(block,12)), false, true)
final_goal(5, in_tower((block,9),(block,13)), false, true)
final_goal(5, in_tower((block,9),(block,14)), false, true)
final_goal(5, in_tower((block,9),(block,15)), false, true)
final_goal(5, in_tower((block,9),(block,16)), false, true)
final_goal(5, in_tower((block,9),(block,17)), false, true)
final_goal(5, in_tower((block,9),(block,18)), false, true)
final_goal(5, in_tower((block,9),(block,2)), false, true)
final_goal(5, in_tower((block,9),(block,3)), false, true)
final_goal(5, in_tower((block,9),(block,4)), false, true)
final_goal(5, in_tower((block,9),(block,5)), false, true)
final_goal(5, in_tower((block,9),(block,6)), false, true)
final_goal(5, in_tower((block,9),(block,7)), true, true)
final_goal(5, in_tower((block,9),(block,8)), true, true)
final_goal(5, in_tower((block,9),(block,9)), true, true)
final_goal(5, on((block,1)), (block,2), true)
final_goal(5, on((block,10)), (block,11), true)
final_goal(5, on((block,11)), (block,12), true)
final_goal(5, on((block,12)), puzzle_room_2_table, true)
final_goal(5, on((block,13)), (block,14), true)
final_goal(5, on((block,14)), (block,15), true)
final_goal(5, on((block,15)), puzzle_room_2_table, true)
final_goal(5, on((block,16)), (block,17), true)
final_goal(5, on((block,17)), (block,18), true)
final_goal(5, on((block,18)), puzzle_room_2_table, true)
final_goal(5, on((block,2)), (block,3), true)
final_goal(5, on((block,3)), puzzle_room_1_table, true)
final_goal(5, on((block,4)), (block,5), true)
final_goal(5, on((block,5)), (block,6), true)
final_goal(5, on((block,6)), puzzle_room_1_table, true)
final_goal(5, on((block,7)), (block,8), true)
final_goal(5, on((block,8)), (block,9), true)
final_goal(5, on((block,9)), puzzle_room_1_table, true)
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(5, in_tower((block,1),(block,1)), true, false)
final_goal(5, in_tower((block,1),(block,10)), true, false)
final_goal(5, in_tower((block,1),(block,11)), true, false)
final_goal(5, in_tower((block,1),(block,12)), true, false)
final_goal(5, in_tower((block,1),(block,13)), true, false)
final_goal(5, in_tower((block,1),(block,14)), true, false)
final_goal(5, in_tower((block,1),(block,15)), true, false)
final_goal(5, in_tower((block,1),(block,16)), true, false)
final_goal(5, in_tower((block,1),(block,17)), true, false)
final_goal(5, in_tower((block,1),(block,18)), true, false)
final_goal(5, in_tower((block,1),(block,2)), true, false)
final_goal(5, in_tower((block,1),(block,3)), true, false)
final_goal(5, in_tower((block,1),(block,4)), true, false)
final_goal(5, in_tower((block,1),(block,5)), true, false)
final_goal(5, in_tower((block,1),(block,6)), true, false)
final_goal(5, in_tower((block,1),(block,7)), true, false)
final_goal(5, in_tower((block,1),(block,8)), true, false)
final_goal(5, in_tower((block,1),(block,9)), true, false)
final_goal(5, in_tower((block,10),(block,1)), true, false)
final_goal(5, in_tower((block,10),(block,10)), true, false)
final_goal(5, in_tower((block,10),(block,11)), true, false)
final_goal(5, in_tower((block,10),(block,12)), true, false)
final_goal(5, in_tower((block,10),(block,13)), true, false)
final_goal(5, in_tower((block,10),(block,14)), true, false)
final_goal(5, in_tower((block,10),(block,15)), true, false)
final_goal(5, in_tower((block,10),(block,16)), true, false)
final_goal(5, in_tower((block,10),(block,17)), true, false)
final_goal(5, in_tower((block,10),(block,18)), true, false)
final_goal(5, in_tower((block,10),(block,2)), true, false)
final_goal(5, in_tower((block,10),(block,3)), true, false)
final_goal(5, in_tower((block,10),(block,4)), true, false)
final_goal(5, in_tower((block,10),(block,5)), true, false)
final_goal(5, in_tower((block,10),(block,6)), true, false)
final_goal(5, in_tower((block,10),(block,7)), true, false)
final_goal(5, in_tower((block,10),(block,8)), true, false)
final_goal(5, in_tower((block,10),(block,9)), true, false)
final_goal(5, in_tower((block,11),(block,1)), true, false)
final_goal(5, in_tower((block,11),(block,10)), true, false)
final_goal(5, in_tower((block,11),(block,11)), true, false)
final_goal(5, in_tower((block,11),(block,12)), true, false)
final_goal(5, in_tower((block,11),(block,13)), true, false)
final_goal(5, in_tower((block,11),(block,14)), true, false)
final_goal(5, in_tower((block,11),(block,15)), true, false)
final_goal(5, in_tower((block,11),(block,16)), true, false)
final_goal(5, in_tower((block,11),(block,17)), true, false)
final_goal(5, in_tower((block,11),(block,18)), true, false)
final_goal(5, in_tower((block,11),(block,2)), true, false)
final_goal(5, in_tower((block,11),(block,3)), true, false)
final_goal(5, in_tower((block,11),(block,4)), true, false)
final_goal(5, in_tower((block,11),(block,5)), true, false)
final_goal(5, in_tower((block,11),(block,6)), true, false)
final_goal(5, in_tower((block,11),(block,7)), true, false)
final_goal(5, in_tower((block,11),(block,8)), true, false)
final_goal(5, in_tower((block,11),(block,9)), true, false)
final_goal(5, in_tower((block,12),(block,1)), true, false)
final_goal(5, in_tower((block,12),(block,10)), false, false)
final_goal(5, in_tower((block,12),(block,11)), false, false)
final_goal(5, in_tower((block,12),(block,12)), false, false)
final_goal(5, in_tower((block,12),(block,13)), true, false)
final_goal(5, in_tower((block,12),(block,14)), true, false)
final_goal(5, in_tower((block,12),(block,15)), true, false)
final_goal(5, in_tower((block,12),(block,16)), true, false)
final_goal(5, in_tower((block,12),(block,17)), true, false)
final_goal(5, in_tower((block,12),(block,18)), true, false)
final_goal(5, in_tower((block,12),(block,2)), true, false)
final_goal(5, in_tower((block,12),(block,3)), true, false)
final_goal(5, in_tower((block,12),(block,4)), true, false)
final_goal(5, in_tower((block,12),(block,5)), true, false)
final_goal(5, in_tower((block,12),(block,6)), true, false)
final_goal(5, in_tower((block,12),(block,7)), true, false)
final_goal(5, in_tower((block,12),(block,8)), true, false)
final_goal(5, in_tower((block,12),(block,9)), true, false)
final_goal(5, in_tower((block,13),(block,1)), true, false)
final_goal(5, in_tower((block,13),(block,10)), true, false)
final_goal(5, in_tower((block,13),(block,11)), true, false)
final_goal(5, in_tower((block,13),(block,12)), true, false)
final_goal(5, in_tower((block,13),(block,13)), true, false)
final_goal(5, in_tower((block,13),(block,14)), true, false)
final_goal(5, in_tower((block,13),(block,15)), true, false)
final_goal(5, in_tower((block,13),(block,16)), true, false)
final_goal(5, in_tower((block,13),(block,17)), true, false)
final_goal(5, in_tower((block,13),(block,18)), true, false)
final_goal(5, in_tower((block,13),(block,2)), true, false)
final_goal(5, in_tower((block,13),(block,3)), true, false)
final_goal(5, in_tower((block,13),(block,4)), true, false)
final_goal(5, in_tower((block,13),(block,5)), true, false)
final_goal(5, in_tower((block,13),(block,6)), true, false)
final_goal(5, in_tower((block,13),(block,7)), true, false)
final_goal(5, in_tower((block,13),(block,8)), true, false)
final_goal(5, in_tower((block,13),(block,9)), true, false)
final_goal(5, in_tower((block,14),(block,1)), true, false)
final_goal(5, in_tower((block,14),(block,10)), true, false)
final_goal(5, in_tower((block,14),(block,11)), true, false)
final_goal(5, in_tower((block,14),(block,12)), true, false)
final_goal(5, in_tower((block,14),(block,13)), true, false)
final_goal(5, in_tower((block,14),(block,14)), true, false)
final_goal(5, in_tower((block,14),(block,15)), true, false)
final_goal(5, in_tower((block,14),(block,16)), true, false)
final_goal(5, in_tower((block,14),(block,17)), true, false)
final_goal(5, in_tower((block,14),(block,18)), true, false)
final_goal(5, in_tower((block,14),(block,2)), true, false)
final_goal(5, in_tower((block,14),(block,3)), true, false)
final_goal(5, in_tower((block,14),(block,4)), true, false)
final_goal(5, in_tower((block,14),(block,5)), true, false)
final_goal(5, in_tower((block,14),(block,6)), true, false)
final_goal(5, in_tower((block,14),(block,7)), true, false)
final_goal(5, in_tower((block,14),(block,8)), true, false)
final_goal(5, in_tower((block,14),(block,9)), true, false)
final_goal(5, in_tower((block,15),(block,1)), true, false)
final_goal(5, in_tower((block,15),(block,10)), true, false)
final_goal(5, in_tower((block,15),(block,11)), true, false)
final_goal(5, in_tower((block,15),(block,12)), true, false)
final_goal(5, in_tower((block,15),(block,13)), false, false)
final_goal(5, in_tower((block,15),(block,14)), false, false)
final_goal(5, in_tower((block,15),(block,15)), false, false)
final_goal(5, in_tower((block,15),(block,16)), true, false)
final_goal(5, in_tower((block,15),(block,17)), true, false)
final_goal(5, in_tower((block,15),(block,18)), true, false)
final_goal(5, in_tower((block,15),(block,2)), true, false)
final_goal(5, in_tower((block,15),(block,3)), true, false)
final_goal(5, in_tower((block,15),(block,4)), true, false)
final_goal(5, in_tower((block,15),(block,5)), true, false)
final_goal(5, in_tower((block,15),(block,6)), true, false)
final_goal(5, in_tower((block,15),(block,7)), true, false)
final_goal(5, in_tower((block,15),(block,8)), true, false)
final_goal(5, in_tower((block,15),(block,9)), true, false)
final_goal(5, in_tower((block,16),(block,1)), true, false)
final_goal(5, in_tower((block,16),(block,10)), true, false)
final_goal(5, in_tower((block,16),(block,11)), true, false)
final_goal(5, in_tower((block,16),(block,12)), true, false)
final_goal(5, in_tower((block,16),(block,13)), true, false)
final_goal(5, in_tower((block,16),(block,14)), true, false)
final_goal(5, in_tower((block,16),(block,15)), true, false)
final_goal(5, in_tower((block,16),(block,16)), true, false)
final_goal(5, in_tower((block,16),(block,17)), true, false)
final_goal(5, in_tower((block,16),(block,18)), true, false)
final_goal(5, in_tower((block,16),(block,2)), true, false)
final_goal(5, in_tower((block,16),(block,3)), true, false)
final_goal(5, in_tower((block,16),(block,4)), true, false)
final_goal(5, in_tower((block,16),(block,5)), true, false)
final_goal(5, in_tower((block,16),(block,6)), true, false)
final_goal(5, in_tower((block,16),(block,7)), true, false)
final_goal(5, in_tower((block,16),(block,8)), true, false)
final_goal(5, in_tower((block,16),(block,9)), true, false)
final_goal(5, in_tower((block,17),(block,1)), true, false)
final_goal(5, in_tower((block,17),(block,10)), true, false)
final_goal(5, in_tower((block,17),(block,11)), true, false)
final_goal(5, in_tower((block,17),(block,12)), true, false)
final_goal(5, in_tower((block,17),(block,13)), true, false)
final_goal(5, in_tower((block,17),(block,14)), true, false)
final_goal(5, in_tower((block,17),(block,15)), true, false)
final_goal(5, in_tower((block,17),(block,16)), true, false)
final_goal(5, in_tower((block,17),(block,17)), true, false)
final_goal(5, in_tower((block,17),(block,18)), true, false)
final_goal(5, in_tower((block,17),(block,2)), true, false)
final_goal(5, in_tower((block,17),(block,3)), true, false)
final_goal(5, in_tower((block,17),(block,4)), true, false)
final_goal(5, in_tower((block,17),(block,5)), true, false)
final_goal(5, in_tower((block,17),(block,6)), true, false)
final_goal(5, in_tower((block,17),(block,7)), true, false)
final_goal(5, in_tower((block,17),(block,8)), true, false)
final_goal(5, in_tower((block,17),(block,9)), true, false)
final_goal(5, in_tower((block,18),(block,1)), true, false)
final_goal(5, in_tower((block,18),(block,10)), true, false)
final_goal(5, in_tower((block,18),(block,11)), true, false)
final_goal(5, in_tower((block,18),(block,12)), true, false)
final_goal(5, in_tower((block,18),(block,13)), true, false)
final_goal(5, in_tower((block,18),(block,14)), true, false)
final_goal(5, in_tower((block,18),(block,15)), true, false)
final_goal(5, in_tower((block,18),(block,16)), false, false)
final_goal(5, in_tower((block,18),(block,17)), false, false)
final_goal(5, in_tower((block,18),(block,18)), false, false)
final_goal(5, in_tower((block,18),(block,2)), true, false)
final_goal(5, in_tower((block,18),(block,3)), true, false)
final_goal(5, in_tower((block,18),(block,4)), true, false)
final_goal(5, in_tower((block,18),(block,5)), true, false)
final_goal(5, in_tower((block,18),(block,6)), true, false)
final_goal(5, in_tower((block,18),(block,7)), true, false)
final_goal(5, in_tower((block,18),(block,8)), true, false)
final_goal(5, in_tower((block,18),(block,9)), true, false)
final_goal(5, in_tower((block,2),(block,1)), true, false)
final_goal(5, in_tower((block,2),(block,10)), true, false)
final_goal(5, in_tower((block,2),(block,11)), true, false)
final_goal(5, in_tower((block,2),(block,12)), true, false)
final_goal(5, in_tower((block,2),(block,13)), true, false)
final_goal(5, in_tower((block,2),(block,14)), true, false)
final_goal(5, in_tower((block,2),(block,15)), true, false)
final_goal(5, in_tower((block,2),(block,16)), true, false)
final_goal(5, in_tower((block,2),(block,17)), true, false)
final_goal(5, in_tower((block,2),(block,18)), true, false)
final_goal(5, in_tower((block,2),(block,2)), true, false)
final_goal(5, in_tower((block,2),(block,3)), true, false)
final_goal(5, in_tower((block,2),(block,4)), true, false)
final_goal(5, in_tower((block,2),(block,5)), true, false)
final_goal(5, in_tower((block,2),(block,6)), true, false)
final_goal(5, in_tower((block,2),(block,7)), true, false)
final_goal(5, in_tower((block,2),(block,8)), true, false)
final_goal(5, in_tower((block,2),(block,9)), true, false)
final_goal(5, in_tower((block,3),(block,1)), false, false)
final_goal(5, in_tower((block,3),(block,10)), true, false)
final_goal(5, in_tower((block,3),(block,11)), true, false)
final_goal(5, in_tower((block,3),(block,12)), true, false)
final_goal(5, in_tower((block,3),(block,13)), true, false)
final_goal(5, in_tower((block,3),(block,14)), true, false)
final_goal(5, in_tower((block,3),(block,15)), true, false)
final_goal(5, in_tower((block,3),(block,16)), true, false)
final_goal(5, in_tower((block,3),(block,17)), true, false)
final_goal(5, in_tower((block,3),(block,18)), true, false)
final_goal(5, in_tower((block,3),(block,2)), false, false)
final_goal(5, in_tower((block,3),(block,3)), false, false)
final_goal(5, in_tower((block,3),(block,4)), true, false)
final_goal(5, in_tower((block,3),(block,5)), true, false)
final_goal(5, in_tower((block,3),(block,6)), true, false)
final_goal(5, in_tower((block,3),(block,7)), true, false)
final_goal(5, in_tower((block,3),(block,8)), true, false)
final_goal(5, in_tower((block,3),(block,9)), true, false)
final_goal(5, in_tower((block,4),(block,1)), true, false)
final_goal(5, in_tower((block,4),(block,10)), true, false)
final_goal(5, in_tower((block,4),(block,11)), true, false)
final_goal(5, in_tower((block,4),(block,12)), true, false)
final_goal(5, in_tower((block,4),(block,13)), true, false)
final_goal(5, in_tower((block,4),(block,14)), true, false)
final_goal(5, in_tower((block,4),(block,15)), true, false)
final_goal(5, in_tower((block,4),(block,16)), true, false)
final_goal(5, in_tower((block,4),(block,17)), true, false)
final_goal(5, in_tower((block,4),(block,18)), true, false)
final_goal(5, in_tower((block,4),(block,2)), true, false)
final_goal(5, in_tower((block,4),(block,3)), true, false)
final_goal(5, in_tower((block,4),(block,4)), true, false)
final_goal(5, in_tower((block,4),(block,5)), true, false)
final_goal(5, in_tower((block,4),(block,6)), true, false)
final_goal(5, in_tower((block,4),(block,7)), true, false)
final_goal(5, in_tower((block,4),(block,8)), true, false)
final_goal(5, in_tower((block,4),(block,9)), true, false)
final_goal(5, in_tower((block,5),(block,1)), true, false)
final_goal(5, in_tower((block,5),(block,10)), true, false)
final_goal(5, in_tower((block,5),(block,11)), true, false)
final_goal(5, in_tower((block,5),(block,12)), true, false)
final_goal(5, in_tower((block,5),(block,13)), true, false)
final_goal(5, in_tower((block,5),(block,14)), true, false)
final_goal(5, in_tower((block,5),(block,15)), true, false)
final_goal(5, in_tower((block,5),(block,16)), true, false)
final_goal(5, in_tower((block,5),(block,17)), true, false)
final_goal(5, in_tower((block,5),(block,18)), true, false)
final_goal(5, in_tower((block,5),(block,2)), true, false)
final_goal(5, in_tower((block,5),(block,3)), true, false)
final_goal(5, in_tower((block,5),(block,4)), true, false)
final_goal(5, in_tower((block,5),(block,5)), true, false)
final_goal(5, in_tower((block,5),(block,6)), true, false)
final_goal(5, in_tower((block,5),(block,7)), true, false)
final_goal(5, in_tower((block,5),(block,8)), true, false)
final_goal(5, in_tower((block,5),(block,9)), true, false)
final_goal(5, in_tower((block,6),(block,1)), true, false)
final_goal(5, in_tower((block,6),(block,10)), true, false)
final_goal(5, in_tower((block,6),(block,11)), true, false)
final_goal(5, in_tower((block,6),(block,12)), true, false)
final_goal(5, in_tower((block,6),(block,13)), true, false)
final_goal(5, in_tower((block,6),(block,14)), true, false)
final_goal(5, in_tower((block,6),(block,15)), true, false)
final_goal(5, in_tower((block,6),(block,16)), true, false)
final_goal(5, in_tower((block,6),(block,17)), true, false)
final_goal(5, in_tower((block,6),(block,18)), true, false)
final_goal(5, in_tower((block,6),(block,2)), true, false)
final_goal(5, in_tower((block,6),(block,3)), true, false)
final_goal(5, in_tower((block,6),(block,4)), false, false)
final_goal(5, in_tower((block,6),(block,5)), false, false)
final_goal(5, in_tower((block,6),(block,6)), false, false)
final_goal(5, in_tower((block,6),(block,7)), true, false)
final_goal(5, in_tower((block,6),(block,8)), true, false)
final_goal(5, in_tower((block,6),(block,9)), true, false)
final_goal(5, in_tower((block,7),(block,1)), true, false)
final_goal(5, in_tower((block,7),(block,10)), true, false)
final_goal(5, in_tower((block,7),(block,11)), true, false)
final_goal(5, in_tower((block,7),(block,12)), true, false)
final_goal(5, in_tower((block,7),(block,13)), true, false)
final_goal(5, in_tower((block,7),(block,14)), true, false)
final_goal(5, in_tower((block,7),(block,15)), true, false)
final_goal(5, in_tower((block,7),(block,16)), true, false)
final_goal(5, in_tower((block,7),(block,17)), true, false)
final_goal(5, in_tower((block,7),(block,18)), true, false)
final_goal(5, in_tower((block,7),(block,2)), true, false)
final_goal(5, in_tower((block,7),(block,3)), true, false)
final_goal(5, in_tower((block,7),(block,4)), true, false)
final_goal(5, in_tower((block,7),(block,5)), true, false)
final_goal(5, in_tower((block,7),(block,6)), true, false)
final_goal(5, in_tower((block,7),(block,7)), true, false)
final_goal(5, in_tower((block,7),(block,8)), true, false)
final_goal(5, in_tower((block,7),(block,9)), true, false)
final_goal(5, in_tower((block,8),(block,1)), true, false)
final_goal(5, in_tower((block,8),(block,10)), true, false)
final_goal(5, in_tower((block,8),(block,11)), true, false)
final_goal(5, in_tower((block,8),(block,12)), true, false)
final_goal(5, in_tower((block,8),(block,13)), true, false)
final_goal(5, in_tower((block,8),(block,14)), true, false)
final_goal(5, in_tower((block,8),(block,15)), true, false)
final_goal(5, in_tower((block,8),(block,16)), true, false)
final_goal(5, in_tower((block,8),(block,17)), true, false)
final_goal(5, in_tower((block,8),(block,18)), true, false)
final_goal(5, in_tower((block,8),(block,2)), true, false)
final_goal(5, in_tower((block,8),(block,3)), true, false)
final_goal(5, in_tower((block,8),(block,4)), true, false)
final_goal(5, in_tower((block,8),(block,5)), true, false)
final_goal(5, in_tower((block,8),(block,6)), true, false)
final_goal(5, in_tower((block,8),(block,7)), true, false)
final_goal(5, in_tower((block,8),(block,8)), true, false)
final_goal(5, in_tower((block,8),(block,9)), true, false)
final_goal(5, in_tower((block,9),(block,1)), true, false)
final_goal(5, in_tower((block,9),(block,10)), true, false)
final_goal(5, in_tower((block,9),(block,11)), true, false)
final_goal(5, in_tower((block,9),(block,12)), true, false)
final_goal(5, in_tower((block,9),(block,13)), true, false)
final_goal(5, in_tower((block,9),(block,14)), true, false)
final_goal(5, in_tower((block,9),(block,15)), true, false)
final_goal(5, in_tower((block,9),(block,16)), true, false)
final_goal(5, in_tower((block,9),(block,17)), true, false)
final_goal(5, in_tower((block,9),(block,18)), true, false)
final_goal(5, in_tower((block,9),(block,2)), true, false)
final_goal(5, in_tower((block,9),(block,3)), true, false)
final_goal(5, in_tower((block,9),(block,4)), true, false)
final_goal(5, in_tower((block,9),(block,5)), true, false)
final_goal(5, in_tower((block,9),(block,6)), true, false)
final_goal(5, in_tower((block,9),(block,7)), false, false)
final_goal(5, in_tower((block,9),(block,8)), false, false)
final_goal(5, in_tower((block,9),(block,9)), false, false)
final_goal(5, on((block,1)), (block,10), false)
final_goal(5, on((block,1)), (block,11), false)
final_goal(5, on((block,1)), (block,12), false)
final_goal(5, on((block,1)), (block,13), false)
final_goal(5, on((block,1)), (block,14), false)
final_goal(5, on((block,1)), (block,15), false)
final_goal(5, on((block,1)), (block,16), false)
final_goal(5, on((block,1)), (block,17), false)
final_goal(5, on((block,1)), (block,18), false)
final_goal(5, on((block,1)), (block,3), false)
final_goal(5, on((block,1)), (block,4), false)
final_goal(5, on((block,1)), (block,5), false)
final_goal(5, on((block,1)), (block,6), false)
final_goal(5, on((block,1)), (block,7), false)
final_goal(5, on((block,1)), (block,8), false)
final_goal(5, on((block,1)), (block,9), false)
final_goal(5, on((block,1)), nothing, false)
final_goal(5, on((block,1)), puzzle_room_1_table, false)
final_goal(5, on((block,1)), puzzle_room_2_table, false)
final_goal(5, on((block,10)), (block,1), false)
final_goal(5, on((block,10)), (block,12), false)
final_goal(5, on((block,10)), (block,13), false)
final_goal(5, on((block,10)), (block,14), false)
final_goal(5, on((block,10)), (block,15), false)
final_goal(5, on((block,10)), (block,16), false)
final_goal(5, on((block,10)), (block,17), false)
final_goal(5, on((block,10)), (block,18), false)
final_goal(5, on((block,10)), (block,2), false)
final_goal(5, on((block,10)), (block,3), false)
final_goal(5, on((block,10)), (block,4), false)
final_goal(5, on((block,10)), (block,5), false)
final_goal(5, on((block,10)), (block,6), false)
final_goal(5, on((block,10)), (block,7), false)
final_goal(5, on((block,10)), (block,8), false)
final_goal(5, on((block,10)), (block,9), false)
final_goal(5, on((block,10)), nothing, false)
final_goal(5, on((block,10)), puzzle_room_1_table, false)
final_goal(5, on((block,10)), puzzle_room_2_table, false)
final_goal(5, on((block,11)), (block,1), false)
final_goal(5, on((block,11)), (block,10), false)
final_goal(5, on((block,11)), (block,13), false)
final_goal(5, on((block,11)), (block,14), false)
final_goal(5, on((block,11)), (block,15), false)
final_goal(5, on((block,11)), (block,16), false)
final_goal(5, on((block,11)), (block,17), false)
final_goal(5, on((block,11)), (block,18), false)
final_goal(5, on((block,11)), (block,2), false)
final_goal(5, on((block,11)), (block,3), false)
final_goal(5, on((block,11)), (block,4), false)
final_goal(5, on((block,11)), (block,5), false)
final_goal(5, on((block,11)), (block,6), false)
final_goal(5, on((block,11)), (block,7), false)
final_goal(5, on((block,11)), (block,8), false)
final_goal(5, on((block,11)), (block,9), false)
final_goal(5, on((block,11)), nothing, false)
final_goal(5, on((block,11)), puzzle_room_1_table, false)
final_goal(5, on((block,11)), puzzle_room_2_table, false)
final_goal(5, on((block,12)), (block,1), false)
final_goal(5, on((block,12)), (block,10), false)
final_goal(5, on((block,12)), (block,11), false)
final_goal(5, on((block,12)), (block,13), false)
final_goal(5, on((block,12)), (block,14), false)
final_goal(5, on((block,12)), (block,15), false)
final_goal(5, on((block,12)), (block,16), false)
final_goal(5, on((block,12)), (block,17), false)
final_goal(5, on((block,12)), (block,18), false)
final_goal(5, on((block,12)), (block,2), false)
final_goal(5, on((block,12)), (block,3), false)
final_goal(5, on((block,12)), (block,4), false)
final_goal(5, on((block,12)), (block,5), false)
final_goal(5, on((block,12)), (block,6), false)
final_goal(5, on((block,12)), (block,7), false)
final_goal(5, on((block,12)), (block,8), false)
final_goal(5, on((block,12)), (block,9), false)
final_goal(5, on((block,12)), nothing, false)
final_goal(5, on((block,12)), puzzle_room_1_table, false)
final_goal(5, on((block,13)), (block,1), false)
final_goal(5, on((block,13)), (block,10), false)
final_goal(5, on((block,13)), (block,11), false)
final_goal(5, on((block,13)), (block,12), false)
final_goal(5, on((block,13)), (block,15), false)
final_goal(5, on((block,13)), (block,16), false)
final_goal(5, on((block,13)), (block,17), false)
final_goal(5, on((block,13)), (block,18), false)
final_goal(5, on((block,13)), (block,2), false)
final_goal(5, on((block,13)), (block,3), false)
final_goal(5, on((block,13)), (block,4), false)
final_goal(5, on((block,13)), (block,5), false)
final_goal(5, on((block,13)), (block,6), false)
final_goal(5, on((block,13)), (block,7), false)
final_goal(5, on((block,13)), (block,8), false)
final_goal(5, on((block,13)), (block,9), false)
final_goal(5, on((block,13)), nothing, false)
final_goal(5, on((block,13)), puzzle_room_1_table, false)
final_goal(5, on((block,13)), puzzle_room_2_table, false)
final_goal(5, on((block,14)), (block,1), false)
final_goal(5, on((block,14)), (block,10), false)
final_goal(5, on((block,14)), (block,11), false)
final_goal(5, on((block,14)), (block,12), false)
final_goal(5, on((block,14)), (block,13), false)
final_goal(5, on((block,14)), (block,16), false)
final_goal(5, on((block,14)), (block,17), false)
final_goal(5, on((block,14)), (block,18), false)
final_goal(5, on((block,14)), (block,2), false)
final_goal(5, on((block,14)), (block,3), false)
final_goal(5, on((block,14)), (block,4), false)
final_goal(5, on((block,14)), (block,5), false)
final_goal(5, on((block,14)), (block,6), false)
final_goal(5, on((block,14)), (block,7), false)
final_goal(5, on((block,14)), (block,8), false)
final_goal(5, on((block,14)), (block,9), false)
final_goal(5, on((block,14)), nothing, false)
final_goal(5, on((block,14)), puzzle_room_1_table, false)
final_goal(5, on((block,14)), puzzle_room_2_table, false)
final_goal(5, on((block,15)), (block,1), false)
final_goal(5, on((block,15)), (block,10), false)
final_goal(5, on((block,15)), (block,11), false)
final_goal(5, on((block,15)), (block,12), false)
final_goal(5, on((block,15)), (block,13), false)
final_goal(5, on((block,15)), (block,14), false)
final_goal(5, on((block,15)), (block,16), false)
final_goal(5, on((block,15)), (block,17), false)
final_goal(5, on((block,15)), (block,18), false)
final_goal(5, on((block,15)), (block,2), false)
final_goal(5, on((block,15)), (block,3), false)
final_goal(5, on((block,15)), (block,4), false)
final_goal(5, on((block,15)), (block,5), false)
final_goal(5, on((block,15)), (block,6), false)
final_goal(5, on((block,15)), (block,7), false)
final_goal(5, on((block,15)), (block,8), false)
final_goal(5, on((block,15)), (block,9), false)
final_goal(5, on((block,15)), nothing, false)
final_goal(5, on((block,15)), puzzle_room_1_table, false)
final_goal(5, on((block,16)), (block,1), false)
final_goal(5, on((block,16)), (block,10), false)
final_goal(5, on((block,16)), (block,11), false)
final_goal(5, on((block,16)), (block,12), false)
final_goal(5, on((block,16)), (block,13), false)
final_goal(5, on((block,16)), (block,14), false)
final_goal(5, on((block,16)), (block,15), false)
final_goal(5, on((block,16)), (block,18), false)
final_goal(5, on((block,16)), (block,2), false)
final_goal(5, on((block,16)), (block,3), false)
final_goal(5, on((block,16)), (block,4), false)
final_goal(5, on((block,16)), (block,5), false)
final_goal(5, on((block,16)), (block,6), false)
final_goal(5, on((block,16)), (block,7), false)
final_goal(5, on((block,16)), (block,8), false)
final_goal(5, on((block,16)), (block,9), false)
final_goal(5, on((block,16)), nothing, false)
final_goal(5, on((block,16)), puzzle_room_1_table, false)
final_goal(5, on((block,16)), puzzle_room_2_table, false)
final_goal(5, on((block,17)), (block,1), false)
final_goal(5, on((block,17)), (block,10), false)
final_goal(5, on((block,17)), (block,11), false)
final_goal(5, on((block,17)), (block,12), false)
final_goal(5, on((block,17)), (block,13), false)
final_goal(5, on((block,17)), (block,14), false)
final_goal(5, on((block,17)), (block,15), false)
final_goal(5, on((block,17)), (block,16), false)
final_goal(5, on((block,17)), (block,2), false)
final_goal(5, on((block,17)), (block,3), false)
final_goal(5, on((block,17)), (block,4), false)
final_goal(5, on((block,17)), (block,5), false)
final_goal(5, on((block,17)), (block,6), false)
final_goal(5, on((block,17)), (block,7), false)
final_goal(5, on((block,17)), (block,8), false)
final_goal(5, on((block,17)), (block,9), false)
final_goal(5, on((block,17)), nothing, false)
final_goal(5, on((block,17)), puzzle_room_1_table, false)
final_goal(5, on((block,17)), puzzle_room_2_table, false)
final_goal(5, on((block,18)), (block,1), false)
final_goal(5, on((block,18)), (block,10), false)
final_goal(5, on((block,18)), (block,11), false)
final_goal(5, on((block,18)), (block,12), false)
final_goal(5, on((block,18)), (block,13), false)
final_goal(5, on((block,18)), (block,14), false)
final_goal(5, on((block,18)), (block,15), false)
final_goal(5, on((block,18)), (block,16), false)
final_goal(5, on((block,18)), (block,17), false)
final_goal(5, on((block,18)), (block,2), false)
final_goal(5, on((block,18)), (block,3), false)
final_goal(5, on((block,18)), (block,4), false)
final_goal(5, on((block,18)), (block,5), false)
final_goal(5, on((block,18)), (block,6), false)
final_goal(5, on((block,18)), (block,7), false)
final_goal(5, on((block,18)), (block,8), false)
final_goal(5, on((block,18)), (block,9), false)
final_goal(5, on((block,18)), nothing, false)
final_goal(5, on((block,18)), puzzle_room_1_table, false)
final_goal(5, on((block,2)), (block,1), false)
final_goal(5, on((block,2)), (block,10), false)
final_goal(5, on((block,2)), (block,11), false)
final_goal(5, on((block,2)), (block,12), false)
final_goal(5, on((block,2)), (block,13), false)
final_goal(5, on((block,2)), (block,14), false)
final_goal(5, on((block,2)), (block,15), false)
final_goal(5, on((block,2)), (block,16), false)
final_goal(5, on((block,2)), (block,17), false)
final_goal(5, on((block,2)), (block,18), false)
final_goal(5, on((block,2)), (block,4), false)
final_goal(5, on((block,2)), (block,5), false)
final_goal(5, on((block,2)), (block,6), false)
final_goal(5, on((block,2)), (block,7), false)
final_goal(5, on((block,2)), (block,8), false)
final_goal(5, on((block,2)), (block,9), false)
final_goal(5, on((block,2)), nothing, false)
final_goal(5, on((block,2)), puzzle_room_1_table, false)
final_goal(5, on((block,2)), puzzle_room_2_table, false)
final_goal(5, on((block,3)), (block,1), false)
final_goal(5, on((block,3)), (block,10), false)
final_goal(5, on((block,3)), (block,11), false)
final_goal(5, on((block,3)), (block,12), false)
final_goal(5, on((block,3)), (block,13), false)
final_goal(5, on((block,3)), (block,14), false)
final_goal(5, on((block,3)), (block,15), false)
final_goal(5, on((block,3)), (block,16), false)
final_goal(5, on((block,3)), (block,17), false)
final_goal(5, on((block,3)), (block,18), false)
final_goal(5, on((block,3)), (block,2), false)
final_goal(5, on((block,3)), (block,4), false)
final_goal(5, on((block,3)), (block,5), false)
final_goal(5, on((block,3)), (block,6), false)
final_goal(5, on((block,3)), (block,7), false)
final_goal(5, on((block,3)), (block,8), false)
final_goal(5, on((block,3)), (block,9), false)
final_goal(5, on((block,3)), nothing, false)
final_goal(5, on((block,3)), puzzle_room_2_table, false)
final_goal(5, on((block,4)), (block,1), false)
final_goal(5, on((block,4)), (block,10), false)
final_goal(5, on((block,4)), (block,11), false)
final_goal(5, on((block,4)), (block,12), false)
final_goal(5, on((block,4)), (block,13), false)
final_goal(5, on((block,4)), (block,14), false)
final_goal(5, on((block,4)), (block,15), false)
final_goal(5, on((block,4)), (block,16), false)
final_goal(5, on((block,4)), (block,17), false)
final_goal(5, on((block,4)), (block,18), false)
final_goal(5, on((block,4)), (block,2), false)
final_goal(5, on((block,4)), (block,3), false)
final_goal(5, on((block,4)), (block,6), false)
final_goal(5, on((block,4)), (block,7), false)
final_goal(5, on((block,4)), (block,8), false)
final_goal(5, on((block,4)), (block,9), false)
final_goal(5, on((block,4)), nothing, false)
final_goal(5, on((block,4)), puzzle_room_1_table, false)
final_goal(5, on((block,4)), puzzle_room_2_table, false)
final_goal(5, on((block,5)), (block,1), false)
final_goal(5, on((block,5)), (block,10), false)
final_goal(5, on((block,5)), (block,11), false)
final_goal(5, on((block,5)), (block,12), false)
final_goal(5, on((block,5)), (block,13), false)
final_goal(5, on((block,5)), (block,14), false)
final_goal(5, on((block,5)), (block,15), false)
final_goal(5, on((block,5)), (block,16), false)
final_goal(5, on((block,5)), (block,17), false)
final_goal(5, on((block,5)), (block,18), false)
final_goal(5, on((block,5)), (block,2), false)
final_goal(5, on((block,5)), (block,3), false)
final_goal(5, on((block,5)), (block,4), false)
final_goal(5, on((block,5)), (block,7), false)
final_goal(5, on((block,5)), (block,8), false)
final_goal(5, on((block,5)), (block,9), false)
final_goal(5, on((block,5)), nothing, false)
final_goal(5, on((block,5)), puzzle_room_1_table, false)
final_goal(5, on((block,5)), puzzle_room_2_table, false)
final_goal(5, on((block,6)), (block,1), false)
final_goal(5, on((block,6)), (block,10), false)
final_goal(5, on((block,6)), (block,11), false)
final_goal(5, on((block,6)), (block,12), false)
final_goal(5, on((block,6)), (block,13), false)
final_goal(5, on((block,6)), (block,14), false)
final_goal(5, on((block,6)), (block,15), false)
final_goal(5, on((block,6)), (block,16), false)
final_goal(5, on((block,6)), (block,17), false)
final_goal(5, on((block,6)), (block,18), false)
final_goal(5, on((block,6)), (block,2), false)
final_goal(5, on((block,6)), (block,3), false)
final_goal(5, on((block,6)), (block,4), false)
final_goal(5, on((block,6)), (block,5), false)
final_goal(5, on((block,6)), (block,7), false)
final_goal(5, on((block,6)), (block,8), false)
final_goal(5, on((block,6)), (block,9), false)
final_goal(5, on((block,6)), nothing, false)
final_goal(5, on((block,6)), puzzle_room_2_table, false)
final_goal(5, on((block,7)), (block,1), false)
final_goal(5, on((block,7)), (block,10), false)
final_goal(5, on((block,7)), (block,11), false)
final_goal(5, on((block,7)), (block,12), false)
final_goal(5, on((block,7)), (block,13), false)
final_goal(5, on((block,7)), (block,14), false)
final_goal(5, on((block,7)), (block,15), false)
final_goal(5, on((block,7)), (block,16), false)
final_goal(5, on((block,7)), (block,17), false)
final_goal(5, on((block,7)), (block,18), false)
final_goal(5, on((block,7)), (block,2), false)
final_goal(5, on((block,7)), (block,3), false)
final_goal(5, on((block,7)), (block,4), false)
final_goal(5, on((block,7)), (block,5), false)
final_goal(5, on((block,7)), (block,6), false)
final_goal(5, on((block,7)), (block,9), false)
final_goal(5, on((block,7)), nothing, false)
final_goal(5, on((block,7)), puzzle_room_1_table, false)
final_goal(5, on((block,7)), puzzle_room_2_table, false)
final_goal(5, on((block,8)), (block,1), false)
final_goal(5, on((block,8)), (block,10), false)
final_goal(5, on((block,8)), (block,11), false)
final_goal(5, on((block,8)), (block,12), false)
final_goal(5, on((block,8)), (block,13), false)
final_goal(5, on((block,8)), (block,14), false)
final_goal(5, on((block,8)), (block,15), false)
final_goal(5, on((block,8)), (block,16), false)
final_goal(5, on((block,8)), (block,17), false)
final_goal(5, on((block,8)), (block,18), false)
final_goal(5, on((block,8)), (block,2), false)
final_goal(5, on((block,8)), (block,3), false)
final_goal(5, on((block,8)), (block,4), false)
final_goal(5, on((block,8)), (block,5), false)
final_goal(5, on((block,8)), (block,6), false)
final_goal(5, on((block,8)), (block,7), false)
final_goal(5, on((block,8)), nothing, false)
final_goal(5, on((block,8)), puzzle_room_1_table, false)
final_goal(5, on((block,8)), puzzle_room_2_table, false)
final_goal(5, on((block,9)), (block,1), false)
final_goal(5, on((block,9)), (block,10), false)
final_goal(5, on((block,9)), (block,11), false)
final_goal(5, on((block,9)), (block,12), false)
final_goal(5, on((block,9)), (block,13), false)
final_goal(5, on((block,9)), (block,14), false)
final_goal(5, on((block,9)), (block,15), false)
final_goal(5, on((block,9)), (block,16), false)
final_goal(5, on((block,9)), (block,17), false)
final_goal(5, on((block,9)), (block,18), false)
final_goal(5, on((block,9)), (block,2), false)
final_goal(5, on((block,9)), (block,3), false)
final_goal(5, on((block,9)), (block,4), false)
final_goal(5, on((block,9)), (block,5), false)
final_goal(5, on((block,9)), (block,6), false)
final_goal(5, on((block,9)), (block,7), false)
final_goal(5, on((block,9)), (block,8), false)
final_goal(5, on((block,9)), nothing, false)
final_goal(5, on((block,9)), puzzle_room_2_table, false)
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(4, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(4, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(4, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(4, in_tower((block,1),(block,1)), false, true)
final_goal(4, in_tower((block,1),(block,10)), false, true)
final_goal(4, in_tower((block,1),(block,11)), false, true)
final_goal(4, in_tower((block,1),(block,12)), false, true)
final_goal(4, in_tower((block,1),(block,13)), false, true)
final_goal(4, in_tower((block,1),(block,14)), false, true)
final_goal(4, in_tower((block,1),(block,15)), false, true)
final_goal(4, in_tower((block,1),(block,16)), false, true)
final_goal(4, in_tower((block,1),(block,17)), false, true)
final_goal(4, in_tower((block,1),(block,18)), false, true)
final_goal(4, in_tower((block,1),(block,2)), false, true)
final_goal(4, in_tower((block,1),(block,3)), false, true)
final_goal(4, in_tower((block,1),(block,4)), false, true)
final_goal(4, in_tower((block,1),(block,5)), false, true)
final_goal(4, in_tower((block,1),(block,6)), false, true)
final_goal(4, in_tower((block,1),(block,7)), false, true)
final_goal(4, in_tower((block,1),(block,8)), false, true)
final_goal(4, in_tower((block,1),(block,9)), false, true)
final_goal(4, in_tower((block,10),(block,1)), false, true)
final_goal(4, in_tower((block,10),(block,10)), false, true)
final_goal(4, in_tower((block,10),(block,11)), false, true)
final_goal(4, in_tower((block,10),(block,12)), false, true)
final_goal(4, in_tower((block,10),(block,13)), false, true)
final_goal(4, in_tower((block,10),(block,14)), false, true)
final_goal(4, in_tower((block,10),(block,15)), false, true)
final_goal(4, in_tower((block,10),(block,16)), false, true)
final_goal(4, in_tower((block,10),(block,17)), false, true)
final_goal(4, in_tower((block,10),(block,18)), false, true)
final_goal(4, in_tower((block,10),(block,2)), false, true)
final_goal(4, in_tower((block,10),(block,3)), false, true)
final_goal(4, in_tower((block,10),(block,4)), false, true)
final_goal(4, in_tower((block,10),(block,5)), false, true)
final_goal(4, in_tower((block,10),(block,6)), false, true)
final_goal(4, in_tower((block,10),(block,7)), false, true)
final_goal(4, in_tower((block,10),(block,8)), false, true)
final_goal(4, in_tower((block,10),(block,9)), false, true)
final_goal(4, in_tower((block,11),(block,1)), false, true)
final_goal(4, in_tower((block,11),(block,10)), false, true)
final_goal(4, in_tower((block,11),(block,11)), false, true)
final_goal(4, in_tower((block,11),(block,12)), false, true)
final_goal(4, in_tower((block,11),(block,13)), false, true)
final_goal(4, in_tower((block,11),(block,14)), false, true)
final_goal(4, in_tower((block,11),(block,15)), false, true)
final_goal(4, in_tower((block,11),(block,16)), false, true)
final_goal(4, in_tower((block,11),(block,17)), false, true)
final_goal(4, in_tower((block,11),(block,18)), false, true)
final_goal(4, in_tower((block,11),(block,2)), false, true)
final_goal(4, in_tower((block,11),(block,3)), false, true)
final_goal(4, in_tower((block,11),(block,4)), false, true)
final_goal(4, in_tower((block,11),(block,5)), false, true)
final_goal(4, in_tower((block,11),(block,6)), false, true)
final_goal(4, in_tower((block,11),(block,7)), false, true)
final_goal(4, in_tower((block,11),(block,8)), false, true)
final_goal(4, in_tower((block,11),(block,9)), false, true)
final_goal(4, in_tower((block,12),(block,1)), false, true)
final_goal(4, in_tower((block,12),(block,10)), true, true)
final_goal(4, in_tower((block,12),(block,11)), true, true)
final_goal(4, in_tower((block,12),(block,12)), true, true)
final_goal(4, in_tower((block,12),(block,13)), false, true)
final_goal(4, in_tower((block,12),(block,14)), false, true)
final_goal(4, in_tower((block,12),(block,15)), false, true)
final_goal(4, in_tower((block,12),(block,16)), false, true)
final_goal(4, in_tower((block,12),(block,17)), false, true)
final_goal(4, in_tower((block,12),(block,18)), false, true)
final_goal(4, in_tower((block,12),(block,2)), false, true)
final_goal(4, in_tower((block,12),(block,3)), false, true)
final_goal(4, in_tower((block,12),(block,4)), false, true)
final_goal(4, in_tower((block,12),(block,5)), false, true)
final_goal(4, in_tower((block,12),(block,6)), false, true)
final_goal(4, in_tower((block,12),(block,7)), false, true)
final_goal(4, in_tower((block,12),(block,8)), false, true)
final_goal(4, in_tower((block,12),(block,9)), false, true)
final_goal(4, in_tower((block,13),(block,1)), false, true)
final_goal(4, in_tower((block,13),(block,10)), false, true)
final_goal(4, in_tower((block,13),(block,11)), false, true)
final_goal(4, in_tower((block,13),(block,12)), false, true)
final_goal(4, in_tower((block,13),(block,13)), false, true)
final_goal(4, in_tower((block,13),(block,14)), false, true)
final_goal(4, in_tower((block,13),(block,15)), false, true)
final_goal(4, in_tower((block,13),(block,16)), false, true)
final_goal(4, in_tower((block,13),(block,17)), false, true)
final_goal(4, in_tower((block,13),(block,18)), false, true)
final_goal(4, in_tower((block,13),(block,2)), false, true)
final_goal(4, in_tower((block,13),(block,3)), false, true)
final_goal(4, in_tower((block,13),(block,4)), false, true)
final_goal(4, in_tower((block,13),(block,5)), false, true)
final_goal(4, in_tower((block,13),(block,6)), false, true)
final_goal(4, in_tower((block,13),(block,7)), false, true)
final_goal(4, in_tower((block,13),(block,8)), false, true)
final_goal(4, in_tower((block,13),(block,9)), false, true)
final_goal(4, in_tower((block,14),(block,1)), false, true)
final_goal(4, in_tower((block,14),(block,10)), false, true)
final_goal(4, in_tower((block,14),(block,11)), false, true)
final_goal(4, in_tower((block,14),(block,12)), false, true)
final_goal(4, in_tower((block,14),(block,13)), false, true)
final_goal(4, in_tower((block,14),(block,14)), false, true)
final_goal(4, in_tower((block,14),(block,15)), false, true)
final_goal(4, in_tower((block,14),(block,16)), false, true)
final_goal(4, in_tower((block,14),(block,17)), false, true)
final_goal(4, in_tower((block,14),(block,18)), false, true)
final_goal(4, in_tower((block,14),(block,2)), false, true)
final_goal(4, in_tower((block,14),(block,3)), false, true)
final_goal(4, in_tower((block,14),(block,4)), false, true)
final_goal(4, in_tower((block,14),(block,5)), false, true)
final_goal(4, in_tower((block,14),(block,6)), false, true)
final_goal(4, in_tower((block,14),(block,7)), false, true)
final_goal(4, in_tower((block,14),(block,8)), false, true)
final_goal(4, in_tower((block,14),(block,9)), false, true)
final_goal(4, in_tower((block,15),(block,1)), false, true)
final_goal(4, in_tower((block,15),(block,10)), false, true)
final_goal(4, in_tower((block,15),(block,11)), false, true)
final_goal(4, in_tower((block,15),(block,12)), false, true)
final_goal(4, in_tower((block,15),(block,13)), true, true)
final_goal(4, in_tower((block,15),(block,14)), true, true)
final_goal(4, in_tower((block,15),(block,15)), true, true)
final_goal(4, in_tower((block,15),(block,16)), false, true)
final_goal(4, in_tower((block,15),(block,17)), false, true)
final_goal(4, in_tower((block,15),(block,18)), false, true)
final_goal(4, in_tower((block,15),(block,2)), false, true)
final_goal(4, in_tower((block,15),(block,3)), false, true)
final_goal(4, in_tower((block,15),(block,4)), false, true)
final_goal(4, in_tower((block,15),(block,5)), false, true)
final_goal(4, in_tower((block,15),(block,6)), false, true)
final_goal(4, in_tower((block,15),(block,7)), false, true)
final_goal(4, in_tower((block,15),(block,8)), false, true)
final_goal(4, in_tower((block,15),(block,9)), false, true)
final_goal(4, in_tower((block,16),(block,1)), false, true)
final_goal(4, in_tower((block,16),(block,10)), false, true)
final_goal(4, in_tower((block,16),(block,11)), false, true)
final_goal(4, in_tower((block,16),(block,12)), false, true)
final_goal(4, in_tower((block,16),(block,13)), false, true)
final_goal(4, in_tower((block,16),(block,14)), false, true)
final_goal(4, in_tower((block,16),(block,15)), false, true)
final_goal(4, in_tower((block,16),(block,16)), false, true)
final_goal(4, in_tower((block,16),(block,17)), false, true)
final_goal(4, in_tower((block,16),(block,18)), false, true)
final_goal(4, in_tower((block,16),(block,2)), false, true)
final_goal(4, in_tower((block,16),(block,3)), false, true)
final_goal(4, in_tower((block,16),(block,4)), false, true)
final_goal(4, in_tower((block,16),(block,5)), false, true)
final_goal(4, in_tower((block,16),(block,6)), false, true)
final_goal(4, in_tower((block,16),(block,7)), false, true)
final_goal(4, in_tower((block,16),(block,8)), false, true)
final_goal(4, in_tower((block,16),(block,9)), false, true)
final_goal(4, in_tower((block,17),(block,1)), false, true)
final_goal(4, in_tower((block,17),(block,10)), false, true)
final_goal(4, in_tower((block,17),(block,11)), false, true)
final_goal(4, in_tower((block,17),(block,12)), false, true)
final_goal(4, in_tower((block,17),(block,13)), false, true)
final_goal(4, in_tower((block,17),(block,14)), false, true)
final_goal(4, in_tower((block,17),(block,15)), false, true)
final_goal(4, in_tower((block,17),(block,16)), false, true)
final_goal(4, in_tower((block,17),(block,17)), false, true)
final_goal(4, in_tower((block,17),(block,18)), false, true)
final_goal(4, in_tower((block,17),(block,2)), false, true)
final_goal(4, in_tower((block,17),(block,3)), false, true)
final_goal(4, in_tower((block,17),(block,4)), false, true)
final_goal(4, in_tower((block,17),(block,5)), false, true)
final_goal(4, in_tower((block,17),(block,6)), false, true)
final_goal(4, in_tower((block,17),(block,7)), false, true)
final_goal(4, in_tower((block,17),(block,8)), false, true)
final_goal(4, in_tower((block,17),(block,9)), false, true)
final_goal(4, in_tower((block,18),(block,1)), false, true)
final_goal(4, in_tower((block,18),(block,10)), false, true)
final_goal(4, in_tower((block,18),(block,11)), false, true)
final_goal(4, in_tower((block,18),(block,12)), false, true)
final_goal(4, in_tower((block,18),(block,13)), false, true)
final_goal(4, in_tower((block,18),(block,14)), false, true)
final_goal(4, in_tower((block,18),(block,15)), false, true)
final_goal(4, in_tower((block,18),(block,16)), true, true)
final_goal(4, in_tower((block,18),(block,17)), true, true)
final_goal(4, in_tower((block,18),(block,18)), true, true)
final_goal(4, in_tower((block,18),(block,2)), false, true)
final_goal(4, in_tower((block,18),(block,3)), false, true)
final_goal(4, in_tower((block,18),(block,4)), false, true)
final_goal(4, in_tower((block,18),(block,5)), false, true)
final_goal(4, in_tower((block,18),(block,6)), false, true)
final_goal(4, in_tower((block,18),(block,7)), false, true)
final_goal(4, in_tower((block,18),(block,8)), false, true)
final_goal(4, in_tower((block,18),(block,9)), false, true)
final_goal(4, in_tower((block,2),(block,1)), false, true)
final_goal(4, in_tower((block,2),(block,10)), false, true)
final_goal(4, in_tower((block,2),(block,11)), false, true)
final_goal(4, in_tower((block,2),(block,12)), false, true)
final_goal(4, in_tower((block,2),(block,13)), false, true)
final_goal(4, in_tower((block,2),(block,14)), false, true)
final_goal(4, in_tower((block,2),(block,15)), false, true)
final_goal(4, in_tower((block,2),(block,16)), false, true)
final_goal(4, in_tower((block,2),(block,17)), false, true)
final_goal(4, in_tower((block,2),(block,18)), false, true)
final_goal(4, in_tower((block,2),(block,2)), false, true)
final_goal(4, in_tower((block,2),(block,3)), false, true)
final_goal(4, in_tower((block,2),(block,4)), false, true)
final_goal(4, in_tower((block,2),(block,5)), false, true)
final_goal(4, in_tower((block,2),(block,6)), false, true)
final_goal(4, in_tower((block,2),(block,7)), false, true)
final_goal(4, in_tower((block,2),(block,8)), false, true)
final_goal(4, in_tower((block,2),(block,9)), false, true)
final_goal(4, in_tower((block,3),(block,1)), true, true)
final_goal(4, in_tower((block,3),(block,10)), false, true)
final_goal(4, in_tower((block,3),(block,11)), false, true)
final_goal(4, in_tower((block,3),(block,12)), false, true)
final_goal(4, in_tower((block,3),(block,13)), false, true)
final_goal(4, in_tower((block,3),(block,14)), false, true)
final_goal(4, in_tower((block,3),(block,15)), false, true)
final_goal(4, in_tower((block,3),(block,16)), false, true)
final_goal(4, in_tower((block,3),(block,17)), false, true)
final_goal(4, in_tower((block,3),(block,18)), false, true)
final_goal(4, in_tower((block,3),(block,2)), true, true)
final_goal(4, in_tower((block,3),(block,3)), true, true)
final_goal(4, in_tower((block,3),(block,4)), false, true)
final_goal(4, in_tower((block,3),(block,5)), false, true)
final_goal(4, in_tower((block,3),(block,6)), false, true)
final_goal(4, in_tower((block,3),(block,7)), false, true)
final_goal(4, in_tower((block,3),(block,8)), false, true)
final_goal(4, in_tower((block,3),(block,9)), false, true)
final_goal(4, in_tower((block,4),(block,1)), false, true)
final_goal(4, in_tower((block,4),(block,10)), false, true)
final_goal(4, in_tower((block,4),(block,11)), false, true)
final_goal(4, in_tower((block,4),(block,12)), false, true)
final_goal(4, in_tower((block,4),(block,13)), false, true)
final_goal(4, in_tower((block,4),(block,14)), false, true)
final_goal(4, in_tower((block,4),(block,15)), false, true)
final_goal(4, in_tower((block,4),(block,16)), false, true)
final_goal(4, in_tower((block,4),(block,17)), false, true)
final_goal(4, in_tower((block,4),(block,18)), false, true)
final_goal(4, in_tower((block,4),(block,2)), false, true)
final_goal(4, in_tower((block,4),(block,3)), false, true)
final_goal(4, in_tower((block,4),(block,4)), false, true)
final_goal(4, in_tower((block,4),(block,5)), false, true)
final_goal(4, in_tower((block,4),(block,6)), false, true)
final_goal(4, in_tower((block,4),(block,7)), false, true)
final_goal(4, in_tower((block,4),(block,8)), false, true)
final_goal(4, in_tower((block,4),(block,9)), false, true)
final_goal(4, in_tower((block,5),(block,1)), false, true)
final_goal(4, in_tower((block,5),(block,10)), false, true)
final_goal(4, in_tower((block,5),(block,11)), false, true)
final_goal(4, in_tower((block,5),(block,12)), false, true)
final_goal(4, in_tower((block,5),(block,13)), false, true)
final_goal(4, in_tower((block,5),(block,14)), false, true)
final_goal(4, in_tower((block,5),(block,15)), false, true)
final_goal(4, in_tower((block,5),(block,16)), false, true)
final_goal(4, in_tower((block,5),(block,17)), false, true)
final_goal(4, in_tower((block,5),(block,18)), false, true)
final_goal(4, in_tower((block,5),(block,2)), false, true)
final_goal(4, in_tower((block,5),(block,3)), false, true)
final_goal(4, in_tower((block,5),(block,4)), false, true)
final_goal(4, in_tower((block,5),(block,5)), false, true)
final_goal(4, in_tower((block,5),(block,6)), false, true)
final_goal(4, in_tower((block,5),(block,7)), false, true)
final_goal(4, in_tower((block,5),(block,8)), false, true)
final_goal(4, in_tower((block,5),(block,9)), false, true)
final_goal(4, in_tower((block,6),(block,1)), false, true)
final_goal(4, in_tower((block,6),(block,10)), false, true)
final_goal(4, in_tower((block,6),(block,11)), false, true)
final_goal(4, in_tower((block,6),(block,12)), false, true)
final_goal(4, in_tower((block,6),(block,13)), false, true)
final_goal(4, in_tower((block,6),(block,14)), false, true)
final_goal(4, in_tower((block,6),(block,15)), false, true)
final_goal(4, in_tower((block,6),(block,16)), false, true)
final_goal(4, in_tower((block,6),(block,17)), false, true)
final_goal(4, in_tower((block,6),(block,18)), false, true)
final_goal(4, in_tower((block,6),(block,2)), false, true)
final_goal(4, in_tower((block,6),(block,3)), false, true)
final_goal(4, in_tower((block,6),(block,4)), true, true)
final_goal(4, in_tower((block,6),(block,5)), true, true)
final_goal(4, in_tower((block,6),(block,6)), true, true)
final_goal(4, in_tower((block,6),(block,7)), false, true)
final_goal(4, in_tower((block,6),(block,8)), false, true)
final_goal(4, in_tower((block,6),(block,9)), false, true)
final_goal(4, in_tower((block,7),(block,1)), false, true)
final_goal(4, in_tower((block,7),(block,10)), false, true)
final_goal(4, in_tower((block,7),(block,11)), false, true)
final_goal(4, in_tower((block,7),(block,12)), false, true)
final_goal(4, in_tower((block,7),(block,13)), false, true)
final_goal(4, in_tower((block,7),(block,14)), false, true)
final_goal(4, in_tower((block,7),(block,15)), false, true)
final_goal(4, in_tower((block,7),(block,16)), false, true)
final_goal(4, in_tower((block,7),(block,17)), false, true)
final_goal(4, in_tower((block,7),(block,18)), false, true)
final_goal(4, in_tower((block,7),(block,2)), false, true)
final_goal(4, in_tower((block,7),(block,3)), false, true)
final_goal(4, in_tower((block,7),(block,4)), false, true)
final_goal(4, in_tower((block,7),(block,5)), false, true)
final_goal(4, in_tower((block,7),(block,6)), false, true)
final_goal(4, in_tower((block,7),(block,7)), false, true)
final_goal(4, in_tower((block,7),(block,8)), false, true)
final_goal(4, in_tower((block,7),(block,9)), false, true)
final_goal(4, in_tower((block,8),(block,1)), false, true)
final_goal(4, in_tower((block,8),(block,10)), false, true)
final_goal(4, in_tower((block,8),(block,11)), false, true)
final_goal(4, in_tower((block,8),(block,12)), false, true)
final_goal(4, in_tower((block,8),(block,13)), false, true)
final_goal(4, in_tower((block,8),(block,14)), false, true)
final_goal(4, in_tower((block,8),(block,15)), false, true)
final_goal(4, in_tower((block,8),(block,16)), false, true)
final_goal(4, in_tower((block,8),(block,17)), false, true)
final_goal(4, in_tower((block,8),(block,18)), false, true)
final_goal(4, in_tower((block,8),(block,2)), false, true)
final_goal(4, in_tower((block,8),(block,3)), false, true)
final_goal(4, in_tower((block,8),(block,4)), false, true)
final_goal(4, in_tower((block,8),(block,5)), false, true)
final_goal(4, in_tower((block,8),(block,6)), false, true)
final_goal(4, in_tower((block,8),(block,7)), false, true)
final_goal(4, in_tower((block,8),(block,8)), false, true)
final_goal(4, in_tower((block,8),(block,9)), false, true)
final_goal(4, in_tower((block,9),(block,1)), false, true)
final_goal(4, in_tower((block,9),(block,10)), false, true)
final_goal(4, in_tower((block,9),(block,11)), false, true)
final_goal(4, in_tower((block,9),(block,12)), false, true)
final_goal(4, in_tower((block,9),(block,13)), false, true)
final_goal(4, in_tower((block,9),(block,14)), false, true)
final_goal(4, in_tower((block,9),(block,15)), false, true)
final_goal(4, in_tower((block,9),(block,16)), false, true)
final_goal(4, in_tower((block,9),(block,17)), false, true)
final_goal(4, in_tower((block,9),(block,18)), false, true)
final_goal(4, in_tower((block,9),(block,2)), false, true)
final_goal(4, in_tower((block,9),(block,3)), false, true)
final_goal(4, in_tower((block,9),(block,4)), false, true)
final_goal(4, in_tower((block,9),(block,5)), false, true)
final_goal(4, in_tower((block,9),(block,6)), false, true)
final_goal(4, in_tower((block,9),(block,7)), true, true)
final_goal(4, in_tower((block,9),(block,8)), true, true)
final_goal(4, in_tower((block,9),(block,9)), true, true)
final_goal(4, on((block,1)), (block,2), true)
final_goal(4, on((block,10)), (block,11), true)
final_goal(4, on((block,11)), (block,12), true)
final_goal(4, on((block,12)), puzzle_room_2_table, true)
final_goal(4, on((block,13)), (block,14), true)
final_goal(4, on((block,14)), (block,15), true)
final_goal(4, on((block,15)), puzzle_room_2_table, true)
final_goal(4, on((block,16)), (block,17), true)
final_goal(4, on((block,17)), (block,18), true)
final_goal(4, on((block,18)), puzzle_room_2_table, true)
final_goal(4, on((block,2)), (block,3), true)
final_goal(4, on((block,3)), puzzle_room_1_table, true)
final_goal(4, on((block,4)), (block,5), true)
final_goal(4, on((block,5)), (block,6), true)
final_goal(4, on((block,6)), puzzle_room_1_table, true)
final_goal(4, on((block,7)), (block,8), true)
final_goal(4, on((block,8)), (block,9), true)
final_goal(4, on((block,9)), puzzle_room_1_table, true)
final_goal(4, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(4, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(4, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(4, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(4, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), false, true)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(4, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(4, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(4, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(4, in_tower((block,1),(block,1)), true, false)
final_goal(4, in_tower((block,1),(block,10)), true, false)
final_goal(4, in_tower((block,1),(block,11)), true, false)
final_goal(4, in_tower((block,1),(block,12)), true, false)
final_goal(4, in_tower((block,1),(block,13)), true, false)
final_goal(4, in_tower((block,1),(block,14)), true, false)
final_goal(4, in_tower((block,1),(block,15)), true, false)
final_goal(4, in_tower((block,1),(block,16)), true, false)
final_goal(4, in_tower((block,1),(block,17)), true, false)
final_goal(4, in_tower((block,1),(block,18)), true, false)
final_goal(4, in_tower((block,1),(block,2)), true, false)
final_goal(4, in_tower((block,1),(block,3)), true, false)
final_goal(4, in_tower((block,1),(block,4)), true, false)
final_goal(4, in_tower((block,1),(block,5)), true, false)
final_goal(4, in_tower((block,1),(block,6)), true, false)
final_goal(4, in_tower((block,1),(block,7)), true, false)
final_goal(4, in_tower((block,1),(block,8)), true, false)
final_goal(4, in_tower((block,1),(block,9)), true, false)
final_goal(4, in_tower((block,10),(block,1)), true, false)
final_goal(4, in_tower((block,10),(block,10)), true, false)
final_goal(4, in_tower((block,10),(block,11)), true, false)
final_goal(4, in_tower((block,10),(block,12)), true, false)
final_goal(4, in_tower((block,10),(block,13)), true, false)
final_goal(4, in_tower((block,10),(block,14)), true, false)
final_goal(4, in_tower((block,10),(block,15)), true, false)
final_goal(4, in_tower((block,10),(block,16)), true, false)
final_goal(4, in_tower((block,10),(block,17)), true, false)
final_goal(4, in_tower((block,10),(block,18)), true, false)
final_goal(4, in_tower((block,10),(block,2)), true, false)
final_goal(4, in_tower((block,10),(block,3)), true, false)
final_goal(4, in_tower((block,10),(block,4)), true, false)
final_goal(4, in_tower((block,10),(block,5)), true, false)
final_goal(4, in_tower((block,10),(block,6)), true, false)
final_goal(4, in_tower((block,10),(block,7)), true, false)
final_goal(4, in_tower((block,10),(block,8)), true, false)
final_goal(4, in_tower((block,10),(block,9)), true, false)
final_goal(4, in_tower((block,11),(block,1)), true, false)
final_goal(4, in_tower((block,11),(block,10)), true, false)
final_goal(4, in_tower((block,11),(block,11)), true, false)
final_goal(4, in_tower((block,11),(block,12)), true, false)
final_goal(4, in_tower((block,11),(block,13)), true, false)
final_goal(4, in_tower((block,11),(block,14)), true, false)
final_goal(4, in_tower((block,11),(block,15)), true, false)
final_goal(4, in_tower((block,11),(block,16)), true, false)
final_goal(4, in_tower((block,11),(block,17)), true, false)
final_goal(4, in_tower((block,11),(block,18)), true, false)
final_goal(4, in_tower((block,11),(block,2)), true, false)
final_goal(4, in_tower((block,11),(block,3)), true, false)
final_goal(4, in_tower((block,11),(block,4)), true, false)
final_goal(4, in_tower((block,11),(block,5)), true, false)
final_goal(4, in_tower((block,11),(block,6)), true, false)
final_goal(4, in_tower((block,11),(block,7)), true, false)
final_goal(4, in_tower((block,11),(block,8)), true, false)
final_goal(4, in_tower((block,11),(block,9)), true, false)
final_goal(4, in_tower((block,12),(block,1)), true, false)
final_goal(4, in_tower((block,12),(block,10)), false, false)
final_goal(4, in_tower((block,12),(block,11)), false, false)
final_goal(4, in_tower((block,12),(block,12)), false, false)
final_goal(4, in_tower((block,12),(block,13)), true, false)
final_goal(4, in_tower((block,12),(block,14)), true, false)
final_goal(4, in_tower((block,12),(block,15)), true, false)
final_goal(4, in_tower((block,12),(block,16)), true, false)
final_goal(4, in_tower((block,12),(block,17)), true, false)
final_goal(4, in_tower((block,12),(block,18)), true, false)
final_goal(4, in_tower((block,12),(block,2)), true, false)
final_goal(4, in_tower((block,12),(block,3)), true, false)
final_goal(4, in_tower((block,12),(block,4)), true, false)
final_goal(4, in_tower((block,12),(block,5)), true, false)
final_goal(4, in_tower((block,12),(block,6)), true, false)
final_goal(4, in_tower((block,12),(block,7)), true, false)
final_goal(4, in_tower((block,12),(block,8)), true, false)
final_goal(4, in_tower((block,12),(block,9)), true, false)
final_goal(4, in_tower((block,13),(block,1)), true, false)
final_goal(4, in_tower((block,13),(block,10)), true, false)
final_goal(4, in_tower((block,13),(block,11)), true, false)
final_goal(4, in_tower((block,13),(block,12)), true, false)
final_goal(4, in_tower((block,13),(block,13)), true, false)
final_goal(4, in_tower((block,13),(block,14)), true, false)
final_goal(4, in_tower((block,13),(block,15)), true, false)
final_goal(4, in_tower((block,13),(block,16)), true, false)
final_goal(4, in_tower((block,13),(block,17)), true, false)
final_goal(4, in_tower((block,13),(block,18)), true, false)
final_goal(4, in_tower((block,13),(block,2)), true, false)
final_goal(4, in_tower((block,13),(block,3)), true, false)
final_goal(4, in_tower((block,13),(block,4)), true, false)
final_goal(4, in_tower((block,13),(block,5)), true, false)
final_goal(4, in_tower((block,13),(block,6)), true, false)
final_goal(4, in_tower((block,13),(block,7)), true, false)
final_goal(4, in_tower((block,13),(block,8)), true, false)
final_goal(4, in_tower((block,13),(block,9)), true, false)
final_goal(4, in_tower((block,14),(block,1)), true, false)
final_goal(4, in_tower((block,14),(block,10)), true, false)
final_goal(4, in_tower((block,14),(block,11)), true, false)
final_goal(4, in_tower((block,14),(block,12)), true, false)
final_goal(4, in_tower((block,14),(block,13)), true, false)
final_goal(4, in_tower((block,14),(block,14)), true, false)
final_goal(4, in_tower((block,14),(block,15)), true, false)
final_goal(4, in_tower((block,14),(block,16)), true, false)
final_goal(4, in_tower((block,14),(block,17)), true, false)
final_goal(4, in_tower((block,14),(block,18)), true, false)
final_goal(4, in_tower((block,14),(block,2)), true, false)
final_goal(4, in_tower((block,14),(block,3)), true, false)
final_goal(4, in_tower((block,14),(block,4)), true, false)
final_goal(4, in_tower((block,14),(block,5)), true, false)
final_goal(4, in_tower((block,14),(block,6)), true, false)
final_goal(4, in_tower((block,14),(block,7)), true, false)
final_goal(4, in_tower((block,14),(block,8)), true, false)
final_goal(4, in_tower((block,14),(block,9)), true, false)
final_goal(4, in_tower((block,15),(block,1)), true, false)
final_goal(4, in_tower((block,15),(block,10)), true, false)
final_goal(4, in_tower((block,15),(block,11)), true, false)
final_goal(4, in_tower((block,15),(block,12)), true, false)
final_goal(4, in_tower((block,15),(block,13)), false, false)
final_goal(4, in_tower((block,15),(block,14)), false, false)
final_goal(4, in_tower((block,15),(block,15)), false, false)
final_goal(4, in_tower((block,15),(block,16)), true, false)
final_goal(4, in_tower((block,15),(block,17)), true, false)
final_goal(4, in_tower((block,15),(block,18)), true, false)
final_goal(4, in_tower((block,15),(block,2)), true, false)
final_goal(4, in_tower((block,15),(block,3)), true, false)
final_goal(4, in_tower((block,15),(block,4)), true, false)
final_goal(4, in_tower((block,15),(block,5)), true, false)
final_goal(4, in_tower((block,15),(block,6)), true, false)
final_goal(4, in_tower((block,15),(block,7)), true, false)
final_goal(4, in_tower((block,15),(block,8)), true, false)
final_goal(4, in_tower((block,15),(block,9)), true, false)
final_goal(4, in_tower((block,16),(block,1)), true, false)
final_goal(4, in_tower((block,16),(block,10)), true, false)
final_goal(4, in_tower((block,16),(block,11)), true, false)
final_goal(4, in_tower((block,16),(block,12)), true, false)
final_goal(4, in_tower((block,16),(block,13)), true, false)
final_goal(4, in_tower((block,16),(block,14)), true, false)
final_goal(4, in_tower((block,16),(block,15)), true, false)
final_goal(4, in_tower((block,16),(block,16)), true, false)
final_goal(4, in_tower((block,16),(block,17)), true, false)
final_goal(4, in_tower((block,16),(block,18)), true, false)
final_goal(4, in_tower((block,16),(block,2)), true, false)
final_goal(4, in_tower((block,16),(block,3)), true, false)
final_goal(4, in_tower((block,16),(block,4)), true, false)
final_goal(4, in_tower((block,16),(block,5)), true, false)
final_goal(4, in_tower((block,16),(block,6)), true, false)
final_goal(4, in_tower((block,16),(block,7)), true, false)
final_goal(4, in_tower((block,16),(block,8)), true, false)
final_goal(4, in_tower((block,16),(block,9)), true, false)
final_goal(4, in_tower((block,17),(block,1)), true, false)
final_goal(4, in_tower((block,17),(block,10)), true, false)
final_goal(4, in_tower((block,17),(block,11)), true, false)
final_goal(4, in_tower((block,17),(block,12)), true, false)
final_goal(4, in_tower((block,17),(block,13)), true, false)
final_goal(4, in_tower((block,17),(block,14)), true, false)
final_goal(4, in_tower((block,17),(block,15)), true, false)
final_goal(4, in_tower((block,17),(block,16)), true, false)
final_goal(4, in_tower((block,17),(block,17)), true, false)
final_goal(4, in_tower((block,17),(block,18)), true, false)
final_goal(4, in_tower((block,17),(block,2)), true, false)
final_goal(4, in_tower((block,17),(block,3)), true, false)
final_goal(4, in_tower((block,17),(block,4)), true, false)
final_goal(4, in_tower((block,17),(block,5)), true, false)
final_goal(4, in_tower((block,17),(block,6)), true, false)
final_goal(4, in_tower((block,17),(block,7)), true, false)
final_goal(4, in_tower((block,17),(block,8)), true, false)
final_goal(4, in_tower((block,17),(block,9)), true, false)
final_goal(4, in_tower((block,18),(block,1)), true, false)
final_goal(4, in_tower((block,18),(block,10)), true, false)
final_goal(4, in_tower((block,18),(block,11)), true, false)
final_goal(4, in_tower((block,18),(block,12)), true, false)
final_goal(4, in_tower((block,18),(block,13)), true, false)
final_goal(4, in_tower((block,18),(block,14)), true, false)
final_goal(4, in_tower((block,18),(block,15)), true, false)
final_goal(4, in_tower((block,18),(block,16)), false, false)
final_goal(4, in_tower((block,18),(block,17)), false, false)
final_goal(4, in_tower((block,18),(block,18)), false, false)
final_goal(4, in_tower((block,18),(block,2)), true, false)
final_goal(4, in_tower((block,18),(block,3)), true, false)
final_goal(4, in_tower((block,18),(block,4)), true, false)
final_goal(4, in_tower((block,18),(block,5)), true, false)
final_goal(4, in_tower((block,18),(block,6)), true, false)
final_goal(4, in_tower((block,18),(block,7)), true, false)
final_goal(4, in_tower((block,18),(block,8)), true, false)
final_goal(4, in_tower((block,18),(block,9)), true, false)
final_goal(4, in_tower((block,2),(block,1)), true, false)
final_goal(4, in_tower((block,2),(block,10)), true, false)
final_goal(4, in_tower((block,2),(block,11)), true, false)
final_goal(4, in_tower((block,2),(block,12)), true, false)
final_goal(4, in_tower((block,2),(block,13)), true, false)
final_goal(4, in_tower((block,2),(block,14)), true, false)
final_goal(4, in_tower((block,2),(block,15)), true, false)
final_goal(4, in_tower((block,2),(block,16)), true, false)
final_goal(4, in_tower((block,2),(block,17)), true, false)
final_goal(4, in_tower((block,2),(block,18)), true, false)
final_goal(4, in_tower((block,2),(block,2)), true, false)
final_goal(4, in_tower((block,2),(block,3)), true, false)
final_goal(4, in_tower((block,2),(block,4)), true, false)
final_goal(4, in_tower((block,2),(block,5)), true, false)
final_goal(4, in_tower((block,2),(block,6)), true, false)
final_goal(4, in_tower((block,2),(block,7)), true, false)
final_goal(4, in_tower((block,2),(block,8)), true, false)
final_goal(4, in_tower((block,2),(block,9)), true, false)
final_goal(4, in_tower((block,3),(block,1)), false, false)
final_goal(4, in_tower((block,3),(block,10)), true, false)
final_goal(4, in_tower((block,3),(block,11)), true, false)
final_goal(4, in_tower((block,3),(block,12)), true, false)
final_goal(4, in_tower((block,3),(block,13)), true, false)
final_goal(4, in_tower((block,3),(block,14)), true, false)
final_goal(4, in_tower((block,3),(block,15)), true, false)
final_goal(4, in_tower((block,3),(block,16)), true, false)
final_goal(4, in_tower((block,3),(block,17)), true, false)
final_goal(4, in_tower((block,3),(block,18)), true, false)
final_goal(4, in_tower((block,3),(block,2)), false, false)
final_goal(4, in_tower((block,3),(block,3)), false, false)
final_goal(4, in_tower((block,3),(block,4)), true, false)
final_goal(4, in_tower((block,3),(block,5)), true, false)
final_goal(4, in_tower((block,3),(block,6)), true, false)
final_goal(4, in_tower((block,3),(block,7)), true, false)
final_goal(4, in_tower((block,3),(block,8)), true, false)
final_goal(4, in_tower((block,3),(block,9)), true, false)
final_goal(4, in_tower((block,4),(block,1)), true, false)
final_goal(4, in_tower((block,4),(block,10)), true, false)
final_goal(4, in_tower((block,4),(block,11)), true, false)
final_goal(4, in_tower((block,4),(block,12)), true, false)
final_goal(4, in_tower((block,4),(block,13)), true, false)
final_goal(4, in_tower((block,4),(block,14)), true, false)
final_goal(4, in_tower((block,4),(block,15)), true, false)
final_goal(4, in_tower((block,4),(block,16)), true, false)
final_goal(4, in_tower((block,4),(block,17)), true, false)
final_goal(4, in_tower((block,4),(block,18)), true, false)
final_goal(4, in_tower((block,4),(block,2)), true, false)
final_goal(4, in_tower((block,4),(block,3)), true, false)
final_goal(4, in_tower((block,4),(block,4)), true, false)
final_goal(4, in_tower((block,4),(block,5)), true, false)
final_goal(4, in_tower((block,4),(block,6)), true, false)
final_goal(4, in_tower((block,4),(block,7)), true, false)
final_goal(4, in_tower((block,4),(block,8)), true, false)
final_goal(4, in_tower((block,4),(block,9)), true, false)
final_goal(4, in_tower((block,5),(block,1)), true, false)
final_goal(4, in_tower((block,5),(block,10)), true, false)
final_goal(4, in_tower((block,5),(block,11)), true, false)
final_goal(4, in_tower((block,5),(block,12)), true, false)
final_goal(4, in_tower((block,5),(block,13)), true, false)
final_goal(4, in_tower((block,5),(block,14)), true, false)
final_goal(4, in_tower((block,5),(block,15)), true, false)
final_goal(4, in_tower((block,5),(block,16)), true, false)
final_goal(4, in_tower((block,5),(block,17)), true, false)
final_goal(4, in_tower((block,5),(block,18)), true, false)
final_goal(4, in_tower((block,5),(block,2)), true, false)
final_goal(4, in_tower((block,5),(block,3)), true, false)
final_goal(4, in_tower((block,5),(block,4)), true, false)
final_goal(4, in_tower((block,5),(block,5)), true, false)
final_goal(4, in_tower((block,5),(block,6)), true, false)
final_goal(4, in_tower((block,5),(block,7)), true, false)
final_goal(4, in_tower((block,5),(block,8)), true, false)
final_goal(4, in_tower((block,5),(block,9)), true, false)
final_goal(4, in_tower((block,6),(block,1)), true, false)
final_goal(4, in_tower((block,6),(block,10)), true, false)
final_goal(4, in_tower((block,6),(block,11)), true, false)
final_goal(4, in_tower((block,6),(block,12)), true, false)
final_goal(4, in_tower((block,6),(block,13)), true, false)
final_goal(4, in_tower((block,6),(block,14)), true, false)
final_goal(4, in_tower((block,6),(block,15)), true, false)
final_goal(4, in_tower((block,6),(block,16)), true, false)
final_goal(4, in_tower((block,6),(block,17)), true, false)
final_goal(4, in_tower((block,6),(block,18)), true, false)
final_goal(4, in_tower((block,6),(block,2)), true, false)
final_goal(4, in_tower((block,6),(block,3)), true, false)
final_goal(4, in_tower((block,6),(block,4)), false, false)
final_goal(4, in_tower((block,6),(block,5)), false, false)
final_goal(4, in_tower((block,6),(block,6)), false, false)
final_goal(4, in_tower((block,6),(block,7)), true, false)
final_goal(4, in_tower((block,6),(block,8)), true, false)
final_goal(4, in_tower((block,6),(block,9)), true, false)
final_goal(4, in_tower((block,7),(block,1)), true, false)
final_goal(4, in_tower((block,7),(block,10)), true, false)
final_goal(4, in_tower((block,7),(block,11)), true, false)
final_goal(4, in_tower((block,7),(block,12)), true, false)
final_goal(4, in_tower((block,7),(block,13)), true, false)
final_goal(4, in_tower((block,7),(block,14)), true, false)
final_goal(4, in_tower((block,7),(block,15)), true, false)
final_goal(4, in_tower((block,7),(block,16)), true, false)
final_goal(4, in_tower((block,7),(block,17)), true, false)
final_goal(4, in_tower((block,7),(block,18)), true, false)
final_goal(4, in_tower((block,7),(block,2)), true, false)
final_goal(4, in_tower((block,7),(block,3)), true, false)
final_goal(4, in_tower((block,7),(block,4)), true, false)
final_goal(4, in_tower((block,7),(block,5)), true, false)
final_goal(4, in_tower((block,7),(block,6)), true, false)
final_goal(4, in_tower((block,7),(block,7)), true, false)
final_goal(4, in_tower((block,7),(block,8)), true, false)
final_goal(4, in_tower((block,7),(block,9)), true, false)
final_goal(4, in_tower((block,8),(block,1)), true, false)
final_goal(4, in_tower((block,8),(block,10)), true, false)
final_goal(4, in_tower((block,8),(block,11)), true, false)
final_goal(4, in_tower((block,8),(block,12)), true, false)
final_goal(4, in_tower((block,8),(block,13)), true, false)
final_goal(4, in_tower((block,8),(block,14)), true, false)
final_goal(4, in_tower((block,8),(block,15)), true, false)
final_goal(4, in_tower((block,8),(block,16)), true, false)
final_goal(4, in_tower((block,8),(block,17)), true, false)
final_goal(4, in_tower((block,8),(block,18)), true, false)
final_goal(4, in_tower((block,8),(block,2)), true, false)
final_goal(4, in_tower((block,8),(block,3)), true, false)
final_goal(4, in_tower((block,8),(block,4)), true, false)
final_goal(4, in_tower((block,8),(block,5)), true, false)
final_goal(4, in_tower((block,8),(block,6)), true, false)
final_goal(4, in_tower((block,8),(block,7)), true, false)
final_goal(4, in_tower((block,8),(block,8)), true, false)
final_goal(4, in_tower((block,8),(block,9)), true, false)
final_goal(4, in_tower((block,9),(block,1)), true, false)
final_goal(4, in_tower((block,9),(block,10)), true, false)
final_goal(4, in_tower((block,9),(block,11)), true, false)
final_goal(4, in_tower((block,9),(block,12)), true, false)
final_goal(4, in_tower((block,9),(block,13)), true, false)
final_goal(4, in_tower((block,9),(block,14)), true, false)
final_goal(4, in_tower((block,9),(block,15)), true, false)
final_goal(4, in_tower((block,9),(block,16)), true, false)
final_goal(4, in_tower((block,9),(block,17)), true, false)
final_goal(4, in_tower((block,9),(block,18)), true, false)
final_goal(4, in_tower((block,9),(block,2)), true, false)
final_goal(4, in_tower((block,9),(block,3)), true, false)
final_goal(4, in_tower((block,9),(block,4)), true, false)
final_goal(4, in_tower((block,9),(block,5)), true, false)
final_goal(4, in_tower((block,9),(block,6)), true, false)
final_goal(4, in_tower((block,9),(block,7)), false, false)
final_goal(4, in_tower((block,9),(block,8)), false, false)
final_goal(4, in_tower((block,9),(block,9)), false, false)
final_goal(4, on((block,1)), (block,10), false)
final_goal(4, on((block,1)), (block,11), false)
final_goal(4, on((block,1)), (block,12), false)
final_goal(4, on((block,1)), (block,13), false)
final_goal(4, on((block,1)), (block,14), false)
final_goal(4, on((block,1)), (block,15), false)
final_goal(4, on((block,1)), (block,16), false)
final_goal(4, on((block,1)), (block,17), false)
final_goal(4, on((block,1)), (block,18), false)
final_goal(4, on((block,1)), (block,3), false)
final_goal(4, on((block,1)), (block,4), false)
final_goal(4, on((block,1)), (block,5), false)
final_goal(4, on((block,1)), (block,6), false)
final_goal(4, on((block,1)), (block,7), false)
final_goal(4, on((block,1)), (block,8), false)
final_goal(4, on((block,1)), (block,9), false)
final_goal(4, on((block,1)), nothing, false)
final_goal(4, on((block,1)), puzzle_room_1_table, false)
final_goal(4, on((block,1)), puzzle_room_2_table, false)
final_goal(4, on((block,10)), (block,1), false)
final_goal(4, on((block,10)), (block,12), false)
final_goal(4, on((block,10)), (block,13), false)
final_goal(4, on((block,10)), (block,14), false)
final_goal(4, on((block,10)), (block,15), false)
final_goal(4, on((block,10)), (block,16), false)
final_goal(4, on((block,10)), (block,17), false)
final_goal(4, on((block,10)), (block,18), false)
final_goal(4, on((block,10)), (block,2), false)
final_goal(4, on((block,10)), (block,3), false)
final_goal(4, on((block,10)), (block,4), false)
final_goal(4, on((block,10)), (block,5), false)
final_goal(4, on((block,10)), (block,6), false)
final_goal(4, on((block,10)), (block,7), false)
final_goal(4, on((block,10)), (block,8), false)
final_goal(4, on((block,10)), (block,9), false)
final_goal(4, on((block,10)), nothing, false)
final_goal(4, on((block,10)), puzzle_room_1_table, false)
final_goal(4, on((block,10)), puzzle_room_2_table, false)
final_goal(4, on((block,11)), (block,1), false)
final_goal(4, on((block,11)), (block,10), false)
final_goal(4, on((block,11)), (block,13), false)
final_goal(4, on((block,11)), (block,14), false)
final_goal(4, on((block,11)), (block,15), false)
final_goal(4, on((block,11)), (block,16), false)
final_goal(4, on((block,11)), (block,17), false)
final_goal(4, on((block,11)), (block,18), false)
final_goal(4, on((block,11)), (block,2), false)
final_goal(4, on((block,11)), (block,3), false)
final_goal(4, on((block,11)), (block,4), false)
final_goal(4, on((block,11)), (block,5), false)
final_goal(4, on((block,11)), (block,6), false)
final_goal(4, on((block,11)), (block,7), false)
final_goal(4, on((block,11)), (block,8), false)
final_goal(4, on((block,11)), (block,9), false)
final_goal(4, on((block,11)), nothing, false)
final_goal(4, on((block,11)), puzzle_room_1_table, false)
final_goal(4, on((block,11)), puzzle_room_2_table, false)
final_goal(4, on((block,12)), (block,1), false)
final_goal(4, on((block,12)), (block,10), false)
final_goal(4, on((block,12)), (block,11), false)
final_goal(4, on((block,12)), (block,13), false)
final_goal(4, on((block,12)), (block,14), false)
final_goal(4, on((block,12)), (block,15), false)
final_goal(4, on((block,12)), (block,16), false)
final_goal(4, on((block,12)), (block,17), false)
final_goal(4, on((block,12)), (block,18), false)
final_goal(4, on((block,12)), (block,2), false)
final_goal(4, on((block,12)), (block,3), false)
final_goal(4, on((block,12)), (block,4), false)
final_goal(4, on((block,12)), (block,5), false)
final_goal(4, on((block,12)), (block,6), false)
final_goal(4, on((block,12)), (block,7), false)
final_goal(4, on((block,12)), (block,8), false)
final_goal(4, on((block,12)), (block,9), false)
final_goal(4, on((block,12)), nothing, false)
final_goal(4, on((block,12)), puzzle_room_1_table, false)
final_goal(4, on((block,13)), (block,1), false)
final_goal(4, on((block,13)), (block,10), false)
final_goal(4, on((block,13)), (block,11), false)
final_goal(4, on((block,13)), (block,12), false)
final_goal(4, on((block,13)), (block,15), false)
final_goal(4, on((block,13)), (block,16), false)
final_goal(4, on((block,13)), (block,17), false)
final_goal(4, on((block,13)), (block,18), false)
final_goal(4, on((block,13)), (block,2), false)
final_goal(4, on((block,13)), (block,3), false)
final_goal(4, on((block,13)), (block,4), false)
final_goal(4, on((block,13)), (block,5), false)
final_goal(4, on((block,13)), (block,6), false)
final_goal(4, on((block,13)), (block,7), false)
final_goal(4, on((block,13)), (block,8), false)
final_goal(4, on((block,13)), (block,9), false)
final_goal(4, on((block,13)), nothing, false)
final_goal(4, on((block,13)), puzzle_room_1_table, false)
final_goal(4, on((block,13)), puzzle_room_2_table, false)
final_goal(4, on((block,14)), (block,1), false)
final_goal(4, on((block,14)), (block,10), false)
final_goal(4, on((block,14)), (block,11), false)
final_goal(4, on((block,14)), (block,12), false)
final_goal(4, on((block,14)), (block,13), false)
final_goal(4, on((block,14)), (block,16), false)
final_goal(4, on((block,14)), (block,17), false)
final_goal(4, on((block,14)), (block,18), false)
final_goal(4, on((block,14)), (block,2), false)
final_goal(4, on((block,14)), (block,3), false)
final_goal(4, on((block,14)), (block,4), false)
final_goal(4, on((block,14)), (block,5), false)
final_goal(4, on((block,14)), (block,6), false)
final_goal(4, on((block,14)), (block,7), false)
final_goal(4, on((block,14)), (block,8), false)
final_goal(4, on((block,14)), (block,9), false)
final_goal(4, on((block,14)), nothing, false)
final_goal(4, on((block,14)), puzzle_room_1_table, false)
final_goal(4, on((block,14)), puzzle_room_2_table, false)
final_goal(4, on((block,15)), (block,1), false)
final_goal(4, on((block,15)), (block,10), false)
final_goal(4, on((block,15)), (block,11), false)
final_goal(4, on((block,15)), (block,12), false)
final_goal(4, on((block,15)), (block,13), false)
final_goal(4, on((block,15)), (block,14), false)
final_goal(4, on((block,15)), (block,16), false)
final_goal(4, on((block,15)), (block,17), false)
final_goal(4, on((block,15)), (block,18), false)
final_goal(4, on((block,15)), (block,2), false)
final_goal(4, on((block,15)), (block,3), false)
final_goal(4, on((block,15)), (block,4), false)
final_goal(4, on((block,15)), (block,5), false)
final_goal(4, on((block,15)), (block,6), false)
final_goal(4, on((block,15)), (block,7), false)
final_goal(4, on((block,15)), (block,8), false)
final_goal(4, on((block,15)), (block,9), false)
final_goal(4, on((block,15)), nothing, false)
final_goal(4, on((block,15)), puzzle_room_1_table, false)
final_goal(4, on((block,16)), (block,1), false)
final_goal(4, on((block,16)), (block,10), false)
final_goal(4, on((block,16)), (block,11), false)
final_goal(4, on((block,16)), (block,12), false)
final_goal(4, on((block,16)), (block,13), false)
final_goal(4, on((block,16)), (block,14), false)
final_goal(4, on((block,16)), (block,15), false)
final_goal(4, on((block,16)), (block,18), false)
final_goal(4, on((block,16)), (block,2), false)
final_goal(4, on((block,16)), (block,3), false)
final_goal(4, on((block,16)), (block,4), false)
final_goal(4, on((block,16)), (block,5), false)
final_goal(4, on((block,16)), (block,6), false)
final_goal(4, on((block,16)), (block,7), false)
final_goal(4, on((block,16)), (block,8), false)
final_goal(4, on((block,16)), (block,9), false)
final_goal(4, on((block,16)), nothing, false)
final_goal(4, on((block,16)), puzzle_room_1_table, false)
final_goal(4, on((block,16)), puzzle_room_2_table, false)
final_goal(4, on((block,17)), (block,1), false)
final_goal(4, on((block,17)), (block,10), false)
final_goal(4, on((block,17)), (block,11), false)
final_goal(4, on((block,17)), (block,12), false)
final_goal(4, on((block,17)), (block,13), false)
final_goal(4, on((block,17)), (block,14), false)
final_goal(4, on((block,17)), (block,15), false)
final_goal(4, on((block,17)), (block,16), false)
final_goal(4, on((block,17)), (block,2), false)
final_goal(4, on((block,17)), (block,3), false)
final_goal(4, on((block,17)), (block,4), false)
final_goal(4, on((block,17)), (block,5), false)
final_goal(4, on((block,17)), (block,6), false)
final_goal(4, on((block,17)), (block,7), false)
final_goal(4, on((block,17)), (block,8), false)
final_goal(4, on((block,17)), (block,9), false)
final_goal(4, on((block,17)), nothing, false)
final_goal(4, on((block,17)), puzzle_room_1_table, false)
final_goal(4, on((block,17)), puzzle_room_2_table, false)
final_goal(4, on((block,18)), (block,1), false)
final_goal(4, on((block,18)), (block,10), false)
final_goal(4, on((block,18)), (block,11), false)
final_goal(4, on((block,18)), (block,12), false)
final_goal(4, on((block,18)), (block,13), false)
final_goal(4, on((block,18)), (block,14), false)
final_goal(4, on((block,18)), (block,15), false)
final_goal(4, on((block,18)), (block,16), false)
final_goal(4, on((block,18)), (block,17), false)
final_goal(4, on((block,18)), (block,2), false)
final_goal(4, on((block,18)), (block,3), false)
final_goal(4, on((block,18)), (block,4), false)
final_goal(4, on((block,18)), (block,5), false)
final_goal(4, on((block,18)), (block,6), false)
final_goal(4, on((block,18)), (block,7), false)
final_goal(4, on((block,18)), (block,8), false)
final_goal(4, on((block,18)), (block,9), false)
final_goal(4, on((block,18)), nothing, false)
final_goal(4, on((block,18)), puzzle_room_1_table, false)
final_goal(4, on((block,2)), (block,1), false)
final_goal(4, on((block,2)), (block,10), false)
final_goal(4, on((block,2)), (block,11), false)
final_goal(4, on((block,2)), (block,12), false)
final_goal(4, on((block,2)), (block,13), false)
final_goal(4, on((block,2)), (block,14), false)
final_goal(4, on((block,2)), (block,15), false)
final_goal(4, on((block,2)), (block,16), false)
final_goal(4, on((block,2)), (block,17), false)
final_goal(4, on((block,2)), (block,18), false)
final_goal(4, on((block,2)), (block,4), false)
final_goal(4, on((block,2)), (block,5), false)
final_goal(4, on((block,2)), (block,6), false)
final_goal(4, on((block,2)), (block,7), false)
final_goal(4, on((block,2)), (block,8), false)
final_goal(4, on((block,2)), (block,9), false)
final_goal(4, on((block,2)), nothing, false)
final_goal(4, on((block,2)), puzzle_room_1_table, false)
final_goal(4, on((block,2)), puzzle_room_2_table, false)
final_goal(4, on((block,3)), (block,1), false)
final_goal(4, on((block,3)), (block,10), false)
final_goal(4, on((block,3)), (block,11), false)
final_goal(4, on((block,3)), (block,12), false)
final_goal(4, on((block,3)), (block,13), false)
final_goal(4, on((block,3)), (block,14), false)
final_goal(4, on((block,3)), (block,15), false)
final_goal(4, on((block,3)), (block,16), false)
final_goal(4, on((block,3)), (block,17), false)
final_goal(4, on((block,3)), (block,18), false)
final_goal(4, on((block,3)), (block,2), false)
final_goal(4, on((block,3)), (block,4), false)
final_goal(4, on((block,3)), (block,5), false)
final_goal(4, on((block,3)), (block,6), false)
final_goal(4, on((block,3)), (block,7), false)
final_goal(4, on((block,3)), (block,8), false)
final_goal(4, on((block,3)), (block,9), false)
final_goal(4, on((block,3)), nothing, false)
final_goal(4, on((block,3)), puzzle_room_2_table, false)
final_goal(4, on((block,4)), (block,1), false)
final_goal(4, on((block,4)), (block,10), false)
final_goal(4, on((block,4)), (block,11), false)
final_goal(4, on((block,4)), (block,12), false)
final_goal(4, on((block,4)), (block,13), false)
final_goal(4, on((block,4)), (block,14), false)
final_goal(4, on((block,4)), (block,15), false)
final_goal(4, on((block,4)), (block,16), false)
final_goal(4, on((block,4)), (block,17), false)
final_goal(4, on((block,4)), (block,18), false)
final_goal(4, on((block,4)), (block,2), false)
final_goal(4, on((block,4)), (block,3), false)
final_goal(4, on((block,4)), (block,6), false)
final_goal(4, on((block,4)), (block,7), false)
final_goal(4, on((block,4)), (block,8), false)
final_goal(4, on((block,4)), (block,9), false)
final_goal(4, on((block,4)), nothing, false)
final_goal(4, on((block,4)), puzzle_room_1_table, false)
final_goal(4, on((block,4)), puzzle_room_2_table, false)
final_goal(4, on((block,5)), (block,1), false)
final_goal(4, on((block,5)), (block,10), false)
final_goal(4, on((block,5)), (block,11), false)
final_goal(4, on((block,5)), (block,12), false)
final_goal(4, on((block,5)), (block,13), false)
final_goal(4, on((block,5)), (block,14), false)
final_goal(4, on((block,5)), (block,15), false)
final_goal(4, on((block,5)), (block,16), false)
final_goal(4, on((block,5)), (block,17), false)
final_goal(4, on((block,5)), (block,18), false)
final_goal(4, on((block,5)), (block,2), false)
final_goal(4, on((block,5)), (block,3), false)
final_goal(4, on((block,5)), (block,4), false)
final_goal(4, on((block,5)), (block,7), false)
final_goal(4, on((block,5)), (block,8), false)
final_goal(4, on((block,5)), (block,9), false)
final_goal(4, on((block,5)), nothing, false)
final_goal(4, on((block,5)), puzzle_room_1_table, false)
final_goal(4, on((block,5)), puzzle_room_2_table, false)
final_goal(4, on((block,6)), (block,1), false)
final_goal(4, on((block,6)), (block,10), false)
final_goal(4, on((block,6)), (block,11), false)
final_goal(4, on((block,6)), (block,12), false)
final_goal(4, on((block,6)), (block,13), false)
final_goal(4, on((block,6)), (block,14), false)
final_goal(4, on((block,6)), (block,15), false)
final_goal(4, on((block,6)), (block,16), false)
final_goal(4, on((block,6)), (block,17), false)
final_goal(4, on((block,6)), (block,18), false)
final_goal(4, on((block,6)), (block,2), false)
final_goal(4, on((block,6)), (block,3), false)
final_goal(4, on((block,6)), (block,4), false)
final_goal(4, on((block,6)), (block,5), false)
final_goal(4, on((block,6)), (block,7), false)
final_goal(4, on((block,6)), (block,8), false)
final_goal(4, on((block,6)), (block,9), false)
final_goal(4, on((block,6)), nothing, false)
final_goal(4, on((block,6)), puzzle_room_2_table, false)
final_goal(4, on((block,7)), (block,1), false)
final_goal(4, on((block,7)), (block,10), false)
final_goal(4, on((block,7)), (block,11), false)
final_goal(4, on((block,7)), (block,12), false)
final_goal(4, on((block,7)), (block,13), false)
final_goal(4, on((block,7)), (block,14), false)
final_goal(4, on((block,7)), (block,15), false)
final_goal(4, on((block,7)), (block,16), false)
final_goal(4, on((block,7)), (block,17), false)
final_goal(4, on((block,7)), (block,18), false)
final_goal(4, on((block,7)), (block,2), false)
final_goal(4, on((block,7)), (block,3), false)
final_goal(4, on((block,7)), (block,4), false)
final_goal(4, on((block,7)), (block,5), false)
final_goal(4, on((block,7)), (block,6), false)
final_goal(4, on((block,7)), (block,9), false)
final_goal(4, on((block,7)), nothing, false)
final_goal(4, on((block,7)), puzzle_room_1_table, false)
final_goal(4, on((block,7)), puzzle_room_2_table, false)
final_goal(4, on((block,8)), (block,1), false)
final_goal(4, on((block,8)), (block,10), false)
final_goal(4, on((block,8)), (block,11), false)
final_goal(4, on((block,8)), (block,12), false)
final_goal(4, on((block,8)), (block,13), false)
final_goal(4, on((block,8)), (block,14), false)
final_goal(4, on((block,8)), (block,15), false)
final_goal(4, on((block,8)), (block,16), false)
final_goal(4, on((block,8)), (block,17), false)
final_goal(4, on((block,8)), (block,18), false)
final_goal(4, on((block,8)), (block,2), false)
final_goal(4, on((block,8)), (block,3), false)
final_goal(4, on((block,8)), (block,4), false)
final_goal(4, on((block,8)), (block,5), false)
final_goal(4, on((block,8)), (block,6), false)
final_goal(4, on((block,8)), (block,7), false)
final_goal(4, on((block,8)), nothing, false)
final_goal(4, on((block,8)), puzzle_room_1_table, false)
final_goal(4, on((block,8)), puzzle_room_2_table, false)
final_goal(4, on((block,9)), (block,1), false)
final_goal(4, on((block,9)), (block,10), false)
final_goal(4, on((block,9)), (block,11), false)
final_goal(4, on((block,9)), (block,12), false)
final_goal(4, on((block,9)), (block,13), false)
final_goal(4, on((block,9)), (block,14), false)
final_goal(4, on((block,9)), (block,15), false)
final_goal(4, on((block,9)), (block,16), false)
final_goal(4, on((block,9)), (block,17), false)
final_goal(4, on((block,9)), (block,18), false)
final_goal(4, on((block,9)), (block,2), false)
final_goal(4, on((block,9)), (block,3), false)
final_goal(4, on((block,9)), (block,4), false)
final_goal(4, on((block,9)), (block,5), false)
final_goal(4, on((block,9)), (block,6), false)
final_goal(4, on((block,9)), (block,7), false)
final_goal(4, on((block,9)), (block,8), false)
final_goal(4, on((block,9)), nothing, false)
final_goal(4, on((block,9)), puzzle_room_2_table, false)
final_goal(4, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(4, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(4, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(4, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(4, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(4, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(4, unordered_tower((block,9),puzzle_room_2_table), true, false)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(3, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(3, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,10)), false, true)
final_goal(3, in_tower((block,1),(block,11)), false, true)
final_goal(3, in_tower((block,1),(block,12)), false, true)
final_goal(3, in_tower((block,1),(block,13)), false, true)
final_goal(3, in_tower((block,1),(block,14)), false, true)
final_goal(3, in_tower((block,1),(block,15)), false, true)
final_goal(3, in_tower((block,1),(block,16)), false, true)
final_goal(3, in_tower((block,1),(block,17)), false, true)
final_goal(3, in_tower((block,1),(block,18)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,1),(block,7)), false, true)
final_goal(3, in_tower((block,1),(block,8)), false, true)
final_goal(3, in_tower((block,1),(block,9)), false, true)
final_goal(3, in_tower((block,10),(block,1)), false, true)
final_goal(3, in_tower((block,10),(block,10)), false, true)
final_goal(3, in_tower((block,10),(block,11)), false, true)
final_goal(3, in_tower((block,10),(block,12)), false, true)
final_goal(3, in_tower((block,10),(block,13)), false, true)
final_goal(3, in_tower((block,10),(block,14)), false, true)
final_goal(3, in_tower((block,10),(block,15)), false, true)
final_goal(3, in_tower((block,10),(block,16)), false, true)
final_goal(3, in_tower((block,10),(block,17)), false, true)
final_goal(3, in_tower((block,10),(block,18)), false, true)
final_goal(3, in_tower((block,10),(block,2)), false, true)
final_goal(3, in_tower((block,10),(block,3)), false, true)
final_goal(3, in_tower((block,10),(block,4)), false, true)
final_goal(3, in_tower((block,10),(block,5)), false, true)
final_goal(3, in_tower((block,10),(block,6)), false, true)
final_goal(3, in_tower((block,10),(block,7)), false, true)
final_goal(3, in_tower((block,10),(block,8)), false, true)
final_goal(3, in_tower((block,10),(block,9)), false, true)
final_goal(3, in_tower((block,11),(block,1)), false, true)
final_goal(3, in_tower((block,11),(block,10)), false, true)
final_goal(3, in_tower((block,11),(block,11)), false, true)
final_goal(3, in_tower((block,11),(block,12)), false, true)
final_goal(3, in_tower((block,11),(block,13)), false, true)
final_goal(3, in_tower((block,11),(block,14)), false, true)
final_goal(3, in_tower((block,11),(block,15)), false, true)
final_goal(3, in_tower((block,11),(block,16)), false, true)
final_goal(3, in_tower((block,11),(block,17)), false, true)
final_goal(3, in_tower((block,11),(block,18)), false, true)
final_goal(3, in_tower((block,11),(block,2)), false, true)
final_goal(3, in_tower((block,11),(block,3)), false, true)
final_goal(3, in_tower((block,11),(block,4)), false, true)
final_goal(3, in_tower((block,11),(block,5)), false, true)
final_goal(3, in_tower((block,11),(block,6)), false, true)
final_goal(3, in_tower((block,11),(block,7)), false, true)
final_goal(3, in_tower((block,11),(block,8)), false, true)
final_goal(3, in_tower((block,11),(block,9)), false, true)
final_goal(3, in_tower((block,12),(block,1)), false, true)
final_goal(3, in_tower((block,12),(block,10)), true, true)
final_goal(3, in_tower((block,12),(block,11)), true, true)
final_goal(3, in_tower((block,12),(block,12)), true, true)
final_goal(3, in_tower((block,12),(block,13)), false, true)
final_goal(3, in_tower((block,12),(block,14)), false, true)
final_goal(3, in_tower((block,12),(block,15)), false, true)
final_goal(3, in_tower((block,12),(block,16)), false, true)
final_goal(3, in_tower((block,12),(block,17)), false, true)
final_goal(3, in_tower((block,12),(block,18)), false, true)
final_goal(3, in_tower((block,12),(block,2)), false, true)
final_goal(3, in_tower((block,12),(block,3)), false, true)
final_goal(3, in_tower((block,12),(block,4)), false, true)
final_goal(3, in_tower((block,12),(block,5)), false, true)
final_goal(3, in_tower((block,12),(block,6)), false, true)
final_goal(3, in_tower((block,12),(block,7)), false, true)
final_goal(3, in_tower((block,12),(block,8)), false, true)
final_goal(3, in_tower((block,12),(block,9)), false, true)
final_goal(3, in_tower((block,13),(block,1)), false, true)
final_goal(3, in_tower((block,13),(block,10)), false, true)
final_goal(3, in_tower((block,13),(block,11)), false, true)
final_goal(3, in_tower((block,13),(block,12)), false, true)
final_goal(3, in_tower((block,13),(block,13)), false, true)
final_goal(3, in_tower((block,13),(block,14)), false, true)
final_goal(3, in_tower((block,13),(block,15)), false, true)
final_goal(3, in_tower((block,13),(block,16)), false, true)
final_goal(3, in_tower((block,13),(block,17)), false, true)
final_goal(3, in_tower((block,13),(block,18)), false, true)
final_goal(3, in_tower((block,13),(block,2)), false, true)
final_goal(3, in_tower((block,13),(block,3)), false, true)
final_goal(3, in_tower((block,13),(block,4)), false, true)
final_goal(3, in_tower((block,13),(block,5)), false, true)
final_goal(3, in_tower((block,13),(block,6)), false, true)
final_goal(3, in_tower((block,13),(block,7)), false, true)
final_goal(3, in_tower((block,13),(block,8)), false, true)
final_goal(3, in_tower((block,13),(block,9)), false, true)
final_goal(3, in_tower((block,14),(block,1)), false, true)
final_goal(3, in_tower((block,14),(block,10)), false, true)
final_goal(3, in_tower((block,14),(block,11)), false, true)
final_goal(3, in_tower((block,14),(block,12)), false, true)
final_goal(3, in_tower((block,14),(block,13)), false, true)
final_goal(3, in_tower((block,14),(block,14)), false, true)
final_goal(3, in_tower((block,14),(block,15)), false, true)
final_goal(3, in_tower((block,14),(block,16)), false, true)
final_goal(3, in_tower((block,14),(block,17)), false, true)
final_goal(3, in_tower((block,14),(block,18)), false, true)
final_goal(3, in_tower((block,14),(block,2)), false, true)
final_goal(3, in_tower((block,14),(block,3)), false, true)
final_goal(3, in_tower((block,14),(block,4)), false, true)
final_goal(3, in_tower((block,14),(block,5)), false, true)
final_goal(3, in_tower((block,14),(block,6)), false, true)
final_goal(3, in_tower((block,14),(block,7)), false, true)
final_goal(3, in_tower((block,14),(block,8)), false, true)
final_goal(3, in_tower((block,14),(block,9)), false, true)
final_goal(3, in_tower((block,15),(block,1)), false, true)
final_goal(3, in_tower((block,15),(block,10)), false, true)
final_goal(3, in_tower((block,15),(block,11)), false, true)
final_goal(3, in_tower((block,15),(block,12)), false, true)
final_goal(3, in_tower((block,15),(block,13)), true, true)
final_goal(3, in_tower((block,15),(block,14)), true, true)
final_goal(3, in_tower((block,15),(block,15)), true, true)
final_goal(3, in_tower((block,15),(block,16)), false, true)
final_goal(3, in_tower((block,15),(block,17)), false, true)
final_goal(3, in_tower((block,15),(block,18)), false, true)
final_goal(3, in_tower((block,15),(block,2)), false, true)
final_goal(3, in_tower((block,15),(block,3)), false, true)
final_goal(3, in_tower((block,15),(block,4)), false, true)
final_goal(3, in_tower((block,15),(block,5)), false, true)
final_goal(3, in_tower((block,15),(block,6)), false, true)
final_goal(3, in_tower((block,15),(block,7)), false, true)
final_goal(3, in_tower((block,15),(block,8)), false, true)
final_goal(3, in_tower((block,15),(block,9)), false, true)
final_goal(3, in_tower((block,16),(block,1)), false, true)
final_goal(3, in_tower((block,16),(block,10)), false, true)
final_goal(3, in_tower((block,16),(block,11)), false, true)
final_goal(3, in_tower((block,16),(block,12)), false, true)
final_goal(3, in_tower((block,16),(block,13)), false, true)
final_goal(3, in_tower((block,16),(block,14)), false, true)
final_goal(3, in_tower((block,16),(block,15)), false, true)
final_goal(3, in_tower((block,16),(block,16)), false, true)
final_goal(3, in_tower((block,16),(block,17)), false, true)
final_goal(3, in_tower((block,16),(block,18)), false, true)
final_goal(3, in_tower((block,16),(block,2)), false, true)
final_goal(3, in_tower((block,16),(block,3)), false, true)
final_goal(3, in_tower((block,16),(block,4)), false, true)
final_goal(3, in_tower((block,16),(block,5)), false, true)
final_goal(3, in_tower((block,16),(block,6)), false, true)
final_goal(3, in_tower((block,16),(block,7)), false, true)
final_goal(3, in_tower((block,16),(block,8)), false, true)
final_goal(3, in_tower((block,16),(block,9)), false, true)
final_goal(3, in_tower((block,17),(block,1)), false, true)
final_goal(3, in_tower((block,17),(block,10)), false, true)
final_goal(3, in_tower((block,17),(block,11)), false, true)
final_goal(3, in_tower((block,17),(block,12)), false, true)
final_goal(3, in_tower((block,17),(block,13)), false, true)
final_goal(3, in_tower((block,17),(block,14)), false, true)
final_goal(3, in_tower((block,17),(block,15)), false, true)
final_goal(3, in_tower((block,17),(block,16)), false, true)
final_goal(3, in_tower((block,17),(block,17)), false, true)
final_goal(3, in_tower((block,17),(block,18)), false, true)
final_goal(3, in_tower((block,17),(block,2)), false, true)
final_goal(3, in_tower((block,17),(block,3)), false, true)
final_goal(3, in_tower((block,17),(block,4)), false, true)
final_goal(3, in_tower((block,17),(block,5)), false, true)
final_goal(3, in_tower((block,17),(block,6)), false, true)
final_goal(3, in_tower((block,17),(block,7)), false, true)
final_goal(3, in_tower((block,17),(block,8)), false, true)
final_goal(3, in_tower((block,17),(block,9)), false, true)
final_goal(3, in_tower((block,18),(block,1)), false, true)
final_goal(3, in_tower((block,18),(block,10)), false, true)
final_goal(3, in_tower((block,18),(block,11)), false, true)
final_goal(3, in_tower((block,18),(block,12)), false, true)
final_goal(3, in_tower((block,18),(block,13)), false, true)
final_goal(3, in_tower((block,18),(block,14)), false, true)
final_goal(3, in_tower((block,18),(block,15)), false, true)
final_goal(3, in_tower((block,18),(block,16)), true, true)
final_goal(3, in_tower((block,18),(block,17)), true, true)
final_goal(3, in_tower((block,18),(block,18)), true, true)
final_goal(3, in_tower((block,18),(block,2)), false, true)
final_goal(3, in_tower((block,18),(block,3)), false, true)
final_goal(3, in_tower((block,18),(block,4)), false, true)
final_goal(3, in_tower((block,18),(block,5)), false, true)
final_goal(3, in_tower((block,18),(block,6)), false, true)
final_goal(3, in_tower((block,18),(block,7)), false, true)
final_goal(3, in_tower((block,18),(block,8)), false, true)
final_goal(3, in_tower((block,18),(block,9)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,10)), false, true)
final_goal(3, in_tower((block,2),(block,11)), false, true)
final_goal(3, in_tower((block,2),(block,12)), false, true)
final_goal(3, in_tower((block,2),(block,13)), false, true)
final_goal(3, in_tower((block,2),(block,14)), false, true)
final_goal(3, in_tower((block,2),(block,15)), false, true)
final_goal(3, in_tower((block,2),(block,16)), false, true)
final_goal(3, in_tower((block,2),(block,17)), false, true)
final_goal(3, in_tower((block,2),(block,18)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,7)), false, true)
final_goal(3, in_tower((block,2),(block,8)), false, true)
final_goal(3, in_tower((block,2),(block,9)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,10)), false, true)
final_goal(3, in_tower((block,3),(block,11)), false, true)
final_goal(3, in_tower((block,3),(block,12)), false, true)
final_goal(3, in_tower((block,3),(block,13)), false, true)
final_goal(3, in_tower((block,3),(block,14)), false, true)
final_goal(3, in_tower((block,3),(block,15)), false, true)
final_goal(3, in_tower((block,3),(block,16)), false, true)
final_goal(3, in_tower((block,3),(block,17)), false, true)
final_goal(3, in_tower((block,3),(block,18)), false, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,7)), false, true)
final_goal(3, in_tower((block,3),(block,8)), false, true)
final_goal(3, in_tower((block,3),(block,9)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,10)), false, true)
final_goal(3, in_tower((block,4),(block,11)), false, true)
final_goal(3, in_tower((block,4),(block,12)), false, true)
final_goal(3, in_tower((block,4),(block,13)), false, true)
final_goal(3, in_tower((block,4),(block,14)), false, true)
final_goal(3, in_tower((block,4),(block,15)), false, true)
final_goal(3, in_tower((block,4),(block,16)), false, true)
final_goal(3, in_tower((block,4),(block,17)), false, true)
final_goal(3, in_tower((block,4),(block,18)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,7)), false, true)
final_goal(3, in_tower((block,4),(block,8)), false, true)
final_goal(3, in_tower((block,4),(block,9)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,10)), false, true)
final_goal(3, in_tower((block,5),(block,11)), false, true)
final_goal(3, in_tower((block,5),(block,12)), false, true)
final_goal(3, in_tower((block,5),(block,13)), false, true)
final_goal(3, in_tower((block,5),(block,14)), false, true)
final_goal(3, in_tower((block,5),(block,15)), false, true)
final_goal(3, in_tower((block,5),(block,16)), false, true)
final_goal(3, in_tower((block,5),(block,17)), false, true)
final_goal(3, in_tower((block,5),(block,18)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,7)), false, true)
final_goal(3, in_tower((block,5),(block,8)), false, true)
final_goal(3, in_tower((block,5),(block,9)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,10)), false, true)
final_goal(3, in_tower((block,6),(block,11)), false, true)
final_goal(3, in_tower((block,6),(block,12)), false, true)
final_goal(3, in_tower((block,6),(block,13)), false, true)
final_goal(3, in_tower((block,6),(block,14)), false, true)
final_goal(3, in_tower((block,6),(block,15)), false, true)
final_goal(3, in_tower((block,6),(block,16)), false, true)
final_goal(3, in_tower((block,6),(block,17)), false, true)
final_goal(3, in_tower((block,6),(block,18)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, in_tower((block,6),(block,7)), false, true)
final_goal(3, in_tower((block,6),(block,8)), false, true)
final_goal(3, in_tower((block,6),(block,9)), false, true)
final_goal(3, in_tower((block,7),(block,1)), false, true)
final_goal(3, in_tower((block,7),(block,10)), false, true)
final_goal(3, in_tower((block,7),(block,11)), false, true)
final_goal(3, in_tower((block,7),(block,12)), false, true)
final_goal(3, in_tower((block,7),(block,13)), false, true)
final_goal(3, in_tower((block,7),(block,14)), false, true)
final_goal(3, in_tower((block,7),(block,15)), false, true)
final_goal(3, in_tower((block,7),(block,16)), false, true)
final_goal(3, in_tower((block,7),(block,17)), false, true)
final_goal(3, in_tower((block,7),(block,18)), false, true)
final_goal(3, in_tower((block,7),(block,2)), false, true)
final_goal(3, in_tower((block,7),(block,3)), false, true)
final_goal(3, in_tower((block,7),(block,4)), false, true)
final_goal(3, in_tower((block,7),(block,5)), false, true)
final_goal(3, in_tower((block,7),(block,6)), false, true)
final_goal(3, in_tower((block,7),(block,7)), false, true)
final_goal(3, in_tower((block,7),(block,8)), false, true)
final_goal(3, in_tower((block,7),(block,9)), false, true)
final_goal(3, in_tower((block,8),(block,1)), false, true)
final_goal(3, in_tower((block,8),(block,10)), false, true)
final_goal(3, in_tower((block,8),(block,11)), false, true)
final_goal(3, in_tower((block,8),(block,12)), false, true)
final_goal(3, in_tower((block,8),(block,13)), false, true)
final_goal(3, in_tower((block,8),(block,14)), false, true)
final_goal(3, in_tower((block,8),(block,15)), false, true)
final_goal(3, in_tower((block,8),(block,16)), false, true)
final_goal(3, in_tower((block,8),(block,17)), false, true)
final_goal(3, in_tower((block,8),(block,18)), false, true)
final_goal(3, in_tower((block,8),(block,2)), false, true)
final_goal(3, in_tower((block,8),(block,3)), false, true)
final_goal(3, in_tower((block,8),(block,4)), false, true)
final_goal(3, in_tower((block,8),(block,5)), false, true)
final_goal(3, in_tower((block,8),(block,6)), false, true)
final_goal(3, in_tower((block,8),(block,7)), false, true)
final_goal(3, in_tower((block,8),(block,8)), false, true)
final_goal(3, in_tower((block,8),(block,9)), false, true)
final_goal(3, in_tower((block,9),(block,1)), false, true)
final_goal(3, in_tower((block,9),(block,10)), false, true)
final_goal(3, in_tower((block,9),(block,11)), false, true)
final_goal(3, in_tower((block,9),(block,12)), false, true)
final_goal(3, in_tower((block,9),(block,13)), false, true)
final_goal(3, in_tower((block,9),(block,14)), false, true)
final_goal(3, in_tower((block,9),(block,15)), false, true)
final_goal(3, in_tower((block,9),(block,16)), false, true)
final_goal(3, in_tower((block,9),(block,17)), false, true)
final_goal(3, in_tower((block,9),(block,18)), false, true)
final_goal(3, in_tower((block,9),(block,2)), false, true)
final_goal(3, in_tower((block,9),(block,3)), false, true)
final_goal(3, in_tower((block,9),(block,4)), false, true)
final_goal(3, in_tower((block,9),(block,5)), false, true)
final_goal(3, in_tower((block,9),(block,6)), false, true)
final_goal(3, in_tower((block,9),(block,7)), true, true)
final_goal(3, in_tower((block,9),(block,8)), true, true)
final_goal(3, in_tower((block,9),(block,9)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,10)), (block,11), true)
final_goal(3, on((block,11)), (block,12), true)
final_goal(3, on((block,12)), puzzle_room_2_table, true)
final_goal(3, on((block,13)), (block,14), true)
final_goal(3, on((block,14)), (block,15), true)
final_goal(3, on((block,15)), puzzle_room_2_table, true)
final_goal(3, on((block,16)), (block,17), true)
final_goal(3, on((block,17)), (block,18), true)
final_goal(3, on((block,18)), puzzle_room_2_table, true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_1_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_1_table, true)
final_goal(3, on((block,7)), (block,8), true)
final_goal(3, on((block,8)), (block,9), true)
final_goal(3, on((block,9)), puzzle_room_1_table, true)
final_goal(3, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(3, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(3, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(3, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(3, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), false, true)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(3, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(3, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,10)), true, false)
final_goal(3, in_tower((block,1),(block,11)), true, false)
final_goal(3, in_tower((block,1),(block,12)), true, false)
final_goal(3, in_tower((block,1),(block,13)), true, false)
final_goal(3, in_tower((block,1),(block,14)), true, false)
final_goal(3, in_tower((block,1),(block,15)), true, false)
final_goal(3, in_tower((block,1),(block,16)), true, false)
final_goal(3, in_tower((block,1),(block,17)), true, false)
final_goal(3, in_tower((block,1),(block,18)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,1),(block,7)), true, false)
final_goal(3, in_tower((block,1),(block,8)), true, false)
final_goal(3, in_tower((block,1),(block,9)), true, false)
final_goal(3, in_tower((block,10),(block,1)), true, false)
final_goal(3, in_tower((block,10),(block,10)), true, false)
final_goal(3, in_tower((block,10),(block,11)), true, false)
final_goal(3, in_tower((block,10),(block,12)), true, false)
final_goal(3, in_tower((block,10),(block,13)), true, false)
final_goal(3, in_tower((block,10),(block,14)), true, false)
final_goal(3, in_tower((block,10),(block,15)), true, false)
final_goal(3, in_tower((block,10),(block,16)), true, false)
final_goal(3, in_tower((block,10),(block,17)), true, false)
final_goal(3, in_tower((block,10),(block,18)), true, false)
final_goal(3, in_tower((block,10),(block,2)), true, false)
final_goal(3, in_tower((block,10),(block,3)), true, false)
final_goal(3, in_tower((block,10),(block,4)), true, false)
final_goal(3, in_tower((block,10),(block,5)), true, false)
final_goal(3, in_tower((block,10),(block,6)), true, false)
final_goal(3, in_tower((block,10),(block,7)), true, false)
final_goal(3, in_tower((block,10),(block,8)), true, false)
final_goal(3, in_tower((block,10),(block,9)), true, false)
final_goal(3, in_tower((block,11),(block,1)), true, false)
final_goal(3, in_tower((block,11),(block,10)), true, false)
final_goal(3, in_tower((block,11),(block,11)), true, false)
final_goal(3, in_tower((block,11),(block,12)), true, false)
final_goal(3, in_tower((block,11),(block,13)), true, false)
final_goal(3, in_tower((block,11),(block,14)), true, false)
final_goal(3, in_tower((block,11),(block,15)), true, false)
final_goal(3, in_tower((block,11),(block,16)), true, false)
final_goal(3, in_tower((block,11),(block,17)), true, false)
final_goal(3, in_tower((block,11),(block,18)), true, false)
final_goal(3, in_tower((block,11),(block,2)), true, false)
final_goal(3, in_tower((block,11),(block,3)), true, false)
final_goal(3, in_tower((block,11),(block,4)), true, false)
final_goal(3, in_tower((block,11),(block,5)), true, false)
final_goal(3, in_tower((block,11),(block,6)), true, false)
final_goal(3, in_tower((block,11),(block,7)), true, false)
final_goal(3, in_tower((block,11),(block,8)), true, false)
final_goal(3, in_tower((block,11),(block,9)), true, false)
final_goal(3, in_tower((block,12),(block,1)), true, false)
final_goal(3, in_tower((block,12),(block,10)), false, false)
final_goal(3, in_tower((block,12),(block,11)), false, false)
final_goal(3, in_tower((block,12),(block,12)), false, false)
final_goal(3, in_tower((block,12),(block,13)), true, false)
final_goal(3, in_tower((block,12),(block,14)), true, false)
final_goal(3, in_tower((block,12),(block,15)), true, false)
final_goal(3, in_tower((block,12),(block,16)), true, false)
final_goal(3, in_tower((block,12),(block,17)), true, false)
final_goal(3, in_tower((block,12),(block,18)), true, false)
final_goal(3, in_tower((block,12),(block,2)), true, false)
final_goal(3, in_tower((block,12),(block,3)), true, false)
final_goal(3, in_tower((block,12),(block,4)), true, false)
final_goal(3, in_tower((block,12),(block,5)), true, false)
final_goal(3, in_tower((block,12),(block,6)), true, false)
final_goal(3, in_tower((block,12),(block,7)), true, false)
final_goal(3, in_tower((block,12),(block,8)), true, false)
final_goal(3, in_tower((block,12),(block,9)), true, false)
final_goal(3, in_tower((block,13),(block,1)), true, false)
final_goal(3, in_tower((block,13),(block,10)), true, false)
final_goal(3, in_tower((block,13),(block,11)), true, false)
final_goal(3, in_tower((block,13),(block,12)), true, false)
final_goal(3, in_tower((block,13),(block,13)), true, false)
final_goal(3, in_tower((block,13),(block,14)), true, false)
final_goal(3, in_tower((block,13),(block,15)), true, false)
final_goal(3, in_tower((block,13),(block,16)), true, false)
final_goal(3, in_tower((block,13),(block,17)), true, false)
final_goal(3, in_tower((block,13),(block,18)), true, false)
final_goal(3, in_tower((block,13),(block,2)), true, false)
final_goal(3, in_tower((block,13),(block,3)), true, false)
final_goal(3, in_tower((block,13),(block,4)), true, false)
final_goal(3, in_tower((block,13),(block,5)), true, false)
final_goal(3, in_tower((block,13),(block,6)), true, false)
final_goal(3, in_tower((block,13),(block,7)), true, false)
final_goal(3, in_tower((block,13),(block,8)), true, false)
final_goal(3, in_tower((block,13),(block,9)), true, false)
final_goal(3, in_tower((block,14),(block,1)), true, false)
final_goal(3, in_tower((block,14),(block,10)), true, false)
final_goal(3, in_tower((block,14),(block,11)), true, false)
final_goal(3, in_tower((block,14),(block,12)), true, false)
final_goal(3, in_tower((block,14),(block,13)), true, false)
final_goal(3, in_tower((block,14),(block,14)), true, false)
final_goal(3, in_tower((block,14),(block,15)), true, false)
final_goal(3, in_tower((block,14),(block,16)), true, false)
final_goal(3, in_tower((block,14),(block,17)), true, false)
final_goal(3, in_tower((block,14),(block,18)), true, false)
final_goal(3, in_tower((block,14),(block,2)), true, false)
final_goal(3, in_tower((block,14),(block,3)), true, false)
final_goal(3, in_tower((block,14),(block,4)), true, false)
final_goal(3, in_tower((block,14),(block,5)), true, false)
final_goal(3, in_tower((block,14),(block,6)), true, false)
final_goal(3, in_tower((block,14),(block,7)), true, false)
final_goal(3, in_tower((block,14),(block,8)), true, false)
final_goal(3, in_tower((block,14),(block,9)), true, false)
final_goal(3, in_tower((block,15),(block,1)), true, false)
final_goal(3, in_tower((block,15),(block,10)), true, false)
final_goal(3, in_tower((block,15),(block,11)), true, false)
final_goal(3, in_tower((block,15),(block,12)), true, false)
final_goal(3, in_tower((block,15),(block,13)), false, false)
final_goal(3, in_tower((block,15),(block,14)), false, false)
final_goal(3, in_tower((block,15),(block,15)), false, false)
final_goal(3, in_tower((block,15),(block,16)), true, false)
final_goal(3, in_tower((block,15),(block,17)), true, false)
final_goal(3, in_tower((block,15),(block,18)), true, false)
final_goal(3, in_tower((block,15),(block,2)), true, false)
final_goal(3, in_tower((block,15),(block,3)), true, false)
final_goal(3, in_tower((block,15),(block,4)), true, false)
final_goal(3, in_tower((block,15),(block,5)), true, false)
final_goal(3, in_tower((block,15),(block,6)), true, false)
final_goal(3, in_tower((block,15),(block,7)), true, false)
final_goal(3, in_tower((block,15),(block,8)), true, false)
final_goal(3, in_tower((block,15),(block,9)), true, false)
final_goal(3, in_tower((block,16),(block,1)), true, false)
final_goal(3, in_tower((block,16),(block,10)), true, false)
final_goal(3, in_tower((block,16),(block,11)), true, false)
final_goal(3, in_tower((block,16),(block,12)), true, false)
final_goal(3, in_tower((block,16),(block,13)), true, false)
final_goal(3, in_tower((block,16),(block,14)), true, false)
final_goal(3, in_tower((block,16),(block,15)), true, false)
final_goal(3, in_tower((block,16),(block,16)), true, false)
final_goal(3, in_tower((block,16),(block,17)), true, false)
final_goal(3, in_tower((block,16),(block,18)), true, false)
final_goal(3, in_tower((block,16),(block,2)), true, false)
final_goal(3, in_tower((block,16),(block,3)), true, false)
final_goal(3, in_tower((block,16),(block,4)), true, false)
final_goal(3, in_tower((block,16),(block,5)), true, false)
final_goal(3, in_tower((block,16),(block,6)), true, false)
final_goal(3, in_tower((block,16),(block,7)), true, false)
final_goal(3, in_tower((block,16),(block,8)), true, false)
final_goal(3, in_tower((block,16),(block,9)), true, false)
final_goal(3, in_tower((block,17),(block,1)), true, false)
final_goal(3, in_tower((block,17),(block,10)), true, false)
final_goal(3, in_tower((block,17),(block,11)), true, false)
final_goal(3, in_tower((block,17),(block,12)), true, false)
final_goal(3, in_tower((block,17),(block,13)), true, false)
final_goal(3, in_tower((block,17),(block,14)), true, false)
final_goal(3, in_tower((block,17),(block,15)), true, false)
final_goal(3, in_tower((block,17),(block,16)), true, false)
final_goal(3, in_tower((block,17),(block,17)), true, false)
final_goal(3, in_tower((block,17),(block,18)), true, false)
final_goal(3, in_tower((block,17),(block,2)), true, false)
final_goal(3, in_tower((block,17),(block,3)), true, false)
final_goal(3, in_tower((block,17),(block,4)), true, false)
final_goal(3, in_tower((block,17),(block,5)), true, false)
final_goal(3, in_tower((block,17),(block,6)), true, false)
final_goal(3, in_tower((block,17),(block,7)), true, false)
final_goal(3, in_tower((block,17),(block,8)), true, false)
final_goal(3, in_tower((block,17),(block,9)), true, false)
final_goal(3, in_tower((block,18),(block,1)), true, false)
final_goal(3, in_tower((block,18),(block,10)), true, false)
final_goal(3, in_tower((block,18),(block,11)), true, false)
final_goal(3, in_tower((block,18),(block,12)), true, false)
final_goal(3, in_tower((block,18),(block,13)), true, false)
final_goal(3, in_tower((block,18),(block,14)), true, false)
final_goal(3, in_tower((block,18),(block,15)), true, false)
final_goal(3, in_tower((block,18),(block,16)), false, false)
final_goal(3, in_tower((block,18),(block,17)), false, false)
final_goal(3, in_tower((block,18),(block,18)), false, false)
final_goal(3, in_tower((block,18),(block,2)), true, false)
final_goal(3, in_tower((block,18),(block,3)), true, false)
final_goal(3, in_tower((block,18),(block,4)), true, false)
final_goal(3, in_tower((block,18),(block,5)), true, false)
final_goal(3, in_tower((block,18),(block,6)), true, false)
final_goal(3, in_tower((block,18),(block,7)), true, false)
final_goal(3, in_tower((block,18),(block,8)), true, false)
final_goal(3, in_tower((block,18),(block,9)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,10)), true, false)
final_goal(3, in_tower((block,2),(block,11)), true, false)
final_goal(3, in_tower((block,2),(block,12)), true, false)
final_goal(3, in_tower((block,2),(block,13)), true, false)
final_goal(3, in_tower((block,2),(block,14)), true, false)
final_goal(3, in_tower((block,2),(block,15)), true, false)
final_goal(3, in_tower((block,2),(block,16)), true, false)
final_goal(3, in_tower((block,2),(block,17)), true, false)
final_goal(3, in_tower((block,2),(block,18)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,7)), true, false)
final_goal(3, in_tower((block,2),(block,8)), true, false)
final_goal(3, in_tower((block,2),(block,9)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,10)), true, false)
final_goal(3, in_tower((block,3),(block,11)), true, false)
final_goal(3, in_tower((block,3),(block,12)), true, false)
final_goal(3, in_tower((block,3),(block,13)), true, false)
final_goal(3, in_tower((block,3),(block,14)), true, false)
final_goal(3, in_tower((block,3),(block,15)), true, false)
final_goal(3, in_tower((block,3),(block,16)), true, false)
final_goal(3, in_tower((block,3),(block,17)), true, false)
final_goal(3, in_tower((block,3),(block,18)), true, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,7)), true, false)
final_goal(3, in_tower((block,3),(block,8)), true, false)
final_goal(3, in_tower((block,3),(block,9)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,10)), true, false)
final_goal(3, in_tower((block,4),(block,11)), true, false)
final_goal(3, in_tower((block,4),(block,12)), true, false)
final_goal(3, in_tower((block,4),(block,13)), true, false)
final_goal(3, in_tower((block,4),(block,14)), true, false)
final_goal(3, in_tower((block,4),(block,15)), true, false)
final_goal(3, in_tower((block,4),(block,16)), true, false)
final_goal(3, in_tower((block,4),(block,17)), true, false)
final_goal(3, in_tower((block,4),(block,18)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,7)), true, false)
final_goal(3, in_tower((block,4),(block,8)), true, false)
final_goal(3, in_tower((block,4),(block,9)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,10)), true, false)
final_goal(3, in_tower((block,5),(block,11)), true, false)
final_goal(3, in_tower((block,5),(block,12)), true, false)
final_goal(3, in_tower((block,5),(block,13)), true, false)
final_goal(3, in_tower((block,5),(block,14)), true, false)
final_goal(3, in_tower((block,5),(block,15)), true, false)
final_goal(3, in_tower((block,5),(block,16)), true, false)
final_goal(3, in_tower((block,5),(block,17)), true, false)
final_goal(3, in_tower((block,5),(block,18)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,7)), true, false)
final_goal(3, in_tower((block,5),(block,8)), true, false)
final_goal(3, in_tower((block,5),(block,9)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,10)), true, false)
final_goal(3, in_tower((block,6),(block,11)), true, false)
final_goal(3, in_tower((block,6),(block,12)), true, false)
final_goal(3, in_tower((block,6),(block,13)), true, false)
final_goal(3, in_tower((block,6),(block,14)), true, false)
final_goal(3, in_tower((block,6),(block,15)), true, false)
final_goal(3, in_tower((block,6),(block,16)), true, false)
final_goal(3, in_tower((block,6),(block,17)), true, false)
final_goal(3, in_tower((block,6),(block,18)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, in_tower((block,6),(block,7)), true, false)
final_goal(3, in_tower((block,6),(block,8)), true, false)
final_goal(3, in_tower((block,6),(block,9)), true, false)
final_goal(3, in_tower((block,7),(block,1)), true, false)
final_goal(3, in_tower((block,7),(block,10)), true, false)
final_goal(3, in_tower((block,7),(block,11)), true, false)
final_goal(3, in_tower((block,7),(block,12)), true, false)
final_goal(3, in_tower((block,7),(block,13)), true, false)
final_goal(3, in_tower((block,7),(block,14)), true, false)
final_goal(3, in_tower((block,7),(block,15)), true, false)
final_goal(3, in_tower((block,7),(block,16)), true, false)
final_goal(3, in_tower((block,7),(block,17)), true, false)
final_goal(3, in_tower((block,7),(block,18)), true, false)
final_goal(3, in_tower((block,7),(block,2)), true, false)
final_goal(3, in_tower((block,7),(block,3)), true, false)
final_goal(3, in_tower((block,7),(block,4)), true, false)
final_goal(3, in_tower((block,7),(block,5)), true, false)
final_goal(3, in_tower((block,7),(block,6)), true, false)
final_goal(3, in_tower((block,7),(block,7)), true, false)
final_goal(3, in_tower((block,7),(block,8)), true, false)
final_goal(3, in_tower((block,7),(block,9)), true, false)
final_goal(3, in_tower((block,8),(block,1)), true, false)
final_goal(3, in_tower((block,8),(block,10)), true, false)
final_goal(3, in_tower((block,8),(block,11)), true, false)
final_goal(3, in_tower((block,8),(block,12)), true, false)
final_goal(3, in_tower((block,8),(block,13)), true, false)
final_goal(3, in_tower((block,8),(block,14)), true, false)
final_goal(3, in_tower((block,8),(block,15)), true, false)
final_goal(3, in_tower((block,8),(block,16)), true, false)
final_goal(3, in_tower((block,8),(block,17)), true, false)
final_goal(3, in_tower((block,8),(block,18)), true, false)
final_goal(3, in_tower((block,8),(block,2)), true, false)
final_goal(3, in_tower((block,8),(block,3)), true, false)
final_goal(3, in_tower((block,8),(block,4)), true, false)
final_goal(3, in_tower((block,8),(block,5)), true, false)
final_goal(3, in_tower((block,8),(block,6)), true, false)
final_goal(3, in_tower((block,8),(block,7)), true, false)
final_goal(3, in_tower((block,8),(block,8)), true, false)
final_goal(3, in_tower((block,8),(block,9)), true, false)
final_goal(3, in_tower((block,9),(block,1)), true, false)
final_goal(3, in_tower((block,9),(block,10)), true, false)
final_goal(3, in_tower((block,9),(block,11)), true, false)
final_goal(3, in_tower((block,9),(block,12)), true, false)
final_goal(3, in_tower((block,9),(block,13)), true, false)
final_goal(3, in_tower((block,9),(block,14)), true, false)
final_goal(3, in_tower((block,9),(block,15)), true, false)
final_goal(3, in_tower((block,9),(block,16)), true, false)
final_goal(3, in_tower((block,9),(block,17)), true, false)
final_goal(3, in_tower((block,9),(block,18)), true, false)
final_goal(3, in_tower((block,9),(block,2)), true, false)
final_goal(3, in_tower((block,9),(block,3)), true, false)
final_goal(3, in_tower((block,9),(block,4)), true, false)
final_goal(3, in_tower((block,9),(block,5)), true, false)
final_goal(3, in_tower((block,9),(block,6)), true, false)
final_goal(3, in_tower((block,9),(block,7)), false, false)
final_goal(3, in_tower((block,9),(block,8)), false, false)
final_goal(3, in_tower((block,9),(block,9)), false, false)
final_goal(3, on((block,1)), (block,10), false)
final_goal(3, on((block,1)), (block,11), false)
final_goal(3, on((block,1)), (block,12), false)
final_goal(3, on((block,1)), (block,13), false)
final_goal(3, on((block,1)), (block,14), false)
final_goal(3, on((block,1)), (block,15), false)
final_goal(3, on((block,1)), (block,16), false)
final_goal(3, on((block,1)), (block,17), false)
final_goal(3, on((block,1)), (block,18), false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), (block,7), false)
final_goal(3, on((block,1)), (block,8), false)
final_goal(3, on((block,1)), (block,9), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_1_table, false)
final_goal(3, on((block,1)), puzzle_room_2_table, false)
final_goal(3, on((block,10)), (block,1), false)
final_goal(3, on((block,10)), (block,12), false)
final_goal(3, on((block,10)), (block,13), false)
final_goal(3, on((block,10)), (block,14), false)
final_goal(3, on((block,10)), (block,15), false)
final_goal(3, on((block,10)), (block,16), false)
final_goal(3, on((block,10)), (block,17), false)
final_goal(3, on((block,10)), (block,18), false)
final_goal(3, on((block,10)), (block,2), false)
final_goal(3, on((block,10)), (block,3), false)
final_goal(3, on((block,10)), (block,4), false)
final_goal(3, on((block,10)), (block,5), false)
final_goal(3, on((block,10)), (block,6), false)
final_goal(3, on((block,10)), (block,7), false)
final_goal(3, on((block,10)), (block,8), false)
final_goal(3, on((block,10)), (block,9), false)
final_goal(3, on((block,10)), nothing, false)
final_goal(3, on((block,10)), puzzle_room_1_table, false)
final_goal(3, on((block,10)), puzzle_room_2_table, false)
final_goal(3, on((block,11)), (block,1), false)
final_goal(3, on((block,11)), (block,10), false)
final_goal(3, on((block,11)), (block,13), false)
final_goal(3, on((block,11)), (block,14), false)
final_goal(3, on((block,11)), (block,15), false)
final_goal(3, on((block,11)), (block,16), false)
final_goal(3, on((block,11)), (block,17), false)
final_goal(3, on((block,11)), (block,18), false)
final_goal(3, on((block,11)), (block,2), false)
final_goal(3, on((block,11)), (block,3), false)
final_goal(3, on((block,11)), (block,4), false)
final_goal(3, on((block,11)), (block,5), false)
final_goal(3, on((block,11)), (block,6), false)
final_goal(3, on((block,11)), (block,7), false)
final_goal(3, on((block,11)), (block,8), false)
final_goal(3, on((block,11)), (block,9), false)
final_goal(3, on((block,11)), nothing, false)
final_goal(3, on((block,11)), puzzle_room_1_table, false)
final_goal(3, on((block,11)), puzzle_room_2_table, false)
final_goal(3, on((block,12)), (block,1), false)
final_goal(3, on((block,12)), (block,10), false)
final_goal(3, on((block,12)), (block,11), false)
final_goal(3, on((block,12)), (block,13), false)
final_goal(3, on((block,12)), (block,14), false)
final_goal(3, on((block,12)), (block,15), false)
final_goal(3, on((block,12)), (block,16), false)
final_goal(3, on((block,12)), (block,17), false)
final_goal(3, on((block,12)), (block,18), false)
final_goal(3, on((block,12)), (block,2), false)
final_goal(3, on((block,12)), (block,3), false)
final_goal(3, on((block,12)), (block,4), false)
final_goal(3, on((block,12)), (block,5), false)
final_goal(3, on((block,12)), (block,6), false)
final_goal(3, on((block,12)), (block,7), false)
final_goal(3, on((block,12)), (block,8), false)
final_goal(3, on((block,12)), (block,9), false)
final_goal(3, on((block,12)), nothing, false)
final_goal(3, on((block,12)), puzzle_room_1_table, false)
final_goal(3, on((block,13)), (block,1), false)
final_goal(3, on((block,13)), (block,10), false)
final_goal(3, on((block,13)), (block,11), false)
final_goal(3, on((block,13)), (block,12), false)
final_goal(3, on((block,13)), (block,15), false)
final_goal(3, on((block,13)), (block,16), false)
final_goal(3, on((block,13)), (block,17), false)
final_goal(3, on((block,13)), (block,18), false)
final_goal(3, on((block,13)), (block,2), false)
final_goal(3, on((block,13)), (block,3), false)
final_goal(3, on((block,13)), (block,4), false)
final_goal(3, on((block,13)), (block,5), false)
final_goal(3, on((block,13)), (block,6), false)
final_goal(3, on((block,13)), (block,7), false)
final_goal(3, on((block,13)), (block,8), false)
final_goal(3, on((block,13)), (block,9), false)
final_goal(3, on((block,13)), nothing, false)
final_goal(3, on((block,13)), puzzle_room_1_table, false)
final_goal(3, on((block,13)), puzzle_room_2_table, false)
final_goal(3, on((block,14)), (block,1), false)
final_goal(3, on((block,14)), (block,10), false)
final_goal(3, on((block,14)), (block,11), false)
final_goal(3, on((block,14)), (block,12), false)
final_goal(3, on((block,14)), (block,13), false)
final_goal(3, on((block,14)), (block,16), false)
final_goal(3, on((block,14)), (block,17), false)
final_goal(3, on((block,14)), (block,18), false)
final_goal(3, on((block,14)), (block,2), false)
final_goal(3, on((block,14)), (block,3), false)
final_goal(3, on((block,14)), (block,4), false)
final_goal(3, on((block,14)), (block,5), false)
final_goal(3, on((block,14)), (block,6), false)
final_goal(3, on((block,14)), (block,7), false)
final_goal(3, on((block,14)), (block,8), false)
final_goal(3, on((block,14)), (block,9), false)
final_goal(3, on((block,14)), nothing, false)
final_goal(3, on((block,14)), puzzle_room_1_table, false)
final_goal(3, on((block,14)), puzzle_room_2_table, false)
final_goal(3, on((block,15)), (block,1), false)
final_goal(3, on((block,15)), (block,10), false)
final_goal(3, on((block,15)), (block,11), false)
final_goal(3, on((block,15)), (block,12), false)
final_goal(3, on((block,15)), (block,13), false)
final_goal(3, on((block,15)), (block,14), false)
final_goal(3, on((block,15)), (block,16), false)
final_goal(3, on((block,15)), (block,17), false)
final_goal(3, on((block,15)), (block,18), false)
final_goal(3, on((block,15)), (block,2), false)
final_goal(3, on((block,15)), (block,3), false)
final_goal(3, on((block,15)), (block,4), false)
final_goal(3, on((block,15)), (block,5), false)
final_goal(3, on((block,15)), (block,6), false)
final_goal(3, on((block,15)), (block,7), false)
final_goal(3, on((block,15)), (block,8), false)
final_goal(3, on((block,15)), (block,9), false)
final_goal(3, on((block,15)), nothing, false)
final_goal(3, on((block,15)), puzzle_room_1_table, false)
final_goal(3, on((block,16)), (block,1), false)
final_goal(3, on((block,16)), (block,10), false)
final_goal(3, on((block,16)), (block,11), false)
final_goal(3, on((block,16)), (block,12), false)
final_goal(3, on((block,16)), (block,13), false)
final_goal(3, on((block,16)), (block,14), false)
final_goal(3, on((block,16)), (block,15), false)
final_goal(3, on((block,16)), (block,18), false)
final_goal(3, on((block,16)), (block,2), false)
final_goal(3, on((block,16)), (block,3), false)
final_goal(3, on((block,16)), (block,4), false)
final_goal(3, on((block,16)), (block,5), false)
final_goal(3, on((block,16)), (block,6), false)
final_goal(3, on((block,16)), (block,7), false)
final_goal(3, on((block,16)), (block,8), false)
final_goal(3, on((block,16)), (block,9), false)
final_goal(3, on((block,16)), nothing, false)
final_goal(3, on((block,16)), puzzle_room_1_table, false)
final_goal(3, on((block,16)), puzzle_room_2_table, false)
final_goal(3, on((block,17)), (block,1), false)
final_goal(3, on((block,17)), (block,10), false)
final_goal(3, on((block,17)), (block,11), false)
final_goal(3, on((block,17)), (block,12), false)
final_goal(3, on((block,17)), (block,13), false)
final_goal(3, on((block,17)), (block,14), false)
final_goal(3, on((block,17)), (block,15), false)
final_goal(3, on((block,17)), (block,16), false)
final_goal(3, on((block,17)), (block,2), false)
final_goal(3, on((block,17)), (block,3), false)
final_goal(3, on((block,17)), (block,4), false)
final_goal(3, on((block,17)), (block,5), false)
final_goal(3, on((block,17)), (block,6), false)
final_goal(3, on((block,17)), (block,7), false)
final_goal(3, on((block,17)), (block,8), false)
final_goal(3, on((block,17)), (block,9), false)
final_goal(3, on((block,17)), nothing, false)
final_goal(3, on((block,17)), puzzle_room_1_table, false)
final_goal(3, on((block,17)), puzzle_room_2_table, false)
final_goal(3, on((block,18)), (block,1), false)
final_goal(3, on((block,18)), (block,10), false)
final_goal(3, on((block,18)), (block,11), false)
final_goal(3, on((block,18)), (block,12), false)
final_goal(3, on((block,18)), (block,13), false)
final_goal(3, on((block,18)), (block,14), false)
final_goal(3, on((block,18)), (block,15), false)
final_goal(3, on((block,18)), (block,16), false)
final_goal(3, on((block,18)), (block,17), false)
final_goal(3, on((block,18)), (block,2), false)
final_goal(3, on((block,18)), (block,3), false)
final_goal(3, on((block,18)), (block,4), false)
final_goal(3, on((block,18)), (block,5), false)
final_goal(3, on((block,18)), (block,6), false)
final_goal(3, on((block,18)), (block,7), false)
final_goal(3, on((block,18)), (block,8), false)
final_goal(3, on((block,18)), (block,9), false)
final_goal(3, on((block,18)), nothing, false)
final_goal(3, on((block,18)), puzzle_room_1_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,10), false)
final_goal(3, on((block,2)), (block,11), false)
final_goal(3, on((block,2)), (block,12), false)
final_goal(3, on((block,2)), (block,13), false)
final_goal(3, on((block,2)), (block,14), false)
final_goal(3, on((block,2)), (block,15), false)
final_goal(3, on((block,2)), (block,16), false)
final_goal(3, on((block,2)), (block,17), false)
final_goal(3, on((block,2)), (block,18), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), (block,7), false)
final_goal(3, on((block,2)), (block,8), false)
final_goal(3, on((block,2)), (block,9), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_1_table, false)
final_goal(3, on((block,2)), puzzle_room_2_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,10), false)
final_goal(3, on((block,3)), (block,11), false)
final_goal(3, on((block,3)), (block,12), false)
final_goal(3, on((block,3)), (block,13), false)
final_goal(3, on((block,3)), (block,14), false)
final_goal(3, on((block,3)), (block,15), false)
final_goal(3, on((block,3)), (block,16), false)
final_goal(3, on((block,3)), (block,17), false)
final_goal(3, on((block,3)), (block,18), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), (block,7), false)
final_goal(3, on((block,3)), (block,8), false)
final_goal(3, on((block,3)), (block,9), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,3)), puzzle_room_2_table, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,10), false)
final_goal(3, on((block,4)), (block,11), false)
final_goal(3, on((block,4)), (block,12), false)
final_goal(3, on((block,4)), (block,13), false)
final_goal(3, on((block,4)), (block,14), false)
final_goal(3, on((block,4)), (block,15), false)
final_goal(3, on((block,4)), (block,16), false)
final_goal(3, on((block,4)), (block,17), false)
final_goal(3, on((block,4)), (block,18), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), (block,7), false)
final_goal(3, on((block,4)), (block,8), false)
final_goal(3, on((block,4)), (block,9), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_1_table, false)
final_goal(3, on((block,4)), puzzle_room_2_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,10), false)
final_goal(3, on((block,5)), (block,11), false)
final_goal(3, on((block,5)), (block,12), false)
final_goal(3, on((block,5)), (block,13), false)
final_goal(3, on((block,5)), (block,14), false)
final_goal(3, on((block,5)), (block,15), false)
final_goal(3, on((block,5)), (block,16), false)
final_goal(3, on((block,5)), (block,17), false)
final_goal(3, on((block,5)), (block,18), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), (block,7), false)
final_goal(3, on((block,5)), (block,8), false)
final_goal(3, on((block,5)), (block,9), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_1_table, false)
final_goal(3, on((block,5)), puzzle_room_2_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,10), false)
final_goal(3, on((block,6)), (block,11), false)
final_goal(3, on((block,6)), (block,12), false)
final_goal(3, on((block,6)), (block,13), false)
final_goal(3, on((block,6)), (block,14), false)
final_goal(3, on((block,6)), (block,15), false)
final_goal(3, on((block,6)), (block,16), false)
final_goal(3, on((block,6)), (block,17), false)
final_goal(3, on((block,6)), (block,18), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), (block,7), false)
final_goal(3, on((block,6)), (block,8), false)
final_goal(3, on((block,6)), (block,9), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,6)), puzzle_room_2_table, false)
final_goal(3, on((block,7)), (block,1), false)
final_goal(3, on((block,7)), (block,10), false)
final_goal(3, on((block,7)), (block,11), false)
final_goal(3, on((block,7)), (block,12), false)
final_goal(3, on((block,7)), (block,13), false)
final_goal(3, on((block,7)), (block,14), false)
final_goal(3, on((block,7)), (block,15), false)
final_goal(3, on((block,7)), (block,16), false)
final_goal(3, on((block,7)), (block,17), false)
final_goal(3, on((block,7)), (block,18), false)
final_goal(3, on((block,7)), (block,2), false)
final_goal(3, on((block,7)), (block,3), false)
final_goal(3, on((block,7)), (block,4), false)
final_goal(3, on((block,7)), (block,5), false)
final_goal(3, on((block,7)), (block,6), false)
final_goal(3, on((block,7)), (block,9), false)
final_goal(3, on((block,7)), nothing, false)
final_goal(3, on((block,7)), puzzle_room_1_table, false)
final_goal(3, on((block,7)), puzzle_room_2_table, false)
final_goal(3, on((block,8)), (block,1), false)
final_goal(3, on((block,8)), (block,10), false)
final_goal(3, on((block,8)), (block,11), false)
final_goal(3, on((block,8)), (block,12), false)
final_goal(3, on((block,8)), (block,13), false)
final_goal(3, on((block,8)), (block,14), false)
final_goal(3, on((block,8)), (block,15), false)
final_goal(3, on((block,8)), (block,16), false)
final_goal(3, on((block,8)), (block,17), false)
final_goal(3, on((block,8)), (block,18), false)
final_goal(3, on((block,8)), (block,2), false)
final_goal(3, on((block,8)), (block,3), false)
final_goal(3, on((block,8)), (block,4), false)
final_goal(3, on((block,8)), (block,5), false)
final_goal(3, on((block,8)), (block,6), false)
final_goal(3, on((block,8)), (block,7), false)
final_goal(3, on((block,8)), nothing, false)
final_goal(3, on((block,8)), puzzle_room_1_table, false)
final_goal(3, on((block,8)), puzzle_room_2_table, false)
final_goal(3, on((block,9)), (block,1), false)
final_goal(3, on((block,9)), (block,10), false)
final_goal(3, on((block,9)), (block,11), false)
final_goal(3, on((block,9)), (block,12), false)
final_goal(3, on((block,9)), (block,13), false)
final_goal(3, on((block,9)), (block,14), false)
final_goal(3, on((block,9)), (block,15), false)
final_goal(3, on((block,9)), (block,16), false)
final_goal(3, on((block,9)), (block,17), false)
final_goal(3, on((block,9)), (block,18), false)
final_goal(3, on((block,9)), (block,2), false)
final_goal(3, on((block,9)), (block,3), false)
final_goal(3, on((block,9)), (block,4), false)
final_goal(3, on((block,9)), (block,5), false)
final_goal(3, on((block,9)), (block,6), false)
final_goal(3, on((block,9)), (block,7), false)
final_goal(3, on((block,9)), (block,8), false)
final_goal(3, on((block,9)), nothing, false)
final_goal(3, on((block,9)), puzzle_room_2_table, false)
final_goal(3, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(3, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(3, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(3, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(3, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(3, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(3, unordered_tower((block,9),puzzle_room_2_table), true, false)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(2, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(2, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,10)), false, true)
final_goal(2, in_tower((block,1),(block,11)), false, true)
final_goal(2, in_tower((block,1),(block,12)), false, true)
final_goal(2, in_tower((block,1),(block,13)), false, true)
final_goal(2, in_tower((block,1),(block,14)), false, true)
final_goal(2, in_tower((block,1),(block,15)), false, true)
final_goal(2, in_tower((block,1),(block,16)), false, true)
final_goal(2, in_tower((block,1),(block,17)), false, true)
final_goal(2, in_tower((block,1),(block,18)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,7)), false, true)
final_goal(2, in_tower((block,1),(block,8)), false, true)
final_goal(2, in_tower((block,1),(block,9)), false, true)
final_goal(2, in_tower((block,10),(block,1)), false, true)
final_goal(2, in_tower((block,10),(block,10)), false, true)
final_goal(2, in_tower((block,10),(block,11)), false, true)
final_goal(2, in_tower((block,10),(block,12)), false, true)
final_goal(2, in_tower((block,10),(block,13)), false, true)
final_goal(2, in_tower((block,10),(block,14)), false, true)
final_goal(2, in_tower((block,10),(block,15)), false, true)
final_goal(2, in_tower((block,10),(block,16)), false, true)
final_goal(2, in_tower((block,10),(block,17)), false, true)
final_goal(2, in_tower((block,10),(block,18)), false, true)
final_goal(2, in_tower((block,10),(block,2)), false, true)
final_goal(2, in_tower((block,10),(block,3)), false, true)
final_goal(2, in_tower((block,10),(block,4)), false, true)
final_goal(2, in_tower((block,10),(block,5)), false, true)
final_goal(2, in_tower((block,10),(block,6)), false, true)
final_goal(2, in_tower((block,10),(block,7)), false, true)
final_goal(2, in_tower((block,10),(block,8)), false, true)
final_goal(2, in_tower((block,10),(block,9)), false, true)
final_goal(2, in_tower((block,11),(block,1)), false, true)
final_goal(2, in_tower((block,11),(block,10)), false, true)
final_goal(2, in_tower((block,11),(block,11)), false, true)
final_goal(2, in_tower((block,11),(block,12)), false, true)
final_goal(2, in_tower((block,11),(block,13)), false, true)
final_goal(2, in_tower((block,11),(block,14)), false, true)
final_goal(2, in_tower((block,11),(block,15)), false, true)
final_goal(2, in_tower((block,11),(block,16)), false, true)
final_goal(2, in_tower((block,11),(block,17)), false, true)
final_goal(2, in_tower((block,11),(block,18)), false, true)
final_goal(2, in_tower((block,11),(block,2)), false, true)
final_goal(2, in_tower((block,11),(block,3)), false, true)
final_goal(2, in_tower((block,11),(block,4)), false, true)
final_goal(2, in_tower((block,11),(block,5)), false, true)
final_goal(2, in_tower((block,11),(block,6)), false, true)
final_goal(2, in_tower((block,11),(block,7)), false, true)
final_goal(2, in_tower((block,11),(block,8)), false, true)
final_goal(2, in_tower((block,11),(block,9)), false, true)
final_goal(2, in_tower((block,12),(block,1)), false, true)
final_goal(2, in_tower((block,12),(block,10)), true, true)
final_goal(2, in_tower((block,12),(block,11)), true, true)
final_goal(2, in_tower((block,12),(block,12)), true, true)
final_goal(2, in_tower((block,12),(block,13)), false, true)
final_goal(2, in_tower((block,12),(block,14)), false, true)
final_goal(2, in_tower((block,12),(block,15)), false, true)
final_goal(2, in_tower((block,12),(block,16)), false, true)
final_goal(2, in_tower((block,12),(block,17)), false, true)
final_goal(2, in_tower((block,12),(block,18)), false, true)
final_goal(2, in_tower((block,12),(block,2)), false, true)
final_goal(2, in_tower((block,12),(block,3)), false, true)
final_goal(2, in_tower((block,12),(block,4)), false, true)
final_goal(2, in_tower((block,12),(block,5)), false, true)
final_goal(2, in_tower((block,12),(block,6)), false, true)
final_goal(2, in_tower((block,12),(block,7)), false, true)
final_goal(2, in_tower((block,12),(block,8)), false, true)
final_goal(2, in_tower((block,12),(block,9)), false, true)
final_goal(2, in_tower((block,13),(block,1)), false, true)
final_goal(2, in_tower((block,13),(block,10)), false, true)
final_goal(2, in_tower((block,13),(block,11)), false, true)
final_goal(2, in_tower((block,13),(block,12)), false, true)
final_goal(2, in_tower((block,13),(block,13)), false, true)
final_goal(2, in_tower((block,13),(block,14)), false, true)
final_goal(2, in_tower((block,13),(block,15)), false, true)
final_goal(2, in_tower((block,13),(block,16)), false, true)
final_goal(2, in_tower((block,13),(block,17)), false, true)
final_goal(2, in_tower((block,13),(block,18)), false, true)
final_goal(2, in_tower((block,13),(block,2)), false, true)
final_goal(2, in_tower((block,13),(block,3)), false, true)
final_goal(2, in_tower((block,13),(block,4)), false, true)
final_goal(2, in_tower((block,13),(block,5)), false, true)
final_goal(2, in_tower((block,13),(block,6)), false, true)
final_goal(2, in_tower((block,13),(block,7)), false, true)
final_goal(2, in_tower((block,13),(block,8)), false, true)
final_goal(2, in_tower((block,13),(block,9)), false, true)
final_goal(2, in_tower((block,14),(block,1)), false, true)
final_goal(2, in_tower((block,14),(block,10)), false, true)
final_goal(2, in_tower((block,14),(block,11)), false, true)
final_goal(2, in_tower((block,14),(block,12)), false, true)
final_goal(2, in_tower((block,14),(block,13)), false, true)
final_goal(2, in_tower((block,14),(block,14)), false, true)
final_goal(2, in_tower((block,14),(block,15)), false, true)
final_goal(2, in_tower((block,14),(block,16)), false, true)
final_goal(2, in_tower((block,14),(block,17)), false, true)
final_goal(2, in_tower((block,14),(block,18)), false, true)
final_goal(2, in_tower((block,14),(block,2)), false, true)
final_goal(2, in_tower((block,14),(block,3)), false, true)
final_goal(2, in_tower((block,14),(block,4)), false, true)
final_goal(2, in_tower((block,14),(block,5)), false, true)
final_goal(2, in_tower((block,14),(block,6)), false, true)
final_goal(2, in_tower((block,14),(block,7)), false, true)
final_goal(2, in_tower((block,14),(block,8)), false, true)
final_goal(2, in_tower((block,14),(block,9)), false, true)
final_goal(2, in_tower((block,15),(block,1)), false, true)
final_goal(2, in_tower((block,15),(block,10)), false, true)
final_goal(2, in_tower((block,15),(block,11)), false, true)
final_goal(2, in_tower((block,15),(block,12)), false, true)
final_goal(2, in_tower((block,15),(block,13)), true, true)
final_goal(2, in_tower((block,15),(block,14)), true, true)
final_goal(2, in_tower((block,15),(block,15)), true, true)
final_goal(2, in_tower((block,15),(block,16)), false, true)
final_goal(2, in_tower((block,15),(block,17)), false, true)
final_goal(2, in_tower((block,15),(block,18)), false, true)
final_goal(2, in_tower((block,15),(block,2)), false, true)
final_goal(2, in_tower((block,15),(block,3)), false, true)
final_goal(2, in_tower((block,15),(block,4)), false, true)
final_goal(2, in_tower((block,15),(block,5)), false, true)
final_goal(2, in_tower((block,15),(block,6)), false, true)
final_goal(2, in_tower((block,15),(block,7)), false, true)
final_goal(2, in_tower((block,15),(block,8)), false, true)
final_goal(2, in_tower((block,15),(block,9)), false, true)
final_goal(2, in_tower((block,16),(block,1)), false, true)
final_goal(2, in_tower((block,16),(block,10)), false, true)
final_goal(2, in_tower((block,16),(block,11)), false, true)
final_goal(2, in_tower((block,16),(block,12)), false, true)
final_goal(2, in_tower((block,16),(block,13)), false, true)
final_goal(2, in_tower((block,16),(block,14)), false, true)
final_goal(2, in_tower((block,16),(block,15)), false, true)
final_goal(2, in_tower((block,16),(block,16)), false, true)
final_goal(2, in_tower((block,16),(block,17)), false, true)
final_goal(2, in_tower((block,16),(block,18)), false, true)
final_goal(2, in_tower((block,16),(block,2)), false, true)
final_goal(2, in_tower((block,16),(block,3)), false, true)
final_goal(2, in_tower((block,16),(block,4)), false, true)
final_goal(2, in_tower((block,16),(block,5)), false, true)
final_goal(2, in_tower((block,16),(block,6)), false, true)
final_goal(2, in_tower((block,16),(block,7)), false, true)
final_goal(2, in_tower((block,16),(block,8)), false, true)
final_goal(2, in_tower((block,16),(block,9)), false, true)
final_goal(2, in_tower((block,17),(block,1)), false, true)
final_goal(2, in_tower((block,17),(block,10)), false, true)
final_goal(2, in_tower((block,17),(block,11)), false, true)
final_goal(2, in_tower((block,17),(block,12)), false, true)
final_goal(2, in_tower((block,17),(block,13)), false, true)
final_goal(2, in_tower((block,17),(block,14)), false, true)
final_goal(2, in_tower((block,17),(block,15)), false, true)
final_goal(2, in_tower((block,17),(block,16)), false, true)
final_goal(2, in_tower((block,17),(block,17)), false, true)
final_goal(2, in_tower((block,17),(block,18)), false, true)
final_goal(2, in_tower((block,17),(block,2)), false, true)
final_goal(2, in_tower((block,17),(block,3)), false, true)
final_goal(2, in_tower((block,17),(block,4)), false, true)
final_goal(2, in_tower((block,17),(block,5)), false, true)
final_goal(2, in_tower((block,17),(block,6)), false, true)
final_goal(2, in_tower((block,17),(block,7)), false, true)
final_goal(2, in_tower((block,17),(block,8)), false, true)
final_goal(2, in_tower((block,17),(block,9)), false, true)
final_goal(2, in_tower((block,18),(block,1)), false, true)
final_goal(2, in_tower((block,18),(block,10)), false, true)
final_goal(2, in_tower((block,18),(block,11)), false, true)
final_goal(2, in_tower((block,18),(block,12)), false, true)
final_goal(2, in_tower((block,18),(block,13)), false, true)
final_goal(2, in_tower((block,18),(block,14)), false, true)
final_goal(2, in_tower((block,18),(block,15)), false, true)
final_goal(2, in_tower((block,18),(block,16)), true, true)
final_goal(2, in_tower((block,18),(block,17)), true, true)
final_goal(2, in_tower((block,18),(block,18)), true, true)
final_goal(2, in_tower((block,18),(block,2)), false, true)
final_goal(2, in_tower((block,18),(block,3)), false, true)
final_goal(2, in_tower((block,18),(block,4)), false, true)
final_goal(2, in_tower((block,18),(block,5)), false, true)
final_goal(2, in_tower((block,18),(block,6)), false, true)
final_goal(2, in_tower((block,18),(block,7)), false, true)
final_goal(2, in_tower((block,18),(block,8)), false, true)
final_goal(2, in_tower((block,18),(block,9)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,10)), false, true)
final_goal(2, in_tower((block,2),(block,11)), false, true)
final_goal(2, in_tower((block,2),(block,12)), false, true)
final_goal(2, in_tower((block,2),(block,13)), false, true)
final_goal(2, in_tower((block,2),(block,14)), false, true)
final_goal(2, in_tower((block,2),(block,15)), false, true)
final_goal(2, in_tower((block,2),(block,16)), false, true)
final_goal(2, in_tower((block,2),(block,17)), false, true)
final_goal(2, in_tower((block,2),(block,18)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,7)), false, true)
final_goal(2, in_tower((block,2),(block,8)), false, true)
final_goal(2, in_tower((block,2),(block,9)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,10)), false, true)
final_goal(2, in_tower((block,3),(block,11)), false, true)
final_goal(2, in_tower((block,3),(block,12)), false, true)
final_goal(2, in_tower((block,3),(block,13)), false, true)
final_goal(2, in_tower((block,3),(block,14)), false, true)
final_goal(2, in_tower((block,3),(block,15)), false, true)
final_goal(2, in_tower((block,3),(block,16)), false, true)
final_goal(2, in_tower((block,3),(block,17)), false, true)
final_goal(2, in_tower((block,3),(block,18)), false, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,7)), false, true)
final_goal(2, in_tower((block,3),(block,8)), false, true)
final_goal(2, in_tower((block,3),(block,9)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,10)), false, true)
final_goal(2, in_tower((block,4),(block,11)), false, true)
final_goal(2, in_tower((block,4),(block,12)), false, true)
final_goal(2, in_tower((block,4),(block,13)), false, true)
final_goal(2, in_tower((block,4),(block,14)), false, true)
final_goal(2, in_tower((block,4),(block,15)), false, true)
final_goal(2, in_tower((block,4),(block,16)), false, true)
final_goal(2, in_tower((block,4),(block,17)), false, true)
final_goal(2, in_tower((block,4),(block,18)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,7)), false, true)
final_goal(2, in_tower((block,4),(block,8)), false, true)
final_goal(2, in_tower((block,4),(block,9)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,10)), false, true)
final_goal(2, in_tower((block,5),(block,11)), false, true)
final_goal(2, in_tower((block,5),(block,12)), false, true)
final_goal(2, in_tower((block,5),(block,13)), false, true)
final_goal(2, in_tower((block,5),(block,14)), false, true)
final_goal(2, in_tower((block,5),(block,15)), false, true)
final_goal(2, in_tower((block,5),(block,16)), false, true)
final_goal(2, in_tower((block,5),(block,17)), false, true)
final_goal(2, in_tower((block,5),(block,18)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,7)), false, true)
final_goal(2, in_tower((block,5),(block,8)), false, true)
final_goal(2, in_tower((block,5),(block,9)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,10)), false, true)
final_goal(2, in_tower((block,6),(block,11)), false, true)
final_goal(2, in_tower((block,6),(block,12)), false, true)
final_goal(2, in_tower((block,6),(block,13)), false, true)
final_goal(2, in_tower((block,6),(block,14)), false, true)
final_goal(2, in_tower((block,6),(block,15)), false, true)
final_goal(2, in_tower((block,6),(block,16)), false, true)
final_goal(2, in_tower((block,6),(block,17)), false, true)
final_goal(2, in_tower((block,6),(block,18)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, in_tower((block,6),(block,7)), false, true)
final_goal(2, in_tower((block,6),(block,8)), false, true)
final_goal(2, in_tower((block,6),(block,9)), false, true)
final_goal(2, in_tower((block,7),(block,1)), false, true)
final_goal(2, in_tower((block,7),(block,10)), false, true)
final_goal(2, in_tower((block,7),(block,11)), false, true)
final_goal(2, in_tower((block,7),(block,12)), false, true)
final_goal(2, in_tower((block,7),(block,13)), false, true)
final_goal(2, in_tower((block,7),(block,14)), false, true)
final_goal(2, in_tower((block,7),(block,15)), false, true)
final_goal(2, in_tower((block,7),(block,16)), false, true)
final_goal(2, in_tower((block,7),(block,17)), false, true)
final_goal(2, in_tower((block,7),(block,18)), false, true)
final_goal(2, in_tower((block,7),(block,2)), false, true)
final_goal(2, in_tower((block,7),(block,3)), false, true)
final_goal(2, in_tower((block,7),(block,4)), false, true)
final_goal(2, in_tower((block,7),(block,5)), false, true)
final_goal(2, in_tower((block,7),(block,6)), false, true)
final_goal(2, in_tower((block,7),(block,7)), false, true)
final_goal(2, in_tower((block,7),(block,8)), false, true)
final_goal(2, in_tower((block,7),(block,9)), false, true)
final_goal(2, in_tower((block,8),(block,1)), false, true)
final_goal(2, in_tower((block,8),(block,10)), false, true)
final_goal(2, in_tower((block,8),(block,11)), false, true)
final_goal(2, in_tower((block,8),(block,12)), false, true)
final_goal(2, in_tower((block,8),(block,13)), false, true)
final_goal(2, in_tower((block,8),(block,14)), false, true)
final_goal(2, in_tower((block,8),(block,15)), false, true)
final_goal(2, in_tower((block,8),(block,16)), false, true)
final_goal(2, in_tower((block,8),(block,17)), false, true)
final_goal(2, in_tower((block,8),(block,18)), false, true)
final_goal(2, in_tower((block,8),(block,2)), false, true)
final_goal(2, in_tower((block,8),(block,3)), false, true)
final_goal(2, in_tower((block,8),(block,4)), false, true)
final_goal(2, in_tower((block,8),(block,5)), false, true)
final_goal(2, in_tower((block,8),(block,6)), false, true)
final_goal(2, in_tower((block,8),(block,7)), false, true)
final_goal(2, in_tower((block,8),(block,8)), false, true)
final_goal(2, in_tower((block,8),(block,9)), false, true)
final_goal(2, in_tower((block,9),(block,1)), false, true)
final_goal(2, in_tower((block,9),(block,10)), false, true)
final_goal(2, in_tower((block,9),(block,11)), false, true)
final_goal(2, in_tower((block,9),(block,12)), false, true)
final_goal(2, in_tower((block,9),(block,13)), false, true)
final_goal(2, in_tower((block,9),(block,14)), false, true)
final_goal(2, in_tower((block,9),(block,15)), false, true)
final_goal(2, in_tower((block,9),(block,16)), false, true)
final_goal(2, in_tower((block,9),(block,17)), false, true)
final_goal(2, in_tower((block,9),(block,18)), false, true)
final_goal(2, in_tower((block,9),(block,2)), false, true)
final_goal(2, in_tower((block,9),(block,3)), false, true)
final_goal(2, in_tower((block,9),(block,4)), false, true)
final_goal(2, in_tower((block,9),(block,5)), false, true)
final_goal(2, in_tower((block,9),(block,6)), false, true)
final_goal(2, in_tower((block,9),(block,7)), true, true)
final_goal(2, in_tower((block,9),(block,8)), true, true)
final_goal(2, in_tower((block,9),(block,9)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,10)), (block,11), true)
final_goal(2, on((block,11)), (block,12), true)
final_goal(2, on((block,12)), puzzle_room_2_table_left, true)
final_goal(2, on((block,13)), (block,14), true)
final_goal(2, on((block,14)), (block,15), true)
final_goal(2, on((block,15)), puzzle_room_2_table_right, true)
final_goal(2, on((block,16)), (block,17), true)
final_goal(2, on((block,17)), (block,18), true)
final_goal(2, on((block,18)), puzzle_room_2_table_middle, true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_1_table_left, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_1_table_right, true)
final_goal(2, on((block,7)), (block,8), true)
final_goal(2, on((block,8)), (block,9), true)
final_goal(2, on((block,9)), puzzle_room_1_table_middle, true)
final_goal(2, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(2, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(2, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(2, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(2, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(2, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(2, unordered_tower((block,9),puzzle_room_2_table), false, true)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(2, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(2, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,10)), true, false)
final_goal(2, in_tower((block,1),(block,11)), true, false)
final_goal(2, in_tower((block,1),(block,12)), true, false)
final_goal(2, in_tower((block,1),(block,13)), true, false)
final_goal(2, in_tower((block,1),(block,14)), true, false)
final_goal(2, in_tower((block,1),(block,15)), true, false)
final_goal(2, in_tower((block,1),(block,16)), true, false)
final_goal(2, in_tower((block,1),(block,17)), true, false)
final_goal(2, in_tower((block,1),(block,18)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,1),(block,7)), true, false)
final_goal(2, in_tower((block,1),(block,8)), true, false)
final_goal(2, in_tower((block,1),(block,9)), true, false)
final_goal(2, in_tower((block,10),(block,1)), true, false)
final_goal(2, in_tower((block,10),(block,10)), true, false)
final_goal(2, in_tower((block,10),(block,11)), true, false)
final_goal(2, in_tower((block,10),(block,12)), true, false)
final_goal(2, in_tower((block,10),(block,13)), true, false)
final_goal(2, in_tower((block,10),(block,14)), true, false)
final_goal(2, in_tower((block,10),(block,15)), true, false)
final_goal(2, in_tower((block,10),(block,16)), true, false)
final_goal(2, in_tower((block,10),(block,17)), true, false)
final_goal(2, in_tower((block,10),(block,18)), true, false)
final_goal(2, in_tower((block,10),(block,2)), true, false)
final_goal(2, in_tower((block,10),(block,3)), true, false)
final_goal(2, in_tower((block,10),(block,4)), true, false)
final_goal(2, in_tower((block,10),(block,5)), true, false)
final_goal(2, in_tower((block,10),(block,6)), true, false)
final_goal(2, in_tower((block,10),(block,7)), true, false)
final_goal(2, in_tower((block,10),(block,8)), true, false)
final_goal(2, in_tower((block,10),(block,9)), true, false)
final_goal(2, in_tower((block,11),(block,1)), true, false)
final_goal(2, in_tower((block,11),(block,10)), true, false)
final_goal(2, in_tower((block,11),(block,11)), true, false)
final_goal(2, in_tower((block,11),(block,12)), true, false)
final_goal(2, in_tower((block,11),(block,13)), true, false)
final_goal(2, in_tower((block,11),(block,14)), true, false)
final_goal(2, in_tower((block,11),(block,15)), true, false)
final_goal(2, in_tower((block,11),(block,16)), true, false)
final_goal(2, in_tower((block,11),(block,17)), true, false)
final_goal(2, in_tower((block,11),(block,18)), true, false)
final_goal(2, in_tower((block,11),(block,2)), true, false)
final_goal(2, in_tower((block,11),(block,3)), true, false)
final_goal(2, in_tower((block,11),(block,4)), true, false)
final_goal(2, in_tower((block,11),(block,5)), true, false)
final_goal(2, in_tower((block,11),(block,6)), true, false)
final_goal(2, in_tower((block,11),(block,7)), true, false)
final_goal(2, in_tower((block,11),(block,8)), true, false)
final_goal(2, in_tower((block,11),(block,9)), true, false)
final_goal(2, in_tower((block,12),(block,1)), true, false)
final_goal(2, in_tower((block,12),(block,10)), false, false)
final_goal(2, in_tower((block,12),(block,11)), false, false)
final_goal(2, in_tower((block,12),(block,12)), false, false)
final_goal(2, in_tower((block,12),(block,13)), true, false)
final_goal(2, in_tower((block,12),(block,14)), true, false)
final_goal(2, in_tower((block,12),(block,15)), true, false)
final_goal(2, in_tower((block,12),(block,16)), true, false)
final_goal(2, in_tower((block,12),(block,17)), true, false)
final_goal(2, in_tower((block,12),(block,18)), true, false)
final_goal(2, in_tower((block,12),(block,2)), true, false)
final_goal(2, in_tower((block,12),(block,3)), true, false)
final_goal(2, in_tower((block,12),(block,4)), true, false)
final_goal(2, in_tower((block,12),(block,5)), true, false)
final_goal(2, in_tower((block,12),(block,6)), true, false)
final_goal(2, in_tower((block,12),(block,7)), true, false)
final_goal(2, in_tower((block,12),(block,8)), true, false)
final_goal(2, in_tower((block,12),(block,9)), true, false)
final_goal(2, in_tower((block,13),(block,1)), true, false)
final_goal(2, in_tower((block,13),(block,10)), true, false)
final_goal(2, in_tower((block,13),(block,11)), true, false)
final_goal(2, in_tower((block,13),(block,12)), true, false)
final_goal(2, in_tower((block,13),(block,13)), true, false)
final_goal(2, in_tower((block,13),(block,14)), true, false)
final_goal(2, in_tower((block,13),(block,15)), true, false)
final_goal(2, in_tower((block,13),(block,16)), true, false)
final_goal(2, in_tower((block,13),(block,17)), true, false)
final_goal(2, in_tower((block,13),(block,18)), true, false)
final_goal(2, in_tower((block,13),(block,2)), true, false)
final_goal(2, in_tower((block,13),(block,3)), true, false)
final_goal(2, in_tower((block,13),(block,4)), true, false)
final_goal(2, in_tower((block,13),(block,5)), true, false)
final_goal(2, in_tower((block,13),(block,6)), true, false)
final_goal(2, in_tower((block,13),(block,7)), true, false)
final_goal(2, in_tower((block,13),(block,8)), true, false)
final_goal(2, in_tower((block,13),(block,9)), true, false)
final_goal(2, in_tower((block,14),(block,1)), true, false)
final_goal(2, in_tower((block,14),(block,10)), true, false)
final_goal(2, in_tower((block,14),(block,11)), true, false)
final_goal(2, in_tower((block,14),(block,12)), true, false)
final_goal(2, in_tower((block,14),(block,13)), true, false)
final_goal(2, in_tower((block,14),(block,14)), true, false)
final_goal(2, in_tower((block,14),(block,15)), true, false)
final_goal(2, in_tower((block,14),(block,16)), true, false)
final_goal(2, in_tower((block,14),(block,17)), true, false)
final_goal(2, in_tower((block,14),(block,18)), true, false)
final_goal(2, in_tower((block,14),(block,2)), true, false)
final_goal(2, in_tower((block,14),(block,3)), true, false)
final_goal(2, in_tower((block,14),(block,4)), true, false)
final_goal(2, in_tower((block,14),(block,5)), true, false)
final_goal(2, in_tower((block,14),(block,6)), true, false)
final_goal(2, in_tower((block,14),(block,7)), true, false)
final_goal(2, in_tower((block,14),(block,8)), true, false)
final_goal(2, in_tower((block,14),(block,9)), true, false)
final_goal(2, in_tower((block,15),(block,1)), true, false)
final_goal(2, in_tower((block,15),(block,10)), true, false)
final_goal(2, in_tower((block,15),(block,11)), true, false)
final_goal(2, in_tower((block,15),(block,12)), true, false)
final_goal(2, in_tower((block,15),(block,13)), false, false)
final_goal(2, in_tower((block,15),(block,14)), false, false)
final_goal(2, in_tower((block,15),(block,15)), false, false)
final_goal(2, in_tower((block,15),(block,16)), true, false)
final_goal(2, in_tower((block,15),(block,17)), true, false)
final_goal(2, in_tower((block,15),(block,18)), true, false)
final_goal(2, in_tower((block,15),(block,2)), true, false)
final_goal(2, in_tower((block,15),(block,3)), true, false)
final_goal(2, in_tower((block,15),(block,4)), true, false)
final_goal(2, in_tower((block,15),(block,5)), true, false)
final_goal(2, in_tower((block,15),(block,6)), true, false)
final_goal(2, in_tower((block,15),(block,7)), true, false)
final_goal(2, in_tower((block,15),(block,8)), true, false)
final_goal(2, in_tower((block,15),(block,9)), true, false)
final_goal(2, in_tower((block,16),(block,1)), true, false)
final_goal(2, in_tower((block,16),(block,10)), true, false)
final_goal(2, in_tower((block,16),(block,11)), true, false)
final_goal(2, in_tower((block,16),(block,12)), true, false)
final_goal(2, in_tower((block,16),(block,13)), true, false)
final_goal(2, in_tower((block,16),(block,14)), true, false)
final_goal(2, in_tower((block,16),(block,15)), true, false)
final_goal(2, in_tower((block,16),(block,16)), true, false)
final_goal(2, in_tower((block,16),(block,17)), true, false)
final_goal(2, in_tower((block,16),(block,18)), true, false)
final_goal(2, in_tower((block,16),(block,2)), true, false)
final_goal(2, in_tower((block,16),(block,3)), true, false)
final_goal(2, in_tower((block,16),(block,4)), true, false)
final_goal(2, in_tower((block,16),(block,5)), true, false)
final_goal(2, in_tower((block,16),(block,6)), true, false)
final_goal(2, in_tower((block,16),(block,7)), true, false)
final_goal(2, in_tower((block,16),(block,8)), true, false)
final_goal(2, in_tower((block,16),(block,9)), true, false)
final_goal(2, in_tower((block,17),(block,1)), true, false)
final_goal(2, in_tower((block,17),(block,10)), true, false)
final_goal(2, in_tower((block,17),(block,11)), true, false)
final_goal(2, in_tower((block,17),(block,12)), true, false)
final_goal(2, in_tower((block,17),(block,13)), true, false)
final_goal(2, in_tower((block,17),(block,14)), true, false)
final_goal(2, in_tower((block,17),(block,15)), true, false)
final_goal(2, in_tower((block,17),(block,16)), true, false)
final_goal(2, in_tower((block,17),(block,17)), true, false)
final_goal(2, in_tower((block,17),(block,18)), true, false)
final_goal(2, in_tower((block,17),(block,2)), true, false)
final_goal(2, in_tower((block,17),(block,3)), true, false)
final_goal(2, in_tower((block,17),(block,4)), true, false)
final_goal(2, in_tower((block,17),(block,5)), true, false)
final_goal(2, in_tower((block,17),(block,6)), true, false)
final_goal(2, in_tower((block,17),(block,7)), true, false)
final_goal(2, in_tower((block,17),(block,8)), true, false)
final_goal(2, in_tower((block,17),(block,9)), true, false)
final_goal(2, in_tower((block,18),(block,1)), true, false)
final_goal(2, in_tower((block,18),(block,10)), true, false)
final_goal(2, in_tower((block,18),(block,11)), true, false)
final_goal(2, in_tower((block,18),(block,12)), true, false)
final_goal(2, in_tower((block,18),(block,13)), true, false)
final_goal(2, in_tower((block,18),(block,14)), true, false)
final_goal(2, in_tower((block,18),(block,15)), true, false)
final_goal(2, in_tower((block,18),(block,16)), false, false)
final_goal(2, in_tower((block,18),(block,17)), false, false)
final_goal(2, in_tower((block,18),(block,18)), false, false)
final_goal(2, in_tower((block,18),(block,2)), true, false)
final_goal(2, in_tower((block,18),(block,3)), true, false)
final_goal(2, in_tower((block,18),(block,4)), true, false)
final_goal(2, in_tower((block,18),(block,5)), true, false)
final_goal(2, in_tower((block,18),(block,6)), true, false)
final_goal(2, in_tower((block,18),(block,7)), true, false)
final_goal(2, in_tower((block,18),(block,8)), true, false)
final_goal(2, in_tower((block,18),(block,9)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,10)), true, false)
final_goal(2, in_tower((block,2),(block,11)), true, false)
final_goal(2, in_tower((block,2),(block,12)), true, false)
final_goal(2, in_tower((block,2),(block,13)), true, false)
final_goal(2, in_tower((block,2),(block,14)), true, false)
final_goal(2, in_tower((block,2),(block,15)), true, false)
final_goal(2, in_tower((block,2),(block,16)), true, false)
final_goal(2, in_tower((block,2),(block,17)), true, false)
final_goal(2, in_tower((block,2),(block,18)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,7)), true, false)
final_goal(2, in_tower((block,2),(block,8)), true, false)
final_goal(2, in_tower((block,2),(block,9)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,10)), true, false)
final_goal(2, in_tower((block,3),(block,11)), true, false)
final_goal(2, in_tower((block,3),(block,12)), true, false)
final_goal(2, in_tower((block,3),(block,13)), true, false)
final_goal(2, in_tower((block,3),(block,14)), true, false)
final_goal(2, in_tower((block,3),(block,15)), true, false)
final_goal(2, in_tower((block,3),(block,16)), true, false)
final_goal(2, in_tower((block,3),(block,17)), true, false)
final_goal(2, in_tower((block,3),(block,18)), true, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,7)), true, false)
final_goal(2, in_tower((block,3),(block,8)), true, false)
final_goal(2, in_tower((block,3),(block,9)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,10)), true, false)
final_goal(2, in_tower((block,4),(block,11)), true, false)
final_goal(2, in_tower((block,4),(block,12)), true, false)
final_goal(2, in_tower((block,4),(block,13)), true, false)
final_goal(2, in_tower((block,4),(block,14)), true, false)
final_goal(2, in_tower((block,4),(block,15)), true, false)
final_goal(2, in_tower((block,4),(block,16)), true, false)
final_goal(2, in_tower((block,4),(block,17)), true, false)
final_goal(2, in_tower((block,4),(block,18)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,7)), true, false)
final_goal(2, in_tower((block,4),(block,8)), true, false)
final_goal(2, in_tower((block,4),(block,9)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,10)), true, false)
final_goal(2, in_tower((block,5),(block,11)), true, false)
final_goal(2, in_tower((block,5),(block,12)), true, false)
final_goal(2, in_tower((block,5),(block,13)), true, false)
final_goal(2, in_tower((block,5),(block,14)), true, false)
final_goal(2, in_tower((block,5),(block,15)), true, false)
final_goal(2, in_tower((block,5),(block,16)), true, false)
final_goal(2, in_tower((block,5),(block,17)), true, false)
final_goal(2, in_tower((block,5),(block,18)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,7)), true, false)
final_goal(2, in_tower((block,5),(block,8)), true, false)
final_goal(2, in_tower((block,5),(block,9)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,10)), true, false)
final_goal(2, in_tower((block,6),(block,11)), true, false)
final_goal(2, in_tower((block,6),(block,12)), true, false)
final_goal(2, in_tower((block,6),(block,13)), true, false)
final_goal(2, in_tower((block,6),(block,14)), true, false)
final_goal(2, in_tower((block,6),(block,15)), true, false)
final_goal(2, in_tower((block,6),(block,16)), true, false)
final_goal(2, in_tower((block,6),(block,17)), true, false)
final_goal(2, in_tower((block,6),(block,18)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,7)), true, false)
final_goal(2, in_tower((block,6),(block,8)), true, false)
final_goal(2, in_tower((block,6),(block,9)), true, false)
final_goal(2, in_tower((block,7),(block,1)), true, false)
final_goal(2, in_tower((block,7),(block,10)), true, false)
final_goal(2, in_tower((block,7),(block,11)), true, false)
final_goal(2, in_tower((block,7),(block,12)), true, false)
final_goal(2, in_tower((block,7),(block,13)), true, false)
final_goal(2, in_tower((block,7),(block,14)), true, false)
final_goal(2, in_tower((block,7),(block,15)), true, false)
final_goal(2, in_tower((block,7),(block,16)), true, false)
final_goal(2, in_tower((block,7),(block,17)), true, false)
final_goal(2, in_tower((block,7),(block,18)), true, false)
final_goal(2, in_tower((block,7),(block,2)), true, false)
final_goal(2, in_tower((block,7),(block,3)), true, false)
final_goal(2, in_tower((block,7),(block,4)), true, false)
final_goal(2, in_tower((block,7),(block,5)), true, false)
final_goal(2, in_tower((block,7),(block,6)), true, false)
final_goal(2, in_tower((block,7),(block,7)), true, false)
final_goal(2, in_tower((block,7),(block,8)), true, false)
final_goal(2, in_tower((block,7),(block,9)), true, false)
final_goal(2, in_tower((block,8),(block,1)), true, false)
final_goal(2, in_tower((block,8),(block,10)), true, false)
final_goal(2, in_tower((block,8),(block,11)), true, false)
final_goal(2, in_tower((block,8),(block,12)), true, false)
final_goal(2, in_tower((block,8),(block,13)), true, false)
final_goal(2, in_tower((block,8),(block,14)), true, false)
final_goal(2, in_tower((block,8),(block,15)), true, false)
final_goal(2, in_tower((block,8),(block,16)), true, false)
final_goal(2, in_tower((block,8),(block,17)), true, false)
final_goal(2, in_tower((block,8),(block,18)), true, false)
final_goal(2, in_tower((block,8),(block,2)), true, false)
final_goal(2, in_tower((block,8),(block,3)), true, false)
final_goal(2, in_tower((block,8),(block,4)), true, false)
final_goal(2, in_tower((block,8),(block,5)), true, false)
final_goal(2, in_tower((block,8),(block,6)), true, false)
final_goal(2, in_tower((block,8),(block,7)), true, false)
final_goal(2, in_tower((block,8),(block,8)), true, false)
final_goal(2, in_tower((block,8),(block,9)), true, false)
final_goal(2, in_tower((block,9),(block,1)), true, false)
final_goal(2, in_tower((block,9),(block,10)), true, false)
final_goal(2, in_tower((block,9),(block,11)), true, false)
final_goal(2, in_tower((block,9),(block,12)), true, false)
final_goal(2, in_tower((block,9),(block,13)), true, false)
final_goal(2, in_tower((block,9),(block,14)), true, false)
final_goal(2, in_tower((block,9),(block,15)), true, false)
final_goal(2, in_tower((block,9),(block,16)), true, false)
final_goal(2, in_tower((block,9),(block,17)), true, false)
final_goal(2, in_tower((block,9),(block,18)), true, false)
final_goal(2, in_tower((block,9),(block,2)), true, false)
final_goal(2, in_tower((block,9),(block,3)), true, false)
final_goal(2, in_tower((block,9),(block,4)), true, false)
final_goal(2, in_tower((block,9),(block,5)), true, false)
final_goal(2, in_tower((block,9),(block,6)), true, false)
final_goal(2, in_tower((block,9),(block,7)), false, false)
final_goal(2, in_tower((block,9),(block,8)), false, false)
final_goal(2, in_tower((block,9),(block,9)), false, false)
final_goal(2, on((block,1)), (block,10), false)
final_goal(2, on((block,1)), (block,11), false)
final_goal(2, on((block,1)), (block,12), false)
final_goal(2, on((block,1)), (block,13), false)
final_goal(2, on((block,1)), (block,14), false)
final_goal(2, on((block,1)), (block,15), false)
final_goal(2, on((block,1)), (block,16), false)
final_goal(2, on((block,1)), (block,17), false)
final_goal(2, on((block,1)), (block,18), false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), (block,7), false)
final_goal(2, on((block,1)), (block,8), false)
final_goal(2, on((block,1)), (block,9), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_1_table_left, false)
final_goal(2, on((block,1)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,1)), puzzle_room_1_table_right, false)
final_goal(2, on((block,1)), puzzle_room_2_table_left, false)
final_goal(2, on((block,1)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,1)), puzzle_room_2_table_right, false)
final_goal(2, on((block,10)), (block,1), false)
final_goal(2, on((block,10)), (block,12), false)
final_goal(2, on((block,10)), (block,13), false)
final_goal(2, on((block,10)), (block,14), false)
final_goal(2, on((block,10)), (block,15), false)
final_goal(2, on((block,10)), (block,16), false)
final_goal(2, on((block,10)), (block,17), false)
final_goal(2, on((block,10)), (block,18), false)
final_goal(2, on((block,10)), (block,2), false)
final_goal(2, on((block,10)), (block,3), false)
final_goal(2, on((block,10)), (block,4), false)
final_goal(2, on((block,10)), (block,5), false)
final_goal(2, on((block,10)), (block,6), false)
final_goal(2, on((block,10)), (block,7), false)
final_goal(2, on((block,10)), (block,8), false)
final_goal(2, on((block,10)), (block,9), false)
final_goal(2, on((block,10)), nothing, false)
final_goal(2, on((block,10)), puzzle_room_1_table_left, false)
final_goal(2, on((block,10)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,10)), puzzle_room_1_table_right, false)
final_goal(2, on((block,10)), puzzle_room_2_table_left, false)
final_goal(2, on((block,10)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,10)), puzzle_room_2_table_right, false)
final_goal(2, on((block,11)), (block,1), false)
final_goal(2, on((block,11)), (block,10), false)
final_goal(2, on((block,11)), (block,13), false)
final_goal(2, on((block,11)), (block,14), false)
final_goal(2, on((block,11)), (block,15), false)
final_goal(2, on((block,11)), (block,16), false)
final_goal(2, on((block,11)), (block,17), false)
final_goal(2, on((block,11)), (block,18), false)
final_goal(2, on((block,11)), (block,2), false)
final_goal(2, on((block,11)), (block,3), false)
final_goal(2, on((block,11)), (block,4), false)
final_goal(2, on((block,11)), (block,5), false)
final_goal(2, on((block,11)), (block,6), false)
final_goal(2, on((block,11)), (block,7), false)
final_goal(2, on((block,11)), (block,8), false)
final_goal(2, on((block,11)), (block,9), false)
final_goal(2, on((block,11)), nothing, false)
final_goal(2, on((block,11)), puzzle_room_1_table_left, false)
final_goal(2, on((block,11)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,11)), puzzle_room_1_table_right, false)
final_goal(2, on((block,11)), puzzle_room_2_table_left, false)
final_goal(2, on((block,11)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,11)), puzzle_room_2_table_right, false)
final_goal(2, on((block,12)), (block,1), false)
final_goal(2, on((block,12)), (block,10), false)
final_goal(2, on((block,12)), (block,11), false)
final_goal(2, on((block,12)), (block,13), false)
final_goal(2, on((block,12)), (block,14), false)
final_goal(2, on((block,12)), (block,15), false)
final_goal(2, on((block,12)), (block,16), false)
final_goal(2, on((block,12)), (block,17), false)
final_goal(2, on((block,12)), (block,18), false)
final_goal(2, on((block,12)), (block,2), false)
final_goal(2, on((block,12)), (block,3), false)
final_goal(2, on((block,12)), (block,4), false)
final_goal(2, on((block,12)), (block,5), false)
final_goal(2, on((block,12)), (block,6), false)
final_goal(2, on((block,12)), (block,7), false)
final_goal(2, on((block,12)), (block,8), false)
final_goal(2, on((block,12)), (block,9), false)
final_goal(2, on((block,12)), nothing, false)
final_goal(2, on((block,12)), puzzle_room_1_table_left, false)
final_goal(2, on((block,12)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,12)), puzzle_room_1_table_right, false)
final_goal(2, on((block,12)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,12)), puzzle_room_2_table_right, false)
final_goal(2, on((block,13)), (block,1), false)
final_goal(2, on((block,13)), (block,10), false)
final_goal(2, on((block,13)), (block,11), false)
final_goal(2, on((block,13)), (block,12), false)
final_goal(2, on((block,13)), (block,15), false)
final_goal(2, on((block,13)), (block,16), false)
final_goal(2, on((block,13)), (block,17), false)
final_goal(2, on((block,13)), (block,18), false)
final_goal(2, on((block,13)), (block,2), false)
final_goal(2, on((block,13)), (block,3), false)
final_goal(2, on((block,13)), (block,4), false)
final_goal(2, on((block,13)), (block,5), false)
final_goal(2, on((block,13)), (block,6), false)
final_goal(2, on((block,13)), (block,7), false)
final_goal(2, on((block,13)), (block,8), false)
final_goal(2, on((block,13)), (block,9), false)
final_goal(2, on((block,13)), nothing, false)
final_goal(2, on((block,13)), puzzle_room_1_table_left, false)
final_goal(2, on((block,13)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,13)), puzzle_room_1_table_right, false)
final_goal(2, on((block,13)), puzzle_room_2_table_left, false)
final_goal(2, on((block,13)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,13)), puzzle_room_2_table_right, false)
final_goal(2, on((block,14)), (block,1), false)
final_goal(2, on((block,14)), (block,10), false)
final_goal(2, on((block,14)), (block,11), false)
final_goal(2, on((block,14)), (block,12), false)
final_goal(2, on((block,14)), (block,13), false)
final_goal(2, on((block,14)), (block,16), false)
final_goal(2, on((block,14)), (block,17), false)
final_goal(2, on((block,14)), (block,18), false)
final_goal(2, on((block,14)), (block,2), false)
final_goal(2, on((block,14)), (block,3), false)
final_goal(2, on((block,14)), (block,4), false)
final_goal(2, on((block,14)), (block,5), false)
final_goal(2, on((block,14)), (block,6), false)
final_goal(2, on((block,14)), (block,7), false)
final_goal(2, on((block,14)), (block,8), false)
final_goal(2, on((block,14)), (block,9), false)
final_goal(2, on((block,14)), nothing, false)
final_goal(2, on((block,14)), puzzle_room_1_table_left, false)
final_goal(2, on((block,14)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,14)), puzzle_room_1_table_right, false)
final_goal(2, on((block,14)), puzzle_room_2_table_left, false)
final_goal(2, on((block,14)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,14)), puzzle_room_2_table_right, false)
final_goal(2, on((block,15)), (block,1), false)
final_goal(2, on((block,15)), (block,10), false)
final_goal(2, on((block,15)), (block,11), false)
final_goal(2, on((block,15)), (block,12), false)
final_goal(2, on((block,15)), (block,13), false)
final_goal(2, on((block,15)), (block,14), false)
final_goal(2, on((block,15)), (block,16), false)
final_goal(2, on((block,15)), (block,17), false)
final_goal(2, on((block,15)), (block,18), false)
final_goal(2, on((block,15)), (block,2), false)
final_goal(2, on((block,15)), (block,3), false)
final_goal(2, on((block,15)), (block,4), false)
final_goal(2, on((block,15)), (block,5), false)
final_goal(2, on((block,15)), (block,6), false)
final_goal(2, on((block,15)), (block,7), false)
final_goal(2, on((block,15)), (block,8), false)
final_goal(2, on((block,15)), (block,9), false)
final_goal(2, on((block,15)), nothing, false)
final_goal(2, on((block,15)), puzzle_room_1_table_left, false)
final_goal(2, on((block,15)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,15)), puzzle_room_1_table_right, false)
final_goal(2, on((block,15)), puzzle_room_2_table_left, false)
final_goal(2, on((block,15)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,16)), (block,1), false)
final_goal(2, on((block,16)), (block,10), false)
final_goal(2, on((block,16)), (block,11), false)
final_goal(2, on((block,16)), (block,12), false)
final_goal(2, on((block,16)), (block,13), false)
final_goal(2, on((block,16)), (block,14), false)
final_goal(2, on((block,16)), (block,15), false)
final_goal(2, on((block,16)), (block,18), false)
final_goal(2, on((block,16)), (block,2), false)
final_goal(2, on((block,16)), (block,3), false)
final_goal(2, on((block,16)), (block,4), false)
final_goal(2, on((block,16)), (block,5), false)
final_goal(2, on((block,16)), (block,6), false)
final_goal(2, on((block,16)), (block,7), false)
final_goal(2, on((block,16)), (block,8), false)
final_goal(2, on((block,16)), (block,9), false)
final_goal(2, on((block,16)), nothing, false)
final_goal(2, on((block,16)), puzzle_room_1_table_left, false)
final_goal(2, on((block,16)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,16)), puzzle_room_1_table_right, false)
final_goal(2, on((block,16)), puzzle_room_2_table_left, false)
final_goal(2, on((block,16)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,16)), puzzle_room_2_table_right, false)
final_goal(2, on((block,17)), (block,1), false)
final_goal(2, on((block,17)), (block,10), false)
final_goal(2, on((block,17)), (block,11), false)
final_goal(2, on((block,17)), (block,12), false)
final_goal(2, on((block,17)), (block,13), false)
final_goal(2, on((block,17)), (block,14), false)
final_goal(2, on((block,17)), (block,15), false)
final_goal(2, on((block,17)), (block,16), false)
final_goal(2, on((block,17)), (block,2), false)
final_goal(2, on((block,17)), (block,3), false)
final_goal(2, on((block,17)), (block,4), false)
final_goal(2, on((block,17)), (block,5), false)
final_goal(2, on((block,17)), (block,6), false)
final_goal(2, on((block,17)), (block,7), false)
final_goal(2, on((block,17)), (block,8), false)
final_goal(2, on((block,17)), (block,9), false)
final_goal(2, on((block,17)), nothing, false)
final_goal(2, on((block,17)), puzzle_room_1_table_left, false)
final_goal(2, on((block,17)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,17)), puzzle_room_1_table_right, false)
final_goal(2, on((block,17)), puzzle_room_2_table_left, false)
final_goal(2, on((block,17)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,17)), puzzle_room_2_table_right, false)
final_goal(2, on((block,18)), (block,1), false)
final_goal(2, on((block,18)), (block,10), false)
final_goal(2, on((block,18)), (block,11), false)
final_goal(2, on((block,18)), (block,12), false)
final_goal(2, on((block,18)), (block,13), false)
final_goal(2, on((block,18)), (block,14), false)
final_goal(2, on((block,18)), (block,15), false)
final_goal(2, on((block,18)), (block,16), false)
final_goal(2, on((block,18)), (block,17), false)
final_goal(2, on((block,18)), (block,2), false)
final_goal(2, on((block,18)), (block,3), false)
final_goal(2, on((block,18)), (block,4), false)
final_goal(2, on((block,18)), (block,5), false)
final_goal(2, on((block,18)), (block,6), false)
final_goal(2, on((block,18)), (block,7), false)
final_goal(2, on((block,18)), (block,8), false)
final_goal(2, on((block,18)), (block,9), false)
final_goal(2, on((block,18)), nothing, false)
final_goal(2, on((block,18)), puzzle_room_1_table_left, false)
final_goal(2, on((block,18)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,18)), puzzle_room_1_table_right, false)
final_goal(2, on((block,18)), puzzle_room_2_table_left, false)
final_goal(2, on((block,18)), puzzle_room_2_table_right, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,10), false)
final_goal(2, on((block,2)), (block,11), false)
final_goal(2, on((block,2)), (block,12), false)
final_goal(2, on((block,2)), (block,13), false)
final_goal(2, on((block,2)), (block,14), false)
final_goal(2, on((block,2)), (block,15), false)
final_goal(2, on((block,2)), (block,16), false)
final_goal(2, on((block,2)), (block,17), false)
final_goal(2, on((block,2)), (block,18), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), (block,7), false)
final_goal(2, on((block,2)), (block,8), false)
final_goal(2, on((block,2)), (block,9), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_1_table_left, false)
final_goal(2, on((block,2)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,2)), puzzle_room_1_table_right, false)
final_goal(2, on((block,2)), puzzle_room_2_table_left, false)
final_goal(2, on((block,2)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,2)), puzzle_room_2_table_right, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,10), false)
final_goal(2, on((block,3)), (block,11), false)
final_goal(2, on((block,3)), (block,12), false)
final_goal(2, on((block,3)), (block,13), false)
final_goal(2, on((block,3)), (block,14), false)
final_goal(2, on((block,3)), (block,15), false)
final_goal(2, on((block,3)), (block,16), false)
final_goal(2, on((block,3)), (block,17), false)
final_goal(2, on((block,3)), (block,18), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), (block,7), false)
final_goal(2, on((block,3)), (block,8), false)
final_goal(2, on((block,3)), (block,9), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,3)), puzzle_room_1_table_right, false)
final_goal(2, on((block,3)), puzzle_room_2_table_left, false)
final_goal(2, on((block,3)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,3)), puzzle_room_2_table_right, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,10), false)
final_goal(2, on((block,4)), (block,11), false)
final_goal(2, on((block,4)), (block,12), false)
final_goal(2, on((block,4)), (block,13), false)
final_goal(2, on((block,4)), (block,14), false)
final_goal(2, on((block,4)), (block,15), false)
final_goal(2, on((block,4)), (block,16), false)
final_goal(2, on((block,4)), (block,17), false)
final_goal(2, on((block,4)), (block,18), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), (block,7), false)
final_goal(2, on((block,4)), (block,8), false)
final_goal(2, on((block,4)), (block,9), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_1_table_left, false)
final_goal(2, on((block,4)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,4)), puzzle_room_1_table_right, false)
final_goal(2, on((block,4)), puzzle_room_2_table_left, false)
final_goal(2, on((block,4)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,4)), puzzle_room_2_table_right, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,10), false)
final_goal(2, on((block,5)), (block,11), false)
final_goal(2, on((block,5)), (block,12), false)
final_goal(2, on((block,5)), (block,13), false)
final_goal(2, on((block,5)), (block,14), false)
final_goal(2, on((block,5)), (block,15), false)
final_goal(2, on((block,5)), (block,16), false)
final_goal(2, on((block,5)), (block,17), false)
final_goal(2, on((block,5)), (block,18), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,7), false)
final_goal(2, on((block,5)), (block,8), false)
final_goal(2, on((block,5)), (block,9), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_1_table_left, false)
final_goal(2, on((block,5)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,5)), puzzle_room_1_table_right, false)
final_goal(2, on((block,5)), puzzle_room_2_table_left, false)
final_goal(2, on((block,5)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,5)), puzzle_room_2_table_right, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,10), false)
final_goal(2, on((block,6)), (block,11), false)
final_goal(2, on((block,6)), (block,12), false)
final_goal(2, on((block,6)), (block,13), false)
final_goal(2, on((block,6)), (block,14), false)
final_goal(2, on((block,6)), (block,15), false)
final_goal(2, on((block,6)), (block,16), false)
final_goal(2, on((block,6)), (block,17), false)
final_goal(2, on((block,6)), (block,18), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), (block,7), false)
final_goal(2, on((block,6)), (block,8), false)
final_goal(2, on((block,6)), (block,9), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_1_table_left, false)
final_goal(2, on((block,6)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,6)), puzzle_room_2_table_left, false)
final_goal(2, on((block,6)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,6)), puzzle_room_2_table_right, false)
final_goal(2, on((block,7)), (block,1), false)
final_goal(2, on((block,7)), (block,10), false)
final_goal(2, on((block,7)), (block,11), false)
final_goal(2, on((block,7)), (block,12), false)
final_goal(2, on((block,7)), (block,13), false)
final_goal(2, on((block,7)), (block,14), false)
final_goal(2, on((block,7)), (block,15), false)
final_goal(2, on((block,7)), (block,16), false)
final_goal(2, on((block,7)), (block,17), false)
final_goal(2, on((block,7)), (block,18), false)
final_goal(2, on((block,7)), (block,2), false)
final_goal(2, on((block,7)), (block,3), false)
final_goal(2, on((block,7)), (block,4), false)
final_goal(2, on((block,7)), (block,5), false)
final_goal(2, on((block,7)), (block,6), false)
final_goal(2, on((block,7)), (block,9), false)
final_goal(2, on((block,7)), nothing, false)
final_goal(2, on((block,7)), puzzle_room_1_table_left, false)
final_goal(2, on((block,7)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,7)), puzzle_room_1_table_right, false)
final_goal(2, on((block,7)), puzzle_room_2_table_left, false)
final_goal(2, on((block,7)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,7)), puzzle_room_2_table_right, false)
final_goal(2, on((block,8)), (block,1), false)
final_goal(2, on((block,8)), (block,10), false)
final_goal(2, on((block,8)), (block,11), false)
final_goal(2, on((block,8)), (block,12), false)
final_goal(2, on((block,8)), (block,13), false)
final_goal(2, on((block,8)), (block,14), false)
final_goal(2, on((block,8)), (block,15), false)
final_goal(2, on((block,8)), (block,16), false)
final_goal(2, on((block,8)), (block,17), false)
final_goal(2, on((block,8)), (block,18), false)
final_goal(2, on((block,8)), (block,2), false)
final_goal(2, on((block,8)), (block,3), false)
final_goal(2, on((block,8)), (block,4), false)
final_goal(2, on((block,8)), (block,5), false)
final_goal(2, on((block,8)), (block,6), false)
final_goal(2, on((block,8)), (block,7), false)
final_goal(2, on((block,8)), nothing, false)
final_goal(2, on((block,8)), puzzle_room_1_table_left, false)
final_goal(2, on((block,8)), puzzle_room_1_table_middle, false)
final_goal(2, on((block,8)), puzzle_room_1_table_right, false)
final_goal(2, on((block,8)), puzzle_room_2_table_left, false)
final_goal(2, on((block,8)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,8)), puzzle_room_2_table_right, false)
final_goal(2, on((block,9)), (block,1), false)
final_goal(2, on((block,9)), (block,10), false)
final_goal(2, on((block,9)), (block,11), false)
final_goal(2, on((block,9)), (block,12), false)
final_goal(2, on((block,9)), (block,13), false)
final_goal(2, on((block,9)), (block,14), false)
final_goal(2, on((block,9)), (block,15), false)
final_goal(2, on((block,9)), (block,16), false)
final_goal(2, on((block,9)), (block,17), false)
final_goal(2, on((block,9)), (block,18), false)
final_goal(2, on((block,9)), (block,2), false)
final_goal(2, on((block,9)), (block,3), false)
final_goal(2, on((block,9)), (block,4), false)
final_goal(2, on((block,9)), (block,5), false)
final_goal(2, on((block,9)), (block,6), false)
final_goal(2, on((block,9)), (block,7), false)
final_goal(2, on((block,9)), (block,8), false)
final_goal(2, on((block,9)), nothing, false)
final_goal(2, on((block,9)), puzzle_room_1_table_left, false)
final_goal(2, on((block,9)), puzzle_room_1_table_right, false)
final_goal(2, on((block,9)), puzzle_room_2_table_left, false)
final_goal(2, on((block,9)), puzzle_room_2_table_middle, false)
final_goal(2, on((block,9)), puzzle_room_2_table_right, false)
final_goal(2, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(2, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(2, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(2, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(2, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(2, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(2, unordered_tower((block,9),puzzle_room_2_table), true, false)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(blue,puzzle_room_2_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_2_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_1_table), true, true)
final_goal(1, complete_tower(yellow,puzzle_room_2_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,10)), false, true)
final_goal(1, in_tower((block,1),(block,11)), false, true)
final_goal(1, in_tower((block,1),(block,12)), false, true)
final_goal(1, in_tower((block,1),(block,13)), false, true)
final_goal(1, in_tower((block,1),(block,14)), false, true)
final_goal(1, in_tower((block,1),(block,15)), false, true)
final_goal(1, in_tower((block,1),(block,16)), false, true)
final_goal(1, in_tower((block,1),(block,17)), false, true)
final_goal(1, in_tower((block,1),(block,18)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,10),(block,1)), false, true)
final_goal(1, in_tower((block,10),(block,10)), false, true)
final_goal(1, in_tower((block,10),(block,11)), false, true)
final_goal(1, in_tower((block,10),(block,12)), false, true)
final_goal(1, in_tower((block,10),(block,13)), false, true)
final_goal(1, in_tower((block,10),(block,14)), false, true)
final_goal(1, in_tower((block,10),(block,15)), false, true)
final_goal(1, in_tower((block,10),(block,16)), false, true)
final_goal(1, in_tower((block,10),(block,17)), false, true)
final_goal(1, in_tower((block,10),(block,18)), false, true)
final_goal(1, in_tower((block,10),(block,2)), false, true)
final_goal(1, in_tower((block,10),(block,3)), false, true)
final_goal(1, in_tower((block,10),(block,4)), false, true)
final_goal(1, in_tower((block,10),(block,5)), false, true)
final_goal(1, in_tower((block,10),(block,6)), false, true)
final_goal(1, in_tower((block,10),(block,7)), false, true)
final_goal(1, in_tower((block,10),(block,8)), false, true)
final_goal(1, in_tower((block,10),(block,9)), false, true)
final_goal(1, in_tower((block,11),(block,1)), false, true)
final_goal(1, in_tower((block,11),(block,10)), false, true)
final_goal(1, in_tower((block,11),(block,11)), false, true)
final_goal(1, in_tower((block,11),(block,12)), false, true)
final_goal(1, in_tower((block,11),(block,13)), false, true)
final_goal(1, in_tower((block,11),(block,14)), false, true)
final_goal(1, in_tower((block,11),(block,15)), false, true)
final_goal(1, in_tower((block,11),(block,16)), false, true)
final_goal(1, in_tower((block,11),(block,17)), false, true)
final_goal(1, in_tower((block,11),(block,18)), false, true)
final_goal(1, in_tower((block,11),(block,2)), false, true)
final_goal(1, in_tower((block,11),(block,3)), false, true)
final_goal(1, in_tower((block,11),(block,4)), false, true)
final_goal(1, in_tower((block,11),(block,5)), false, true)
final_goal(1, in_tower((block,11),(block,6)), false, true)
final_goal(1, in_tower((block,11),(block,7)), false, true)
final_goal(1, in_tower((block,11),(block,8)), false, true)
final_goal(1, in_tower((block,11),(block,9)), false, true)
final_goal(1, in_tower((block,12),(block,1)), false, true)
final_goal(1, in_tower((block,12),(block,10)), true, true)
final_goal(1, in_tower((block,12),(block,11)), true, true)
final_goal(1, in_tower((block,12),(block,12)), true, true)
final_goal(1, in_tower((block,12),(block,13)), false, true)
final_goal(1, in_tower((block,12),(block,14)), false, true)
final_goal(1, in_tower((block,12),(block,15)), false, true)
final_goal(1, in_tower((block,12),(block,16)), false, true)
final_goal(1, in_tower((block,12),(block,17)), false, true)
final_goal(1, in_tower((block,12),(block,18)), false, true)
final_goal(1, in_tower((block,12),(block,2)), false, true)
final_goal(1, in_tower((block,12),(block,3)), false, true)
final_goal(1, in_tower((block,12),(block,4)), false, true)
final_goal(1, in_tower((block,12),(block,5)), false, true)
final_goal(1, in_tower((block,12),(block,6)), false, true)
final_goal(1, in_tower((block,12),(block,7)), false, true)
final_goal(1, in_tower((block,12),(block,8)), false, true)
final_goal(1, in_tower((block,12),(block,9)), false, true)
final_goal(1, in_tower((block,13),(block,1)), false, true)
final_goal(1, in_tower((block,13),(block,10)), false, true)
final_goal(1, in_tower((block,13),(block,11)), false, true)
final_goal(1, in_tower((block,13),(block,12)), false, true)
final_goal(1, in_tower((block,13),(block,13)), false, true)
final_goal(1, in_tower((block,13),(block,14)), false, true)
final_goal(1, in_tower((block,13),(block,15)), false, true)
final_goal(1, in_tower((block,13),(block,16)), false, true)
final_goal(1, in_tower((block,13),(block,17)), false, true)
final_goal(1, in_tower((block,13),(block,18)), false, true)
final_goal(1, in_tower((block,13),(block,2)), false, true)
final_goal(1, in_tower((block,13),(block,3)), false, true)
final_goal(1, in_tower((block,13),(block,4)), false, true)
final_goal(1, in_tower((block,13),(block,5)), false, true)
final_goal(1, in_tower((block,13),(block,6)), false, true)
final_goal(1, in_tower((block,13),(block,7)), false, true)
final_goal(1, in_tower((block,13),(block,8)), false, true)
final_goal(1, in_tower((block,13),(block,9)), false, true)
final_goal(1, in_tower((block,14),(block,1)), false, true)
final_goal(1, in_tower((block,14),(block,10)), false, true)
final_goal(1, in_tower((block,14),(block,11)), false, true)
final_goal(1, in_tower((block,14),(block,12)), false, true)
final_goal(1, in_tower((block,14),(block,13)), false, true)
final_goal(1, in_tower((block,14),(block,14)), false, true)
final_goal(1, in_tower((block,14),(block,15)), false, true)
final_goal(1, in_tower((block,14),(block,16)), false, true)
final_goal(1, in_tower((block,14),(block,17)), false, true)
final_goal(1, in_tower((block,14),(block,18)), false, true)
final_goal(1, in_tower((block,14),(block,2)), false, true)
final_goal(1, in_tower((block,14),(block,3)), false, true)
final_goal(1, in_tower((block,14),(block,4)), false, true)
final_goal(1, in_tower((block,14),(block,5)), false, true)
final_goal(1, in_tower((block,14),(block,6)), false, true)
final_goal(1, in_tower((block,14),(block,7)), false, true)
final_goal(1, in_tower((block,14),(block,8)), false, true)
final_goal(1, in_tower((block,14),(block,9)), false, true)
final_goal(1, in_tower((block,15),(block,1)), false, true)
final_goal(1, in_tower((block,15),(block,10)), false, true)
final_goal(1, in_tower((block,15),(block,11)), false, true)
final_goal(1, in_tower((block,15),(block,12)), false, true)
final_goal(1, in_tower((block,15),(block,13)), true, true)
final_goal(1, in_tower((block,15),(block,14)), true, true)
final_goal(1, in_tower((block,15),(block,15)), true, true)
final_goal(1, in_tower((block,15),(block,16)), false, true)
final_goal(1, in_tower((block,15),(block,17)), false, true)
final_goal(1, in_tower((block,15),(block,18)), false, true)
final_goal(1, in_tower((block,15),(block,2)), false, true)
final_goal(1, in_tower((block,15),(block,3)), false, true)
final_goal(1, in_tower((block,15),(block,4)), false, true)
final_goal(1, in_tower((block,15),(block,5)), false, true)
final_goal(1, in_tower((block,15),(block,6)), false, true)
final_goal(1, in_tower((block,15),(block,7)), false, true)
final_goal(1, in_tower((block,15),(block,8)), false, true)
final_goal(1, in_tower((block,15),(block,9)), false, true)
final_goal(1, in_tower((block,16),(block,1)), false, true)
final_goal(1, in_tower((block,16),(block,10)), false, true)
final_goal(1, in_tower((block,16),(block,11)), false, true)
final_goal(1, in_tower((block,16),(block,12)), false, true)
final_goal(1, in_tower((block,16),(block,13)), false, true)
final_goal(1, in_tower((block,16),(block,14)), false, true)
final_goal(1, in_tower((block,16),(block,15)), false, true)
final_goal(1, in_tower((block,16),(block,16)), false, true)
final_goal(1, in_tower((block,16),(block,17)), false, true)
final_goal(1, in_tower((block,16),(block,18)), false, true)
final_goal(1, in_tower((block,16),(block,2)), false, true)
final_goal(1, in_tower((block,16),(block,3)), false, true)
final_goal(1, in_tower((block,16),(block,4)), false, true)
final_goal(1, in_tower((block,16),(block,5)), false, true)
final_goal(1, in_tower((block,16),(block,6)), false, true)
final_goal(1, in_tower((block,16),(block,7)), false, true)
final_goal(1, in_tower((block,16),(block,8)), false, true)
final_goal(1, in_tower((block,16),(block,9)), false, true)
final_goal(1, in_tower((block,17),(block,1)), false, true)
final_goal(1, in_tower((block,17),(block,10)), false, true)
final_goal(1, in_tower((block,17),(block,11)), false, true)
final_goal(1, in_tower((block,17),(block,12)), false, true)
final_goal(1, in_tower((block,17),(block,13)), false, true)
final_goal(1, in_tower((block,17),(block,14)), false, true)
final_goal(1, in_tower((block,17),(block,15)), false, true)
final_goal(1, in_tower((block,17),(block,16)), false, true)
final_goal(1, in_tower((block,17),(block,17)), false, true)
final_goal(1, in_tower((block,17),(block,18)), false, true)
final_goal(1, in_tower((block,17),(block,2)), false, true)
final_goal(1, in_tower((block,17),(block,3)), false, true)
final_goal(1, in_tower((block,17),(block,4)), false, true)
final_goal(1, in_tower((block,17),(block,5)), false, true)
final_goal(1, in_tower((block,17),(block,6)), false, true)
final_goal(1, in_tower((block,17),(block,7)), false, true)
final_goal(1, in_tower((block,17),(block,8)), false, true)
final_goal(1, in_tower((block,17),(block,9)), false, true)
final_goal(1, in_tower((block,18),(block,1)), false, true)
final_goal(1, in_tower((block,18),(block,10)), false, true)
final_goal(1, in_tower((block,18),(block,11)), false, true)
final_goal(1, in_tower((block,18),(block,12)), false, true)
final_goal(1, in_tower((block,18),(block,13)), false, true)
final_goal(1, in_tower((block,18),(block,14)), false, true)
final_goal(1, in_tower((block,18),(block,15)), false, true)
final_goal(1, in_tower((block,18),(block,16)), true, true)
final_goal(1, in_tower((block,18),(block,17)), true, true)
final_goal(1, in_tower((block,18),(block,18)), true, true)
final_goal(1, in_tower((block,18),(block,2)), false, true)
final_goal(1, in_tower((block,18),(block,3)), false, true)
final_goal(1, in_tower((block,18),(block,4)), false, true)
final_goal(1, in_tower((block,18),(block,5)), false, true)
final_goal(1, in_tower((block,18),(block,6)), false, true)
final_goal(1, in_tower((block,18),(block,7)), false, true)
final_goal(1, in_tower((block,18),(block,8)), false, true)
final_goal(1, in_tower((block,18),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,10)), false, true)
final_goal(1, in_tower((block,2),(block,11)), false, true)
final_goal(1, in_tower((block,2),(block,12)), false, true)
final_goal(1, in_tower((block,2),(block,13)), false, true)
final_goal(1, in_tower((block,2),(block,14)), false, true)
final_goal(1, in_tower((block,2),(block,15)), false, true)
final_goal(1, in_tower((block,2),(block,16)), false, true)
final_goal(1, in_tower((block,2),(block,17)), false, true)
final_goal(1, in_tower((block,2),(block,18)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,10)), false, true)
final_goal(1, in_tower((block,3),(block,11)), false, true)
final_goal(1, in_tower((block,3),(block,12)), false, true)
final_goal(1, in_tower((block,3),(block,13)), false, true)
final_goal(1, in_tower((block,3),(block,14)), false, true)
final_goal(1, in_tower((block,3),(block,15)), false, true)
final_goal(1, in_tower((block,3),(block,16)), false, true)
final_goal(1, in_tower((block,3),(block,17)), false, true)
final_goal(1, in_tower((block,3),(block,18)), false, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,10)), false, true)
final_goal(1, in_tower((block,4),(block,11)), false, true)
final_goal(1, in_tower((block,4),(block,12)), false, true)
final_goal(1, in_tower((block,4),(block,13)), false, true)
final_goal(1, in_tower((block,4),(block,14)), false, true)
final_goal(1, in_tower((block,4),(block,15)), false, true)
final_goal(1, in_tower((block,4),(block,16)), false, true)
final_goal(1, in_tower((block,4),(block,17)), false, true)
final_goal(1, in_tower((block,4),(block,18)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,10)), false, true)
final_goal(1, in_tower((block,5),(block,11)), false, true)
final_goal(1, in_tower((block,5),(block,12)), false, true)
final_goal(1, in_tower((block,5),(block,13)), false, true)
final_goal(1, in_tower((block,5),(block,14)), false, true)
final_goal(1, in_tower((block,5),(block,15)), false, true)
final_goal(1, in_tower((block,5),(block,16)), false, true)
final_goal(1, in_tower((block,5),(block,17)), false, true)
final_goal(1, in_tower((block,5),(block,18)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,10)), false, true)
final_goal(1, in_tower((block,6),(block,11)), false, true)
final_goal(1, in_tower((block,6),(block,12)), false, true)
final_goal(1, in_tower((block,6),(block,13)), false, true)
final_goal(1, in_tower((block,6),(block,14)), false, true)
final_goal(1, in_tower((block,6),(block,15)), false, true)
final_goal(1, in_tower((block,6),(block,16)), false, true)
final_goal(1, in_tower((block,6),(block,17)), false, true)
final_goal(1, in_tower((block,6),(block,18)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,10)), false, true)
final_goal(1, in_tower((block,7),(block,11)), false, true)
final_goal(1, in_tower((block,7),(block,12)), false, true)
final_goal(1, in_tower((block,7),(block,13)), false, true)
final_goal(1, in_tower((block,7),(block,14)), false, true)
final_goal(1, in_tower((block,7),(block,15)), false, true)
final_goal(1, in_tower((block,7),(block,16)), false, true)
final_goal(1, in_tower((block,7),(block,17)), false, true)
final_goal(1, in_tower((block,7),(block,18)), false, true)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,10)), false, true)
final_goal(1, in_tower((block,8),(block,11)), false, true)
final_goal(1, in_tower((block,8),(block,12)), false, true)
final_goal(1, in_tower((block,8),(block,13)), false, true)
final_goal(1, in_tower((block,8),(block,14)), false, true)
final_goal(1, in_tower((block,8),(block,15)), false, true)
final_goal(1, in_tower((block,8),(block,16)), false, true)
final_goal(1, in_tower((block,8),(block,17)), false, true)
final_goal(1, in_tower((block,8),(block,18)), false, true)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,10)), false, true)
final_goal(1, in_tower((block,9),(block,11)), false, true)
final_goal(1, in_tower((block,9),(block,12)), false, true)
final_goal(1, in_tower((block,9),(block,13)), false, true)
final_goal(1, in_tower((block,9),(block,14)), false, true)
final_goal(1, in_tower((block,9),(block,15)), false, true)
final_goal(1, in_tower((block,9),(block,16)), false, true)
final_goal(1, in_tower((block,9),(block,17)), false, true)
final_goal(1, in_tower((block,9),(block,18)), false, true)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,10)), (block,11), true)
final_goal(1, on((block,11)), (block,12), true)
final_goal(1, on((block,12)), puzzle_room_2_table_left, true)
final_goal(1, on((block,13)), (block,14), true)
final_goal(1, on((block,14)), (block,15), true)
final_goal(1, on((block,15)), puzzle_room_2_table_right, true)
final_goal(1, on((block,16)), (block,17), true)
final_goal(1, on((block,17)), (block,18), true)
final_goal(1, on((block,18)), puzzle_room_2_table_middle, true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_1_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_1_table_right, true)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,9)), puzzle_room_1_table_middle, true)
final_goal(1, tower_base((block,1),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,10),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,10),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,11),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,11),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,12),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,12),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,13),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,13),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,14),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,14),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,15),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,15),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,16),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,16),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,17),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,17),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,18),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,18),puzzle_room_2_table), true, true)
final_goal(1, tower_base((block,2),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,3),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,3),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,6),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,6),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,7),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,7),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_1_table), false, true)
final_goal(1, tower_base((block,8),puzzle_room_2_table), false, true)
final_goal(1, tower_base((block,9),puzzle_room_1_table), true, true)
final_goal(1, tower_base((block,9),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,10),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,10),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,11),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,11),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,12),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,12),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,13),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,13),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,14),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,14),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,15),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,15),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,16),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,16),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,17),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,17),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,18),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,18),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,7),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,8),puzzle_room_2_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_1_table), false, true)
final_goal(1, unordered_tower((block,9),puzzle_room_2_table), false, true)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_2_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_2_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_1_table), false, false)
final_goal(1, complete_tower(yellow,puzzle_room_2_table), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,10)), true, false)
final_goal(1, in_tower((block,1),(block,11)), true, false)
final_goal(1, in_tower((block,1),(block,12)), true, false)
final_goal(1, in_tower((block,1),(block,13)), true, false)
final_goal(1, in_tower((block,1),(block,14)), true, false)
final_goal(1, in_tower((block,1),(block,15)), true, false)
final_goal(1, in_tower((block,1),(block,16)), true, false)
final_goal(1, in_tower((block,1),(block,17)), true, false)
final_goal(1, in_tower((block,1),(block,18)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,10),(block,1)), true, false)
final_goal(1, in_tower((block,10),(block,10)), true, false)
final_goal(1, in_tower((block,10),(block,11)), true, false)
final_goal(1, in_tower((block,10),(block,12)), true, false)
final_goal(1, in_tower((block,10),(block,13)), true, false)
final_goal(1, in_tower((block,10),(block,14)), true, false)
final_goal(1, in_tower((block,10),(block,15)), true, false)
final_goal(1, in_tower((block,10),(block,16)), true, false)
final_goal(1, in_tower((block,10),(block,17)), true, false)
final_goal(1, in_tower((block,10),(block,18)), true, false)
final_goal(1, in_tower((block,10),(block,2)), true, false)
final_goal(1, in_tower((block,10),(block,3)), true, false)
final_goal(1, in_tower((block,10),(block,4)), true, false)
final_goal(1, in_tower((block,10),(block,5)), true, false)
final_goal(1, in_tower((block,10),(block,6)), true, false)
final_goal(1, in_tower((block,10),(block,7)), true, false)
final_goal(1, in_tower((block,10),(block,8)), true, false)
final_goal(1, in_tower((block,10),(block,9)), true, false)
final_goal(1, in_tower((block,11),(block,1)), true, false)
final_goal(1, in_tower((block,11),(block,10)), true, false)
final_goal(1, in_tower((block,11),(block,11)), true, false)
final_goal(1, in_tower((block,11),(block,12)), true, false)
final_goal(1, in_tower((block,11),(block,13)), true, false)
final_goal(1, in_tower((block,11),(block,14)), true, false)
final_goal(1, in_tower((block,11),(block,15)), true, false)
final_goal(1, in_tower((block,11),(block,16)), true, false)
final_goal(1, in_tower((block,11),(block,17)), true, false)
final_goal(1, in_tower((block,11),(block,18)), true, false)
final_goal(1, in_tower((block,11),(block,2)), true, false)
final_goal(1, in_tower((block,11),(block,3)), true, false)
final_goal(1, in_tower((block,11),(block,4)), true, false)
final_goal(1, in_tower((block,11),(block,5)), true, false)
final_goal(1, in_tower((block,11),(block,6)), true, false)
final_goal(1, in_tower((block,11),(block,7)), true, false)
final_goal(1, in_tower((block,11),(block,8)), true, false)
final_goal(1, in_tower((block,11),(block,9)), true, false)
final_goal(1, in_tower((block,12),(block,1)), true, false)
final_goal(1, in_tower((block,12),(block,10)), false, false)
final_goal(1, in_tower((block,12),(block,11)), false, false)
final_goal(1, in_tower((block,12),(block,12)), false, false)
final_goal(1, in_tower((block,12),(block,13)), true, false)
final_goal(1, in_tower((block,12),(block,14)), true, false)
final_goal(1, in_tower((block,12),(block,15)), true, false)
final_goal(1, in_tower((block,12),(block,16)), true, false)
final_goal(1, in_tower((block,12),(block,17)), true, false)
final_goal(1, in_tower((block,12),(block,18)), true, false)
final_goal(1, in_tower((block,12),(block,2)), true, false)
final_goal(1, in_tower((block,12),(block,3)), true, false)
final_goal(1, in_tower((block,12),(block,4)), true, false)
final_goal(1, in_tower((block,12),(block,5)), true, false)
final_goal(1, in_tower((block,12),(block,6)), true, false)
final_goal(1, in_tower((block,12),(block,7)), true, false)
final_goal(1, in_tower((block,12),(block,8)), true, false)
final_goal(1, in_tower((block,12),(block,9)), true, false)
final_goal(1, in_tower((block,13),(block,1)), true, false)
final_goal(1, in_tower((block,13),(block,10)), true, false)
final_goal(1, in_tower((block,13),(block,11)), true, false)
final_goal(1, in_tower((block,13),(block,12)), true, false)
final_goal(1, in_tower((block,13),(block,13)), true, false)
final_goal(1, in_tower((block,13),(block,14)), true, false)
final_goal(1, in_tower((block,13),(block,15)), true, false)
final_goal(1, in_tower((block,13),(block,16)), true, false)
final_goal(1, in_tower((block,13),(block,17)), true, false)
final_goal(1, in_tower((block,13),(block,18)), true, false)
final_goal(1, in_tower((block,13),(block,2)), true, false)
final_goal(1, in_tower((block,13),(block,3)), true, false)
final_goal(1, in_tower((block,13),(block,4)), true, false)
final_goal(1, in_tower((block,13),(block,5)), true, false)
final_goal(1, in_tower((block,13),(block,6)), true, false)
final_goal(1, in_tower((block,13),(block,7)), true, false)
final_goal(1, in_tower((block,13),(block,8)), true, false)
final_goal(1, in_tower((block,13),(block,9)), true, false)
final_goal(1, in_tower((block,14),(block,1)), true, false)
final_goal(1, in_tower((block,14),(block,10)), true, false)
final_goal(1, in_tower((block,14),(block,11)), true, false)
final_goal(1, in_tower((block,14),(block,12)), true, false)
final_goal(1, in_tower((block,14),(block,13)), true, false)
final_goal(1, in_tower((block,14),(block,14)), true, false)
final_goal(1, in_tower((block,14),(block,15)), true, false)
final_goal(1, in_tower((block,14),(block,16)), true, false)
final_goal(1, in_tower((block,14),(block,17)), true, false)
final_goal(1, in_tower((block,14),(block,18)), true, false)
final_goal(1, in_tower((block,14),(block,2)), true, false)
final_goal(1, in_tower((block,14),(block,3)), true, false)
final_goal(1, in_tower((block,14),(block,4)), true, false)
final_goal(1, in_tower((block,14),(block,5)), true, false)
final_goal(1, in_tower((block,14),(block,6)), true, false)
final_goal(1, in_tower((block,14),(block,7)), true, false)
final_goal(1, in_tower((block,14),(block,8)), true, false)
final_goal(1, in_tower((block,14),(block,9)), true, false)
final_goal(1, in_tower((block,15),(block,1)), true, false)
final_goal(1, in_tower((block,15),(block,10)), true, false)
final_goal(1, in_tower((block,15),(block,11)), true, false)
final_goal(1, in_tower((block,15),(block,12)), true, false)
final_goal(1, in_tower((block,15),(block,13)), false, false)
final_goal(1, in_tower((block,15),(block,14)), false, false)
final_goal(1, in_tower((block,15),(block,15)), false, false)
final_goal(1, in_tower((block,15),(block,16)), true, false)
final_goal(1, in_tower((block,15),(block,17)), true, false)
final_goal(1, in_tower((block,15),(block,18)), true, false)
final_goal(1, in_tower((block,15),(block,2)), true, false)
final_goal(1, in_tower((block,15),(block,3)), true, false)
final_goal(1, in_tower((block,15),(block,4)), true, false)
final_goal(1, in_tower((block,15),(block,5)), true, false)
final_goal(1, in_tower((block,15),(block,6)), true, false)
final_goal(1, in_tower((block,15),(block,7)), true, false)
final_goal(1, in_tower((block,15),(block,8)), true, false)
final_goal(1, in_tower((block,15),(block,9)), true, false)
final_goal(1, in_tower((block,16),(block,1)), true, false)
final_goal(1, in_tower((block,16),(block,10)), true, false)
final_goal(1, in_tower((block,16),(block,11)), true, false)
final_goal(1, in_tower((block,16),(block,12)), true, false)
final_goal(1, in_tower((block,16),(block,13)), true, false)
final_goal(1, in_tower((block,16),(block,14)), true, false)
final_goal(1, in_tower((block,16),(block,15)), true, false)
final_goal(1, in_tower((block,16),(block,16)), true, false)
final_goal(1, in_tower((block,16),(block,17)), true, false)
final_goal(1, in_tower((block,16),(block,18)), true, false)
final_goal(1, in_tower((block,16),(block,2)), true, false)
final_goal(1, in_tower((block,16),(block,3)), true, false)
final_goal(1, in_tower((block,16),(block,4)), true, false)
final_goal(1, in_tower((block,16),(block,5)), true, false)
final_goal(1, in_tower((block,16),(block,6)), true, false)
final_goal(1, in_tower((block,16),(block,7)), true, false)
final_goal(1, in_tower((block,16),(block,8)), true, false)
final_goal(1, in_tower((block,16),(block,9)), true, false)
final_goal(1, in_tower((block,17),(block,1)), true, false)
final_goal(1, in_tower((block,17),(block,10)), true, false)
final_goal(1, in_tower((block,17),(block,11)), true, false)
final_goal(1, in_tower((block,17),(block,12)), true, false)
final_goal(1, in_tower((block,17),(block,13)), true, false)
final_goal(1, in_tower((block,17),(block,14)), true, false)
final_goal(1, in_tower((block,17),(block,15)), true, false)
final_goal(1, in_tower((block,17),(block,16)), true, false)
final_goal(1, in_tower((block,17),(block,17)), true, false)
final_goal(1, in_tower((block,17),(block,18)), true, false)
final_goal(1, in_tower((block,17),(block,2)), true, false)
final_goal(1, in_tower((block,17),(block,3)), true, false)
final_goal(1, in_tower((block,17),(block,4)), true, false)
final_goal(1, in_tower((block,17),(block,5)), true, false)
final_goal(1, in_tower((block,17),(block,6)), true, false)
final_goal(1, in_tower((block,17),(block,7)), true, false)
final_goal(1, in_tower((block,17),(block,8)), true, false)
final_goal(1, in_tower((block,17),(block,9)), true, false)
final_goal(1, in_tower((block,18),(block,1)), true, false)
final_goal(1, in_tower((block,18),(block,10)), true, false)
final_goal(1, in_tower((block,18),(block,11)), true, false)
final_goal(1, in_tower((block,18),(block,12)), true, false)
final_goal(1, in_tower((block,18),(block,13)), true, false)
final_goal(1, in_tower((block,18),(block,14)), true, false)
final_goal(1, in_tower((block,18),(block,15)), true, false)
final_goal(1, in_tower((block,18),(block,16)), false, false)
final_goal(1, in_tower((block,18),(block,17)), false, false)
final_goal(1, in_tower((block,18),(block,18)), false, false)
final_goal(1, in_tower((block,18),(block,2)), true, false)
final_goal(1, in_tower((block,18),(block,3)), true, false)
final_goal(1, in_tower((block,18),(block,4)), true, false)
final_goal(1, in_tower((block,18),(block,5)), true, false)
final_goal(1, in_tower((block,18),(block,6)), true, false)
final_goal(1, in_tower((block,18),(block,7)), true, false)
final_goal(1, in_tower((block,18),(block,8)), true, false)
final_goal(1, in_tower((block,18),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,10)), true, false)
final_goal(1, in_tower((block,2),(block,11)), true, false)
final_goal(1, in_tower((block,2),(block,12)), true, false)
final_goal(1, in_tower((block,2),(block,13)), true, false)
final_goal(1, in_tower((block,2),(block,14)), true, false)
final_goal(1, in_tower((block,2),(block,15)), true, false)
final_goal(1, in_tower((block,2),(block,16)), true, false)
final_goal(1, in_tower((block,2),(block,17)), true, false)
final_goal(1, in_tower((block,2),(block,18)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,10)), true, false)
final_goal(1, in_tower((block,3),(block,11)), true, false)
final_goal(1, in_tower((block,3),(block,12)), true, false)
final_goal(1, in_tower((block,3),(block,13)), true, false)
final_goal(1, in_tower((block,3),(block,14)), true, false)
final_goal(1, in_tower((block,3),(block,15)), true, false)
final_goal(1, in_tower((block,3),(block,16)), true, false)
final_goal(1, in_tower((block,3),(block,17)), true, false)
final_goal(1, in_tower((block,3),(block,18)), true, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,10)), true, false)
final_goal(1, in_tower((block,4),(block,11)), true, false)
final_goal(1, in_tower((block,4),(block,12)), true, false)
final_goal(1, in_tower((block,4),(block,13)), true, false)
final_goal(1, in_tower((block,4),(block,14)), true, false)
final_goal(1, in_tower((block,4),(block,15)), true, false)
final_goal(1, in_tower((block,4),(block,16)), true, false)
final_goal(1, in_tower((block,4),(block,17)), true, false)
final_goal(1, in_tower((block,4),(block,18)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,10)), true, false)
final_goal(1, in_tower((block,5),(block,11)), true, false)
final_goal(1, in_tower((block,5),(block,12)), true, false)
final_goal(1, in_tower((block,5),(block,13)), true, false)
final_goal(1, in_tower((block,5),(block,14)), true, false)
final_goal(1, in_tower((block,5),(block,15)), true, false)
final_goal(1, in_tower((block,5),(block,16)), true, false)
final_goal(1, in_tower((block,5),(block,17)), true, false)
final_goal(1, in_tower((block,5),(block,18)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,10)), true, false)
final_goal(1, in_tower((block,6),(block,11)), true, false)
final_goal(1, in_tower((block,6),(block,12)), true, false)
final_goal(1, in_tower((block,6),(block,13)), true, false)
final_goal(1, in_tower((block,6),(block,14)), true, false)
final_goal(1, in_tower((block,6),(block,15)), true, false)
final_goal(1, in_tower((block,6),(block,16)), true, false)
final_goal(1, in_tower((block,6),(block,17)), true, false)
final_goal(1, in_tower((block,6),(block,18)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,10)), true, false)
final_goal(1, in_tower((block,7),(block,11)), true, false)
final_goal(1, in_tower((block,7),(block,12)), true, false)
final_goal(1, in_tower((block,7),(block,13)), true, false)
final_goal(1, in_tower((block,7),(block,14)), true, false)
final_goal(1, in_tower((block,7),(block,15)), true, false)
final_goal(1, in_tower((block,7),(block,16)), true, false)
final_goal(1, in_tower((block,7),(block,17)), true, false)
final_goal(1, in_tower((block,7),(block,18)), true, false)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,10)), true, false)
final_goal(1, in_tower((block,8),(block,11)), true, false)
final_goal(1, in_tower((block,8),(block,12)), true, false)
final_goal(1, in_tower((block,8),(block,13)), true, false)
final_goal(1, in_tower((block,8),(block,14)), true, false)
final_goal(1, in_tower((block,8),(block,15)), true, false)
final_goal(1, in_tower((block,8),(block,16)), true, false)
final_goal(1, in_tower((block,8),(block,17)), true, false)
final_goal(1, in_tower((block,8),(block,18)), true, false)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,10)), true, false)
final_goal(1, in_tower((block,9),(block,11)), true, false)
final_goal(1, in_tower((block,9),(block,12)), true, false)
final_goal(1, in_tower((block,9),(block,13)), true, false)
final_goal(1, in_tower((block,9),(block,14)), true, false)
final_goal(1, in_tower((block,9),(block,15)), true, false)
final_goal(1, in_tower((block,9),(block,16)), true, false)
final_goal(1, in_tower((block,9),(block,17)), true, false)
final_goal(1, in_tower((block,9),(block,18)), true, false)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, on((block,1)), (block,10), false)
final_goal(1, on((block,1)), (block,11), false)
final_goal(1, on((block,1)), (block,12), false)
final_goal(1, on((block,1)), (block,13), false)
final_goal(1, on((block,1)), (block,14), false)
final_goal(1, on((block,1)), (block,15), false)
final_goal(1, on((block,1)), (block,16), false)
final_goal(1, on((block,1)), (block,17), false)
final_goal(1, on((block,1)), (block,18), false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_1_table_left, false)
final_goal(1, on((block,1)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_1_table_right, false)
final_goal(1, on((block,1)), puzzle_room_2_table_left, false)
final_goal(1, on((block,1)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,1)), puzzle_room_2_table_right, false)
final_goal(1, on((block,10)), (block,1), false)
final_goal(1, on((block,10)), (block,12), false)
final_goal(1, on((block,10)), (block,13), false)
final_goal(1, on((block,10)), (block,14), false)
final_goal(1, on((block,10)), (block,15), false)
final_goal(1, on((block,10)), (block,16), false)
final_goal(1, on((block,10)), (block,17), false)
final_goal(1, on((block,10)), (block,18), false)
final_goal(1, on((block,10)), (block,2), false)
final_goal(1, on((block,10)), (block,3), false)
final_goal(1, on((block,10)), (block,4), false)
final_goal(1, on((block,10)), (block,5), false)
final_goal(1, on((block,10)), (block,6), false)
final_goal(1, on((block,10)), (block,7), false)
final_goal(1, on((block,10)), (block,8), false)
final_goal(1, on((block,10)), (block,9), false)
final_goal(1, on((block,10)), nothing, false)
final_goal(1, on((block,10)), puzzle_room_1_table_left, false)
final_goal(1, on((block,10)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,10)), puzzle_room_1_table_right, false)
final_goal(1, on((block,10)), puzzle_room_2_table_left, false)
final_goal(1, on((block,10)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,10)), puzzle_room_2_table_right, false)
final_goal(1, on((block,11)), (block,1), false)
final_goal(1, on((block,11)), (block,10), false)
final_goal(1, on((block,11)), (block,13), false)
final_goal(1, on((block,11)), (block,14), false)
final_goal(1, on((block,11)), (block,15), false)
final_goal(1, on((block,11)), (block,16), false)
final_goal(1, on((block,11)), (block,17), false)
final_goal(1, on((block,11)), (block,18), false)
final_goal(1, on((block,11)), (block,2), false)
final_goal(1, on((block,11)), (block,3), false)
final_goal(1, on((block,11)), (block,4), false)
final_goal(1, on((block,11)), (block,5), false)
final_goal(1, on((block,11)), (block,6), false)
final_goal(1, on((block,11)), (block,7), false)
final_goal(1, on((block,11)), (block,8), false)
final_goal(1, on((block,11)), (block,9), false)
final_goal(1, on((block,11)), nothing, false)
final_goal(1, on((block,11)), puzzle_room_1_table_left, false)
final_goal(1, on((block,11)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,11)), puzzle_room_1_table_right, false)
final_goal(1, on((block,11)), puzzle_room_2_table_left, false)
final_goal(1, on((block,11)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,11)), puzzle_room_2_table_right, false)
final_goal(1, on((block,12)), (block,1), false)
final_goal(1, on((block,12)), (block,10), false)
final_goal(1, on((block,12)), (block,11), false)
final_goal(1, on((block,12)), (block,13), false)
final_goal(1, on((block,12)), (block,14), false)
final_goal(1, on((block,12)), (block,15), false)
final_goal(1, on((block,12)), (block,16), false)
final_goal(1, on((block,12)), (block,17), false)
final_goal(1, on((block,12)), (block,18), false)
final_goal(1, on((block,12)), (block,2), false)
final_goal(1, on((block,12)), (block,3), false)
final_goal(1, on((block,12)), (block,4), false)
final_goal(1, on((block,12)), (block,5), false)
final_goal(1, on((block,12)), (block,6), false)
final_goal(1, on((block,12)), (block,7), false)
final_goal(1, on((block,12)), (block,8), false)
final_goal(1, on((block,12)), (block,9), false)
final_goal(1, on((block,12)), nothing, false)
final_goal(1, on((block,12)), puzzle_room_1_table_left, false)
final_goal(1, on((block,12)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,12)), puzzle_room_1_table_right, false)
final_goal(1, on((block,12)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,12)), puzzle_room_2_table_right, false)
final_goal(1, on((block,13)), (block,1), false)
final_goal(1, on((block,13)), (block,10), false)
final_goal(1, on((block,13)), (block,11), false)
final_goal(1, on((block,13)), (block,12), false)
final_goal(1, on((block,13)), (block,15), false)
final_goal(1, on((block,13)), (block,16), false)
final_goal(1, on((block,13)), (block,17), false)
final_goal(1, on((block,13)), (block,18), false)
final_goal(1, on((block,13)), (block,2), false)
final_goal(1, on((block,13)), (block,3), false)
final_goal(1, on((block,13)), (block,4), false)
final_goal(1, on((block,13)), (block,5), false)
final_goal(1, on((block,13)), (block,6), false)
final_goal(1, on((block,13)), (block,7), false)
final_goal(1, on((block,13)), (block,8), false)
final_goal(1, on((block,13)), (block,9), false)
final_goal(1, on((block,13)), nothing, false)
final_goal(1, on((block,13)), puzzle_room_1_table_left, false)
final_goal(1, on((block,13)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,13)), puzzle_room_1_table_right, false)
final_goal(1, on((block,13)), puzzle_room_2_table_left, false)
final_goal(1, on((block,13)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,13)), puzzle_room_2_table_right, false)
final_goal(1, on((block,14)), (block,1), false)
final_goal(1, on((block,14)), (block,10), false)
final_goal(1, on((block,14)), (block,11), false)
final_goal(1, on((block,14)), (block,12), false)
final_goal(1, on((block,14)), (block,13), false)
final_goal(1, on((block,14)), (block,16), false)
final_goal(1, on((block,14)), (block,17), false)
final_goal(1, on((block,14)), (block,18), false)
final_goal(1, on((block,14)), (block,2), false)
final_goal(1, on((block,14)), (block,3), false)
final_goal(1, on((block,14)), (block,4), false)
final_goal(1, on((block,14)), (block,5), false)
final_goal(1, on((block,14)), (block,6), false)
final_goal(1, on((block,14)), (block,7), false)
final_goal(1, on((block,14)), (block,8), false)
final_goal(1, on((block,14)), (block,9), false)
final_goal(1, on((block,14)), nothing, false)
final_goal(1, on((block,14)), puzzle_room_1_table_left, false)
final_goal(1, on((block,14)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,14)), puzzle_room_1_table_right, false)
final_goal(1, on((block,14)), puzzle_room_2_table_left, false)
final_goal(1, on((block,14)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,14)), puzzle_room_2_table_right, false)
final_goal(1, on((block,15)), (block,1), false)
final_goal(1, on((block,15)), (block,10), false)
final_goal(1, on((block,15)), (block,11), false)
final_goal(1, on((block,15)), (block,12), false)
final_goal(1, on((block,15)), (block,13), false)
final_goal(1, on((block,15)), (block,14), false)
final_goal(1, on((block,15)), (block,16), false)
final_goal(1, on((block,15)), (block,17), false)
final_goal(1, on((block,15)), (block,18), false)
final_goal(1, on((block,15)), (block,2), false)
final_goal(1, on((block,15)), (block,3), false)
final_goal(1, on((block,15)), (block,4), false)
final_goal(1, on((block,15)), (block,5), false)
final_goal(1, on((block,15)), (block,6), false)
final_goal(1, on((block,15)), (block,7), false)
final_goal(1, on((block,15)), (block,8), false)
final_goal(1, on((block,15)), (block,9), false)
final_goal(1, on((block,15)), nothing, false)
final_goal(1, on((block,15)), puzzle_room_1_table_left, false)
final_goal(1, on((block,15)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,15)), puzzle_room_1_table_right, false)
final_goal(1, on((block,15)), puzzle_room_2_table_left, false)
final_goal(1, on((block,15)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,16)), (block,1), false)
final_goal(1, on((block,16)), (block,10), false)
final_goal(1, on((block,16)), (block,11), false)
final_goal(1, on((block,16)), (block,12), false)
final_goal(1, on((block,16)), (block,13), false)
final_goal(1, on((block,16)), (block,14), false)
final_goal(1, on((block,16)), (block,15), false)
final_goal(1, on((block,16)), (block,18), false)
final_goal(1, on((block,16)), (block,2), false)
final_goal(1, on((block,16)), (block,3), false)
final_goal(1, on((block,16)), (block,4), false)
final_goal(1, on((block,16)), (block,5), false)
final_goal(1, on((block,16)), (block,6), false)
final_goal(1, on((block,16)), (block,7), false)
final_goal(1, on((block,16)), (block,8), false)
final_goal(1, on((block,16)), (block,9), false)
final_goal(1, on((block,16)), nothing, false)
final_goal(1, on((block,16)), puzzle_room_1_table_left, false)
final_goal(1, on((block,16)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,16)), puzzle_room_1_table_right, false)
final_goal(1, on((block,16)), puzzle_room_2_table_left, false)
final_goal(1, on((block,16)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,16)), puzzle_room_2_table_right, false)
final_goal(1, on((block,17)), (block,1), false)
final_goal(1, on((block,17)), (block,10), false)
final_goal(1, on((block,17)), (block,11), false)
final_goal(1, on((block,17)), (block,12), false)
final_goal(1, on((block,17)), (block,13), false)
final_goal(1, on((block,17)), (block,14), false)
final_goal(1, on((block,17)), (block,15), false)
final_goal(1, on((block,17)), (block,16), false)
final_goal(1, on((block,17)), (block,2), false)
final_goal(1, on((block,17)), (block,3), false)
final_goal(1, on((block,17)), (block,4), false)
final_goal(1, on((block,17)), (block,5), false)
final_goal(1, on((block,17)), (block,6), false)
final_goal(1, on((block,17)), (block,7), false)
final_goal(1, on((block,17)), (block,8), false)
final_goal(1, on((block,17)), (block,9), false)
final_goal(1, on((block,17)), nothing, false)
final_goal(1, on((block,17)), puzzle_room_1_table_left, false)
final_goal(1, on((block,17)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,17)), puzzle_room_1_table_right, false)
final_goal(1, on((block,17)), puzzle_room_2_table_left, false)
final_goal(1, on((block,17)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,17)), puzzle_room_2_table_right, false)
final_goal(1, on((block,18)), (block,1), false)
final_goal(1, on((block,18)), (block,10), false)
final_goal(1, on((block,18)), (block,11), false)
final_goal(1, on((block,18)), (block,12), false)
final_goal(1, on((block,18)), (block,13), false)
final_goal(1, on((block,18)), (block,14), false)
final_goal(1, on((block,18)), (block,15), false)
final_goal(1, on((block,18)), (block,16), false)
final_goal(1, on((block,18)), (block,17), false)
final_goal(1, on((block,18)), (block,2), false)
final_goal(1, on((block,18)), (block,3), false)
final_goal(1, on((block,18)), (block,4), false)
final_goal(1, on((block,18)), (block,5), false)
final_goal(1, on((block,18)), (block,6), false)
final_goal(1, on((block,18)), (block,7), false)
final_goal(1, on((block,18)), (block,8), false)
final_goal(1, on((block,18)), (block,9), false)
final_goal(1, on((block,18)), nothing, false)
final_goal(1, on((block,18)), puzzle_room_1_table_left, false)
final_goal(1, on((block,18)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,18)), puzzle_room_1_table_right, false)
final_goal(1, on((block,18)), puzzle_room_2_table_left, false)
final_goal(1, on((block,18)), puzzle_room_2_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,10), false)
final_goal(1, on((block,2)), (block,11), false)
final_goal(1, on((block,2)), (block,12), false)
final_goal(1, on((block,2)), (block,13), false)
final_goal(1, on((block,2)), (block,14), false)
final_goal(1, on((block,2)), (block,15), false)
final_goal(1, on((block,2)), (block,16), false)
final_goal(1, on((block,2)), (block,17), false)
final_goal(1, on((block,2)), (block,18), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_1_table_left, false)
final_goal(1, on((block,2)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_1_table_right, false)
final_goal(1, on((block,2)), puzzle_room_2_table_left, false)
final_goal(1, on((block,2)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,2)), puzzle_room_2_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,10), false)
final_goal(1, on((block,3)), (block,11), false)
final_goal(1, on((block,3)), (block,12), false)
final_goal(1, on((block,3)), (block,13), false)
final_goal(1, on((block,3)), (block,14), false)
final_goal(1, on((block,3)), (block,15), false)
final_goal(1, on((block,3)), (block,16), false)
final_goal(1, on((block,3)), (block,17), false)
final_goal(1, on((block,3)), (block,18), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_1_table_right, false)
final_goal(1, on((block,3)), puzzle_room_2_table_left, false)
final_goal(1, on((block,3)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,3)), puzzle_room_2_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,10), false)
final_goal(1, on((block,4)), (block,11), false)
final_goal(1, on((block,4)), (block,12), false)
final_goal(1, on((block,4)), (block,13), false)
final_goal(1, on((block,4)), (block,14), false)
final_goal(1, on((block,4)), (block,15), false)
final_goal(1, on((block,4)), (block,16), false)
final_goal(1, on((block,4)), (block,17), false)
final_goal(1, on((block,4)), (block,18), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_1_table_left, false)
final_goal(1, on((block,4)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_1_table_right, false)
final_goal(1, on((block,4)), puzzle_room_2_table_left, false)
final_goal(1, on((block,4)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,4)), puzzle_room_2_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,10), false)
final_goal(1, on((block,5)), (block,11), false)
final_goal(1, on((block,5)), (block,12), false)
final_goal(1, on((block,5)), (block,13), false)
final_goal(1, on((block,5)), (block,14), false)
final_goal(1, on((block,5)), (block,15), false)
final_goal(1, on((block,5)), (block,16), false)
final_goal(1, on((block,5)), (block,17), false)
final_goal(1, on((block,5)), (block,18), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_1_table_left, false)
final_goal(1, on((block,5)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_1_table_right, false)
final_goal(1, on((block,5)), puzzle_room_2_table_left, false)
final_goal(1, on((block,5)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,5)), puzzle_room_2_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,10), false)
final_goal(1, on((block,6)), (block,11), false)
final_goal(1, on((block,6)), (block,12), false)
final_goal(1, on((block,6)), (block,13), false)
final_goal(1, on((block,6)), (block,14), false)
final_goal(1, on((block,6)), (block,15), false)
final_goal(1, on((block,6)), (block,16), false)
final_goal(1, on((block,6)), (block,17), false)
final_goal(1, on((block,6)), (block,18), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_1_table_left, false)
final_goal(1, on((block,6)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_2_table_left, false)
final_goal(1, on((block,6)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,6)), puzzle_room_2_table_right, false)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,10), false)
final_goal(1, on((block,7)), (block,11), false)
final_goal(1, on((block,7)), (block,12), false)
final_goal(1, on((block,7)), (block,13), false)
final_goal(1, on((block,7)), (block,14), false)
final_goal(1, on((block,7)), (block,15), false)
final_goal(1, on((block,7)), (block,16), false)
final_goal(1, on((block,7)), (block,17), false)
final_goal(1, on((block,7)), (block,18), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,7)), puzzle_room_1_table_left, false)
final_goal(1, on((block,7)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_1_table_right, false)
final_goal(1, on((block,7)), puzzle_room_2_table_left, false)
final_goal(1, on((block,7)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,7)), puzzle_room_2_table_right, false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,10), false)
final_goal(1, on((block,8)), (block,11), false)
final_goal(1, on((block,8)), (block,12), false)
final_goal(1, on((block,8)), (block,13), false)
final_goal(1, on((block,8)), (block,14), false)
final_goal(1, on((block,8)), (block,15), false)
final_goal(1, on((block,8)), (block,16), false)
final_goal(1, on((block,8)), (block,17), false)
final_goal(1, on((block,8)), (block,18), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,8)), puzzle_room_1_table_left, false)
final_goal(1, on((block,8)), puzzle_room_1_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_1_table_right, false)
final_goal(1, on((block,8)), puzzle_room_2_table_left, false)
final_goal(1, on((block,8)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,8)), puzzle_room_2_table_right, false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,10), false)
final_goal(1, on((block,9)), (block,11), false)
final_goal(1, on((block,9)), (block,12), false)
final_goal(1, on((block,9)), (block,13), false)
final_goal(1, on((block,9)), (block,14), false)
final_goal(1, on((block,9)), (block,15), false)
final_goal(1, on((block,9)), (block,16), false)
final_goal(1, on((block,9)), (block,17), false)
final_goal(1, on((block,9)), (block,18), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, on((block,9)), puzzle_room_1_table_left, false)
final_goal(1, on((block,9)), puzzle_room_1_table_right, false)
final_goal(1, on((block,9)), puzzle_room_2_table_left, false)
final_goal(1, on((block,9)), puzzle_room_2_table_middle, false)
final_goal(1, on((block,9)), puzzle_room_2_table_right, false)
final_goal(1, tower_base((block,1),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,1),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,10),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,10),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,11),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,11),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,12),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,12),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,13),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,13),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,14),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,14),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,15),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,15),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,16),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,16),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,17),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,17),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,18),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,18),puzzle_room_2_table), false, false)
final_goal(1, tower_base((block,2),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,4),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,4),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,7),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,7),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_1_table), true, false)
final_goal(1, tower_base((block,8),puzzle_room_2_table), true, false)
final_goal(1, tower_base((block,9),puzzle_room_1_table), false, false)
final_goal(1, tower_base((block,9),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,1),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,1),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,10),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,10),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,11),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,11),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,12),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,12),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,13),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,13),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,14),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,14),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,15),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,15),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,16),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,16),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,17),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,17),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,18),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,18),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,7),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,8),puzzle_room_2_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_1_table), true, false)
final_goal(1, unordered_tower((block,9),puzzle_room_2_table), true, false)

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[19-01-2022_12-50-08] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 5)
	('top_level', 5)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', None)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['.\\problems\\blocks_world_plus\\single_puzzle\\BWP_problem_multi_puzzle_large_1.lp', '.\\problems\\blocks_world_plus\\single_puzzle\\BWP_system_laws_tasking_double_condensed.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [5-5] : OFFLINE MODE

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 5 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 5, Highest = 5.

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [5-5].

[19-01-2022_12-50-08] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 5

[19-01-2022_12-50-08] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', None)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', True)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 5)
	('self', HierarchicalPlanner(PlanningDomain(['.\\problems\\blocks_world_plus\\single_puzzle\\BWP_problem_multi_puzzle_large_1.lp', '.\\problems\\blocks_world_plus\\single_puzzle\\BWP_system_laws_tasking_double_condensed.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 5] classical : Concurrency enabled : Minimum search length bound disabled with value 0

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 5
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Final-goal intermediate achievement ordering preferences = True
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[19-01-2022_12-50-08] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[19-01-2022_12-50-08] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[19-01-2022_12-50-08] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[19-01-2022_12-50-08] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[19-01-2022_12-50-08] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,1))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,10))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,11))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,12))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,13))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,14))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,15))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,16))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,17))', 'V': 'store_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,18))', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,2))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,3))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,4))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,5))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,6))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,7))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,8))', 'V': 'store_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,9))', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_1_table)', 'V': 'puzzle_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in(puzzle_room_2_table)', 'V': 'puzzle_room_2', 'S': 0})
Fluent({'L': 5, 'F': 'in(talos)', 'V': 'starting_room_1', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,13))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,14))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,15))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,16))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,17))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,18))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'S': 0})

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 459 rules into program part ash_initial_state:

holds(5, complete_tower(blue,puzzle_room_1_table), false, 0).
holds(5, complete_tower(blue,puzzle_room_2_table), false, 0).
holds(5, complete_tower(red,puzzle_room_1_table), false, 0).
holds(5, complete_tower(red,puzzle_room_2_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_1_table), false, 0).
holds(5, complete_tower(yellow,puzzle_room_2_table), false, 0).
holds(5, in((block,1)), puzzle_room_1, 0).
holds(5, in((block,10)), puzzle_room_2, 0).
holds(5, in((block,11)), puzzle_room_2, 0).
holds(5, in((block,12)), puzzle_room_2, 0).
holds(5, in((block,13)), store_room_2, 0).
holds(5, in((block,14)), store_room_2, 0).
holds(5, in((block,15)), store_room_2, 0).
holds(5, in((block,16)), puzzle_room_2, 0).
holds(5, in((block,17)), store_room_2, 0).
holds(5, in((block,18)), puzzle_room_2, 0).
holds(5, in((block,2)), puzzle_room_1, 0).
holds(5, in((block,3)), puzzle_room_1, 0).
holds(5, in((block,4)), store_room_1, 0).
holds(5, in((block,5)), store_room_1, 0).
holds(5, in((block,6)), store_room_1, 0).
holds(5, in((block,7)), puzzle_room_1, 0).
holds(5, in((block,8)), store_room_1, 0).
holds(5, in((block,9)), puzzle_room_1, 0).
holds(5, in(puzzle_room_1_table), puzzle_room_1, 0).
holds(5, in(puzzle_room_2_table), puzzle_room_2, 0).
holds(5, in(talos), starting_room_1, 0).
holds(5, in_tower((block,1),(block,1)), true, 0).
holds(5, in_tower((block,1),(block,10)), false, 0).
holds(5, in_tower((block,1),(block,11)), false, 0).
holds(5, in_tower((block,1),(block,12)), false, 0).
holds(5, in_tower((block,1),(block,13)), false, 0).
holds(5, in_tower((block,1),(block,14)), false, 0).
holds(5, in_tower((block,1),(block,15)), false, 0).
holds(5, in_tower((block,1),(block,16)), false, 0).
holds(5, in_tower((block,1),(block,17)), false, 0).
holds(5, in_tower((block,1),(block,18)), false, 0).
holds(5, in_tower((block,1),(block,2)), false, 0).
holds(5, in_tower((block,1),(block,3)), true, 0).
holds(5, in_tower((block,1),(block,4)), false, 0).
holds(5, in_tower((block,1),(block,5)), false, 0).
holds(5, in_tower((block,1),(block,6)), false, 0).
holds(5, in_tower((block,1),(block,7)), false, 0).
holds(5, in_tower((block,1),(block,8)), false, 0).
holds(5, in_tower((block,1),(block,9)), false, 0).
holds(5, in_tower((block,10),(block,1)), false, 0).
holds(5, in_tower((block,10),(block,10)), true, 0).
holds(5, in_tower((block,10),(block,11)), false, 0).
holds(5, in_tower((block,10),(block,12)), true, 0).
holds(5, in_tower((block,10),(block,13)), false, 0).
holds(5, in_tower((block,10),(block,14)), false, 0).
holds(5, in_tower((block,10),(block,15)), false, 0).
holds(5, in_tower((block,10),(block,16)), false, 0).
holds(5, in_tower((block,10),(block,17)), false, 0).
holds(5, in_tower((block,10),(block,18)), false, 0).
holds(5, in_tower((block,10),(block,2)), false, 0).
holds(5, in_tower((block,10),(block,3)), false, 0).
holds(5, in_tower((block,10),(block,4)), false, 0).
holds(5, in_tower((block,10),(block,5)), false, 0).
holds(5, in_tower((block,10),(block,6)), false, 0).
holds(5, in_tower((block,10),(block,7)), false, 0).
holds(5, in_tower((block,10),(block,8)), false, 0).
holds(5, in_tower((block,10),(block,9)), false, 0).
holds(5, in_tower((block,11),(block,1)), false, 0).
holds(5, in_tower((block,11),(block,10)), false, 0).
holds(5, in_tower((block,11),(block,11)), true, 0).
holds(5, in_tower((block,11),(block,12)), false, 0).
holds(5, in_tower((block,11),(block,13)), false, 0).
holds(5, in_tower((block,11),(block,14)), false, 0).
holds(5, in_tower((block,11),(block,15)), false, 0).
holds(5, in_tower((block,11),(block,16)), false, 0).
holds(5, in_tower((block,11),(block,17)), false, 0).
holds(5, in_tower((block,11),(block,18)), false, 0).
holds(5, in_tower((block,11),(block,2)), false, 0).
holds(5, in_tower((block,11),(block,3)), false, 0).
holds(5, in_tower((block,11),(block,4)), false, 0).
holds(5, in_tower((block,11),(block,5)), false, 0).
holds(5, in_tower((block,11),(block,6)), false, 0).
holds(5, in_tower((block,11),(block,7)), false, 0).
holds(5, in_tower((block,11),(block,8)), false, 0).
holds(5, in_tower((block,11),(block,9)), false, 0).
holds(5, in_tower((block,12),(block,1)), false, 0).
holds(5, in_tower((block,12),(block,10)), false, 0).
holds(5, in_tower((block,12),(block,11)), false, 0).
holds(5, in_tower((block,12),(block,12)), false, 0).
holds(5, in_tower((block,12),(block,13)), false, 0).
holds(5, in_tower((block,12),(block,14)), false, 0).
holds(5, in_tower((block,12),(block,15)), false, 0).
holds(5, in_tower((block,12),(block,16)), false, 0).
holds(5, in_tower((block,12),(block,17)), false, 0).
holds(5, in_tower((block,12),(block,18)), false, 0).
holds(5, in_tower((block,12),(block,2)), false, 0).
holds(5, in_tower((block,12),(block,3)), false, 0).
holds(5, in_tower((block,12),(block,4)), false, 0).
holds(5, in_tower((block,12),(block,5)), false, 0).
holds(5, in_tower((block,12),(block,6)), false, 0).
holds(5, in_tower((block,12),(block,7)), false, 0).
holds(5, in_tower((block,12),(block,8)), false, 0).
holds(5, in_tower((block,12),(block,9)), false, 0).
holds(5, in_tower((block,13),(block,1)), false, 0).
holds(5, in_tower((block,13),(block,10)), false, 0).
holds(5, in_tower((block,13),(block,11)), false, 0).
holds(5, in_tower((block,13),(block,12)), false, 0).
holds(5, in_tower((block,13),(block,13)), false, 0).
holds(5, in_tower((block,13),(block,14)), false, 0).
holds(5, in_tower((block,13),(block,15)), false, 0).
holds(5, in_tower((block,13),(block,16)), false, 0).
holds(5, in_tower((block,13),(block,17)), false, 0).
holds(5, in_tower((block,13),(block,18)), false, 0).
holds(5, in_tower((block,13),(block,2)), false, 0).
holds(5, in_tower((block,13),(block,3)), false, 0).
holds(5, in_tower((block,13),(block,4)), false, 0).
holds(5, in_tower((block,13),(block,5)), false, 0).
holds(5, in_tower((block,13),(block,6)), false, 0).
holds(5, in_tower((block,13),(block,7)), false, 0).
holds(5, in_tower((block,13),(block,8)), false, 0).
holds(5, in_tower((block,13),(block,9)), false, 0).
holds(5, in_tower((block,14),(block,1)), false, 0).
holds(5, in_tower((block,14),(block,10)), false, 0).
holds(5, in_tower((block,14),(block,11)), false, 0).
holds(5, in_tower((block,14),(block,12)), false, 0).
holds(5, in_tower((block,14),(block,13)), false, 0).
holds(5, in_tower((block,14),(block,14)), false, 0).
holds(5, in_tower((block,14),(block,15)), false, 0).
holds(5, in_tower((block,14),(block,16)), false, 0).
holds(5, in_tower((block,14),(block,17)), false, 0).
holds(5, in_tower((block,14),(block,18)), false, 0).
holds(5, in_tower((block,14),(block,2)), false, 0).
holds(5, in_tower((block,14),(block,3)), false, 0).
holds(5, in_tower((block,14),(block,4)), false, 0).
holds(5, in_tower((block,14),(block,5)), false, 0).
holds(5, in_tower((block,14),(block,6)), false, 0).
holds(5, in_tower((block,14),(block,7)), false, 0).
holds(5, in_tower((block,14),(block,8)), false, 0).
holds(5, in_tower((block,14),(block,9)), false, 0).
holds(5, in_tower((block,15),(block,1)), false, 0).
holds(5, in_tower((block,15),(block,10)), false, 0).
holds(5, in_tower((block,15),(block,11)), false, 0).
holds(5, in_tower((block,15),(block,12)), false, 0).
holds(5, in_tower((block,15),(block,13)), false, 0).
holds(5, in_tower((block,15),(block,14)), false, 0).
holds(5, in_tower((block,15),(block,15)), false, 0).
holds(5, in_tower((block,15),(block,16)), false, 0).
holds(5, in_tower((block,15),(block,17)), false, 0).
holds(5, in_tower((block,15),(block,18)), false, 0).
holds(5, in_tower((block,15),(block,2)), false, 0).
holds(5, in_tower((block,15),(block,3)), false, 0).
holds(5, in_tower((block,15),(block,4)), false, 0).
holds(5, in_tower((block,15),(block,5)), false, 0).
holds(5, in_tower((block,15),(block,6)), false, 0).
holds(5, in_tower((block,15),(block,7)), false, 0).
holds(5, in_tower((block,15),(block,8)), false, 0).
holds(5, in_tower((block,15),(block,9)), false, 0).
holds(5, in_tower((block,16),(block,1)), false, 0).
holds(5, in_tower((block,16),(block,10)), false, 0).
holds(5, in_tower((block,16),(block,11)), false, 0).
holds(5, in_tower((block,16),(block,12)), false, 0).
holds(5, in_tower((block,16),(block,13)), false, 0).
holds(5, in_tower((block,16),(block,14)), false, 0).
holds(5, in_tower((block,16),(block,15)), false, 0).
holds(5, in_tower((block,16),(block,16)), true, 0).
holds(5, in_tower((block,16),(block,17)), false, 0).
holds(5, in_tower((block,16),(block,18)), true, 0).
holds(5, in_tower((block,16),(block,2)), false, 0).
holds(5, in_tower((block,16),(block,3)), false, 0).
holds(5, in_tower((block,16),(block,4)), false, 0).
holds(5, in_tower((block,16),(block,5)), false, 0).
holds(5, in_tower((block,16),(block,6)), false, 0).
holds(5, in_tower((block,16),(block,7)), false, 0).
holds(5, in_tower((block,16),(block,8)), false, 0).
holds(5, in_tower((block,16),(block,9)), false, 0).
holds(5, in_tower((block,17),(block,1)), false, 0).
holds(5, in_tower((block,17),(block,10)), false, 0).
holds(5, in_tower((block,17),(block,11)), false, 0).
holds(5, in_tower((block,17),(block,12)), false, 0).
holds(5, in_tower((block,17),(block,13)), false, 0).
holds(5, in_tower((block,17),(block,14)), false, 0).
holds(5, in_tower((block,17),(block,15)), false, 0).
holds(5, in_tower((block,17),(block,16)), false, 0).
holds(5, in_tower((block,17),(block,17)), false, 0).
holds(5, in_tower((block,17),(block,18)), false, 0).
holds(5, in_tower((block,17),(block,2)), false, 0).
holds(5, in_tower((block,17),(block,3)), false, 0).
holds(5, in_tower((block,17),(block,4)), false, 0).
holds(5, in_tower((block,17),(block,5)), false, 0).
holds(5, in_tower((block,17),(block,6)), false, 0).
holds(5, in_tower((block,17),(block,7)), false, 0).
holds(5, in_tower((block,17),(block,8)), false, 0).
holds(5, in_tower((block,17),(block,9)), false, 0).
holds(5, in_tower((block,18),(block,1)), false, 0).
holds(5, in_tower((block,18),(block,10)), false, 0).
holds(5, in_tower((block,18),(block,11)), false, 0).
holds(5, in_tower((block,18),(block,12)), false, 0).
holds(5, in_tower((block,18),(block,13)), false, 0).
holds(5, in_tower((block,18),(block,14)), false, 0).
holds(5, in_tower((block,18),(block,15)), false, 0).
holds(5, in_tower((block,18),(block,16)), false, 0).
holds(5, in_tower((block,18),(block,17)), false, 0).
holds(5, in_tower((block,18),(block,18)), false, 0).
holds(5, in_tower((block,18),(block,2)), false, 0).
holds(5, in_tower((block,18),(block,3)), false, 0).
holds(5, in_tower((block,18),(block,4)), false, 0).
holds(5, in_tower((block,18),(block,5)), false, 0).
holds(5, in_tower((block,18),(block,6)), false, 0).
holds(5, in_tower((block,18),(block,7)), false, 0).
holds(5, in_tower((block,18),(block,8)), false, 0).
holds(5, in_tower((block,18),(block,9)), false, 0).
holds(5, in_tower((block,2),(block,1)), false, 0).
holds(5, in_tower((block,2),(block,10)), false, 0).
holds(5, in_tower((block,2),(block,11)), false, 0).
holds(5, in_tower((block,2),(block,12)), false, 0).
holds(5, in_tower((block,2),(block,13)), false, 0).
holds(5, in_tower((block,2),(block,14)), false, 0).
holds(5, in_tower((block,2),(block,15)), false, 0).
holds(5, in_tower((block,2),(block,16)), false, 0).
holds(5, in_tower((block,2),(block,17)), false, 0).
holds(5, in_tower((block,2),(block,18)), false, 0).
holds(5, in_tower((block,2),(block,2)), true, 0).
holds(5, in_tower((block,2),(block,3)), false, 0).
holds(5, in_tower((block,2),(block,4)), false, 0).
holds(5, in_tower((block,2),(block,5)), false, 0).
holds(5, in_tower((block,2),(block,6)), false, 0).
holds(5, in_tower((block,2),(block,7)), false, 0).
holds(5, in_tower((block,2),(block,8)), false, 0).
holds(5, in_tower((block,2),(block,9)), false, 0).
holds(5, in_tower((block,3),(block,1)), false, 0).
holds(5, in_tower((block,3),(block,10)), false, 0).
holds(5, in_tower((block,3),(block,11)), false, 0).
holds(5, in_tower((block,3),(block,12)), false, 0).
holds(5, in_tower((block,3),(block,13)), false, 0).
holds(5, in_tower((block,3),(block,14)), false, 0).
holds(5, in_tower((block,3),(block,15)), false, 0).
holds(5, in_tower((block,3),(block,16)), false, 0).
holds(5, in_tower((block,3),(block,17)), false, 0).
holds(5, in_tower((block,3),(block,18)), false, 0).
holds(5, in_tower((block,3),(block,2)), false, 0).
holds(5, in_tower((block,3),(block,3)), false, 0).
holds(5, in_tower((block,3),(block,4)), false, 0).
holds(5, in_tower((block,3),(block,5)), false, 0).
holds(5, in_tower((block,3),(block,6)), false, 0).
holds(5, in_tower((block,3),(block,7)), false, 0).
holds(5, in_tower((block,3),(block,8)), false, 0).
holds(5, in_tower((block,3),(block,9)), false, 0).
holds(5, in_tower((block,4),(block,1)), false, 0).
holds(5, in_tower((block,4),(block,10)), false, 0).
holds(5, in_tower((block,4),(block,11)), false, 0).
holds(5, in_tower((block,4),(block,12)), false, 0).
holds(5, in_tower((block,4),(block,13)), false, 0).
holds(5, in_tower((block,4),(block,14)), false, 0).
holds(5, in_tower((block,4),(block,15)), false, 0).
holds(5, in_tower((block,4),(block,16)), false, 0).
holds(5, in_tower((block,4),(block,17)), false, 0).
holds(5, in_tower((block,4),(block,18)), false, 0).
holds(5, in_tower((block,4),(block,2)), false, 0).
holds(5, in_tower((block,4),(block,3)), false, 0).
holds(5, in_tower((block,4),(block,4)), false, 0).
holds(5, in_tower((block,4),(block,5)), false, 0).
holds(5, in_tower((block,4),(block,6)), false, 0).
holds(5, in_tower((block,4),(block,7)), false, 0).
holds(5, in_tower((block,4),(block,8)), false, 0).
holds(5, in_tower((block,4),(block,9)), false, 0).
holds(5, in_tower((block,5),(block,1)), false, 0).
holds(5, in_tower((block,5),(block,10)), false, 0).
holds(5, in_tower((block,5),(block,11)), false, 0).
holds(5, in_tower((block,5),(block,12)), false, 0).
holds(5, in_tower((block,5),(block,13)), false, 0).
holds(5, in_tower((block,5),(block,14)), false, 0).
holds(5, in_tower((block,5),(block,15)), false, 0).
holds(5, in_tower((block,5),(block,16)), false, 0).
holds(5, in_tower((block,5),(block,17)), false, 0).
holds(5, in_tower((block,5),(block,18)), false, 0).
holds(5, in_tower((block,5),(block,2)), false, 0).
holds(5, in_tower((block,5),(block,3)), false, 0).
holds(5, in_tower((block,5),(block,4)), false, 0).
holds(5, in_tower((block,5),(block,5)), false, 0).
holds(5, in_tower((block,5),(block,6)), false, 0).
holds(5, in_tower((block,5),(block,7)), false, 0).
holds(5, in_tower((block,5),(block,8)), false, 0).
holds(5, in_tower((block,5),(block,9)), false, 0).
holds(5, in_tower((block,6),(block,1)), false, 0).
holds(5, in_tower((block,6),(block,10)), false, 0).
holds(5, in_tower((block,6),(block,11)), false, 0).
holds(5, in_tower((block,6),(block,12)), false, 0).
holds(5, in_tower((block,6),(block,13)), false, 0).
holds(5, in_tower((block,6),(block,14)), false, 0).
holds(5, in_tower((block,6),(block,15)), false, 0).
holds(5, in_tower((block,6),(block,16)), false, 0).
holds(5, in_tower((block,6),(block,17)), false, 0).
holds(5, in_tower((block,6),(block,18)), false, 0).
holds(5, in_tower((block,6),(block,2)), false, 0).
holds(5, in_tower((block,6),(block,3)), false, 0).
holds(5, in_tower((block,6),(block,4)), false, 0).
holds(5, in_tower((block,6),(block,5)), false, 0).
holds(5, in_tower((block,6),(block,6)), false, 0).
holds(5, in_tower((block,6),(block,7)), false, 0).
holds(5, in_tower((block,6),(block,8)), false, 0).
holds(5, in_tower((block,6),(block,9)), false, 0).
holds(5, in_tower((block,7),(block,1)), false, 0).
holds(5, in_tower((block,7),(block,10)), false, 0).
holds(5, in_tower((block,7),(block,11)), false, 0).
holds(5, in_tower((block,7),(block,12)), false, 0).
holds(5, in_tower((block,7),(block,13)), false, 0).
holds(5, in_tower((block,7),(block,14)), false, 0).
holds(5, in_tower((block,7),(block,15)), false, 0).
holds(5, in_tower((block,7),(block,16)), false, 0).
holds(5, in_tower((block,7),(block,17)), false, 0).
holds(5, in_tower((block,7),(block,18)), false, 0).
holds(5, in_tower((block,7),(block,2)), false, 0).
holds(5, in_tower((block,7),(block,3)), false, 0).
holds(5, in_tower((block,7),(block,4)), false, 0).
holds(5, in_tower((block,7),(block,5)), false, 0).
holds(5, in_tower((block,7),(block,6)), false, 0).
holds(5, in_tower((block,7),(block,7)), true, 0).
holds(5, in_tower((block,7),(block,8)), false, 0).
holds(5, in_tower((block,7),(block,9)), true, 0).
holds(5, in_tower((block,8),(block,1)), false, 0).
holds(5, in_tower((block,8),(block,10)), false, 0).
holds(5, in_tower((block,8),(block,11)), false, 0).
holds(5, in_tower((block,8),(block,12)), false, 0).
holds(5, in_tower((block,8),(block,13)), false, 0).
holds(5, in_tower((block,8),(block,14)), false, 0).
holds(5, in_tower((block,8),(block,15)), false, 0).
holds(5, in_tower((block,8),(block,16)), false, 0).
holds(5, in_tower((block,8),(block,17)), false, 0).
holds(5, in_tower((block,8),(block,18)), false, 0).
holds(5, in_tower((block,8),(block,2)), false, 0).
holds(5, in_tower((block,8),(block,3)), false, 0).
holds(5, in_tower((block,8),(block,4)), false, 0).
holds(5, in_tower((block,8),(block,5)), false, 0).
holds(5, in_tower((block,8),(block,6)), false, 0).
holds(5, in_tower((block,8),(block,7)), false, 0).
holds(5, in_tower((block,8),(block,8)), false, 0).
holds(5, in_tower((block,8),(block,9)), false, 0).
holds(5, in_tower((block,9),(block,1)), false, 0).
holds(5, in_tower((block,9),(block,10)), false, 0).
holds(5, in_tower((block,9),(block,11)), false, 0).
holds(5, in_tower((block,9),(block,12)), false, 0).
holds(5, in_tower((block,9),(block,13)), false, 0).
holds(5, in_tower((block,9),(block,14)), false, 0).
holds(5, in_tower((block,9),(block,15)), false, 0).
holds(5, in_tower((block,9),(block,16)), false, 0).
holds(5, in_tower((block,9),(block,17)), false, 0).
holds(5, in_tower((block,9),(block,18)), false, 0).
holds(5, in_tower((block,9),(block,2)), false, 0).
holds(5, in_tower((block,9),(block,3)), false, 0).
holds(5, in_tower((block,9),(block,4)), false, 0).
holds(5, in_tower((block,9),(block,5)), false, 0).
holds(5, in_tower((block,9),(block,6)), false, 0).
holds(5, in_tower((block,9),(block,7)), false, 0).
holds(5, in_tower((block,9),(block,8)), false, 0).
holds(5, in_tower((block,9),(block,9)), false, 0).
holds(5, on((block,1)), puzzle_room_1_table, 0).
holds(5, on((block,10)), puzzle_room_2_table, 0).
holds(5, on((block,11)), puzzle_room_2_table, 0).
holds(5, on((block,12)), (block,10), 0).
holds(5, on((block,13)), nothing, 0).
holds(5, on((block,14)), nothing, 0).
holds(5, on((block,15)), nothing, 0).
holds(5, on((block,16)), puzzle_room_2_table, 0).
holds(5, on((block,17)), nothing, 0).
holds(5, on((block,18)), (block,16), 0).
holds(5, on((block,2)), puzzle_room_1_table, 0).
holds(5, on((block,3)), (block,1), 0).
holds(5, on((block,4)), nothing, 0).
holds(5, on((block,5)), nothing, 0).
holds(5, on((block,6)), nothing, 0).
holds(5, on((block,7)), puzzle_room_1_table, 0).
holds(5, on((block,8)), nothing, 0).
holds(5, on((block,9)), (block,7), 0).
holds(5, tower_base((block,1),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,1),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,10),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,11),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,11),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,12),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,12),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,13),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,14),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,15),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,16),puzzle_room_2_table), true, 0).
holds(5, tower_base((block,17),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,17),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,18),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,2),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,2),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,3),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,4),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,5),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,6),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,7),puzzle_room_1_table), true, 0).
holds(5, tower_base((block,7),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,8),puzzle_room_2_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_1_table), false, 0).
holds(5, tower_base((block,9),puzzle_room_2_table), false, 0).
holds(5, transporting(talos,(block,1)), false, 0).
holds(5, transporting(talos,(block,10)), false, 0).
holds(5, transporting(talos,(block,11)), false, 0).
holds(5, transporting(talos,(block,12)), false, 0).
holds(5, transporting(talos,(block,13)), false, 0).
holds(5, transporting(talos,(block,14)), false, 0).
holds(5, transporting(talos,(block,15)), false, 0).
holds(5, transporting(talos,(block,16)), false, 0).
holds(5, transporting(talos,(block,17)), false, 0).
holds(5, transporting(talos,(block,18)), false, 0).
holds(5, transporting(talos,(block,2)), false, 0).
holds(5, transporting(talos,(block,3)), false, 0).
holds(5, transporting(talos,(block,4)), false, 0).
holds(5, transporting(talos,(block,5)), false, 0).
holds(5, transporting(talos,(block,6)), false, 0).
holds(5, transporting(talos,(block,7)), false, 0).
holds(5, transporting(talos,(block,8)), false, 0).
holds(5, transporting(talos,(block,9)), false, 0).
holds(5, unordered_tower((block,1),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,1),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,10),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,11),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,11),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,12),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,13),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,14),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,15),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,16),puzzle_room_2_table), true, 0).
holds(5, unordered_tower((block,17),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,17),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,18),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,2),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,3),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,4),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,5),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,6),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,7),puzzle_room_1_table), true, 0).
holds(5, unordered_tower((block,7),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,8),puzzle_room_2_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_1_table), false, 0).
holds(5, unordered_tower((block,9),puzzle_room_2_table), false, 0).

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(yellow,puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,13),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,14),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,13))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,14))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,15))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,15),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,16),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,17),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,16))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,17))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,18))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,18),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,13))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,14))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,15))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,16))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,17))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,18))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,14)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,13))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,15)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,14))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,15))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,17)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,16))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,18)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,17))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,18))', 'V': 'puzzle_room_2_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_1_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,13)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,14)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,15)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,16)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,17)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,18)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_1_table', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'puzzle_room_2_table', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,13),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,14),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,15),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,16),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,17),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,18),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_1_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),puzzle_room_2_table)', 'V': 'true', 'T': 'false'})

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1164 rules into program part ash_goal_state:

final_goal(5, complete_tower(blue,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(blue,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(blue,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(red,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(red,puzzle_room_2_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_1_table), true, true).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), false, false).
final_goal(5, complete_tower(yellow,puzzle_room_2_table), true, true).
final_goal(5, in_tower((block,1),(block,1)), false, true).
final_goal(5, in_tower((block,1),(block,1)), true, false).
final_goal(5, in_tower((block,1),(block,10)), false, true).
final_goal(5, in_tower((block,1),(block,10)), true, false).
final_goal(5, in_tower((block,1),(block,11)), false, true).
final_goal(5, in_tower((block,1),(block,11)), true, false).
final_goal(5, in_tower((block,1),(block,12)), false, true).
final_goal(5, in_tower((block,1),(block,12)), true, false).
final_goal(5, in_tower((block,1),(block,13)), false, true).
final_goal(5, in_tower((block,1),(block,13)), true, false).
final_goal(5, in_tower((block,1),(block,14)), false, true).
final_goal(5, in_tower((block,1),(block,14)), true, false).
final_goal(5, in_tower((block,1),(block,15)), false, true).
final_goal(5, in_tower((block,1),(block,15)), true, false).
final_goal(5, in_tower((block,1),(block,16)), false, true).
final_goal(5, in_tower((block,1),(block,16)), true, false).
final_goal(5, in_tower((block,1),(block,17)), false, true).
final_goal(5, in_tower((block,1),(block,17)), true, false).
final_goal(5, in_tower((block,1),(block,18)), false, true).
final_goal(5, in_tower((block,1),(block,18)), true, false).
final_goal(5, in_tower((block,1),(block,2)), false, true).
final_goal(5, in_tower((block,1),(block,2)), true, false).
final_goal(5, in_tower((block,1),(block,3)), false, true).
final_goal(5, in_tower((block,1),(block,3)), true, false).
final_goal(5, in_tower((block,1),(block,4)), false, true).
final_goal(5, in_tower((block,1),(block,4)), true, false).
final_goal(5, in_tower((block,1),(block,5)), false, true).
final_goal(5, in_tower((block,1),(block,5)), true, false).
final_goal(5, in_tower((block,1),(block,6)), false, true).
final_goal(5, in_tower((block,1),(block,6)), true, false).
final_goal(5, in_tower((block,1),(block,7)), false, true).
final_goal(5, in_tower((block,1),(block,7)), true, false).
final_goal(5, in_tower((block,1),(block,8)), false, true).
final_goal(5, in_tower((block,1),(block,8)), true, false).
final_goal(5, in_tower((block,1),(block,9)), false, true).
final_goal(5, in_tower((block,1),(block,9)), true, false).
final_goal(5, in_tower((block,10),(block,1)), false, true).
final_goal(5, in_tower((block,10),(block,1)), true, false).
final_goal(5, in_tower((block,10),(block,10)), false, true).
final_goal(5, in_tower((block,10),(block,10)), true, false).
final_goal(5, in_tower((block,10),(block,11)), false, true).
final_goal(5, in_tower((block,10),(block,11)), true, false).
final_goal(5, in_tower((block,10),(block,12)), false, true).
final_goal(5, in_tower((block,10),(block,12)), true, false).
final_goal(5, in_tower((block,10),(block,13)), false, true).
final_goal(5, in_tower((block,10),(block,13)), true, false).
final_goal(5, in_tower((block,10),(block,14)), false, true).
final_goal(5, in_tower((block,10),(block,14)), true, false).
final_goal(5, in_tower((block,10),(block,15)), false, true).
final_goal(5, in_tower((block,10),(block,15)), true, false).
final_goal(5, in_tower((block,10),(block,16)), false, true).
final_goal(5, in_tower((block,10),(block,16)), true, false).
final_goal(5, in_tower((block,10),(block,17)), false, true).
final_goal(5, in_tower((block,10),(block,17)), true, false).
final_goal(5, in_tower((block,10),(block,18)), false, true).
final_goal(5, in_tower((block,10),(block,18)), true, false).
final_goal(5, in_tower((block,10),(block,2)), false, true).
final_goal(5, in_tower((block,10),(block,2)), true, false).
final_goal(5, in_tower((block,10),(block,3)), false, true).
final_goal(5, in_tower((block,10),(block,3)), true, false).
final_goal(5, in_tower((block,10),(block,4)), false, true).
final_goal(5, in_tower((block,10),(block,4)), true, false).
final_goal(5, in_tower((block,10),(block,5)), false, true).
final_goal(5, in_tower((block,10),(block,5)), true, false).
final_goal(5, in_tower((block,10),(block,6)), false, true).
final_goal(5, in_tower((block,10),(block,6)), true, false).
final_goal(5, in_tower((block,10),(block,7)), false, true).
final_goal(5, in_tower((block,10),(block,7)), true, false).
final_goal(5, in_tower((block,10),(block,8)), false, true).
final_goal(5, in_tower((block,10),(block,8)), true, false).
final_goal(5, in_tower((block,10),(block,9)), false, true).
final_goal(5, in_tower((block,10),(block,9)), true, false).
final_goal(5, in_tower((block,11),(block,1)), false, true).
final_goal(5, in_tower((block,11),(block,1)), true, false).
final_goal(5, in_tower((block,11),(block,10)), false, true).
final_goal(5, in_tower((block,11),(block,10)), true, false).
final_goal(5, in_tower((block,11),(block,11)), false, true).
final_goal(5, in_tower((block,11),(block,11)), true, false).
final_goal(5, in_tower((block,11),(block,12)), false, true).
final_goal(5, in_tower((block,11),(block,12)), true, false).
final_goal(5, in_tower((block,11),(block,13)), false, true).
final_goal(5, in_tower((block,11),(block,13)), true, false).
final_goal(5, in_tower((block,11),(block,14)), false, true).
final_goal(5, in_tower((block,11),(block,14)), true, false).
final_goal(5, in_tower((block,11),(block,15)), false, true).
final_goal(5, in_tower((block,11),(block,15)), true, false).
final_goal(5, in_tower((block,11),(block,16)), false, true).
final_goal(5, in_tower((block,11),(block,16)), true, false).
final_goal(5, in_tower((block,11),(block,17)), false, true).
final_goal(5, in_tower((block,11),(block,17)), true, false).
final_goal(5, in_tower((block,11),(block,18)), false, true).
final_goal(5, in_tower((block,11),(block,18)), true, false).
final_goal(5, in_tower((block,11),(block,2)), false, true).
final_goal(5, in_tower((block,11),(block,2)), true, false).
final_goal(5, in_tower((block,11),(block,3)), false, true).
final_goal(5, in_tower((block,11),(block,3)), true, false).
final_goal(5, in_tower((block,11),(block,4)), false, true).
final_goal(5, in_tower((block,11),(block,4)), true, false).
final_goal(5, in_tower((block,11),(block,5)), false, true).
final_goal(5, in_tower((block,11),(block,5)), true, false).
final_goal(5, in_tower((block,11),(block,6)), false, true).
final_goal(5, in_tower((block,11),(block,6)), true, false).
final_goal(5, in_tower((block,11),(block,7)), false, true).
final_goal(5, in_tower((block,11),(block,7)), true, false).
final_goal(5, in_tower((block,11),(block,8)), false, true).
final_goal(5, in_tower((block,11),(block,8)), true, false).
final_goal(5, in_tower((block,11),(block,9)), false, true).
final_goal(5, in_tower((block,11),(block,9)), true, false).
final_goal(5, in_tower((block,12),(block,1)), false, true).
final_goal(5, in_tower((block,12),(block,1)), true, false).
final_goal(5, in_tower((block,12),(block,10)), false, false).
final_goal(5, in_tower((block,12),(block,10)), true, true).
final_goal(5, in_tower((block,12),(block,11)), false, false).
final_goal(5, in_tower((block,12),(block,11)), true, true).
final_goal(5, in_tower((block,12),(block,12)), false, false).
final_goal(5, in_tower((block,12),(block,12)), true, true).
final_goal(5, in_tower((block,12),(block,13)), false, true).
final_goal(5, in_tower((block,12),(block,13)), true, false).
final_goal(5, in_tower((block,12),(block,14)), false, true).
final_goal(5, in_tower((block,12),(block,14)), true, false).
final_goal(5, in_tower((block,12),(block,15)), false, true).
final_goal(5, in_tower((block,12),(block,15)), true, false).
final_goal(5, in_tower((block,12),(block,16)), false, true).
final_goal(5, in_tower((block,12),(block,16)), true, false).
final_goal(5, in_tower((block,12),(block,17)), false, true).
final_goal(5, in_tower((block,12),(block,17)), true, false).
final_goal(5, in_tower((block,12),(block,18)), false, true).
final_goal(5, in_tower((block,12),(block,18)), true, false).
final_goal(5, in_tower((block,12),(block,2)), false, true).
final_goal(5, in_tower((block,12),(block,2)), true, false).
final_goal(5, in_tower((block,12),(block,3)), false, true).
final_goal(5, in_tower((block,12),(block,3)), true, false).
final_goal(5, in_tower((block,12),(block,4)), false, true).
final_goal(5, in_tower((block,12),(block,4)), true, false).
final_goal(5, in_tower((block,12),(block,5)), false, true).
final_goal(5, in_tower((block,12),(block,5)), true, false).
final_goal(5, in_tower((block,12),(block,6)), false, true).
final_goal(5, in_tower((block,12),(block,6)), true, false).
final_goal(5, in_tower((block,12),(block,7)), false, true).
final_goal(5, in_tower((block,12),(block,7)), true, false).
final_goal(5, in_tower((block,12),(block,8)), false, true).
final_goal(5, in_tower((block,12),(block,8)), true, false).
final_goal(5, in_tower((block,12),(block,9)), false, true).
final_goal(5, in_tower((block,12),(block,9)), true, false).
final_goal(5, in_tower((block,13),(block,1)), false, true).
final_goal(5, in_tower((block,13),(block,1)), true, false).
final_goal(5, in_tower((block,13),(block,10)), false, true).
final_goal(5, in_tower((block,13),(block,10)), true, false).
final_goal(5, in_tower((block,13),(block,11)), false, true).
final_goal(5, in_tower((block,13),(block,11)), true, false).
final_goal(5, in_tower((block,13),(block,12)), false, true).
final_goal(5, in_tower((block,13),(block,12)), true, false).
final_goal(5, in_tower((block,13),(block,13)), false, true).
final_goal(5, in_tower((block,13),(block,13)), true, false).
final_goal(5, in_tower((block,13),(block,14)), false, true).
final_goal(5, in_tower((block,13),(block,14)), true, false).
final_goal(5, in_tower((block,13),(block,15)), false, true).
final_goal(5, in_tower((block,13),(block,15)), true, false).
final_goal(5, in_tower((block,13),(block,16)), false, true).
final_goal(5, in_tower((block,13),(block,16)), true, false).
final_goal(5, in_tower((block,13),(block,17)), false, true).
final_goal(5, in_tower((block,13),(block,17)), true, false).
final_goal(5, in_tower((block,13),(block,18)), false, true).
final_goal(5, in_tower((block,13),(block,18)), true, false).
final_goal(5, in_tower((block,13),(block,2)), false, true).
final_goal(5, in_tower((block,13),(block,2)), true, false).
final_goal(5, in_tower((block,13),(block,3)), false, true).
final_goal(5, in_tower((block,13),(block,3)), true, false).
final_goal(5, in_tower((block,13),(block,4)), false, true).
final_goal(5, in_tower((block,13),(block,4)), true, false).
final_goal(5, in_tower((block,13),(block,5)), false, true).
final_goal(5, in_tower((block,13),(block,5)), true, false).
final_goal(5, in_tower((block,13),(block,6)), false, true).
final_goal(5, in_tower((block,13),(block,6)), true, false).
final_goal(5, in_tower((block,13),(block,7)), false, true).
final_goal(5, in_tower((block,13),(block,7)), true, false).
final_goal(5, in_tower((block,13),(block,8)), false, true).
final_goal(5, in_tower((block,13),(block,8)), true, false).
final_goal(5, in_tower((block,13),(block,9)), false, true).
final_goal(5, in_tower((block,13),(block,9)), true, false).
final_goal(5, in_tower((block,14),(block,1)), false, true).
final_goal(5, in_tower((block,14),(block,1)), true, false).
final_goal(5, in_tower((block,14),(block,10)), false, true).
final_goal(5, in_tower((block,14),(block,10)), true, false).
final_goal(5, in_tower((block,14),(block,11)), false, true).
final_goal(5, in_tower((block,14),(block,11)), true, false).
final_goal(5, in_tower((block,14),(block,12)), false, true).
final_goal(5, in_tower((block,14),(block,12)), true, false).
final_goal(5, in_tower((block,14),(block,13)), false, true).
final_goal(5, in_tower((block,14),(block,13)), true, false).
final_goal(5, in_tower((block,14),(block,14)), false, true).
final_goal(5, in_tower((block,14),(block,14)), true, false).
final_goal(5, in_tower((block,14),(block,15)), false, true).
final_goal(5, in_tower((block,14),(block,15)), true, false).
final_goal(5, in_tower((block,14),(block,16)), false, true).
final_goal(5, in_tower((block,14),(block,16)), true, false).
final_goal(5, in_tower((block,14),(block,17)), false, true).
final_goal(5, in_tower((block,14),(block,17)), true, false).
final_goal(5, in_tower((block,14),(block,18)), false, true).
final_goal(5, in_tower((block,14),(block,18)), true, false).
final_goal(5, in_tower((block,14),(block,2)), false, true).
final_goal(5, in_tower((block,14),(block,2)), true, false).
final_goal(5, in_tower((block,14),(block,3)), false, true).
final_goal(5, in_tower((block,14),(block,3)), true, false).
final_goal(5, in_tower((block,14),(block,4)), false, true).
final_goal(5, in_tower((block,14),(block,4)), true, false).
final_goal(5, in_tower((block,14),(block,5)), false, true).
final_goal(5, in_tower((block,14),(block,5)), true, false).
final_goal(5, in_tower((block,14),(block,6)), false, true).
final_goal(5, in_tower((block,14),(block,6)), true, false).
final_goal(5, in_tower((block,14),(block,7)), false, true).
final_goal(5, in_tower((block,14),(block,7)), true, false).
final_goal(5, in_tower((block,14),(block,8)), false, true).
final_goal(5, in_tower((block,14),(block,8)), true, false).
final_goal(5, in_tower((block,14),(block,9)), false, true).
final_goal(5, in_tower((block,14),(block,9)), true, false).
final_goal(5, in_tower((block,15),(block,1)), false, true).
final_goal(5, in_tower((block,15),(block,1)), true, false).
final_goal(5, in_tower((block,15),(block,10)), false, true).
final_goal(5, in_tower((block,15),(block,10)), true, false).
final_goal(5, in_tower((block,15),(block,11)), false, true).
final_goal(5, in_tower((block,15),(block,11)), true, false).
final_goal(5, in_tower((block,15),(block,12)), false, true).
final_goal(5, in_tower((block,15),(block,12)), true, false).
final_goal(5, in_tower((block,15),(block,13)), false, false).
final_goal(5, in_tower((block,15),(block,13)), true, true).
final_goal(5, in_tower((block,15),(block,14)), false, false).
final_goal(5, in_tower((block,15),(block,14)), true, true).
final_goal(5, in_tower((block,15),(block,15)), false, false).
final_goal(5, in_tower((block,15),(block,15)), true, true).
final_goal(5, in_tower((block,15),(block,16)), false, true).
final_goal(5, in_tower((block,15),(block,16)), true, false).
final_goal(5, in_tower((block,15),(block,17)), false, true).
final_goal(5, in_tower((block,15),(block,17)), true, false).
final_goal(5, in_tower((block,15),(block,18)), false, true).
final_goal(5, in_tower((block,15),(block,18)), true, false).
final_goal(5, in_tower((block,15),(block,2)), false, true).
final_goal(5, in_tower((block,15),(block,2)), true, false).
final_goal(5, in_tower((block,15),(block,3)), false, true).
final_goal(5, in_tower((block,15),(block,3)), true, false).
final_goal(5, in_tower((block,15),(block,4)), false, true).
final_goal(5, in_tower((block,15),(block,4)), true, false).
final_goal(5, in_tower((block,15),(block,5)), false, true).
final_goal(5, in_tower((block,15),(block,5)), true, false).
final_goal(5, in_tower((block,15),(block,6)), false, true).
final_goal(5, in_tower((block,15),(block,6)), true, false).
final_goal(5, in_tower((block,15),(block,7)), false, true).
final_goal(5, in_tower((block,15),(block,7)), true, false).
final_goal(5, in_tower((block,15),(block,8)), false, true).
final_goal(5, in_tower((block,15),(block,8)), true, false).
final_goal(5, in_tower((block,15),(block,9)), false, true).
final_goal(5, in_tower((block,15),(block,9)), true, false).
final_goal(5, in_tower((block,16),(block,1)), false, true).
final_goal(5, in_tower((block,16),(block,1)), true, false).
final_goal(5, in_tower((block,16),(block,10)), false, true).
final_goal(5, in_tower((block,16),(block,10)), true, false).
final_goal(5, in_tower((block,16),(block,11)), false, true).
final_goal(5, in_tower((block,16),(block,11)), true, false).
final_goal(5, in_tower((block,16),(block,12)), false, true).
final_goal(5, in_tower((block,16),(block,12)), true, false).
final_goal(5, in_tower((block,16),(block,13)), false, true).
final_goal(5, in_tower((block,16),(block,13)), true, false).
final_goal(5, in_tower((block,16),(block,14)), false, true).
final_goal(5, in_tower((block,16),(block,14)), true, false).
final_goal(5, in_tower((block,16),(block,15)), false, true).
final_goal(5, in_tower((block,16),(block,15)), true, false).
final_goal(5, in_tower((block,16),(block,16)), false, true).
final_goal(5, in_tower((block,16),(block,16)), true, false).
final_goal(5, in_tower((block,16),(block,17)), false, true).
final_goal(5, in_tower((block,16),(block,17)), true, false).
final_goal(5, in_tower((block,16),(block,18)), false, true).
final_goal(5, in_tower((block,16),(block,18)), true, false).
final_goal(5, in_tower((block,16),(block,2)), false, true).
final_goal(5, in_tower((block,16),(block,2)), true, false).
final_goal(5, in_tower((block,16),(block,3)), false, true).
final_goal(5, in_tower((block,16),(block,3)), true, false).
final_goal(5, in_tower((block,16),(block,4)), false, true).
final_goal(5, in_tower((block,16),(block,4)), true, false).
final_goal(5, in_tower((block,16),(block,5)), false, true).
final_goal(5, in_tower((block,16),(block,5)), true, false).
final_goal(5, in_tower((block,16),(block,6)), false, true).
final_goal(5, in_tower((block,16),(block,6)), true, false).
final_goal(5, in_tower((block,16),(block,7)), false, true).
final_goal(5, in_tower((block,16),(block,7)), true, false).
final_goal(5, in_tower((block,16),(block,8)), false, true).
final_goal(5, in_tower((block,16),(block,8)), true, false).
final_goal(5, in_tower((block,16),(block,9)), false, true).
final_goal(5, in_tower((block,16),(block,9)), true, false).
final_goal(5, in_tower((block,17),(block,1)), false, true).
final_goal(5, in_tower((block,17),(block,1)), true, false).
final_goal(5, in_tower((block,17),(block,10)), false, true).
final_goal(5, in_tower((block,17),(block,10)), true, false).
final_goal(5, in_tower((block,17),(block,11)), false, true).
final_goal(5, in_tower((block,17),(block,11)), true, false).
final_goal(5, in_tower((block,17),(block,12)), false, true).
final_goal(5, in_tower((block,17),(block,12)), true, false).
final_goal(5, in_tower((block,17),(block,13)), false, true).
final_goal(5, in_tower((block,17),(block,13)), true, false).
final_goal(5, in_tower((block,17),(block,14)), false, true).
final_goal(5, in_tower((block,17),(block,14)), true, false).
final_goal(5, in_tower((block,17),(block,15)), false, true).
final_goal(5, in_tower((block,17),(block,15)), true, false).
final_goal(5, in_tower((block,17),(block,16)), false, true).
final_goal(5, in_tower((block,17),(block,16)), true, false).
final_goal(5, in_tower((block,17),(block,17)), false, true).
final_goal(5, in_tower((block,17),(block,17)), true, false).
final_goal(5, in_tower((block,17),(block,18)), false, true).
final_goal(5, in_tower((block,17),(block,18)), true, false).
final_goal(5, in_tower((block,17),(block,2)), false, true).
final_goal(5, in_tower((block,17),(block,2)), true, false).
final_goal(5, in_tower((block,17),(block,3)), false, true).
final_goal(5, in_tower((block,17),(block,3)), true, false).
final_goal(5, in_tower((block,17),(block,4)), false, true).
final_goal(5, in_tower((block,17),(block,4)), true, false).
final_goal(5, in_tower((block,17),(block,5)), false, true).
final_goal(5, in_tower((block,17),(block,5)), true, false).
final_goal(5, in_tower((block,17),(block,6)), false, true).
final_goal(5, in_tower((block,17),(block,6)), true, false).
final_goal(5, in_tower((block,17),(block,7)), false, true).
final_goal(5, in_tower((block,17),(block,7)), true, false).
final_goal(5, in_tower((block,17),(block,8)), false, true).
final_goal(5, in_tower((block,17),(block,8)), true, false).
final_goal(5, in_tower((block,17),(block,9)), false, true).
final_goal(5, in_tower((block,17),(block,9)), true, false).
final_goal(5, in_tower((block,18),(block,1)), false, true).
final_goal(5, in_tower((block,18),(block,1)), true, false).
final_goal(5, in_tower((block,18),(block,10)), false, true).
final_goal(5, in_tower((block,18),(block,10)), true, false).
final_goal(5, in_tower((block,18),(block,11)), false, true).
final_goal(5, in_tower((block,18),(block,11)), true, false).
final_goal(5, in_tower((block,18),(block,12)), false, true).
final_goal(5, in_tower((block,18),(block,12)), true, false).
final_goal(5, in_tower((block,18),(block,13)), false, true).
final_goal(5, in_tower((block,18),(block,13)), true, false).
final_goal(5, in_tower((block,18),(block,14)), false, true).
final_goal(5, in_tower((block,18),(block,14)), true, false).
final_goal(5, in_tower((block,18),(block,15)), false, true).
final_goal(5, in_tower((block,18),(block,15)), true, false).
final_goal(5, in_tower((block,18),(block,16)), false, false).
final_goal(5, in_tower((block,18),(block,16)), true, true).
final_goal(5, in_tower((block,18),(block,17)), false, false).
final_goal(5, in_tower((block,18),(block,17)), true, true).
final_goal(5, in_tower((block,18),(block,18)), false, false).
final_goal(5, in_tower((block,18),(block,18)), true, true).
final_goal(5, in_tower((block,18),(block,2)), false, true).
final_goal(5, in_tower((block,18),(block,2)), true, false).
final_goal(5, in_tower((block,18),(block,3)), false, true).
final_goal(5, in_tower((block,18),(block,3)), true, false).
final_goal(5, in_tower((block,18),(block,4)), false, true).
final_goal(5, in_tower((block,18),(block,4)), true, false).
final_goal(5, in_tower((block,18),(block,5)), false, true).
final_goal(5, in_tower((block,18),(block,5)), true, false).
final_goal(5, in_tower((block,18),(block,6)), false, true).
final_goal(5, in_tower((block,18),(block,6)), true, false).
final_goal(5, in_tower((block,18),(block,7)), false, true).
final_goal(5, in_tower((block,18),(block,7)), true, false).
final_goal(5, in_tower((block,18),(block,8)), false, true).
final_goal(5, in_tower((block,18),(block,8)), true, false).
final_goal(5, in_tower((block,18),(block,9)), false, true).
final_goal(5, in_tower((block,18),(block,9)), true, false).
final_goal(5, in_tower((block,2),(block,1)), false, true).
final_goal(5, in_tower((block,2),(block,1)), true, false).
final_goal(5, in_tower((block,2),(block,10)), false, true).
final_goal(5, in_tower((block,2),(block,10)), true, false).
final_goal(5, in_tower((block,2),(block,11)), false, true).
final_goal(5, in_tower((block,2),(block,11)), true, false).
final_goal(5, in_tower((block,2),(block,12)), false, true).
final_goal(5, in_tower((block,2),(block,12)), true, false).
final_goal(5, in_tower((block,2),(block,13)), false, true).
final_goal(5, in_tower((block,2),(block,13)), true, false).
final_goal(5, in_tower((block,2),(block,14)), false, true).
final_goal(5, in_tower((block,2),(block,14)), true, false).
final_goal(5, in_tower((block,2),(block,15)), false, true).
final_goal(5, in_tower((block,2),(block,15)), true, false).
final_goal(5, in_tower((block,2),(block,16)), false, true).
final_goal(5, in_tower((block,2),(block,16)), true, false).
final_goal(5, in_tower((block,2),(block,17)), false, true).
final_goal(5, in_tower((block,2),(block,17)), true, false).
final_goal(5, in_tower((block,2),(block,18)), false, true).
final_goal(5, in_tower((block,2),(block,18)), true, false).
final_goal(5, in_tower((block,2),(block,2)), false, true).
final_goal(5, in_tower((block,2),(block,2)), true, false).
final_goal(5, in_tower((block,2),(block,3)), false, true).
final_goal(5, in_tower((block,2),(block,3)), true, false).
final_goal(5, in_tower((block,2),(block,4)), false, true).
final_goal(5, in_tower((block,2),(block,4)), true, false).
final_goal(5, in_tower((block,2),(block,5)), false, true).
final_goal(5, in_tower((block,2),(block,5)), true, false).
final_goal(5, in_tower((block,2),(block,6)), false, true).
final_goal(5, in_tower((block,2),(block,6)), true, false).
final_goal(5, in_tower((block,2),(block,7)), false, true).
final_goal(5, in_tower((block,2),(block,7)), true, false).
final_goal(5, in_tower((block,2),(block,8)), false, true).
final_goal(5, in_tower((block,2),(block,8)), true, false).
final_goal(5, in_tower((block,2),(block,9)), false, true).
final_goal(5, in_tower((block,2),(block,9)), true, false).
final_goal(5, in_tower((block,3),(block,1)), false, false).
final_goal(5, in_tower((block,3),(block,1)), true, true).
final_goal(5, in_tower((block,3),(block,10)), false, true).
final_goal(5, in_tower((block,3),(block,10)), true, false).
final_goal(5, in_tower((block,3),(block,11)), false, true).
final_goal(5, in_tower((block,3),(block,11)), true, false).
final_goal(5, in_tower((block,3),(block,12)), false, true).
final_goal(5, in_tower((block,3),(block,12)), true, false).
final_goal(5, in_tower((block,3),(block,13)), false, true).
final_goal(5, in_tower((block,3),(block,13)), true, false).
final_goal(5, in_tower((block,3),(block,14)), false, true).
final_goal(5, in_tower((block,3),(block,14)), true, false).
final_goal(5, in_tower((block,3),(block,15)), false, true).
final_goal(5, in_tower((block,3),(block,15)), true, false).
final_goal(5, in_tower((block,3),(block,16)), false, true).
final_goal(5, in_tower((block,3),(block,16)), true, false).
final_goal(5, in_tower((block,3),(block,17)), false, true).
final_goal(5, in_tower((block,3),(block,17)), true, false).
final_goal(5, in_tower((block,3),(block,18)), false, true).
final_goal(5, in_tower((block,3),(block,18)), true, false).
final_goal(5, in_tower((block,3),(block,2)), false, false).
final_goal(5, in_tower((block,3),(block,2)), true, true).
final_goal(5, in_tower((block,3),(block,3)), false, false).
final_goal(5, in_tower((block,3),(block,3)), true, true).
final_goal(5, in_tower((block,3),(block,4)), false, true).
final_goal(5, in_tower((block,3),(block,4)), true, false).
final_goal(5, in_tower((block,3),(block,5)), false, true).
final_goal(5, in_tower((block,3),(block,5)), true, false).
final_goal(5, in_tower((block,3),(block,6)), false, true).
final_goal(5, in_tower((block,3),(block,6)), true, false).
final_goal(5, in_tower((block,3),(block,7)), false, true).
final_goal(5, in_tower((block,3),(block,7)), true, false).
final_goal(5, in_tower((block,3),(block,8)), false, true).
final_goal(5, in_tower((block,3),(block,8)), true, false).
final_goal(5, in_tower((block,3),(block,9)), false, true).
final_goal(5, in_tower((block,3),(block,9)), true, false).
final_goal(5, in_tower((block,4),(block,1)), false, true).
final_goal(5, in_tower((block,4),(block,1)), true, false).
final_goal(5, in_tower((block,4),(block,10)), false, true).
final_goal(5, in_tower((block,4),(block,10)), true, false).
final_goal(5, in_tower((block,4),(block,11)), false, true).
final_goal(5, in_tower((block,4),(block,11)), true, false).
final_goal(5, in_tower((block,4),(block,12)), false, true).
final_goal(5, in_tower((block,4),(block,12)), true, false).
final_goal(5, in_tower((block,4),(block,13)), false, true).
final_goal(5, in_tower((block,4),(block,13)), true, false).
final_goal(5, in_tower((block,4),(block,14)), false, true).
final_goal(5, in_tower((block,4),(block,14)), true, false).
final_goal(5, in_tower((block,4),(block,15)), false, true).
final_goal(5, in_tower((block,4),(block,15)), true, false).
final_goal(5, in_tower((block,4),(block,16)), false, true).
final_goal(5, in_tower((block,4),(block,16)), true, false).
final_goal(5, in_tower((block,4),(block,17)), false, true).
final_goal(5, in_tower((block,4),(block,17)), true, false).
final_goal(5, in_tower((block,4),(block,18)), false, true).
final_goal(5, in_tower((block,4),(block,18)), true, false).
final_goal(5, in_tower((block,4),(block,2)), false, true).
final_goal(5, in_tower((block,4),(block,2)), true, false).
final_goal(5, in_tower((block,4),(block,3)), false, true).
final_goal(5, in_tower((block,4),(block,3)), true, false).
final_goal(5, in_tower((block,4),(block,4)), false, true).
final_goal(5, in_tower((block,4),(block,4)), true, false).
final_goal(5, in_tower((block,4),(block,5)), false, true).
final_goal(5, in_tower((block,4),(block,5)), true, false).
final_goal(5, in_tower((block,4),(block,6)), false, true).
final_goal(5, in_tower((block,4),(block,6)), true, false).
final_goal(5, in_tower((block,4),(block,7)), false, true).
final_goal(5, in_tower((block,4),(block,7)), true, false).
final_goal(5, in_tower((block,4),(block,8)), false, true).
final_goal(5, in_tower((block,4),(block,8)), true, false).
final_goal(5, in_tower((block,4),(block,9)), false, true).
final_goal(5, in_tower((block,4),(block,9)), true, false).
final_goal(5, in_tower((block,5),(block,1)), false, true).
final_goal(5, in_tower((block,5),(block,1)), true, false).
final_goal(5, in_tower((block,5),(block,10)), false, true).
final_goal(5, in_tower((block,5),(block,10)), true, false).
final_goal(5, in_tower((block,5),(block,11)), false, true).
final_goal(5, in_tower((block,5),(block,11)), true, false).
final_goal(5, in_tower((block,5),(block,12)), false, true).
final_goal(5, in_tower((block,5),(block,12)), true, false).
final_goal(5, in_tower((block,5),(block,13)), false, true).
final_goal(5, in_tower((block,5),(block,13)), true, false).
final_goal(5, in_tower((block,5),(block,14)), false, true).
final_goal(5, in_tower((block,5),(block,14)), true, false).
final_goal(5, in_tower((block,5),(block,15)), false, true).
final_goal(5, in_tower((block,5),(block,15)), true, false).
final_goal(5, in_tower((block,5),(block,16)), false, true).
final_goal(5, in_tower((block,5),(block,16)), true, false).
final_goal(5, in_tower((block,5),(block,17)), false, true).
final_goal(5, in_tower((block,5),(block,17)), true, false).
final_goal(5, in_tower((block,5),(block,18)), false, true).
final_goal(5, in_tower((block,5),(block,18)), true, false).
final_goal(5, in_tower((block,5),(block,2)), false, true).
final_goal(5, in_tower((block,5),(block,2)), true, false).
final_goal(5, in_tower((block,5),(block,3)), false, true).
final_goal(5, in_tower((block,5),(block,3)), true, false).
final_goal(5, in_tower((block,5),(block,4)), false, true).
final_goal(5, in_tower((block,5),(block,4)), true, false).
final_goal(5, in_tower((block,5),(block,5)), false, true).
final_goal(5, in_tower((block,5),(block,5)), true, false).
final_goal(5, in_tower((block,5),(block,6)), false, true).
final_goal(5, in_tower((block,5),(block,6)), true, false).
final_goal(5, in_tower((block,5),(block,7)), false, true).
final_goal(5, in_tower((block,5),(block,7)), true, false).
final_goal(5, in_tower((block,5),(block,8)), false, true).
final_goal(5, in_tower((block,5),(block,8)), true, false).
final_goal(5, in_tower((block,5),(block,9)), false, true).
final_goal(5, in_tower((block,5),(block,9)), true, false).
final_goal(5, in_tower((block,6),(block,1)), false, true).
final_goal(5, in_tower((block,6),(block,1)), true, false).
final_goal(5, in_tower((block,6),(block,10)), false, true).
final_goal(5, in_tower((block,6),(block,10)), true, false).
final_goal(5, in_tower((block,6),(block,11)), false, true).
final_goal(5, in_tower((block,6),(block,11)), true, false).
final_goal(5, in_tower((block,6),(block,12)), false, true).
final_goal(5, in_tower((block,6),(block,12)), true, false).
final_goal(5, in_tower((block,6),(block,13)), false, true).
final_goal(5, in_tower((block,6),(block,13)), true, false).
final_goal(5, in_tower((block,6),(block,14)), false, true).
final_goal(5, in_tower((block,6),(block,14)), true, false).
final_goal(5, in_tower((block,6),(block,15)), false, true).
final_goal(5, in_tower((block,6),(block,15)), true, false).
final_goal(5, in_tower((block,6),(block,16)), false, true).
final_goal(5, in_tower((block,6),(block,16)), true, false).
final_goal(5, in_tower((block,6),(block,17)), false, true).
final_goal(5, in_tower((block,6),(block,17)), true, false).
final_goal(5, in_tower((block,6),(block,18)), false, true).
final_goal(5, in_tower((block,6),(block,18)), true, false).
final_goal(5, in_tower((block,6),(block,2)), false, true).
final_goal(5, in_tower((block,6),(block,2)), true, false).
final_goal(5, in_tower((block,6),(block,3)), false, true).
final_goal(5, in_tower((block,6),(block,3)), true, false).
final_goal(5, in_tower((block,6),(block,4)), false, false).
final_goal(5, in_tower((block,6),(block,4)), true, true).
final_goal(5, in_tower((block,6),(block,5)), false, false).
final_goal(5, in_tower((block,6),(block,5)), true, true).
final_goal(5, in_tower((block,6),(block,6)), false, false).
final_goal(5, in_tower((block,6),(block,6)), true, true).
final_goal(5, in_tower((block,6),(block,7)), false, true).
final_goal(5, in_tower((block,6),(block,7)), true, false).
final_goal(5, in_tower((block,6),(block,8)), false, true).
final_goal(5, in_tower((block,6),(block,8)), true, false).
final_goal(5, in_tower((block,6),(block,9)), false, true).
final_goal(5, in_tower((block,6),(block,9)), true, false).
final_goal(5, in_tower((block,7),(block,1)), false, true).
final_goal(5, in_tower((block,7),(block,1)), true, false).
final_goal(5, in_tower((block,7),(block,10)), false, true).
final_goal(5, in_tower((block,7),(block,10)), true, false).
final_goal(5, in_tower((block,7),(block,11)), false, true).
final_goal(5, in_tower((block,7),(block,11)), true, false).
final_goal(5, in_tower((block,7),(block,12)), false, true).
final_goal(5, in_tower((block,7),(block,12)), true, false).
final_goal(5, in_tower((block,7),(block,13)), false, true).
final_goal(5, in_tower((block,7),(block,13)), true, false).
final_goal(5, in_tower((block,7),(block,14)), false, true).
final_goal(5, in_tower((block,7),(block,14)), true, false).
final_goal(5, in_tower((block,7),(block,15)), false, true).
final_goal(5, in_tower((block,7),(block,15)), true, false).
final_goal(5, in_tower((block,7),(block,16)), false, true).
final_goal(5, in_tower((block,7),(block,16)), true, false).
final_goal(5, in_tower((block,7),(block,17)), false, true).
final_goal(5, in_tower((block,7),(block,17)), true, false).
final_goal(5, in_tower((block,7),(block,18)), false, true).
final_goal(5, in_tower((block,7),(block,18)), true, false).
final_goal(5, in_tower((block,7),(block,2)), false, true).
final_goal(5, in_tower((block,7),(block,2)), true, false).
final_goal(5, in_tower((block,7),(block,3)), false, true).
final_goal(5, in_tower((block,7),(block,3)), true, false).
final_goal(5, in_tower((block,7),(block,4)), false, true).
final_goal(5, in_tower((block,7),(block,4)), true, false).
final_goal(5, in_tower((block,7),(block,5)), false, true).
final_goal(5, in_tower((block,7),(block,5)), true, false).
final_goal(5, in_tower((block,7),(block,6)), false, true).
final_goal(5, in_tower((block,7),(block,6)), true, false).
final_goal(5, in_tower((block,7),(block,7)), false, true).
final_goal(5, in_tower((block,7),(block,7)), true, false).
final_goal(5, in_tower((block,7),(block,8)), false, true).
final_goal(5, in_tower((block,7),(block,8)), true, false).
final_goal(5, in_tower((block,7),(block,9)), false, true).
final_goal(5, in_tower((block,7),(block,9)), true, false).
final_goal(5, in_tower((block,8),(block,1)), false, true).
final_goal(5, in_tower((block,8),(block,1)), true, false).
final_goal(5, in_tower((block,8),(block,10)), false, true).
final_goal(5, in_tower((block,8),(block,10)), true, false).
final_goal(5, in_tower((block,8),(block,11)), false, true).
final_goal(5, in_tower((block,8),(block,11)), true, false).
final_goal(5, in_tower((block,8),(block,12)), false, true).
final_goal(5, in_tower((block,8),(block,12)), true, false).
final_goal(5, in_tower((block,8),(block,13)), false, true).
final_goal(5, in_tower((block,8),(block,13)), true, false).
final_goal(5, in_tower((block,8),(block,14)), false, true).
final_goal(5, in_tower((block,8),(block,14)), true, false).
final_goal(5, in_tower((block,8),(block,15)), false, true).
final_goal(5, in_tower((block,8),(block,15)), true, false).
final_goal(5, in_tower((block,8),(block,16)), false, true).
final_goal(5, in_tower((block,8),(block,16)), true, false).
final_goal(5, in_tower((block,8),(block,17)), false, true).
final_goal(5, in_tower((block,8),(block,17)), true, false).
final_goal(5, in_tower((block,8),(block,18)), false, true).
final_goal(5, in_tower((block,8),(block,18)), true, false).
final_goal(5, in_tower((block,8),(block,2)), false, true).
final_goal(5, in_tower((block,8),(block,2)), true, false).
final_goal(5, in_tower((block,8),(block,3)), false, true).
final_goal(5, in_tower((block,8),(block,3)), true, false).
final_goal(5, in_tower((block,8),(block,4)), false, true).
final_goal(5, in_tower((block,8),(block,4)), true, false).
final_goal(5, in_tower((block,8),(block,5)), false, true).
final_goal(5, in_tower((block,8),(block,5)), true, false).
final_goal(5, in_tower((block,8),(block,6)), false, true).
final_goal(5, in_tower((block,8),(block,6)), true, false).
final_goal(5, in_tower((block,8),(block,7)), false, true).
final_goal(5, in_tower((block,8),(block,7)), true, false).
final_goal(5, in_tower((block,8),(block,8)), false, true).
final_goal(5, in_tower((block,8),(block,8)), true, false).
final_goal(5, in_tower((block,8),(block,9)), false, true).
final_goal(5, in_tower((block,8),(block,9)), true, false).
final_goal(5, in_tower((block,9),(block,1)), false, true).
final_goal(5, in_tower((block,9),(block,1)), true, false).
final_goal(5, in_tower((block,9),(block,10)), false, true).
final_goal(5, in_tower((block,9),(block,10)), true, false).
final_goal(5, in_tower((block,9),(block,11)), false, true).
final_goal(5, in_tower((block,9),(block,11)), true, false).
final_goal(5, in_tower((block,9),(block,12)), false, true).
final_goal(5, in_tower((block,9),(block,12)), true, false).
final_goal(5, in_tower((block,9),(block,13)), false, true).
final_goal(5, in_tower((block,9),(block,13)), true, false).
final_goal(5, in_tower((block,9),(block,14)), false, true).
final_goal(5, in_tower((block,9),(block,14)), true, false).
final_goal(5, in_tower((block,9),(block,15)), false, true).
final_goal(5, in_tower((block,9),(block,15)), true, false).
final_goal(5, in_tower((block,9),(block,16)), false, true).
final_goal(5, in_tower((block,9),(block,16)), true, false).
final_goal(5, in_tower((block,9),(block,17)), false, true).
final_goal(5, in_tower((block,9),(block,17)), true, false).
final_goal(5, in_tower((block,9),(block,18)), false, true).
final_goal(5, in_tower((block,9),(block,18)), true, false).
final_goal(5, in_tower((block,9),(block,2)), false, true).
final_goal(5, in_tower((block,9),(block,2)), true, false).
final_goal(5, in_tower((block,9),(block,3)), false, true).
final_goal(5, in_tower((block,9),(block,3)), true, false).
final_goal(5, in_tower((block,9),(block,4)), false, true).
final_goal(5, in_tower((block,9),(block,4)), true, false).
final_goal(5, in_tower((block,9),(block,5)), false, true).
final_goal(5, in_tower((block,9),(block,5)), true, false).
final_goal(5, in_tower((block,9),(block,6)), false, true).
final_goal(5, in_tower((block,9),(block,6)), true, false).
final_goal(5, in_tower((block,9),(block,7)), false, false).
final_goal(5, in_tower((block,9),(block,7)), true, true).
final_goal(5, in_tower((block,9),(block,8)), false, false).
final_goal(5, in_tower((block,9),(block,8)), true, true).
final_goal(5, in_tower((block,9),(block,9)), false, false).
final_goal(5, in_tower((block,9),(block,9)), true, true).
final_goal(5, on((block,1)), (block,10), false).
final_goal(5, on((block,1)), (block,11), false).
final_goal(5, on((block,1)), (block,12), false).
final_goal(5, on((block,1)), (block,13), false).
final_goal(5, on((block,1)), (block,14), false).
final_goal(5, on((block,1)), (block,15), false).
final_goal(5, on((block,1)), (block,16), false).
final_goal(5, on((block,1)), (block,17), false).
final_goal(5, on((block,1)), (block,18), false).
final_goal(5, on((block,1)), (block,2), true).
final_goal(5, on((block,1)), (block,3), false).
final_goal(5, on((block,1)), (block,4), false).
final_goal(5, on((block,1)), (block,5), false).
final_goal(5, on((block,1)), (block,6), false).
final_goal(5, on((block,1)), (block,7), false).
final_goal(5, on((block,1)), (block,8), false).
final_goal(5, on((block,1)), (block,9), false).
final_goal(5, on((block,1)), nothing, false).
final_goal(5, on((block,1)), puzzle_room_1_table, false).
final_goal(5, on((block,1)), puzzle_room_2_table, false).
final_goal(5, on((block,10)), (block,1), false).
final_goal(5, on((block,10)), (block,11), true).
final_goal(5, on((block,10)), (block,12), false).
final_goal(5, on((block,10)), (block,13), false).
final_goal(5, on((block,10)), (block,14), false).
final_goal(5, on((block,10)), (block,15), false).
final_goal(5, on((block,10)), (block,16), false).
final_goal(5, on((block,10)), (block,17), false).
final_goal(5, on((block,10)), (block,18), false).
final_goal(5, on((block,10)), (block,2), false).
final_goal(5, on((block,10)), (block,3), false).
final_goal(5, on((block,10)), (block,4), false).
final_goal(5, on((block,10)), (block,5), false).
final_goal(5, on((block,10)), (block,6), false).
final_goal(5, on((block,10)), (block,7), false).
final_goal(5, on((block,10)), (block,8), false).
final_goal(5, on((block,10)), (block,9), false).
final_goal(5, on((block,10)), nothing, false).
final_goal(5, on((block,10)), puzzle_room_1_table, false).
final_goal(5, on((block,10)), puzzle_room_2_table, false).
final_goal(5, on((block,11)), (block,1), false).
final_goal(5, on((block,11)), (block,10), false).
final_goal(5, on((block,11)), (block,12), true).
final_goal(5, on((block,11)), (block,13), false).
final_goal(5, on((block,11)), (block,14), false).
final_goal(5, on((block,11)), (block,15), false).
final_goal(5, on((block,11)), (block,16), false).
final_goal(5, on((block,11)), (block,17), false).
final_goal(5, on((block,11)), (block,18), false).
final_goal(5, on((block,11)), (block,2), false).
final_goal(5, on((block,11)), (block,3), false).
final_goal(5, on((block,11)), (block,4), false).
final_goal(5, on((block,11)), (block,5), false).
final_goal(5, on((block,11)), (block,6), false).
final_goal(5, on((block,11)), (block,7), false).
final_goal(5, on((block,11)), (block,8), false).
final_goal(5, on((block,11)), (block,9), false).
final_goal(5, on((block,11)), nothing, false).
final_goal(5, on((block,11)), puzzle_room_1_table, false).
final_goal(5, on((block,11)), puzzle_room_2_table, false).
final_goal(5, on((block,12)), (block,1), false).
final_goal(5, on((block,12)), (block,10), false).
final_goal(5, on((block,12)), (block,11), false).
final_goal(5, on((block,12)), (block,13), false).
final_goal(5, on((block,12)), (block,14), false).
final_goal(5, on((block,12)), (block,15), false).
final_goal(5, on((block,12)), (block,16), false).
final_goal(5, on((block,12)), (block,17), false).
final_goal(5, on((block,12)), (block,18), false).
final_goal(5, on((block,12)), (block,2), false).
final_goal(5, on((block,12)), (block,3), false).
final_goal(5, on((block,12)), (block,4), false).
final_goal(5, on((block,12)), (block,5), false).
final_goal(5, on((block,12)), (block,6), false).
final_goal(5, on((block,12)), (block,7), false).
final_goal(5, on((block,12)), (block,8), false).
final_goal(5, on((block,12)), (block,9), false).
final_goal(5, on((block,12)), nothing, false).
final_goal(5, on((block,12)), puzzle_room_1_table, false).
final_goal(5, on((block,12)), puzzle_room_2_table, true).
final_goal(5, on((block,13)), (block,1), false).
final_goal(5, on((block,13)), (block,10), false).
final_goal(5, on((block,13)), (block,11), false).
final_goal(5, on((block,13)), (block,12), false).
final_goal(5, on((block,13)), (block,14), true).
final_goal(5, on((block,13)), (block,15), false).
final_goal(5, on((block,13)), (block,16), false).
final_goal(5, on((block,13)), (block,17), false).
final_goal(5, on((block,13)), (block,18), false).
final_goal(5, on((block,13)), (block,2), false).
final_goal(5, on((block,13)), (block,3), false).
final_goal(5, on((block,13)), (block,4), false).
final_goal(5, on((block,13)), (block,5), false).
final_goal(5, on((block,13)), (block,6), false).
final_goal(5, on((block,13)), (block,7), false).
final_goal(5, on((block,13)), (block,8), false).
final_goal(5, on((block,13)), (block,9), false).
final_goal(5, on((block,13)), nothing, false).
final_goal(5, on((block,13)), puzzle_room_1_table, false).
final_goal(5, on((block,13)), puzzle_room_2_table, false).
final_goal(5, on((block,14)), (block,1), false).
final_goal(5, on((block,14)), (block,10), false).
final_goal(5, on((block,14)), (block,11), false).
final_goal(5, on((block,14)), (block,12), false).
final_goal(5, on((block,14)), (block,13), false).
final_goal(5, on((block,14)), (block,15), true).
final_goal(5, on((block,14)), (block,16), false).
final_goal(5, on((block,14)), (block,17), false).
final_goal(5, on((block,14)), (block,18), false).
final_goal(5, on((block,14)), (block,2), false).
final_goal(5, on((block,14)), (block,3), false).
final_goal(5, on((block,14)), (block,4), false).
final_goal(5, on((block,14)), (block,5), false).
final_goal(5, on((block,14)), (block,6), false).
final_goal(5, on((block,14)), (block,7), false).
final_goal(5, on((block,14)), (block,8), false).
final_goal(5, on((block,14)), (block,9), false).
final_goal(5, on((block,14)), nothing, false).
final_goal(5, on((block,14)), puzzle_room_1_table, false).
final_goal(5, on((block,14)), puzzle_room_2_table, false).
final_goal(5, on((block,15)), (block,1), false).
final_goal(5, on((block,15)), (block,10), false).
final_goal(5, on((block,15)), (block,11), false).
final_goal(5, on((block,15)), (block,12), false).
final_goal(5, on((block,15)), (block,13), false).
final_goal(5, on((block,15)), (block,14), false).
final_goal(5, on((block,15)), (block,16), false).
final_goal(5, on((block,15)), (block,17), false).
final_goal(5, on((block,15)), (block,18), false).
final_goal(5, on((block,15)), (block,2), false).
final_goal(5, on((block,15)), (block,3), false).
final_goal(5, on((block,15)), (block,4), false).
final_goal(5, on((block,15)), (block,5), false).
final_goal(5, on((block,15)), (block,6), false).
final_goal(5, on((block,15)), (block,7), false).
final_goal(5, on((block,15)), (block,8), false).
final_goal(5, on((block,15)), (block,9), false).
final_goal(5, on((block,15)), nothing, false).
final_goal(5, on((block,15)), puzzle_room_1_table, false).
final_goal(5, on((block,15)), puzzle_room_2_table, true).
final_goal(5, on((block,16)), (block,1), false).
final_goal(5, on((block,16)), (block,10), false).
final_goal(5, on((block,16)), (block,11), false).
final_goal(5, on((block,16)), (block,12), false).
final_goal(5, on((block,16)), (block,13), false).
final_goal(5, on((block,16)), (block,14), false).
final_goal(5, on((block,16)), (block,15), false).
final_goal(5, on((block,16)), (block,17), true).
final_goal(5, on((block,16)), (block,18), false).
final_goal(5, on((block,16)), (block,2), false).
final_goal(5, on((block,16)), (block,3), false).
final_goal(5, on((block,16)), (block,4), false).
final_goal(5, on((block,16)), (block,5), false).
final_goal(5, on((block,16)), (block,6), false).
final_goal(5, on((block,16)), (block,7), false).
final_goal(5, on((block,16)), (block,8), false).
final_goal(5, on((block,16)), (block,9), false).
final_goal(5, on((block,16)), nothing, false).
final_goal(5, on((block,16)), puzzle_room_1_table, false).
final_goal(5, on((block,16)), puzzle_room_2_table, false).
final_goal(5, on((block,17)), (block,1), false).
final_goal(5, on((block,17)), (block,10), false).
final_goal(5, on((block,17)), (block,11), false).
final_goal(5, on((block,17)), (block,12), false).
final_goal(5, on((block,17)), (block,13), false).
final_goal(5, on((block,17)), (block,14), false).
final_goal(5, on((block,17)), (block,15), false).
final_goal(5, on((block,17)), (block,16), false).
final_goal(5, on((block,17)), (block,18), true).
final_goal(5, on((block,17)), (block,2), false).
final_goal(5, on((block,17)), (block,3), false).
final_goal(5, on((block,17)), (block,4), false).
final_goal(5, on((block,17)), (block,5), false).
final_goal(5, on((block,17)), (block,6), false).
final_goal(5, on((block,17)), (block,7), false).
final_goal(5, on((block,17)), (block,8), false).
final_goal(5, on((block,17)), (block,9), false).
final_goal(5, on((block,17)), nothing, false).
final_goal(5, on((block,17)), puzzle_room_1_table, false).
final_goal(5, on((block,17)), puzzle_room_2_table, false).
final_goal(5, on((block,18)), (block,1), false).
final_goal(5, on((block,18)), (block,10), false).
final_goal(5, on((block,18)), (block,11), false).
final_goal(5, on((block,18)), (block,12), false).
final_goal(5, on((block,18)), (block,13), false).
final_goal(5, on((block,18)), (block,14), false).
final_goal(5, on((block,18)), (block,15), false).
final_goal(5, on((block,18)), (block,16), false).
final_goal(5, on((block,18)), (block,17), false).
final_goal(5, on((block,18)), (block,2), false).
final_goal(5, on((block,18)), (block,3), false).
final_goal(5, on((block,18)), (block,4), false).
final_goal(5, on((block,18)), (block,5), false).
final_goal(5, on((block,18)), (block,6), false).
final_goal(5, on((block,18)), (block,7), false).
final_goal(5, on((block,18)), (block,8), false).
final_goal(5, on((block,18)), (block,9), false).
final_goal(5, on((block,18)), nothing, false).
final_goal(5, on((block,18)), puzzle_room_1_table, false).
final_goal(5, on((block,18)), puzzle_room_2_table, true).
final_goal(5, on((block,2)), (block,1), false).
final_goal(5, on((block,2)), (block,10), false).
final_goal(5, on((block,2)), (block,11), false).
final_goal(5, on((block,2)), (block,12), false).
final_goal(5, on((block,2)), (block,13), false).
final_goal(5, on((block,2)), (block,14), false).
final_goal(5, on((block,2)), (block,15), false).
final_goal(5, on((block,2)), (block,16), false).
final_goal(5, on((block,2)), (block,17), false).
final_goal(5, on((block,2)), (block,18), false).
final_goal(5, on((block,2)), (block,3), true).
final_goal(5, on((block,2)), (block,4), false).
final_goal(5, on((block,2)), (block,5), false).
final_goal(5, on((block,2)), (block,6), false).
final_goal(5, on((block,2)), (block,7), false).
final_goal(5, on((block,2)), (block,8), false).
final_goal(5, on((block,2)), (block,9), false).
final_goal(5, on((block,2)), nothing, false).
final_goal(5, on((block,2)), puzzle_room_1_table, false).
final_goal(5, on((block,2)), puzzle_room_2_table, false).
final_goal(5, on((block,3)), (block,1), false).
final_goal(5, on((block,3)), (block,10), false).
final_goal(5, on((block,3)), (block,11), false).
final_goal(5, on((block,3)), (block,12), false).
final_goal(5, on((block,3)), (block,13), false).
final_goal(5, on((block,3)), (block,14), false).
final_goal(5, on((block,3)), (block,15), false).
final_goal(5, on((block,3)), (block,16), false).
final_goal(5, on((block,3)), (block,17), false).
final_goal(5, on((block,3)), (block,18), false).
final_goal(5, on((block,3)), (block,2), false).
final_goal(5, on((block,3)), (block,4), false).
final_goal(5, on((block,3)), (block,5), false).
final_goal(5, on((block,3)), (block,6), false).
final_goal(5, on((block,3)), (block,7), false).
final_goal(5, on((block,3)), (block,8), false).
final_goal(5, on((block,3)), (block,9), false).
final_goal(5, on((block,3)), nothing, false).
final_goal(5, on((block,3)), puzzle_room_1_table, true).
final_goal(5, on((block,3)), puzzle_room_2_table, false).
final_goal(5, on((block,4)), (block,1), false).
final_goal(5, on((block,4)), (block,10), false).
final_goal(5, on((block,4)), (block,11), false).
final_goal(5, on((block,4)), (block,12), false).
final_goal(5, on((block,4)), (block,13), false).
final_goal(5, on((block,4)), (block,14), false).
final_goal(5, on((block,4)), (block,15), false).
final_goal(5, on((block,4)), (block,16), false).
final_goal(5, on((block,4)), (block,17), false).
final_goal(5, on((block,4)), (block,18), false).
final_goal(5, on((block,4)), (block,2), false).
final_goal(5, on((block,4)), (block,3), false).
final_goal(5, on((block,4)), (block,5), true).
final_goal(5, on((block,4)), (block,6), false).
final_goal(5, on((block,4)), (block,7), false).
final_goal(5, on((block,4)), (block,8), false).
final_goal(5, on((block,4)), (block,9), false).
final_goal(5, on((block,4)), nothing, false).
final_goal(5, on((block,4)), puzzle_room_1_table, false).
final_goal(5, on((block,4)), puzzle_room_2_table, false).
final_goal(5, on((block,5)), (block,1), false).
final_goal(5, on((block,5)), (block,10), false).
final_goal(5, on((block,5)), (block,11), false).
final_goal(5, on((block,5)), (block,12), false).
final_goal(5, on((block,5)), (block,13), false).
final_goal(5, on((block,5)), (block,14), false).
final_goal(5, on((block,5)), (block,15), false).
final_goal(5, on((block,5)), (block,16), false).
final_goal(5, on((block,5)), (block,17), false).
final_goal(5, on((block,5)), (block,18), false).
final_goal(5, on((block,5)), (block,2), false).
final_goal(5, on((block,5)), (block,3), false).
final_goal(5, on((block,5)), (block,4), false).
final_goal(5, on((block,5)), (block,6), true).
final_goal(5, on((block,5)), (block,7), false).
final_goal(5, on((block,5)), (block,8), false).
final_goal(5, on((block,5)), (block,9), false).
final_goal(5, on((block,5)), nothing, false).
final_goal(5, on((block,5)), puzzle_room_1_table, false).
final_goal(5, on((block,5)), puzzle_room_2_table, false).
final_goal(5, on((block,6)), (block,1), false).
final_goal(5, on((block,6)), (block,10), false).
final_goal(5, on((block,6)), (block,11), false).
final_goal(5, on((block,6)), (block,12), false).
final_goal(5, on((block,6)), (block,13), false).
final_goal(5, on((block,6)), (block,14), false).
final_goal(5, on((block,6)), (block,15), false).
final_goal(5, on((block,6)), (block,16), false).
final_goal(5, on((block,6)), (block,17), false).
final_goal(5, on((block,6)), (block,18), false).
final_goal(5, on((block,6)), (block,2), false).
final_goal(5, on((block,6)), (block,3), false).
final_goal(5, on((block,6)), (block,4), false).
final_goal(5, on((block,6)), (block,5), false).
final_goal(5, on((block,6)), (block,7), false).
final_goal(5, on((block,6)), (block,8), false).
final_goal(5, on((block,6)), (block,9), false).
final_goal(5, on((block,6)), nothing, false).
final_goal(5, on((block,6)), puzzle_room_1_table, true).
final_goal(5, on((block,6)), puzzle_room_2_table, false).
final_goal(5, on((block,7)), (block,1), false).
final_goal(5, on((block,7)), (block,10), false).
final_goal(5, on((block,7)), (block,11), false).
final_goal(5, on((block,7)), (block,12), false).
final_goal(5, on((block,7)), (block,13), false).
final_goal(5, on((block,7)), (block,14), false).
final_goal(5, on((block,7)), (block,15), false).
final_goal(5, on((block,7)), (block,16), false).
final_goal(5, on((block,7)), (block,17), false).
final_goal(5, on((block,7)), (block,18), false).
final_goal(5, on((block,7)), (block,2), false).
final_goal(5, on((block,7)), (block,3), false).
final_goal(5, on((block,7)), (block,4), false).
final_goal(5, on((block,7)), (block,5), false).
final_goal(5, on((block,7)), (block,6), false).
final_goal(5, on((block,7)), (block,8), true).
final_goal(5, on((block,7)), (block,9), false).
final_goal(5, on((block,7)), nothing, false).
final_goal(5, on((block,7)), puzzle_room_1_table, false).
final_goal(5, on((block,7)), puzzle_room_2_table, false).
final_goal(5, on((block,8)), (block,1), false).
final_goal(5, on((block,8)), (block,10), false).
final_goal(5, on((block,8)), (block,11), false).
final_goal(5, on((block,8)), (block,12), false).
final_goal(5, on((block,8)), (block,13), false).
final_goal(5, on((block,8)), (block,14), false).
final_goal(5, on((block,8)), (block,15), false).
final_goal(5, on((block,8)), (block,16), false).
final_goal(5, on((block,8)), (block,17), false).
final_goal(5, on((block,8)), (block,18), false).
final_goal(5, on((block,8)), (block,2), false).
final_goal(5, on((block,8)), (block,3), false).
final_goal(5, on((block,8)), (block,4), false).
final_goal(5, on((block,8)), (block,5), false).
final_goal(5, on((block,8)), (block,6), false).
final_goal(5, on((block,8)), (block,7), false).
final_goal(5, on((block,8)), (block,9), true).
final_goal(5, on((block,8)), nothing, false).
final_goal(5, on((block,8)), puzzle_room_1_table, false).
final_goal(5, on((block,8)), puzzle_room_2_table, false).
final_goal(5, on((block,9)), (block,1), false).
final_goal(5, on((block,9)), (block,10), false).
final_goal(5, on((block,9)), (block,11), false).
final_goal(5, on((block,9)), (block,12), false).
final_goal(5, on((block,9)), (block,13), false).
final_goal(5, on((block,9)), (block,14), false).
final_goal(5, on((block,9)), (block,15), false).
final_goal(5, on((block,9)), (block,16), false).
final_goal(5, on((block,9)), (block,17), false).
final_goal(5, on((block,9)), (block,18), false).
final_goal(5, on((block,9)), (block,2), false).
final_goal(5, on((block,9)), (block,3), false).
final_goal(5, on((block,9)), (block,4), false).
final_goal(5, on((block,9)), (block,5), false).
final_goal(5, on((block,9)), (block,6), false).
final_goal(5, on((block,9)), (block,7), false).
final_goal(5, on((block,9)), (block,8), false).
final_goal(5, on((block,9)), nothing, false).
final_goal(5, on((block,9)), puzzle_room_1_table, true).
final_goal(5, on((block,9)), puzzle_room_2_table, false).
final_goal(5, tower_base((block,1),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,1),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,1),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,10),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,10),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,11),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,11),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,12),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,12),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,13),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,13),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,14),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,14),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,15),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,15),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,16),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,16),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,17),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,17),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,18),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), false, false).
final_goal(5, tower_base((block,18),puzzle_room_2_table), true, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,2),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,2),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,3),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,3),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,4),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,4),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,5),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,5),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,6),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,6),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,7),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,7),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_1_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_1_table), true, false).
final_goal(5, tower_base((block,8),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,8),puzzle_room_2_table), true, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), false, false).
final_goal(5, tower_base((block,9),puzzle_room_1_table), true, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), false, true).
final_goal(5, tower_base((block,9),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,1),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,10),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,11),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,12),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,13),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,14),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,15),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,16),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,17),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,18),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,2),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,3),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,4),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,5),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,6),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,7),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,8),puzzle_room_2_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_1_table), true, false).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), false, true).
final_goal(5, unordered_tower((block,9),puzzle_room_2_table), true, false).

[19-01-2022_12-50-08] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[19-01-2022_12-50-08] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x00000205156E3700>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=None, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(5, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 2075 rules

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.011586299999999383s

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(5, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[19-01-2022_12-50-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(5), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.818250s.

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.194320s with result Satisfiable.

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002050CEBC9A0>

[19-01-2022_12-50-09] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['.\\problems\\blocks_world_plus\\single_puzzle\\BWP_problem_multi_puzzle_large_1.lp', '.\\problems\\blocks_world_plus\\single_puzzle\\BWP_system_laws_tasking_double_condensed.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 5)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', None)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002050CEBC9A0>)

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, true, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[19-01-2022_12-50-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.119510s.

[19-01-2022_12-50-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049017s with result Unsatisfiable.

[19-01-2022_12-50-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.1685266, Incremental time limit = None
Running cumulative time = 2.1685266, Cumulative time limit = 3600
Used memory = (RSS = 231.414062Mb, VMS = 224.218750Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[19-01-2022_12-50-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.143728s.

[19-01-2022_12-50-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018521s with result Unsatisfiable.

[19-01-2022_12-50-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.1622486999999992, Incremental time limit = None
Running cumulative time = 3.330775299999999, Cumulative time limit = 3600
Used memory = (RSS = 236.277344Mb, VMS = 230.453125Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[19-01-2022_12-50-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.775402s.

[19-01-2022_12-50-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045562s with result Unsatisfiable.

[19-01-2022_12-50-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.8209643999999976, Incremental time limit = None
Running cumulative time = 5.151739699999997, Cumulative time limit = 3600
Used memory = (RSS = 262.667969Mb, VMS = 255.410156Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[19-01-2022_12-50-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.090432s.

[19-01-2022_12-50-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055390s with result Unsatisfiable.

[19-01-2022_12-50-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.145821699999999, Incremental time limit = None
Running cumulative time = 7.297561399999996, Cumulative time limit = 3600
Used memory = (RSS = 296.726562Mb, VMS = 294.570312Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[19-01-2022_12-50-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.020002s.

[19-01-2022_12-50-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058892s with result Unsatisfiable.

[19-01-2022_12-50-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.0788943000000017, Incremental time limit = None
Running cumulative time = 9.376455699999998, Cumulative time limit = 3600
Used memory = (RSS = 324.679688Mb, VMS = 320.402344Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[19-01-2022_12-50-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.094727s.

[19-01-2022_12-50-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080447s with result Unsatisfiable.

[19-01-2022_12-50-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.175173700000002, Incremental time limit = None
Running cumulative time = 11.5516294, Cumulative time limit = 3600
Used memory = (RSS = 356.285156Mb, VMS = 359.753906Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[19-01-2022_12-50-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.030005s.

[19-01-2022_12-50-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.126120s with result Unsatisfiable.

[19-01-2022_12-50-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.1561249999999994, Incremental time limit = None
Running cumulative time = 13.707754399999999, Cumulative time limit = 3600
Used memory = (RSS = 386.589844Mb, VMS = 386.769531Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[19-01-2022_12-50-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.178563s.

[19-01-2022_12-50-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.153137s with result Unsatisfiable.

[19-01-2022_12-50-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.3316993000000004, Incremental time limit = None
Running cumulative time = 16.0394537, Cumulative time limit = 3600
Used memory = (RSS = 417.109375Mb, VMS = 430.019531Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[19-01-2022_12-50-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.097505s.

[19-01-2022_12-50-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.194182s with result Unsatisfiable.

[19-01-2022_12-50-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.291687000000003, Incremental time limit = None
Running cumulative time = 18.331140700000002, Cumulative time limit = 3600
Used memory = (RSS = 452.453125Mb, VMS = 460.562500Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[19-01-2022_12-50-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.093985s.

[19-01-2022_12-50-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.218905s with result Unsatisfiable.

[19-01-2022_12-50-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.3128898999999947, Incremental time limit = None
Running cumulative time = 20.644030599999997, Cumulative time limit = 3600
Used memory = (RSS = 476.218750Mb, VMS = 480.855469Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[19-01-2022_12-50-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.174098s.

[19-01-2022_12-50-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.388632s with result Unsatisfiable.

[19-01-2022_12-50-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.562730099999996, Incremental time limit = None
Running cumulative time = 23.206760699999993, Cumulative time limit = 3600
Used memory = (RSS = 509.781250Mb, VMS = 536.718750Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =   None

[19-01-2022_12-50-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[19-01-2022_12-50-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 2.182745s.

[19-01-2022_12-50-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 3.626213s with result Satisfiable.

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 5.808957999999997, Incremental time limit = None
Running cumulative time = 29.01571869999999, Cumulative time limit = 3600
Used memory = (RSS = 654.183594Mb, VMS = 674.355469Mb), Total system virtual memory = 16324.18359375Mb

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 24.000699s, Solving = 5.015019s, Total = 29.015719s, Memory = (RSS = 654.183594Mb, VMS = 674.355469Mb), Step range = [0-12]), Calls = 12
Final Model :: Total atoms = 140982, Cost = (-567, 30, 0), Optimality proven = False, Number = 7, Thread ID = 2, Model type = ModelType.StableModel

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 2.119510s, Solving = 0.049017s, Total = 2.168527s, Memory = (RSS = 231.414062Mb, VMS = 224.218750Mb), Step range = [0-1]
2 : Statistics :: Grounding = 1.143728s, Solving = 0.018521s, Total = 1.162249s, Memory = (RSS = 236.277344Mb, VMS = 230.453125Mb), Step range = [2-2]
3 : Statistics :: Grounding = 1.775402s, Solving = 0.045562s, Total = 1.820964s, Memory = (RSS = 262.667969Mb, VMS = 255.410156Mb), Step range = [3-3]
4 : Statistics :: Grounding = 2.090432s, Solving = 0.055390s, Total = 2.145822s, Memory = (RSS = 296.726562Mb, VMS = 294.570312Mb), Step range = [4-4]
5 : Statistics :: Grounding = 2.020002s, Solving = 0.058892s, Total = 2.078894s, Memory = (RSS = 324.679688Mb, VMS = 320.402344Mb), Step range = [5-5]
6 : Statistics :: Grounding = 2.094727s, Solving = 0.080447s, Total = 2.175174s, Memory = (RSS = 356.285156Mb, VMS = 359.753906Mb), Step range = [6-6]
7 : Statistics :: Grounding = 2.030005s, Solving = 0.126120s, Total = 2.156125s, Memory = (RSS = 386.589844Mb, VMS = 386.769531Mb), Step range = [7-7]
8 : Statistics :: Grounding = 2.178563s, Solving = 0.153137s, Total = 2.331699s, Memory = (RSS = 417.109375Mb, VMS = 430.019531Mb), Step range = [8-8]
9 : Statistics :: Grounding = 2.097505s, Solving = 0.194182s, Total = 2.291687s, Memory = (RSS = 452.453125Mb, VMS = 460.562500Mb), Step range = [9-9]
10 : Statistics :: Grounding = 2.093985s, Solving = 0.218905s, Total = 2.312890s, Memory = (RSS = 476.218750Mb, VMS = 480.855469Mb), Step range = [10-10]
11 : Statistics :: Grounding = 2.174098s, Solving = 0.388632s, Total = 2.562730s, Memory = (RSS = 509.781250Mb, VMS = 536.718750Mb), Step range = [11-11]
12 : Statistics :: Grounding = 2.182745s, Solving = 3.626213s, Total = 5.808958s, Memory = (RSS = 654.183594Mb, VMS = 674.355469Mb), Step range = [12-12]

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 29.015719s due to: Stop condition reached.

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_12-50-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> Final-goal intermediate ordering correct = False

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 24.000699s, Solving = 5.015019s, Total = 29.015719s, Memory = (RSS = 654.183594Mb, VMS = 674.355469Mb), Step range = [0-12]), Calls = 12
Model :: Total atoms = 140982, Cost = (-567, 30, 0), Optimality proven = False, Number = 7, Thread ID = 2, Model type = ModelType.StableModel

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 5                 
          ========================================          
                 Steps = 12 :: Actions = 30                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room_1)
Step 2:
    Planned actions:
        talos : collect((block,4))
        talos : collect((block,5))
        talos : collect((block,6))
        talos : collect((block,8))
Step 3:
    Planned actions:
        talos : move(puzzle_room_1)
Step 4:
    Planned actions:
        talos : place_upon((block,3),puzzle_room_1_table)
        talos : place_upon((block,6),puzzle_room_1_table)
        talos : place_upon((block,9),puzzle_room_1_table)
Step 5:
    Planned actions:
        talos : place_upon((block,2),(block,3))
        talos : place_upon((block,5),(block,6))
        talos : place_upon((block,8),(block,9))
Step 6:
    Planned actions:
        talos : place_upon((block,1),(block,2))
        talos : place_upon((block,4),(block,5))
        talos : place_upon((block,7),(block,8))
Step 7:
    Planned actions:
        talos : move(store_room_2)
Step 8:
    Planned actions:
        talos : collect((block,13))
        talos : collect((block,14))
        talos : collect((block,15))
        talos : collect((block,17))
Step 9:
    Planned actions:
        talos : move(puzzle_room_2)
Step 10:
    Planned actions:
        talos : place_upon((block,12),puzzle_room_2_table)
        talos : place_upon((block,15),puzzle_room_2_table)
        talos : place_upon((block,18),puzzle_room_2_table)
Step 11:
    Planned actions:
        talos : place_upon((block,11),(block,12))
        talos : place_upon((block,14),(block,15))
        talos : place_upon((block,17),(block,18))
Step 12:
    Planned actions:
        talos : place_upon((block,10),(block,11))
        talos : place_upon((block,13),(block,14))
        talos : place_upon((block,16),(block,17))

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> Monolevel problem 1 at level 5 solved.

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> Online planning increment 1 finished.

[19-01-2022_12-50-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[19-01-2022_12-50-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Tota actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 12, Actions = 30

[19-01-2022_12-50-43] INFO :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 30.02828829999999, Average ground wait time = 30.02828829999999, Absolution time = 30.02828829999999)

     ========================================================================================================================================================================================================     
     |        Lvl = 5 (classic), LE =  12, AC =  30, CF = 0.4, GT =  24.82s, ST =   5.21s, OT = 0.00s, TT =  30.03s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     ========================================================================================================================================================================================================     

[19-01-2022_12-50-43] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=5, start_step=0, total_plan_length=12, step_range=range(0, 13)

[19-01-2022_12-50-43] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [5]: Length = 12, Tota actions = 30, Produced sub-goal stages = 56
Level [4]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [3]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [2]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Tota actions = 0, Produced sub-goal stages = 0

[19-01-2022_12-50-43] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_2022-01-19_12-49-56_.txt

[19-01-2022_12-50-43] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_2022-01-19_12-49-56_.txt

[19-01-2022_12-50-43] ERROR :: __main__ >> Failed to save schema to file.
Traceback (most recent call last):
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 472, in __main
    file_writer.write(json.dumps(hierarchical_plan.get_refinement_schema(namespace.schema_level).serialisable_dict, indent=4))
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\core\Planner.py", line 1074, in get_refinement_schema
    raise ASH_InvalidInputError(f"Plan at level {level} does not exist.")
core.Planner.ASH_InvalidInputError: Plan at level 1 does not exist.
[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Cond.otf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Regular.otf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Regular.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-It.otf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Semibold.otf) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Futura Std' (FuturaStd-HeavyOblique.otf) oblique normal 650 normal>) = 11.2875

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-SemiboldIt.otf) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-CondIt.otf) italic normal 400 condensed>) = 11.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Artifakt Element' (Artifakt Element Bold Italic.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myriad Pro' (MyriadPro-Bold.otf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_12-50-44] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Ollie Kampo\\Anaconda3\\envs\\ASH_2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[19-01-2022_12-50-54] INFO :: __main__ >> Overall time: Real = 58.3087572, Process = 69.171875

[19-01-2022_12-50-54] INFO :: __main__ >> Exiting with code 0

