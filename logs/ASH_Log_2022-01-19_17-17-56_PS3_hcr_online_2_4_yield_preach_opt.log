[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 51})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 51})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,1)', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 51})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 51})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 51})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 51})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 51})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 51})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 51})

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 51).
holds(1, complete_tower(red,puzzle_room_table), false, 51).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 51).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 51).
holds(1, configuration(manipulator_limb_1), extended, 51).
holds(1, configuration(manipulator_limb_2), retracted, 51).
holds(1, configuration(puzzle_room_door), open, 51).
holds(1, configuration(starting_room_door), closed, 51).
holds(1, configuration(store_room_door), open, 51).
holds(1, grasping(manipulator_arm_1), (block,2), 51).
holds(1, grasping(manipulator_arm_2), nothing, 51).
holds(1, grasping(manipulator_end_1), (block,2), 51).
holds(1, grasping(manipulator_end_2), nothing, 51).
holds(1, in((block,1)), (puzzle_room,1), 51).
holds(1, in((block,2)), (puzzle_room,1), 51).
holds(1, in((block,3)), (puzzle_room,1), 51).
holds(1, in((block,4)), (store_room,0), 51).
holds(1, in((block,5)), (puzzle_room,1), 51).
holds(1, in((block,6)), (puzzle_room,1), 51).
holds(1, in(manipulator_arm_1), (puzzle_room,1), 51).
holds(1, in(manipulator_arm_2), (puzzle_room,1), 51).
holds(1, in(manipulator_end_1), (puzzle_room,1), 51).
holds(1, in(manipulator_end_2), (puzzle_room,1), 51).
holds(1, in(manipulator_limb_1), (puzzle_room,1), 51).
holds(1, in(manipulator_limb_2), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 51).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 51).
holds(1, in(talos), (puzzle_room,1), 51).
holds(1, in_tower((block,1),(block,1)), true, 51).
holds(1, in_tower((block,1),(block,2)), false, 51).
holds(1, in_tower((block,1),(block,3)), false, 51).
holds(1, in_tower((block,1),(block,4)), false, 51).
holds(1, in_tower((block,1),(block,5)), false, 51).
holds(1, in_tower((block,1),(block,6)), false, 51).
holds(1, in_tower((block,2),(block,1)), false, 51).
holds(1, in_tower((block,2),(block,2)), false, 51).
holds(1, in_tower((block,2),(block,3)), false, 51).
holds(1, in_tower((block,2),(block,4)), false, 51).
holds(1, in_tower((block,2),(block,5)), false, 51).
holds(1, in_tower((block,2),(block,6)), false, 51).
holds(1, in_tower((block,3),(block,1)), false, 51).
holds(1, in_tower((block,3),(block,2)), true, 51).
holds(1, in_tower((block,3),(block,3)), true, 51).
holds(1, in_tower((block,3),(block,4)), false, 51).
holds(1, in_tower((block,3),(block,5)), false, 51).
holds(1, in_tower((block,3),(block,6)), false, 51).
holds(1, in_tower((block,4),(block,1)), false, 51).
holds(1, in_tower((block,4),(block,2)), false, 51).
holds(1, in_tower((block,4),(block,3)), false, 51).
holds(1, in_tower((block,4),(block,4)), false, 51).
holds(1, in_tower((block,4),(block,5)), false, 51).
holds(1, in_tower((block,4),(block,6)), false, 51).
holds(1, in_tower((block,5),(block,1)), false, 51).
holds(1, in_tower((block,5),(block,2)), false, 51).
holds(1, in_tower((block,5),(block,3)), false, 51).
holds(1, in_tower((block,5),(block,4)), false, 51).
holds(1, in_tower((block,5),(block,5)), false, 51).
holds(1, in_tower((block,5),(block,6)), false, 51).
holds(1, in_tower((block,6),(block,1)), false, 51).
holds(1, in_tower((block,6),(block,2)), false, 51).
holds(1, in_tower((block,6),(block,3)), false, 51).
holds(1, in_tower((block,6),(block,4)), false, 51).
holds(1, in_tower((block,6),(block,5)), true, 51).
holds(1, in_tower((block,6),(block,6)), true, 51).
holds(1, on((block,1)), puzzle_room_table_left, 51).
holds(1, on((block,2)), (block,3), 51).
holds(1, on((block,3)), puzzle_room_table_left, 51).
holds(1, on((block,4)), nothing, 51).
holds(1, on((block,5)), (block,6), 51).
holds(1, on((block,6)), puzzle_room_table_right, 51).
holds(1, tower_base((block,1),puzzle_room_table), true, 51).
holds(1, tower_base((block,2),puzzle_room_table), false, 51).
holds(1, tower_base((block,3),puzzle_room_table), true, 51).
holds(1, tower_base((block,4),puzzle_room_table), false, 51).
holds(1, tower_base((block,5),puzzle_room_table), false, 51).
holds(1, tower_base((block,6),puzzle_room_table), true, 51).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 51).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 51).
holds(2, complete_tower(blue,puzzle_room_table), false, 51).
holds(2, complete_tower(red,puzzle_room_table), false, 51).
holds(2, configuration(manipulator_arm_1), extended, 51).
holds(2, configuration(manipulator_arm_2), retracted, 51).
holds(2, configuration(puzzle_room_door), open, 51).
holds(2, configuration(starting_room_door), closed, 51).
holds(2, configuration(store_room_door), open, 51).
holds(2, grasping(manipulator_arm_1), (block,2), 51).
holds(2, grasping(manipulator_arm_2), nothing, 51).
holds(2, in((block,1)), puzzle_room, 51).
holds(2, in((block,2)), puzzle_room, 51).
holds(2, in((block,3)), puzzle_room, 51).
holds(2, in((block,4)), store_room, 51).
holds(2, in((block,5)), puzzle_room, 51).
holds(2, in((block,6)), puzzle_room, 51).
holds(2, in(manipulator_arm_1), puzzle_room, 51).
holds(2, in(manipulator_arm_2), puzzle_room, 51).
holds(2, in(puzzle_room_table), puzzle_room, 51).
holds(2, in(talos), puzzle_room, 51).
holds(2, in_tower((block,1),(block,1)), true, 51).
holds(2, in_tower((block,1),(block,2)), false, 51).
holds(2, in_tower((block,1),(block,3)), false, 51).
holds(2, in_tower((block,1),(block,4)), false, 51).
holds(2, in_tower((block,1),(block,5)), false, 51).
holds(2, in_tower((block,1),(block,6)), false, 51).
holds(2, in_tower((block,2),(block,1)), false, 51).
holds(2, in_tower((block,2),(block,2)), false, 51).
holds(2, in_tower((block,2),(block,3)), false, 51).
holds(2, in_tower((block,2),(block,4)), false, 51).
holds(2, in_tower((block,2),(block,5)), false, 51).
holds(2, in_tower((block,2),(block,6)), false, 51).
holds(2, in_tower((block,3),(block,1)), false, 51).
holds(2, in_tower((block,3),(block,2)), true, 51).
holds(2, in_tower((block,3),(block,3)), true, 51).
holds(2, in_tower((block,3),(block,4)), false, 51).
holds(2, in_tower((block,3),(block,5)), false, 51).
holds(2, in_tower((block,3),(block,6)), false, 51).
holds(2, in_tower((block,4),(block,1)), false, 51).
holds(2, in_tower((block,4),(block,2)), false, 51).
holds(2, in_tower((block,4),(block,3)), false, 51).
holds(2, in_tower((block,4),(block,4)), false, 51).
holds(2, in_tower((block,4),(block,5)), false, 51).
holds(2, in_tower((block,4),(block,6)), false, 51).
holds(2, in_tower((block,5),(block,1)), false, 51).
holds(2, in_tower((block,5),(block,2)), false, 51).
holds(2, in_tower((block,5),(block,3)), false, 51).
holds(2, in_tower((block,5),(block,4)), false, 51).
holds(2, in_tower((block,5),(block,5)), false, 51).
holds(2, in_tower((block,5),(block,6)), false, 51).
holds(2, in_tower((block,6),(block,1)), false, 51).
holds(2, in_tower((block,6),(block,2)), false, 51).
holds(2, in_tower((block,6),(block,3)), false, 51).
holds(2, in_tower((block,6),(block,4)), false, 51).
holds(2, in_tower((block,6),(block,5)), true, 51).
holds(2, in_tower((block,6),(block,6)), true, 51).
holds(2, on((block,1)), puzzle_room_table, 51).
holds(2, on((block,2)), (block,3), 51).
holds(2, on((block,3)), puzzle_room_table, 51).
holds(2, on((block,4)), nothing, 51).
holds(2, on((block,5)), (block,6), 51).
holds(2, on((block,6)), puzzle_room_table, 51).
holds(2, tower_base((block,1),puzzle_room_table), true, 51).
holds(2, tower_base((block,2),puzzle_room_table), false, 51).
holds(2, tower_base((block,3),puzzle_room_table), true, 51).
holds(2, tower_base((block,4),puzzle_room_table), false, 51).
holds(2, tower_base((block,5),puzzle_room_table), false, 51).
holds(2, tower_base((block,6),puzzle_room_table), true, 51).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 51).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 51).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 31})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 32})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 34})

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 4 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 31).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 32).
sub_goal(2, talos, move(hallway), in(talos), hallway, 33).
sub_goal(2, talos, move(store_room), in(talos), store_room, 34).

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F1248DFA60>]
	incrementor = SolveIncrementor(step_start=51, step_increase=1, step_increase_initial=2, step_end_min=55, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 51), range_=None), IncPart(name='plan_module', args=('#inc', 51, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 51, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 51, 31, 34, 'sequential', 'true'), range_=None)]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 812 rules

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00447400000007292s

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029632s.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005237s with result Satisfiable.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F15EEF9E50>

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 51)
	('last_sgoals', 34)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F1248C5100>)
	('first_sgoals', 31)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F15EEF9E50>)

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(31, 52)', truth=True, inc_range=None)

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 51). %* None *%
#program plan_module(#inc, 51, false, false). %* None *%
#program optimisation_module(#inc, 51, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 51, 31, 34, sequential, true). %* None *%

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     50 : Current =     52
Incrementor step ends | Minimum  =     55 : Maximum =    100

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(51), Number(51)]), ('plan_module', [Number(51), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(52), Number(51)]), ('plan_module', [Number(52), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119134s.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 51: original = External(symbol='current_last_sgoals(31, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(31,52).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 52: original = External(symbol='current_last_sgoals(31, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(31,52).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013916s with result Satisfiable.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13304970000012872, Incremental time limit = None
Running cumulative time = 0.13304970000012872, Cumulative time limit = 1800
Used memory = (RSS = 1035.839844Mb, VMS = 1027.898438Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.119134s, Solving = 0.013916s, Total = 0.133050s, Memory = (RSS = 1035.839844Mb, VMS = 1027.898438Mb), Step range = [51-52]), Calls = 1
Final Model :: Total atoms = 4156, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=50, end_step=52, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.11913350000008904, solving_time=0.01391620000003968, total_time=0.13304970000012872, memory=Memory(rss=1035.83984375, vms=1027.8984375), step_range=range(51, 53), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.11913350000008904, solving_time=0.01391620000003968, total_time=0.13304970000012872, memory=Memory(rss=1035.83984375, vms=1027.8984375), step_range=range(51, 53), clingo_stats={'problem': {'lp': {'atoms': 12216.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 27977.0, 'bodies_tr': 27977.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 534.0, 'rules': 56508.0, 'rules_normal': 55963.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56508.0, 'rules_tr_normal': 55963.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 26288.0, 'eqs_atom': 7076.0, 'eqs_body': 1954.0, 'eqs_other': 17258.0}, 'lpStep': {'atoms': 5697.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25358.0, 'bodies_tr': 25358.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 534.0, 'rules': 49079.0, 'rules_normal': 48534.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49079.0, 'rules_tr_normal': 48534.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 13232.0, 'eqs_atom': 2166.0, 'eqs_body': 429.0, 'eqs_other': 10637.0}, 'generator': {'vars': 2325.0, 'vars_eliminated': 0.0, 'vars_frozen': 1486.0, 'constraints': 19.0, 'constraints_binary': 1133.0, 'constraints_ternary': 169.0, 'acyc_edges': 0.0, 'complexity': 1335.0}}, 'solving': {'solvers': {'choices': 36.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 26.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 78.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 3.0, 'times': {'total': 0.1330280303955078, 'cpu': 0.140625, 'solve': 0.004001617431640625, 'unsat': 0.003009796142578125, 'sat': 0.0009918212890625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.17302703857421875, 'cpu': 0.171875, 'solve': 0.0070037841796875, 'unsat': 0.003009796142578125, 'sat': 0.0009918212890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 36.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 27.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 84.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{31: 52}

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 32 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 2 ( 50.00% solved)

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(32, 52)', truth=True, inc_range=None)

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 32, step = 52]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 32)

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 52:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     55 : Maximum =    100

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(51)]), ('plan_module', [Number(53), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082057s.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 53: original = External(symbol='current_last_sgoals(32, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(32,52).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008335s with result Satisfiable.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.0903925000000072, Incremental time limit = None
Running cumulative time = 0.22344220000013593, Cumulative time limit = 1800
Used memory = (RSS = 1035.839844Mb, VMS = 1027.898438Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.201191s, Solving = 0.022252s, Total = 0.223442s, Memory = (RSS = 1035.839844Mb, VMS = 1027.898438Mb), Step range = [51-53]), Calls = 2
Final Model :: Total atoms = 4530, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=52, end_step=53, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.20119070000009742, solving_time=0.022251500000038504, total_time=0.22344220000013593, memory=Memory(rss=1035.83984375, vms=1027.8984375), step_range=range(51, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08205720000000838, solving_time=0.008335299999998824, total_time=0.0903925000000072, memory=Memory(rss=1035.83984375, vms=1027.8984375), step_range=range(53, 54), clingo_stats={'problem': {'lp': {'atoms': 13956.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49617.0, 'bodies_tr': 49617.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 36.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 571.0, 'rules': 97637.0, 'rules_normal': 96895.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 97637.0, 'rules_tr_normal': 96895.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 29301.0, 'eqs_atom': 7656.0, 'eqs_body': 2370.0, 'eqs_other': 19275.0}, 'lpStep': {'atoms': 1740.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21640.0, 'bodies_tr': 21640.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 41129.0, 'rules_normal': 40932.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41129.0, 'rules_tr_normal': 40932.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3013.0, 'eqs_atom': 580.0, 'eqs_body': 416.0, 'eqs_other': 2017.0}, 'generator': {'vars': 2587.0, 'vars_eliminated': 0.0, 'vars_frozen': 1677.0, 'constraints': 51.0, 'constraints_binary': 2749.0, 'constraints_ternary': 298.0, 'acyc_edges': 0.0, 'complexity': 3122.0}}, 'solving': {'solvers': {'choices': 108.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 37.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 5.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 114.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.09102821350097656, 'cpu': 0.09375, 'solve': 0.004001617431640625, 'unsat': 0.004001617431640625, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.2640552520751953, 'cpu': 0.265625, 'solve': 0.011005401611328125, 'unsat': 0.00701141357421875, 'sat': 0.0009918212890625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 144.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 64.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 5.0, 'lemmas': 1.0, 'lits_learnt': 2.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 198.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 1.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 2.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{31: 52, 32: 53}

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 33 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 3 ( 75.00% solved)

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(33, 53)', truth=True, inc_range=None)

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 33, step = 53]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 33)

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     55 : Maximum =    100

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(51)]), ('plan_module', [Number(54), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083886s.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 54: original = External(symbol='current_last_sgoals(33, 53)', truth=True, inc_range=None), conversion = current_last_sgoals(33,53).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006237s with result Unsatisfiable.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09012270000016542, Incremental time limit = None
Running cumulative time = 0.31356490000030135, Cumulative time limit = 1800
Used memory = (RSS = 1035.867188Mb, VMS = 1027.898438Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.2850767000002179, solving_time=0.028488200000083452, total_time=0.31356490000030135, memory=Memory(rss=1035.8671875, vms=1027.8984375), step_range=range(51, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08388600000012048, solving_time=0.006236700000044948, total_time=0.09012270000016542, memory=Memory(rss=1035.8671875, vms=1027.8984375), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 15844.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71450.0, 'bodies_tr': 71450.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 49.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 747.0, 'rules': 139071.0, 'rules_normal': 138132.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 139071.0, 'rules_tr_normal': 138132.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 34382.0, 'eqs_atom': 8446.0, 'eqs_body': 2928.0, 'eqs_other': 23008.0}, 'lpStep': {'atoms': 1888.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21833.0, 'bodies_tr': 21833.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 41434.0, 'rules_normal': 41237.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41434.0, 'rules_tr_normal': 41237.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 5081.0, 'eqs_atom': 790.0, 'eqs_body': 558.0, 'eqs_other': 3733.0}, 'generator': {'vars': 3157.0, 'vars_eliminated': 0.0, 'vars_frozen': 2043.0, 'constraints': 175.0, 'constraints_binary': 6113.0, 'constraints_ternary': 606.0, 'acyc_edges': 0.0, 'complexity': 6964.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 4.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 150.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -3.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.0910186767578125, 'cpu': 0.09375, 'solve': 0.0009918212890625, 'unsat': 0.0009918212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.3550739288330078, 'cpu': 0.359375, 'solve': 0.011997222900390625, 'unsat': 0.00800323486328125, 'sat': 0.0009918212890625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 144.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 64.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 5.0, 'lemmas': 3.0, 'lits_learnt': 6.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 348.0, 'guiding_paths': 24.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     55 : Maximum =    100

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(51)]), ('plan_module', [Number(55), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091511s.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013496s with result Satisfiable.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10500739999997677, Incremental time limit = None
Running cumulative time = 0.4185723000002781, Cumulative time limit = 1800
Used memory = (RSS = 1035.902344Mb, VMS = 1027.933594Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.376588s, Solving = 0.041984s, Total = 0.418572s, Memory = (RSS = 1035.902344Mb, VMS = 1027.933594Mb), Step range = [51-55]), Calls = 4
Final Model :: Total atoms = 5278, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=54, end_step=55, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.37658790000023146, solving_time=0.04198440000004666, total_time=0.4185723000002781, memory=Memory(rss=1035.90234375, vms=1027.93359375), step_range=range(51, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09151120000001356, solving_time=0.01349619999996321, total_time=0.10500739999997677, memory=Memory(rss=1035.90234375, vms=1027.93359375), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 18595.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94260.0, 'bodies_tr': 94260.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 72.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1111.0, 'rules': 182232.0, 'rules_normal': 181096.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 182232.0, 'rules_tr_normal': 181096.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 40997.0, 'eqs_atom': 9850.0, 'eqs_body': 3231.0, 'eqs_other': 27916.0}, 'lpStep': {'atoms': 2751.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22810.0, 'bodies_tr': 22810.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 364.0, 'rules': 43161.0, 'rules_normal': 42964.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43161.0, 'rules_tr_normal': 42964.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6615.0, 'eqs_atom': 1404.0, 'eqs_body': 303.0, 'eqs_other': 4908.0}, 'generator': {'vars': 4559.0, 'vars_eliminated': 0.0, 'vars_frozen': 2897.0, 'constraints': 529.0, 'constraints_binary': 18392.0, 'constraints_ternary': 1968.0, 'acyc_edges': 0.0, 'complexity': 21033.0}}, 'solving': {'solvers': {'choices': 297.0, 'conflicts': 17.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 62.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 39.0, 'integrated': 72.0, 'lemmas': 110.0, 'lits_learnt': 713.0, 'lemmas_binary': 45.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 23.0, 'integrated_jumps': 112.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 33.0, 'lemmas_other': 66.0, 'lits_conflict': 94.0, 'lits_loop': 241.0, 'lits_other': 378.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 2.0, 'levels': 83.0, 'levels_bounded': 4.0, 'max': 22.0, 'max_executed': 22.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.10602569580078125, 'cpu': 0.09375, 'solve': 0.0060024261474609375, 'unsat': 0.0040111541748046875, 'sat': 0.00199127197265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.46109962463378906, 'cpu': 0.453125, 'solve': 0.017999649047851562, 'unsat': 0.012014389038085938, 'sat': 0.00298309326171875}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 441.0, 'conflicts': 22.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 126.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 45.0, 'integrated': 77.0, 'lemmas': 113.0, 'lits_learnt': 719.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 23.0, 'integrated_jumps': 112.0, 'guiding_paths_lits': 534.0, 'guiding_paths': 35.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 36.0, 'lemmas_other': 66.0, 'lits_conflict': 94.0, 'lits_loop': 247.0, 'lits_other': 378.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 2.0, 'levels': 83.0, 'levels_bounded': 4.0, 'max': 22.0, 'max_executed': 22.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{31: 52, 32: 53, 33: 55}

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 34 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 4 (100.00% solved)

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(34, 55)', truth=True, inc_range=None)

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 34, step = 55]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 34)

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     55 : Maximum =    100

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(51)]), ('plan_module', [Number(56), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097453s.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 56: original = External(symbol='current_last_sgoals(34, 55)', truth=True, inc_range=None), conversion = current_last_sgoals(34,55).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016827s with result Unsatisfiable.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.11427959999991799, Incremental time limit = None
Running cumulative time = 0.5328519000001961, Cumulative time limit = 1800
Used memory = (RSS = 1035.917969Mb, VMS = 1027.933594Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=55, end_step=56, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.47404050000022835, solving_time=0.05881139999996776, total_time=0.5328519000001961, memory=Memory(rss=1035.91796875, vms=1027.93359375), step_range=range(51, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09745259999999689, solving_time=0.0168269999999211, total_time=0.11427959999991799, memory=Memory(rss=1035.91796875, vms=1027.93359375), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 21843.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118088.0, 'bodies_tr': 118088.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 97.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1601.0, 'rules': 226765.0, 'rules_normal': 225432.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 226765.0, 'rules_tr_normal': 225432.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 52222.0, 'eqs_atom': 11580.0, 'eqs_body': 3416.0, 'eqs_other': 37226.0}, 'lpStep': {'atoms': 3248.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23828.0, 'bodies_tr': 23828.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 44533.0, 'rules_normal': 44336.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44533.0, 'rules_tr_normal': 44336.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11225.0, 'eqs_atom': 1730.0, 'eqs_body': 185.0, 'eqs_other': 9310.0}, 'generator': {'vars': 6538.0, 'vars_eliminated': 0.0, 'vars_frozen': 4050.0, 'constraints': 1017.0, 'constraints_binary': 38915.0, 'constraints_ternary': 4571.0, 'acyc_edges': 0.0, 'complexity': 44725.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 63.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 148.0, 'guiding_paths': 4.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 63.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -21.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.11501884460449219, 'cpu': 0.109375, 'solve': 0.002002716064453125, 'unsat': 0.002002716064453125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5761184692382812, 'cpu': 0.5625, 'solve': 0.020002365112304688, 'unsat': 0.014017105102539062, 'sat': 0.00298309326171875}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 441.0, 'conflicts': 24.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 126.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 45.0, 'integrated': 77.0, 'lemmas': 123.0, 'lits_learnt': 782.0, 'lemmas_binary': 48.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 23.0, 'integrated_jumps': 112.0, 'guiding_paths_lits': 682.0, 'guiding_paths': 39.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 46.0, 'lemmas_other': 66.0, 'lits_conflict': 94.0, 'lits_loop': 310.0, 'lits_other': 378.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 2.0, 'levels': 83.0, 'levels_bounded': 4.0, 'max': 22.0, 'max_executed': 22.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 56:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     55 : Maximum =    100

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(51)]), ('plan_module', [Number(57), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099404s.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014896s with result Unsatisfiable.

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1142997000001742, Incremental time limit = None
Running cumulative time = 0.6471516000003703, Cumulative time limit = 1800
Used memory = (RSS = 1035.917969Mb, VMS = 1027.933594Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=56, end_step=57, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5734445000002779, solving_time=0.0737071000000924, total_time=0.6471516000003703, memory=Memory(rss=1035.91796875, vms=1027.93359375), step_range=range(51, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09940400000004956, solving_time=0.014895700000124634, total_time=0.1142997000001742, memory=Memory(rss=1035.91796875, vms=1027.93359375), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 25128.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 142379.0, 'bodies_tr': 142379.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 122.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2195.0, 'rules': 271767.0, 'rules_normal': 270237.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 271767.0, 'rules_tr_normal': 270237.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 59167.0, 'eqs_atom': 13259.0, 'eqs_body': 3485.0, 'eqs_other': 42423.0}, 'lpStep': {'atoms': 3285.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24291.0, 'bodies_tr': 24291.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45002.0, 'rules_normal': 44805.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45002.0, 'rules_tr_normal': 44805.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6945.0, 'eqs_atom': 1679.0, 'eqs_body': 69.0, 'eqs_other': 5197.0}, 'generator': {'vars': 8876.0, 'vars_eliminated': 0.0, 'vars_frozen': 5401.0, 'constraints': 1626.0, 'constraints_binary': 64061.0, 'constraints_ternary': 7771.0, 'acyc_edges': 0.0, 'complexity': 73766.0}}, 'solving': {'solvers': {'choices': 99.0, 'conflicts': 38.0, 'conflicts_analyzed': 28.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 53.0, 'integrated': 78.0, 'lemmas': 234.0, 'lits_learnt': 2642.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 56.0, 'integrated_jumps': 48.0, 'guiding_paths_lits': 215.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 28.0, 'lemmas_loop': 131.0, 'lemmas_other': 75.0, 'lits_conflict': 448.0, 'lits_loop': 1049.0, 'lits_other': 1145.0, 'jumps': {'jumps': 28.0, 'jumps_bounded': 7.0, 'levels': 274.0, 'levels_bounded': 223.0, 'max': 45.0, 'max_executed': 45.0, 'max_bounded': 44.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -26.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.11502456665039062, 'cpu': 0.125, 'solve': 0.0030002593994140625, 'unsat': 0.0030002593994140625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6911430358886719, 'cpu': 0.6875, 'solve': 0.02300262451171875, 'unsat': 0.017017364501953125, 'sat': 0.00298309326171875}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 540.0, 'conflicts': 62.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 126.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 47.0, 'distributed_sum_lbd': 98.0, 'integrated': 155.0, 'lemmas': 357.0, 'lits_learnt': 3424.0, 'lemmas_binary': 52.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 79.0, 'integrated_jumps': 160.0, 'guiding_paths_lits': 897.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 39.0, 'lemmas_loop': 177.0, 'lemmas_other': 141.0, 'lits_conflict': 542.0, 'lits_loop': 1359.0, 'lits_other': 1523.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 9.0, 'levels': 357.0, 'levels_bounded': 227.0, 'max': 45.0, 'max_executed': 45.0, 'max_bounded': 44.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 57:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     55 : Maximum =    100

[19-01-2022_17-35-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(51)]), ('plan_module', [Number(58), Number(51), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(51), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(51), Number(31), Number(34), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101843s.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022045s with result Satisfiable.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12388839999994161, Incremental time limit = None
Running cumulative time = 0.7710400000003119, Cumulative time limit = 1800
Used memory = (RSS = 1037.125000Mb, VMS = 1029.144531Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.675288s, Solving = 0.095753s, Total = 0.771040s, Memory = (RSS = 1037.125000Mb, VMS = 1029.144531Mb), Step range = [51-58]), Calls = 7
Final Model :: Total atoms = 6402, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=57, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.675287500000195, solving_time=0.09575250000011692, total_time=0.7710400000003119, memory=Memory(rss=1037.125, vms=1029.14453125), step_range=range(51, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10184299999991708, solving_time=0.02204540000002453, total_time=0.12388839999994161, memory=Memory(rss=1037.125, vms=1029.14453125), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 28537.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166904.0, 'bodies_tr': 166904.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 147.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2789.0, 'rules': 317096.0, 'rules_normal': 315369.0, 'rules_choice': 1713.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 317096.0, 'rules_tr_normal': 315369.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 66441.0, 'eqs_atom': 15044.0, 'eqs_body': 3554.0, 'eqs_other': 47843.0}, 'lpStep': {'atoms': 3409.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24525.0, 'bodies_tr': 24525.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45329.0, 'rules_normal': 45132.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45329.0, 'rules_tr_normal': 45132.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7274.0, 'eqs_atom': 1785.0, 'eqs_body': 69.0, 'eqs_other': 5420.0}, 'generator': {'vars': 11248.0, 'vars_eliminated': 0.0, 'vars_frozen': 6758.0, 'constraints': 2083.0, 'constraints_binary': 80899.0, 'constraints_ternary': 10456.0, 'acyc_edges': 0.0, 'complexity': 93824.0}}, 'solving': {'solvers': {'choices': 244.0, 'conflicts': 59.0, 'conflicts_analyzed': 48.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 98.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 46.0, 'distributed_sum_lbd': 116.0, 'integrated': 138.0, 'lemmas': 297.0, 'lits_learnt': 4278.0, 'lemmas_binary': 16.0, 'lemmas_ternary': 8.0, 'cpu_time': 0.0, 'integrated_imps': 53.0, 'integrated_jumps': 51.0, 'guiding_paths_lits': 245.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 48.0, 'lemmas_loop': 114.0, 'lemmas_other': 135.0, 'lits_conflict': 911.0, 'lits_loop': 964.0, 'lits_other': 2403.0, 'jumps': {'jumps': 48.0, 'jumps_bounded': 7.0, 'levels': 274.0, 'levels_bounded': 206.0, 'max': 51.0, 'max_executed': 51.0, 'max_bounded': 50.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.12602615356445312, 'cpu': 0.125, 'solve': 0.01000213623046875, 'unsat': 0.006000518798828125, 'sat': 0.004001617431640625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.817169189453125, 'cpu': 0.8125, 'solve': 0.0330047607421875, 'unsat': 0.02301788330078125, 'sat': 0.006984710693359375}, 'models': {'enumerated': 5.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 784.0, 'conflicts': 121.0, 'conflicts_analyzed': 87.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 224.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 93.0, 'distributed_sum_lbd': 214.0, 'integrated': 293.0, 'lemmas': 654.0, 'lits_learnt': 7702.0, 'lemmas_binary': 68.0, 'lemmas_ternary': 16.0, 'cpu_time': 0.0, 'integrated_imps': 132.0, 'integrated_jumps': 211.0, 'guiding_paths_lits': 1142.0, 'guiding_paths': 66.0, 'splits': 0.0, 'lemmas_conflict': 87.0, 'lemmas_loop': 291.0, 'lemmas_other': 276.0, 'lits_conflict': 1453.0, 'lits_loop': 2323.0, 'lits_other': 3926.0, 'jumps': {'jumps': 87.0, 'jumps_bounded': 16.0, 'levels': 631.0, 'levels_bounded': 433.0, 'max': 51.0, 'max_executed': 51.0, 'max_bounded': 50.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{31: 52, 32: 53, 33: 55, 34: 58}

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 35 achieved :: Progression >> total requested sgoals = 4, current total achieved sgoals = 5 (125.00% solved)

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 34 was achieved successfully.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.119134s, Solving = 0.013916s, Total = 0.133050s, Memory = (RSS = 1035.839844Mb, VMS = 1027.898438Mb), Step range = [51-52]
2 : Statistics :: Grounding = 0.082057s, Solving = 0.008335s, Total = 0.090393s, Memory = (RSS = 1035.839844Mb, VMS = 1027.898438Mb), Step range = [53-53]
3 : Statistics :: Grounding = 0.083886s, Solving = 0.006237s, Total = 0.090123s, Memory = (RSS = 1035.867188Mb, VMS = 1027.898438Mb), Step range = [54-54]
4 : Statistics :: Grounding = 0.091511s, Solving = 0.013496s, Total = 0.105007s, Memory = (RSS = 1035.902344Mb, VMS = 1027.933594Mb), Step range = [55-55]
5 : Statistics :: Grounding = 0.097453s, Solving = 0.016827s, Total = 0.114280s, Memory = (RSS = 1035.917969Mb, VMS = 1027.933594Mb), Step range = [56-56]
6 : Statistics :: Grounding = 0.099404s, Solving = 0.014896s, Total = 0.114300s, Memory = (RSS = 1035.917969Mb, VMS = 1027.933594Mb), Step range = [57-57]
7 : Statistics :: Grounding = 0.101843s, Solving = 0.022045s, Total = 0.123888s, Memory = (RSS = 1037.125000Mb, VMS = 1029.144531Mb), Step range = [58-58]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.771040s due to: External generator exit.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 20, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 23, 43: 24, 44: 24, 45: 25, 46: 26, 47: 27, 48: 27, 49: 28, 50: 29, 51: 30}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 35, 20: 38, 21: 39, 22: 40, 23: 42, 24: 44, 25: 45, 26: 46, 27: 48, 28: 49, 29: 50, 30: 51}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 11, 29: 11, 30: 12, 31: 13, 32: 14, 33: 15, 34: 15, 35: 16, 36: 16, 37: 17, 38: 17, 39: 17, 40: 18, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 29, 12: 30, 13: 31, 14: 32, 15: 34, 16: 36, 17: 39, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 20, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 23, 43: 24, 44: 24, 45: 25, 46: 26, 47: 27, 48: 27, 49: 28, 50: 29, 51: 30, 52: 31, 53: 32, 54: 33, 55: 33, 56: 34, 57: 34, 58: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 35, 20: 38, 21: 39, 22: 40, 23: 42, 24: 44, 25: 45, 26: 46, 27: 48, 28: 49, 29: 50, 30: 51, 31: 52, 32: 53, 33: 55, 34: 58}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 11, 29: 11, 30: 12, 31: 13, 32: 14, 33: 15, 34: 15, 35: 16, 36: 16, 37: 17, 38: 17, 39: 17, 40: 18, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 29, 12: 30, 13: 31, 14: 32, 15: 34, 16: 36, 17: 39, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 34, Last requested goal index = 34, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.675288s, Solving = 0.095753s, Total = 0.771040s, Memory = (RSS = 1037.125000Mb, VMS = 1029.144531Mb), Step range = [51-58]), Calls = 7
Model :: Total atoms = 6402, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 44:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 46:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 50:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 53:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 54:
    Current Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 55:
    Current Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 44 : Goals achieved = 34 : Goals unachieved = 10 : Complete = False

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-1].

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 18, Sub-goal Stage Range = [27-44]
Division points [total=3] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-39]

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [35-39], problem number = 7, increment number = 7

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 39)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000001F1248C5100>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [35-39] : Concurrency disabled : Minimum search length bound disabled with value 62

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 35
last_sgoals = 39
start_step = 58
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 62

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[19-01-2022_17-35-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[19-01-2022_17-35-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 58 as problem start state.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 58})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,1)', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 58})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 58})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 58})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 58})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 58})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 58})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 58})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 58})

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 58).
holds(1, complete_tower(red,puzzle_room_table), false, 58).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 58).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 58).
holds(1, configuration(manipulator_limb_1), retracted, 58).
holds(1, configuration(manipulator_limb_2), retracted, 58).
holds(1, configuration(puzzle_room_door), open, 58).
holds(1, configuration(starting_room_door), closed, 58).
holds(1, configuration(store_room_door), open, 58).
holds(1, grasping(manipulator_arm_1), nothing, 58).
holds(1, grasping(manipulator_arm_2), nothing, 58).
holds(1, grasping(manipulator_end_1), nothing, 58).
holds(1, grasping(manipulator_end_2), nothing, 58).
holds(1, in((block,1)), (puzzle_room,1), 58).
holds(1, in((block,2)), (puzzle_room,1), 58).
holds(1, in((block,3)), (puzzle_room,1), 58).
holds(1, in((block,4)), (store_room,0), 58).
holds(1, in((block,5)), (puzzle_room,1), 58).
holds(1, in((block,6)), (puzzle_room,1), 58).
holds(1, in(manipulator_arm_1), (store_room,1), 58).
holds(1, in(manipulator_arm_2), (store_room,1), 58).
holds(1, in(manipulator_end_1), (store_room,1), 58).
holds(1, in(manipulator_end_2), (store_room,1), 58).
holds(1, in(manipulator_limb_1), (store_room,1), 58).
holds(1, in(manipulator_limb_2), (store_room,1), 58).
holds(1, in(puzzle_room_table), (puzzle_room,1), 58).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 58).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 58).
holds(1, in(talos), (store_room,1), 58).
holds(1, in_tower((block,1),(block,1)), true, 58).
holds(1, in_tower((block,1),(block,2)), false, 58).
holds(1, in_tower((block,1),(block,3)), false, 58).
holds(1, in_tower((block,1),(block,4)), false, 58).
holds(1, in_tower((block,1),(block,5)), false, 58).
holds(1, in_tower((block,1),(block,6)), false, 58).
holds(1, in_tower((block,2),(block,1)), false, 58).
holds(1, in_tower((block,2),(block,2)), false, 58).
holds(1, in_tower((block,2),(block,3)), false, 58).
holds(1, in_tower((block,2),(block,4)), false, 58).
holds(1, in_tower((block,2),(block,5)), false, 58).
holds(1, in_tower((block,2),(block,6)), false, 58).
holds(1, in_tower((block,3),(block,1)), false, 58).
holds(1, in_tower((block,3),(block,2)), true, 58).
holds(1, in_tower((block,3),(block,3)), true, 58).
holds(1, in_tower((block,3),(block,4)), false, 58).
holds(1, in_tower((block,3),(block,5)), false, 58).
holds(1, in_tower((block,3),(block,6)), false, 58).
holds(1, in_tower((block,4),(block,1)), false, 58).
holds(1, in_tower((block,4),(block,2)), false, 58).
holds(1, in_tower((block,4),(block,3)), false, 58).
holds(1, in_tower((block,4),(block,4)), false, 58).
holds(1, in_tower((block,4),(block,5)), false, 58).
holds(1, in_tower((block,4),(block,6)), false, 58).
holds(1, in_tower((block,5),(block,1)), false, 58).
holds(1, in_tower((block,5),(block,2)), false, 58).
holds(1, in_tower((block,5),(block,3)), false, 58).
holds(1, in_tower((block,5),(block,4)), false, 58).
holds(1, in_tower((block,5),(block,5)), false, 58).
holds(1, in_tower((block,5),(block,6)), false, 58).
holds(1, in_tower((block,6),(block,1)), false, 58).
holds(1, in_tower((block,6),(block,2)), false, 58).
holds(1, in_tower((block,6),(block,3)), false, 58).
holds(1, in_tower((block,6),(block,4)), false, 58).
holds(1, in_tower((block,6),(block,5)), true, 58).
holds(1, in_tower((block,6),(block,6)), true, 58).
holds(1, on((block,1)), puzzle_room_table_left, 58).
holds(1, on((block,2)), (block,3), 58).
holds(1, on((block,3)), puzzle_room_table_left, 58).
holds(1, on((block,4)), nothing, 58).
holds(1, on((block,5)), (block,6), 58).
holds(1, on((block,6)), puzzle_room_table_right, 58).
holds(1, tower_base((block,1),puzzle_room_table), true, 58).
holds(1, tower_base((block,2),puzzle_room_table), false, 58).
holds(1, tower_base((block,3),puzzle_room_table), true, 58).
holds(1, tower_base((block,4),puzzle_room_table), false, 58).
holds(1, tower_base((block,5),puzzle_room_table), false, 58).
holds(1, tower_base((block,6),puzzle_room_table), true, 58).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 58).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 58).
holds(2, complete_tower(blue,puzzle_room_table), false, 58).
holds(2, complete_tower(red,puzzle_room_table), false, 58).
holds(2, configuration(manipulator_arm_1), retracted, 58).
holds(2, configuration(manipulator_arm_2), retracted, 58).
holds(2, configuration(puzzle_room_door), open, 58).
holds(2, configuration(starting_room_door), closed, 58).
holds(2, configuration(store_room_door), open, 58).
holds(2, grasping(manipulator_arm_1), nothing, 58).
holds(2, grasping(manipulator_arm_2), nothing, 58).
holds(2, in((block,1)), puzzle_room, 58).
holds(2, in((block,2)), puzzle_room, 58).
holds(2, in((block,3)), puzzle_room, 58).
holds(2, in((block,4)), store_room, 58).
holds(2, in((block,5)), puzzle_room, 58).
holds(2, in((block,6)), puzzle_room, 58).
holds(2, in(manipulator_arm_1), store_room, 58).
holds(2, in(manipulator_arm_2), store_room, 58).
holds(2, in(puzzle_room_table), puzzle_room, 58).
holds(2, in(talos), store_room, 58).
holds(2, in_tower((block,1),(block,1)), true, 58).
holds(2, in_tower((block,1),(block,2)), false, 58).
holds(2, in_tower((block,1),(block,3)), false, 58).
holds(2, in_tower((block,1),(block,4)), false, 58).
holds(2, in_tower((block,1),(block,5)), false, 58).
holds(2, in_tower((block,1),(block,6)), false, 58).
holds(2, in_tower((block,2),(block,1)), false, 58).
holds(2, in_tower((block,2),(block,2)), false, 58).
holds(2, in_tower((block,2),(block,3)), false, 58).
holds(2, in_tower((block,2),(block,4)), false, 58).
holds(2, in_tower((block,2),(block,5)), false, 58).
holds(2, in_tower((block,2),(block,6)), false, 58).
holds(2, in_tower((block,3),(block,1)), false, 58).
holds(2, in_tower((block,3),(block,2)), true, 58).
holds(2, in_tower((block,3),(block,3)), true, 58).
holds(2, in_tower((block,3),(block,4)), false, 58).
holds(2, in_tower((block,3),(block,5)), false, 58).
holds(2, in_tower((block,3),(block,6)), false, 58).
holds(2, in_tower((block,4),(block,1)), false, 58).
holds(2, in_tower((block,4),(block,2)), false, 58).
holds(2, in_tower((block,4),(block,3)), false, 58).
holds(2, in_tower((block,4),(block,4)), false, 58).
holds(2, in_tower((block,4),(block,5)), false, 58).
holds(2, in_tower((block,4),(block,6)), false, 58).
holds(2, in_tower((block,5),(block,1)), false, 58).
holds(2, in_tower((block,5),(block,2)), false, 58).
holds(2, in_tower((block,5),(block,3)), false, 58).
holds(2, in_tower((block,5),(block,4)), false, 58).
holds(2, in_tower((block,5),(block,5)), false, 58).
holds(2, in_tower((block,5),(block,6)), false, 58).
holds(2, in_tower((block,6),(block,1)), false, 58).
holds(2, in_tower((block,6),(block,2)), false, 58).
holds(2, in_tower((block,6),(block,3)), false, 58).
holds(2, in_tower((block,6),(block,4)), false, 58).
holds(2, in_tower((block,6),(block,5)), true, 58).
holds(2, in_tower((block,6),(block,6)), true, 58).
holds(2, on((block,1)), puzzle_room_table, 58).
holds(2, on((block,2)), (block,3), 58).
holds(2, on((block,3)), puzzle_room_table, 58).
holds(2, on((block,4)), nothing, 58).
holds(2, on((block,5)), (block,6), 58).
holds(2, on((block,6)), puzzle_room_table, 58).
holds(2, tower_base((block,1),puzzle_room_table), true, 58).
holds(2, tower_base((block,2),puzzle_room_table), false, 58).
holds(2, tower_base((block,3),puzzle_room_table), true, 58).
holds(2, tower_base((block,4),puzzle_room_table), false, 58).
holds(2, tower_base((block,5),puzzle_room_table), false, 58).
holds(2, tower_base((block,6),puzzle_room_table), true, 58).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 58).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 58).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,4))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'I': 36})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 38})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 39})

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 35).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 36).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 37).
sub_goal(2, talos, move(hallway), in(talos), hallway, 38).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 39).

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F12AC6C9D0>]
	incrementor = SolveIncrementor(step_start=58, step_increase=1, step_increase_initial=2, step_end_min=63, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 58), range_=None), IncPart(name='plan_module', args=('#inc', 58, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 58, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 58, 35, 39, 'sequential', 'true'), range_=None)]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 813 rules

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004623799999990297s

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029753s.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004902s with result Satisfiable.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F15F7EC5E0>

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 58)
	('last_sgoals', 39)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F1248C5100>)
	('first_sgoals', 35)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F15F7EC5E0>)

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None)

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 58). %* None *%
#program plan_module(#inc, 58, false, false). %* None *%
#program optimisation_module(#inc, 58, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 58, 35, 39, sequential, true). %* None *%

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     57 : Current =     59
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(58), Number(58)]), ('plan_module', [Number(58), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(59), Number(58)]), ('plan_module', [Number(59), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125077s.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(35,59).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 59: original = External(symbol='current_last_sgoals(35, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(35,59).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016163s with result Satisfiable.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.14123979999999392, Incremental time limit = None
Running cumulative time = 0.14123979999999392, Cumulative time limit = 1800
Used memory = (RSS = 1035.921875Mb, VMS = 1027.945312Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.125077s, Solving = 0.016163s, Total = 0.141240s, Memory = (RSS = 1035.921875Mb, VMS = 1027.945312Mb), Step range = [58-59]), Calls = 1
Final Model :: Total atoms = 4160, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=57, end_step=59, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.1250770999999986, solving_time=0.01616269999999531, total_time=0.14123979999999392, memory=Memory(rss=1035.921875, vms=1027.9453125), step_range=range(58, 60), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1250770999999986, solving_time=0.01616269999999531, total_time=0.14123979999999392, memory=Memory(rss=1035.921875, vms=1027.9453125), step_range=range(58, 60), clingo_stats={'problem': {'lp': {'atoms': 12222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28447.0, 'bodies_tr': 28447.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 553.0, 'rules': 56969.0, 'rules_normal': 56424.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56969.0, 'rules_tr_normal': 56424.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24951.0, 'eqs_atom': 7023.0, 'eqs_body': 1879.0, 'eqs_other': 16049.0}, 'lpStep': {'atoms': 5702.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25828.0, 'bodies_tr': 25828.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 553.0, 'rules': 49539.0, 'rules_normal': 48994.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49539.0, 'rules_tr_normal': 48994.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11895.0, 'eqs_atom': 2113.0, 'eqs_body': 354.0, 'eqs_other': 9428.0}, 'generator': {'vars': 2744.0, 'vars_eliminated': 0.0, 'vars_frozen': 1628.0, 'constraints': 30.0, 'constraints_binary': 1186.0, 'constraints_ternary': 188.0, 'acyc_edges': 0.0, 'complexity': 1426.0}}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 28.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 90.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.14103126525878906, 'cpu': 0.140625, 'solve': 0.005001068115234375, 'unsat': 0.005001068115234375, 'sat': 0.0}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.18004226684570312, 'cpu': 0.1875, 'solve': 0.0070037841796875, 'unsat': 0.005001068115234375, 'sat': 0.0}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 29.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59}

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 36 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 2 ( 40.00% solved)

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(36, 59)', truth=True, inc_range=None)

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 36, step = 59]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,4)), grasping(manipulator_arm_1), (block,4), 36)

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 59:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(60), Number(58)]), ('plan_module', [Number(60), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085741s.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 60: original = External(symbol='current_last_sgoals(36, 59)', truth=True, inc_range=None), conversion = current_last_sgoals(36,59).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004875s with result Unsatisfiable.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09061610000003384, Incremental time limit = None
Running cumulative time = 0.23185590000002776, Cumulative time limit = 1800
Used memory = (RSS = 1035.921875Mb, VMS = 1027.945312Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=59, end_step=60, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.21081839999988006, solving_time=0.021037500000147702, total_time=0.23185590000002776, memory=Memory(rss=1035.921875, vms=1027.9453125), step_range=range(58, 61), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08574129999988145, solving_time=0.004874800000152391, total_time=0.09061610000003384, memory=Memory(rss=1035.921875, vms=1027.9453125), step_range=range(60, 61), clingo_stats={'problem': {'lp': {'atoms': 14162.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 50062.0, 'bodies_tr': 50062.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 57.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 739.0, 'rules': 98278.0, 'rules_normal': 97536.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 98278.0, 'rules_tr_normal': 97536.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 28679.0, 'eqs_atom': 7912.0, 'eqs_body': 2312.0, 'eqs_other': 18455.0}, 'lpStep': {'atoms': 1940.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21615.0, 'bodies_tr': 21615.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 41309.0, 'rules_normal': 41112.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41309.0, 'rules_tr_normal': 41112.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3728.0, 'eqs_atom': 889.0, 'eqs_body': 433.0, 'eqs_other': 2406.0}, 'generator': {'vars': 3009.0, 'vars_eliminated': 0.0, 'vars_frozen': 1859.0, 'constraints': 122.0, 'constraints_binary': 3015.0, 'constraints_ternary': 293.0, 'acyc_edges': 0.0, 'complexity': 3478.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 132.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.0910186767578125, 'cpu': 0.078125, 'solve': 0.0, 'unsat': 0.0, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.2710609436035156, 'cpu': 0.265625, 'solve': 0.0070037841796875, 'unsat': 0.005001068115234375, 'sat': 0.0}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 24.0, 'conflicts': 4.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 29.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 228.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 60:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(58)]), ('plan_module', [Number(61), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091526s.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006974s with result Unsatisfiable.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09850009999991016, Incremental time limit = None
Running cumulative time = 0.3303559999999379, Cumulative time limit = 1800
Used memory = (RSS = 1035.921875Mb, VMS = 1027.945312Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=60, end_step=61, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.3023446999998214, solving_time=0.028011300000116535, total_time=0.3303559999999379, memory=Memory(rss=1035.921875, vms=1027.9453125), step_range=range(58, 62), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09152629999994133, solving_time=0.006973799999968833, total_time=0.09850009999991016, memory=Memory(rss=1035.921875, vms=1027.9453125), step_range=range(61, 62), clingo_stats={'problem': {'lp': {'atoms': 16761.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 72006.0, 'bodies_tr': 72006.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 70.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 973.0, 'rules': 140499.0, 'rules_normal': 139560.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 140499.0, 'rules_tr_normal': 139560.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35548.0, 'eqs_atom': 9401.0, 'eqs_body': 2937.0, 'eqs_other': 23210.0}, 'lpStep': {'atoms': 2599.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21944.0, 'bodies_tr': 21944.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42221.0, 'rules_normal': 42024.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42221.0, 'rules_tr_normal': 42024.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6869.0, 'eqs_atom': 1489.0, 'eqs_body': 625.0, 'eqs_other': 4755.0}, 'generator': {'vars': 3558.0, 'vars_eliminated': 0.0, 'vars_frozen': 2254.0, 'constraints': 263.0, 'constraints_binary': 6774.0, 'constraints_ternary': 562.0, 'acyc_edges': 0.0, 'complexity': 7689.0}}, 'solving': {'solvers': {'choices': 10.0, 'conflicts': 6.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 11.0, 'lemmas': 35.0, 'lits_learnt': 245.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 11.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 145.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 21.0, 'lemmas_other': 11.0, 'lits_conflict': 12.0, 'lits_loop': 189.0, 'lits_other': 44.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 14.0, 'levels_bounded': 5.0, 'max': 5.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.09902000427246094, 'cpu': 0.09375, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.37008094787597656, 'cpu': 0.359375, 'solve': 0.008001327514648438, 'unsat': 0.0059986114501953125, 'sat': 0.0}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 34.0, 'conflicts': 10.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 29.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 15.0, 'lemmas': 39.0, 'lits_learnt': 251.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 11.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 373.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 25.0, 'lemmas_other': 11.0, 'lits_conflict': 12.0, 'lits_loop': 195.0, 'lits_other': 44.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 14.0, 'levels_bounded': 5.0, 'max': 5.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 61:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(58)]), ('plan_module', [Number(62), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094176s.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013877s with result Satisfiable.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10805320000008578, Incremental time limit = None
Running cumulative time = 0.4384092000000237, Cumulative time limit = 1800
Used memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.396521s, Solving = 0.041888s, Total = 0.438409s, Memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Step range = [58-62]), Calls = 4
Final Model :: Total atoms = 5276, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=61, end_step=62, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3965209999998933, solving_time=0.04188820000013038, total_time=0.4384092000000237, memory=Memory(rss=1036.00390625, vms=1028.02734375), step_range=range(58, 63), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09417630000007193, solving_time=0.013876900000013848, total_time=0.10805320000008578, memory=Memory(rss=1036.00390625, vms=1028.02734375), step_range=range(62, 63), clingo_stats={'problem': {'lp': {'atoms': 19535.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94746.0, 'bodies_tr': 94746.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 95.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1371.0, 'rules': 183610.0, 'rules_normal': 182474.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 183610.0, 'rules_tr_normal': 182474.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 42175.0, 'eqs_atom': 10739.0, 'eqs_body': 3127.0, 'eqs_other': 28309.0}, 'lpStep': {'atoms': 2774.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22740.0, 'bodies_tr': 22740.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 43111.0, 'rules_normal': 42914.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 43111.0, 'rules_tr_normal': 42914.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6627.0, 'eqs_atom': 1338.0, 'eqs_body': 190.0, 'eqs_other': 5099.0}, 'generator': {'vars': 5040.0, 'vars_eliminated': 0.0, 'vars_frozen': 3179.0, 'constraints': 622.0, 'constraints_binary': 20577.0, 'constraints_ternary': 1954.0, 'acyc_edges': 0.0, 'complexity': 23313.0}}, 'solving': {'solvers': {'choices': 138.0, 'conflicts': 15.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 66.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 12.0, 'distributed_sum_lbd': 24.0, 'integrated': 48.0, 'lemmas': 103.0, 'lits_learnt': 575.0, 'lemmas_binary': 35.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0, 'integrated_imps': 17.0, 'integrated_jumps': 6.0, 'guiding_paths_lits': 216.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 58.0, 'lemmas_other': 39.0, 'lits_conflict': 17.0, 'lits_loop': 464.0, 'lits_other': 94.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 2.0, 'levels': 18.0, 'levels_bounded': 3.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.10902214050292969, 'cpu': 0.109375, 'solve': 0.0059986114501953125, 'unsat': 0.0039997100830078125, 'sat': 0.0019989013671875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.47910308837890625, 'cpu': 0.46875, 'solve': 0.01399993896484375, 'unsat': 0.009998321533203125, 'sat': 0.0019989013671875}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 172.0, 'conflicts': 25.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 95.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 34.0, 'integrated': 63.0, 'lemmas': 142.0, 'lits_learnt': 826.0, 'lemmas_binary': 37.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0, 'integrated_imps': 28.0, 'integrated_jumps': 7.0, 'guiding_paths_lits': 589.0, 'guiding_paths': 37.0, 'splits': 0.0, 'lemmas_conflict': 9.0, 'lemmas_loop': 83.0, 'lemmas_other': 50.0, 'lits_conflict': 29.0, 'lits_loop': 659.0, 'lits_other': 138.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 5.0, 'levels': 32.0, 'levels_bounded': 8.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 62}

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 37 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 3 ( 60.00% solved)

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(37, 62)', truth=True, inc_range=None)

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 37, step = 62]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 37)

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 62:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(58)]), ('plan_module', [Number(63), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099123s.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 63: original = External(symbol='current_last_sgoals(37, 62)', truth=True, inc_range=None), conversion = current_last_sgoals(37,62).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019579s with result Satisfiable.

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11870250000015403, Incremental time limit = None
Running cumulative time = 0.5571117000001777, Cumulative time limit = 1800
Used memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.495644s, Solving = 0.061468s, Total = 0.557112s, Memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Step range = [58-63]), Calls = 5
Final Model :: Total atoms = 5650, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=62, end_step=63, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4956442000000152, solving_time=0.061467500000162545, total_time=0.5571117000001777, memory=Memory(rss=1036.00390625, vms=1028.02734375), step_range=range(58, 64), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09912320000012187, solving_time=0.019579300000032163, total_time=0.11870250000015403, memory=Memory(rss=1036.00390625, vms=1028.02734375), step_range=range(63, 64), clingo_stats={'problem': {'lp': {'atoms': 22680.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118244.0, 'bodies_tr': 118244.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 120.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1775.0, 'rules': 227751.0, 'rules_normal': 226418.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 227751.0, 'rules_tr_normal': 226418.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 52832.0, 'eqs_atom': 12410.0, 'eqs_body': 3412.0, 'eqs_other': 37010.0}, 'lpStep': {'atoms': 3145.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23498.0, 'bodies_tr': 23498.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 44141.0, 'rules_normal': 43944.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44141.0, 'rules_tr_normal': 43944.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10657.0, 'eqs_atom': 1671.0, 'eqs_body': 285.0, 'eqs_other': 8701.0}, 'generator': {'vars': 6731.0, 'vars_eliminated': 0.0, 'vars_frozen': 4170.0, 'constraints': 1018.0, 'constraints_binary': 37319.0, 'constraints_ternary': 3885.0, 'acyc_edges': 0.0, 'complexity': 42452.0}}, 'solving': {'solvers': {'choices': 161.0, 'conflicts': 19.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 80.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 14.0, 'integrated': 24.0, 'lemmas': 151.0, 'lits_learnt': 1089.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 15.0, 'integrated_jumps': 20.0, 'guiding_paths_lits': 215.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 123.0, 'lemmas_other': 22.0, 'lits_conflict': 40.0, 'lits_loop': 909.0, 'lits_other': 140.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 2.0, 'levels': 13.0, 'levels_bounded': 2.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.120025634765625, 'cpu': 0.109375, 'solve': 0.0070018768310546875, 'unsat': 0.006000518798828125, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5991287231445312, 'cpu': 0.578125, 'solve': 0.021001815795898438, 'unsat': 0.01599884033203125, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 333.0, 'conflicts': 44.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 175.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 48.0, 'integrated': 87.0, 'lemmas': 293.0, 'lits_learnt': 1915.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0, 'integrated_imps': 43.0, 'integrated_jumps': 27.0, 'guiding_paths_lits': 804.0, 'guiding_paths': 55.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 206.0, 'lemmas_other': 72.0, 'lits_conflict': 69.0, 'lits_loop': 1568.0, 'lits_other': 278.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 7.0, 'levels': 45.0, 'levels_bounded': 10.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 62, 37: 63}

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 38 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 4 ( 80.00% solved)

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(38, 63)', truth=True, inc_range=None)

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 38, step = 63]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 38)

[19-01-2022_17-35-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 63:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(58)]), ('plan_module', [Number(64), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102891s.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 64: original = External(symbol='current_last_sgoals(38, 63)', truth=True, inc_range=None), conversion = current_last_sgoals(38,63).

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014210s with result Unsatisfiable.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1171012999998311, Incremental time limit = None
Running cumulative time = 0.6742130000000088, Cumulative time limit = 1800
Used memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=63, end_step=64, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.5985356999999567, solving_time=0.07567730000005213, total_time=0.6742130000000088, memory=Memory(rss=1036.00390625, vms=1028.02734375), step_range=range(58, 65), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10289149999994152, solving_time=0.014209799999889583, total_time=0.1171012999998311, memory=Memory(rss=1036.00390625, vms=1028.02734375), step_range=range(64, 65), clingo_stats={'problem': {'lp': {'atoms': 25854.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 142326.0, 'bodies_tr': 142326.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 145.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2369.0, 'rules': 272486.0, 'rules_normal': 270956.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 272486.0, 'rules_tr_normal': 270956.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 59505.0, 'eqs_atom': 13990.0, 'eqs_body': 3488.0, 'eqs_other': 42027.0}, 'lpStep': {'atoms': 3174.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24082.0, 'bodies_tr': 24082.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 44735.0, 'rules_normal': 44538.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44735.0, 'rules_tr_normal': 44538.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6673.0, 'eqs_atom': 1580.0, 'eqs_body': 76.0, 'eqs_other': 5017.0}, 'generator': {'vars': 9044.0, 'vars_eliminated': 0.0, 'vars_frozen': 5521.0, 'constraints': 1618.0, 'constraints_binary': 62469.0, 'constraints_ternary': 6848.0, 'acyc_edges': 0.0, 'complexity': 71251.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 5.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 12.0, 'lits_learnt': 101.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 250.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 11.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 99.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -28.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.11902618408203125, 'cpu': 0.109375, 'solve': 0.0020008087158203125, 'unsat': 0.0020008087158203125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.7181549072265625, 'cpu': 0.6875, 'solve': 0.02300262451171875, 'unsat': 0.017999649047851562, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 334.0, 'conflicts': 49.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 4.0, 'models_level': 175.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 50.0, 'integrated': 87.0, 'lemmas': 305.0, 'lits_learnt': 2016.0, 'lemmas_binary': 43.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.0, 'integrated_imps': 43.0, 'integrated_jumps': 27.0, 'guiding_paths_lits': 1054.0, 'guiding_paths': 60.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 217.0, 'lemmas_other': 72.0, 'lits_conflict': 71.0, 'lits_loop': 1667.0, 'lits_other': 278.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 8.0, 'levels': 48.0, 'levels_bounded': 12.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 64:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(58)]), ('plan_module', [Number(65), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105075s.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022543s with result Satisfiable.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1276173999999628, Incremental time limit = None
Running cumulative time = 0.8018303999999716, Cumulative time limit = 1800
Used memory = (RSS = 1037.414062Mb, VMS = 1029.460938Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.703610s, Solving = 0.098220s, Total = 0.801830s, Memory = (RSS = 1037.414062Mb, VMS = 1029.460938Mb), Step range = [58-65]), Calls = 7
Final Model :: Total atoms = 6398, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=64, end_step=65, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7036104999997406, solving_time=0.09821990000023106, total_time=0.8018303999999716, memory=Memory(rss=1037.4140625, vms=1029.4609375), step_range=range(58, 66), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10507479999978386, solving_time=0.022542600000178936, total_time=0.1276173999999628, memory=Memory(rss=1037.4140625, vms=1029.4609375), step_range=range(65, 66), clingo_stats={'problem': {'lp': {'atoms': 29273.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166869.0, 'bodies_tr': 166869.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 170.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2963.0, 'rules': 317866.0, 'rules_normal': 316139.0, 'rules_choice': 1713.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 317866.0, 'rules_tr_normal': 316139.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 66813.0, 'eqs_atom': 15779.0, 'eqs_body': 3558.0, 'eqs_other': 47476.0}, 'lpStep': {'atoms': 3419.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24543.0, 'bodies_tr': 24543.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45380.0, 'rules_normal': 45183.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45380.0, 'rules_tr_normal': 45183.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7308.0, 'eqs_atom': 1789.0, 'eqs_body': 70.0, 'eqs_other': 5449.0}, 'generator': {'vars': 11425.0, 'vars_eliminated': 0.0, 'vars_frozen': 6884.0, 'constraints': 2240.0, 'constraints_binary': 87725.0, 'constraints_ternary': 10297.0, 'acyc_edges': 0.0, 'complexity': 100664.0}}, 'solving': {'solvers': {'choices': 271.0, 'conflicts': 39.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 105.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 44.0, 'integrated': 54.0, 'lemmas': 210.0, 'lits_learnt': 2974.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 19.0, 'integrated_jumps': 60.0, 'guiding_paths_lits': 342.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 141.0, 'lemmas_other': 48.0, 'lits_conflict': 521.0, 'lits_loop': 1259.0, 'lits_other': 1194.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 1.0, 'levels': 27.0, 'levels_bounded': 1.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 4.0, 'times': {'total': 0.1290283203125, 'cpu': 0.1875, 'solve': 0.01000213623046875, 'unsat': 0.0060024261474609375, 'sat': 0.0039997100830078125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.8471832275390625, 'cpu': 0.875, 'solve': 0.0330047607421875, 'unsat': 0.0240020751953125, 'sat': 0.006999969482421875}, 'models': {'enumerated': 5.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 605.0, 'conflicts': 88.0, 'conflicts_analyzed': 38.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 280.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 42.0, 'distributed_sum_lbd': 94.0, 'integrated': 141.0, 'lemmas': 515.0, 'lits_learnt': 4990.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.078125, 'integrated_imps': 62.0, 'integrated_jumps': 87.0, 'guiding_paths_lits': 1396.0, 'guiding_paths': 83.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 358.0, 'lemmas_other': 120.0, 'lits_conflict': 592.0, 'lits_loop': 2926.0, 'lits_other': 1472.0, 'jumps': {'jumps': 38.0, 'jumps_bounded': 9.0, 'levels': 75.0, 'levels_bounded': 13.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 62, 37: 63, 38: 65}

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 39 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 5 (100.00% solved)

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(39, 65)', truth=True, inc_range=None)

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 39, step = 65]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 39)

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 65:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(58)]), ('plan_module', [Number(66), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.105900s.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 66: original = External(symbol='current_last_sgoals(39, 65)', truth=True, inc_range=None), conversion = current_last_sgoals(39,65).

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015753s with result Unsatisfiable.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12165260000006128, Incremental time limit = None
Running cumulative time = 0.9234830000000329, Cumulative time limit = 1800
Used memory = (RSS = 1037.683594Mb, VMS = 1029.714844Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=65, end_step=66, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8095101999997496, solving_time=0.11397280000028331, total_time=0.9234830000000329, memory=Memory(rss=1037.68359375, vms=1029.71484375), step_range=range(58, 67), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10589970000000903, solving_time=0.01575290000005225, total_time=0.12165260000006128, memory=Memory(rss=1037.68359375, vms=1029.71484375), step_range=range(66, 67), clingo_stats={'problem': {'lp': {'atoms': 32697.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 191423.0, 'bodies_tr': 191423.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1676.0, 'count_bodies_tr': 1676.0, 'sccs': 195.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3557.0, 'rules': 363267.0, 'rules_normal': 361343.0, 'rules_choice': 1908.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 363267.0, 'rules_tr_normal': 361343.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 74148.0, 'eqs_atom': 17573.0, 'eqs_body': 3628.0, 'eqs_other': 52947.0}, 'lpStep': {'atoms': 3424.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24554.0, 'bodies_tr': 24554.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45401.0, 'rules_normal': 45204.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45401.0, 'rules_tr_normal': 45204.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7335.0, 'eqs_atom': 1794.0, 'eqs_body': 70.0, 'eqs_other': 5471.0}, 'generator': {'vars': 13806.0, 'vars_eliminated': 0.0, 'vars_frozen': 8247.0, 'constraints': 2862.0, 'constraints_binary': 112997.0, 'constraints_ternary': 13746.0, 'acyc_edges': 0.0, 'complexity': 130093.0}}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 24.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 17.0, 'integrated': 12.0, 'lemmas': 41.0, 'lits_learnt': 387.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 5.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 320.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 22.0, 'lemmas_other': 12.0, 'lits_conflict': 89.0, 'lits_loop': 160.0, 'lits_other': 138.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 2.0, 'levels': 12.0, 'levels_bounded': 4.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -40.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.12302589416503906, 'cpu': 0.125, 'solve': 0.0030002593994140625, 'unsat': 0.0030002593994140625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9702091217041016, 'cpu': 1.0, 'solve': 0.03600502014160156, 'unsat': 0.027002334594726562, 'sat': 0.006999969482421875}, 'models': {'enumerated': 5.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 617.0, 'conflicts': 112.0, 'conflicts_analyzed': 45.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 280.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 49.0, 'distributed_sum_lbd': 111.0, 'integrated': 153.0, 'lemmas': 556.0, 'lits_learnt': 5377.0, 'lemmas_binary': 55.0, 'lemmas_ternary': 11.0, 'cpu_time': 0.078125, 'integrated_imps': 67.0, 'integrated_jumps': 90.0, 'guiding_paths_lits': 1716.0, 'guiding_paths': 100.0, 'splits': 0.0, 'lemmas_conflict': 44.0, 'lemmas_loop': 380.0, 'lemmas_other': 132.0, 'lits_conflict': 681.0, 'lits_loop': 3086.0, 'lits_other': 1610.0, 'jumps': {'jumps': 45.0, 'jumps_bounded': 11.0, 'levels': 87.0, 'levels_bounded': 17.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 2.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 66:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(58)]), ('plan_module', [Number(67), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.107129s.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020426s with result Unsatisfiable.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.12755440000000817, Incremental time limit = None
Running cumulative time = 1.051037400000041, Cumulative time limit = 1800
Used memory = (RSS = 1040.175781Mb, VMS = 1032.843750Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=66, end_step=67, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9166389999998046, solving_time=0.1343984000002365, total_time=1.051037400000041, memory=Memory(rss=1040.17578125, vms=1032.84375), step_range=range(58, 68), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10712880000005498, solving_time=0.020425599999953192, total_time=0.12755440000000817, memory=Memory(rss=1040.17578125, vms=1032.84375), step_range=range(67, 68), clingo_stats={'problem': {'lp': {'atoms': 36126.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 215988.0, 'bodies_tr': 215988.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1878.0, 'count_bodies_tr': 1878.0, 'sccs': 220.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4151.0, 'rules': 408689.0, 'rules_normal': 406568.0, 'rules_choice': 2103.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 408689.0, 'rules_tr_normal': 406568.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 81510.0, 'eqs_atom': 19372.0, 'eqs_body': 3698.0, 'eqs_other': 58440.0}, 'lpStep': {'atoms': 3429.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24565.0, 'bodies_tr': 24565.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45422.0, 'rules_normal': 45225.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45422.0, 'rules_tr_normal': 45225.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7362.0, 'eqs_atom': 1799.0, 'eqs_body': 70.0, 'eqs_other': 5493.0}, 'generator': {'vars': 16187.0, 'vars_eliminated': 0.0, 'vars_frozen': 9610.0, 'constraints': 3484.0, 'constraints_binary': 138285.0, 'constraints_ternary': 17195.0, 'acyc_edges': 0.0, 'complexity': 159538.0}}, 'solving': {'solvers': {'choices': 204.0, 'conflicts': 91.0, 'conflicts_analyzed': 59.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 58.0, 'distributed_sum_lbd': 157.0, 'integrated': 162.0, 'lemmas': 504.0, 'lits_learnt': 7095.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.078125, 'integrated_imps': 57.0, 'integrated_jumps': 88.0, 'guiding_paths_lits': 355.0, 'guiding_paths': 32.0, 'splits': 0.0, 'lemmas_conflict': 59.0, 'lemmas_loop': 292.0, 'lemmas_other': 153.0, 'lits_conflict': 1378.0, 'lits_loop': 2443.0, 'lits_other': 3274.0, 'jumps': {'jumps': 59.0, 'jumps_bounded': 3.0, 'levels': 260.0, 'levels_bounded': 144.0, 'max': 77.0, 'max_executed': 77.0, 'max_bounded': 72.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -37.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.1290264129638672, 'cpu': 0.1875, 'solve': 0.0070018768310546875, 'unsat': 0.0070018768310546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0992355346679688, 'cpu': 1.1875, 'solve': 0.04300689697265625, 'unsat': 0.03400421142578125, 'sat': 0.006999969482421875}, 'models': {'enumerated': 5.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 821.0, 'conflicts': 203.0, 'conflicts_analyzed': 104.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 0.0, 'models': 5.0, 'models_level': 280.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 107.0, 'distributed_sum_lbd': 268.0, 'integrated': 315.0, 'lemmas': 1060.0, 'lits_learnt': 12472.0, 'lemmas_binary': 75.0, 'lemmas_ternary': 20.0, 'cpu_time': 0.15625, 'integrated_imps': 124.0, 'integrated_jumps': 178.0, 'guiding_paths_lits': 2071.0, 'guiding_paths': 132.0, 'splits': 0.0, 'lemmas_conflict': 103.0, 'lemmas_loop': 672.0, 'lemmas_other': 285.0, 'lits_conflict': 2059.0, 'lits_loop': 5529.0, 'lits_other': 4884.0, 'jumps': {'jumps': 104.0, 'jumps_bounded': 14.0, 'levels': 347.0, 'levels_bounded': 161.0, 'max': 77.0, 'max_executed': 77.0, 'max_bounded': 72.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 67:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     63 : Maximum =    100

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(58)]), ('plan_module', [Number(68), Number(58), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(58), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(58), Number(35), Number(39), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108864s.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029002s with result Satisfiable.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13786609999988286, Incremental time limit = None
Running cumulative time = 1.188903499999924, Cumulative time limit = 1800
Used memory = (RSS = 1040.773438Mb, VMS = 1033.097656Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.025503s, Solving = 0.163400s, Total = 1.188903s, Memory = (RSS = 1040.773438Mb, VMS = 1033.097656Mb), Step range = [58-68]), Calls = 10
Final Model :: Total atoms = 7522, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=67, end_step=68, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0255033999997067, solving_time=0.1634001000002172, total_time=1.188903499999924, memory=Memory(rss=1040.7734375, vms=1033.09765625), step_range=range(58, 69), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10886439999990216, solving_time=0.0290016999999807, total_time=0.13786609999988286, memory=Memory(rss=1040.7734375, vms=1033.09765625), step_range=range(68, 69), clingo_stats={'problem': {'lp': {'atoms': 39560.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 240564.0, 'bodies_tr': 240564.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2080.0, 'count_bodies_tr': 2080.0, 'sccs': 245.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4745.0, 'rules': 454132.0, 'rules_normal': 451814.0, 'rules_choice': 2298.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 454132.0, 'rules_tr_normal': 451814.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 88899.0, 'eqs_atom': 21176.0, 'eqs_body': 3768.0, 'eqs_other': 63955.0}, 'lpStep': {'atoms': 3434.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24576.0, 'bodies_tr': 24576.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45443.0, 'rules_normal': 45246.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45443.0, 'rules_tr_normal': 45246.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7389.0, 'eqs_atom': 1804.0, 'eqs_body': 70.0, 'eqs_other': 5515.0}, 'generator': {'vars': 18568.0, 'vars_eliminated': 0.0, 'vars_frozen': 10973.0, 'constraints': 4004.0, 'constraints_binary': 160063.0, 'constraints_ternary': 20327.0, 'acyc_edges': 0.0, 'complexity': 185046.0}}, 'solving': {'solvers': {'choices': 500.0, 'conflicts': 197.0, 'conflicts_analyzed': 151.0, 'restarts': 0.0, 'restarts_last': 53.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 147.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 137.0, 'distributed_sum_lbd': 387.0, 'integrated': 590.0, 'lemmas': 1177.0, 'lits_learnt': 15199.0, 'lemmas_binary': 71.0, 'lemmas_ternary': 63.0, 'cpu_time': 0.078125, 'integrated_imps': 96.0, 'integrated_jumps': 81.0, 'guiding_paths_lits': 468.0, 'guiding_paths': 51.0, 'splits': 0.0, 'lemmas_conflict': 151.0, 'lemmas_loop': 447.0, 'lemmas_other': 579.0, 'lits_conflict': 2762.0, 'lits_loop': 3710.0, 'lits_other': 8727.0, 'jumps': {'jumps': 151.0, 'jumps_bounded': 6.0, 'levels': 453.0, 'levels_bounded': 239.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}, 'summary': {'call': 10.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 2.0, 'times': {'total': 0.1400299072265625, 'cpu': 0.203125, 'solve': 0.015003204345703125, 'unsat': 0.0070018768310546875, 'sat': 0.008001327514648438}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.2392654418945312, 'cpu': 1.390625, 'solve': 0.058010101318359375, 'unsat': 0.04100608825683594, 'sat': 0.015001296997070312}, 'models': {'enumerated': 6.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 1321.0, 'conflicts': 400.0, 'conflicts_analyzed': 255.0, 'restarts': 0.0, 'restarts_last': 53.0, 'extra': {'domain_choices': 0.0, 'models': 6.0, 'models_level': 427.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 244.0, 'distributed_sum_lbd': 655.0, 'integrated': 905.0, 'lemmas': 2237.0, 'lits_learnt': 27671.0, 'lemmas_binary': 146.0, 'lemmas_ternary': 83.0, 'cpu_time': 0.234375, 'integrated_imps': 220.0, 'integrated_jumps': 259.0, 'guiding_paths_lits': 2539.0, 'guiding_paths': 183.0, 'splits': 0.0, 'lemmas_conflict': 254.0, 'lemmas_loop': 1119.0, 'lemmas_other': 864.0, 'lits_conflict': 4821.0, 'lits_loop': 9239.0, 'lits_other': 13611.0, 'jumps': {'jumps': 255.0, 'jumps_bounded': 20.0, 'levels': 800.0, 'levels_bounded': 400.0, 'max': 79.0, 'max_executed': 79.0, 'max_bounded': 78.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{35: 59, 36: 62, 37: 63, 38: 65, 39: 68}

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 40 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 6 (120.00% solved)

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 39 was achieved successfully.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.125077s, Solving = 0.016163s, Total = 0.141240s, Memory = (RSS = 1035.921875Mb, VMS = 1027.945312Mb), Step range = [58-59]
2 : Statistics :: Grounding = 0.085741s, Solving = 0.004875s, Total = 0.090616s, Memory = (RSS = 1035.921875Mb, VMS = 1027.945312Mb), Step range = [60-60]
3 : Statistics :: Grounding = 0.091526s, Solving = 0.006974s, Total = 0.098500s, Memory = (RSS = 1035.921875Mb, VMS = 1027.945312Mb), Step range = [61-61]
4 : Statistics :: Grounding = 0.094176s, Solving = 0.013877s, Total = 0.108053s, Memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Step range = [62-62]
5 : Statistics :: Grounding = 0.099123s, Solving = 0.019579s, Total = 0.118703s, Memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Step range = [63-63]
6 : Statistics :: Grounding = 0.102891s, Solving = 0.014210s, Total = 0.117101s, Memory = (RSS = 1036.003906Mb, VMS = 1028.027344Mb), Step range = [64-64]
7 : Statistics :: Grounding = 0.105075s, Solving = 0.022543s, Total = 0.127617s, Memory = (RSS = 1037.414062Mb, VMS = 1029.460938Mb), Step range = [65-65]
8 : Statistics :: Grounding = 0.105900s, Solving = 0.015753s, Total = 0.121653s, Memory = (RSS = 1037.683594Mb, VMS = 1029.714844Mb), Step range = [66-66]
9 : Statistics :: Grounding = 0.107129s, Solving = 0.020426s, Total = 0.127554s, Memory = (RSS = 1040.175781Mb, VMS = 1032.843750Mb), Step range = [67-67]
10 : Statistics :: Grounding = 0.108864s, Solving = 0.029002s, Total = 0.137866s, Memory = (RSS = 1040.773438Mb, VMS = 1033.097656Mb), Step range = [68-68]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.188903s due to: External generator exit.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 20, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 23, 43: 24, 44: 24, 45: 25, 46: 26, 47: 27, 48: 27, 49: 28, 50: 29, 51: 30, 52: 31, 53: 32, 54: 33, 55: 33, 56: 34, 57: 34, 58: 34}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 35, 20: 38, 21: 39, 22: 40, 23: 42, 24: 44, 25: 45, 26: 46, 27: 48, 28: 49, 29: 50, 30: 51, 31: 52, 32: 53, 33: 55, 34: 58}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 11, 29: 11, 30: 12, 31: 13, 32: 14, 33: 15, 34: 15, 35: 16, 36: 16, 37: 17, 38: 17, 39: 17, 40: 18, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 29, 12: 30, 13: 31, 14: 32, 15: 34, 16: 36, 17: 39, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 20, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 23, 43: 24, 44: 24, 45: 25, 46: 26, 47: 27, 48: 27, 49: 28, 50: 29, 51: 30, 52: 31, 53: 32, 54: 33, 55: 33, 56: 34, 57: 34, 58: 34, 59: 35, 60: 35, 61: 36, 62: 36, 63: 37, 64: 38, 65: 38, 66: 39, 67: 39, 68: 39}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 35, 20: 38, 21: 39, 22: 40, 23: 42, 24: 44, 25: 45, 26: 46, 27: 48, 28: 49, 29: 50, 30: 51, 31: 52, 32: 53, 33: 55, 34: 58, 35: 60, 36: 62, 37: 63, 38: 65, 39: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 11, 29: 11, 30: 12, 31: 13, 32: 14, 33: 15, 34: 15, 35: 16, 36: 16, 37: 17, 38: 17, 39: 17, 40: 18, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 29, 12: 30, 13: 31, 14: 32, 15: 34, 16: 36, 17: 39, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 39, Last requested goal index = 39, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.025503s, Solving = 0.163400s, Total = 1.188903s, Memory = (RSS = 1040.773438Mb, VMS = 1033.097656Mb), Step range = [58-68]), Calls = 10
Model :: Total atoms = 7522, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 10 :: Actions = 10                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 44:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 46:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 50:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 53:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 54:
    Current Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 55:
    Current Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 59:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 60:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 62:
    Current Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 63:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 64:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 67:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 68:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 44 : Goals achieved = 39 : Goals unachieved = 5 : Complete = False

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 4, Problem Range = [5-8], Size = 18, Sub-goal Stage Range = [27-44]
Division points [total=3] : [(Index = 30, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 39, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [40-44]

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [40-44], problem number = 8, increment number = 8

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 40)
	('last_sgoals', 44)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x000001F1248C5100>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', True)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Optimise: 'optimise'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 100)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [40-44] : Concurrency disabled : Minimum search length bound disabled with value 72

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 40
last_sgoals = 44
start_step = 68
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 72

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = True
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Optimise

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[19-01-2022_17-35-50] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[19-01-2022_17-35-50] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 68 as problem start state.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,4))', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 68})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,0)', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 68})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,4)', 'S': 68})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 68})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 68})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 68})

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 68).
holds(1, complete_tower(red,puzzle_room_table), false, 68).
holds(1, configuration(manipulator_end_1), aligned_with((block,4)), 68).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 68).
holds(1, configuration(manipulator_limb_1), retracted, 68).
holds(1, configuration(manipulator_limb_2), retracted, 68).
holds(1, configuration(puzzle_room_door), open, 68).
holds(1, configuration(starting_room_door), closed, 68).
holds(1, configuration(store_room_door), open, 68).
holds(1, grasping(manipulator_arm_1), (block,4), 68).
holds(1, grasping(manipulator_arm_2), nothing, 68).
holds(1, grasping(manipulator_end_1), (block,4), 68).
holds(1, grasping(manipulator_end_2), nothing, 68).
holds(1, in((block,1)), (puzzle_room,1), 68).
holds(1, in((block,2)), (puzzle_room,1), 68).
holds(1, in((block,3)), (puzzle_room,1), 68).
holds(1, in((block,4)), (puzzle_room,0), 68).
holds(1, in((block,5)), (puzzle_room,1), 68).
holds(1, in((block,6)), (puzzle_room,1), 68).
holds(1, in(manipulator_arm_1), (puzzle_room,0), 68).
holds(1, in(manipulator_arm_2), (puzzle_room,0), 68).
holds(1, in(manipulator_end_1), (puzzle_room,0), 68).
holds(1, in(manipulator_end_2), (puzzle_room,0), 68).
holds(1, in(manipulator_limb_1), (puzzle_room,0), 68).
holds(1, in(manipulator_limb_2), (puzzle_room,0), 68).
holds(1, in(puzzle_room_table), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 68).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 68).
holds(1, in(talos), (puzzle_room,0), 68).
holds(1, in_tower((block,1),(block,1)), true, 68).
holds(1, in_tower((block,1),(block,2)), false, 68).
holds(1, in_tower((block,1),(block,3)), false, 68).
holds(1, in_tower((block,1),(block,4)), false, 68).
holds(1, in_tower((block,1),(block,5)), false, 68).
holds(1, in_tower((block,1),(block,6)), false, 68).
holds(1, in_tower((block,2),(block,1)), false, 68).
holds(1, in_tower((block,2),(block,2)), false, 68).
holds(1, in_tower((block,2),(block,3)), false, 68).
holds(1, in_tower((block,2),(block,4)), false, 68).
holds(1, in_tower((block,2),(block,5)), false, 68).
holds(1, in_tower((block,2),(block,6)), false, 68).
holds(1, in_tower((block,3),(block,1)), false, 68).
holds(1, in_tower((block,3),(block,2)), true, 68).
holds(1, in_tower((block,3),(block,3)), true, 68).
holds(1, in_tower((block,3),(block,4)), false, 68).
holds(1, in_tower((block,3),(block,5)), false, 68).
holds(1, in_tower((block,3),(block,6)), false, 68).
holds(1, in_tower((block,4),(block,1)), false, 68).
holds(1, in_tower((block,4),(block,2)), false, 68).
holds(1, in_tower((block,4),(block,3)), false, 68).
holds(1, in_tower((block,4),(block,4)), false, 68).
holds(1, in_tower((block,4),(block,5)), false, 68).
holds(1, in_tower((block,4),(block,6)), false, 68).
holds(1, in_tower((block,5),(block,1)), false, 68).
holds(1, in_tower((block,5),(block,2)), false, 68).
holds(1, in_tower((block,5),(block,3)), false, 68).
holds(1, in_tower((block,5),(block,4)), false, 68).
holds(1, in_tower((block,5),(block,5)), false, 68).
holds(1, in_tower((block,5),(block,6)), false, 68).
holds(1, in_tower((block,6),(block,1)), false, 68).
holds(1, in_tower((block,6),(block,2)), false, 68).
holds(1, in_tower((block,6),(block,3)), false, 68).
holds(1, in_tower((block,6),(block,4)), false, 68).
holds(1, in_tower((block,6),(block,5)), true, 68).
holds(1, in_tower((block,6),(block,6)), true, 68).
holds(1, on((block,1)), puzzle_room_table_left, 68).
holds(1, on((block,2)), (block,3), 68).
holds(1, on((block,3)), puzzle_room_table_left, 68).
holds(1, on((block,4)), nothing, 68).
holds(1, on((block,5)), (block,6), 68).
holds(1, on((block,6)), puzzle_room_table_right, 68).
holds(1, tower_base((block,1),puzzle_room_table), true, 68).
holds(1, tower_base((block,2),puzzle_room_table), false, 68).
holds(1, tower_base((block,3),puzzle_room_table), true, 68).
holds(1, tower_base((block,4),puzzle_room_table), false, 68).
holds(1, tower_base((block,5),puzzle_room_table), false, 68).
holds(1, tower_base((block,6),puzzle_room_table), true, 68).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 68).
holds(2, complete_tower(blue,puzzle_room_table), false, 68).
holds(2, complete_tower(red,puzzle_room_table), false, 68).
holds(2, configuration(manipulator_arm_1), retracted, 68).
holds(2, configuration(manipulator_arm_2), retracted, 68).
holds(2, configuration(puzzle_room_door), open, 68).
holds(2, configuration(starting_room_door), closed, 68).
holds(2, configuration(store_room_door), open, 68).
holds(2, grasping(manipulator_arm_1), (block,4), 68).
holds(2, grasping(manipulator_arm_2), nothing, 68).
holds(2, in((block,1)), puzzle_room, 68).
holds(2, in((block,2)), puzzle_room, 68).
holds(2, in((block,3)), puzzle_room, 68).
holds(2, in((block,4)), puzzle_room, 68).
holds(2, in((block,5)), puzzle_room, 68).
holds(2, in((block,6)), puzzle_room, 68).
holds(2, in(manipulator_arm_1), puzzle_room, 68).
holds(2, in(manipulator_arm_2), puzzle_room, 68).
holds(2, in(puzzle_room_table), puzzle_room, 68).
holds(2, in(talos), puzzle_room, 68).
holds(2, in_tower((block,1),(block,1)), true, 68).
holds(2, in_tower((block,1),(block,2)), false, 68).
holds(2, in_tower((block,1),(block,3)), false, 68).
holds(2, in_tower((block,1),(block,4)), false, 68).
holds(2, in_tower((block,1),(block,5)), false, 68).
holds(2, in_tower((block,1),(block,6)), false, 68).
holds(2, in_tower((block,2),(block,1)), false, 68).
holds(2, in_tower((block,2),(block,2)), false, 68).
holds(2, in_tower((block,2),(block,3)), false, 68).
holds(2, in_tower((block,2),(block,4)), false, 68).
holds(2, in_tower((block,2),(block,5)), false, 68).
holds(2, in_tower((block,2),(block,6)), false, 68).
holds(2, in_tower((block,3),(block,1)), false, 68).
holds(2, in_tower((block,3),(block,2)), true, 68).
holds(2, in_tower((block,3),(block,3)), true, 68).
holds(2, in_tower((block,3),(block,4)), false, 68).
holds(2, in_tower((block,3),(block,5)), false, 68).
holds(2, in_tower((block,3),(block,6)), false, 68).
holds(2, in_tower((block,4),(block,1)), false, 68).
holds(2, in_tower((block,4),(block,2)), false, 68).
holds(2, in_tower((block,4),(block,3)), false, 68).
holds(2, in_tower((block,4),(block,4)), false, 68).
holds(2, in_tower((block,4),(block,5)), false, 68).
holds(2, in_tower((block,4),(block,6)), false, 68).
holds(2, in_tower((block,5),(block,1)), false, 68).
holds(2, in_tower((block,5),(block,2)), false, 68).
holds(2, in_tower((block,5),(block,3)), false, 68).
holds(2, in_tower((block,5),(block,4)), false, 68).
holds(2, in_tower((block,5),(block,5)), false, 68).
holds(2, in_tower((block,5),(block,6)), false, 68).
holds(2, in_tower((block,6),(block,1)), false, 68).
holds(2, in_tower((block,6),(block,2)), false, 68).
holds(2, in_tower((block,6),(block,3)), false, 68).
holds(2, in_tower((block,6),(block,4)), false, 68).
holds(2, in_tower((block,6),(block,5)), true, 68).
holds(2, in_tower((block,6),(block,6)), true, 68).
holds(2, on((block,1)), puzzle_room_table, 68).
holds(2, on((block,2)), (block,3), 68).
holds(2, on((block,3)), puzzle_room_table, 68).
holds(2, on((block,4)), nothing, 68).
holds(2, on((block,5)), (block,6), 68).
holds(2, on((block,6)), puzzle_room_table, 68).
holds(2, tower_base((block,1),puzzle_room_table), true, 68).
holds(2, tower_base((block,2),puzzle_room_table), false, 68).
holds(2, tower_base((block,3),puzzle_room_table), true, 68).
holds(2, tower_base((block,4),puzzle_room_table), false, 68).
holds(2, tower_base((block,5),puzzle_room_table), false, 68).
holds(2, tower_base((block,6),puzzle_room_table), true, 68).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 68).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 68).

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 40})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,1))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,1)', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 42})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 43})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 44})

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 40).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 41).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 42).
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 43).
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 44).

[19-01-2022_17-35-50] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000001F124912700>]
	incrementor = SolveIncrementor(step_start=68, step_increase=1, step_increase_initial=2, step_end_min=73, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 68), range_=None), IncPart(name='plan_module', args=('#inc', 68, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 68, 'false', 'false', 'true', 'false', 'optimise'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 68, 40, 44, 'sequential', 'true'), range_=None)]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 813 rules

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004545699999880526s

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[19-01-2022_17-35-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.029863s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005221s with result Satisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000001F15FA71F40>

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_small_3.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 68)
	('last_sgoals', 44)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000001F1248C5100>)
	('first_sgoals', 40)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000001F15FA71F40>)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(40, 69)', truth=True, inc_range=None)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 68). %* None *%
#program plan_module(#inc, 68, false, false). %* None *%
#program optimisation_module(#inc, 68, false, false, true, false, optimise). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 68, 40, 44, sequential, true). %* None *%

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     67 : Current =     69
Incrementor step ends | Minimum  =     73 : Maximum =    100

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(68), Number(68)]), ('plan_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(69), Number(68)]), ('plan_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122507s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 68: original = External(symbol='current_last_sgoals(40, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(40,69).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 69: original = External(symbol='current_last_sgoals(40, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(40,69).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014030s with result Satisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.13653739999995196, Incremental time limit = None
Running cumulative time = 0.13653739999995196, Cumulative time limit = 1800
Used memory = (RSS = 1038.160156Mb, VMS = 1030.296875Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.122507s, Solving = 0.014030s, Total = 0.136537s, Memory = (RSS = 1038.160156Mb, VMS = 1030.296875Mb), Step range = [68-69]), Calls = 1
Final Model :: Total atoms = 4159, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=67, end_step=69, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.12250739999990401, solving_time=0.014030000000047949, total_time=0.13653739999995196, memory=Memory(rss=1038.16015625, vms=1030.296875), step_range=range(68, 70), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12250739999990401, solving_time=0.014030000000047949, total_time=0.13653739999995196, memory=Memory(rss=1038.16015625, vms=1030.296875), step_range=range(68, 70), clingo_stats={'problem': {'lp': {'atoms': 12222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 28200.0, 'bodies_tr': 28200.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 553.0, 'rules': 56742.0, 'rules_normal': 56197.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 56742.0, 'rules_tr_normal': 56197.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 24922.0, 'eqs_atom': 7032.0, 'eqs_body': 1913.0, 'eqs_other': 15977.0}, 'lpStep': {'atoms': 5702.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 25581.0, 'bodies_tr': 25581.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 262.0, 'count_bodies_tr': 262.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 553.0, 'rules': 49312.0, 'rules_normal': 48767.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 49312.0, 'rules_tr_normal': 48767.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 11866.0, 'eqs_atom': 2122.0, 'eqs_body': 388.0, 'eqs_other': 9356.0}, 'generator': {'vars': 2663.0, 'vars_eliminated': 0.0, 'vars_frozen': 1609.0, 'constraints': 34.0, 'constraints_binary': 1245.0, 'constraints_ternary': 190.0, 'acyc_edges': 0.0, 'complexity': 1495.0}}, 'solving': {'solvers': {'choices': 18.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 28.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 90.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.13602828979492188, 'cpu': 0.125, 'solve': 0.0039997100830078125, 'unsat': 0.0030002593994140625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.17703819274902344, 'cpu': 0.15625, 'solve': 0.006999969482421875, 'unsat': 0.0030002593994140625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 18.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 29.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 96.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 69}

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 41 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 2 ( 40.00% solved)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(41, 69)', truth=True, inc_range=None)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 41, step = 69]:
sub_goal(2, talos, grasp(manipulator_arm_2,(block,1)), grasping(manipulator_arm_2), (block,1), 41)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 69:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     73 : Maximum =    100

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(68)]), ('plan_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085451s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 70: original = External(symbol='current_last_sgoals(41, 69)', truth=True, inc_range=None), conversion = current_last_sgoals(41,69).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005179s with result Unsatisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09062999999991916, Incremental time limit = None
Running cumulative time = 0.22716739999987112, Cumulative time limit = 1800
Used memory = (RSS = 1038.253906Mb, VMS = 1030.406250Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=69, end_step=70, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.20795849999990423, solving_time=0.01920889999996689, total_time=0.22716739999987112, memory=Memory(rss=1038.25390625, vms=1030.40625), step_range=range(68, 71), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.08545110000000022, solving_time=0.00517889999991894, total_time=0.09062999999991916, memory=Memory(rss=1038.25390625, vms=1030.40625), step_range=range(70, 71), clingo_stats={'problem': {'lp': {'atoms': 14188.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 49823.0, 'bodies_tr': 49823.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 464.0, 'count_bodies_tr': 464.0, 'sccs': 57.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 739.0, 'rules': 98078.0, 'rules_normal': 97336.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 98078.0, 'rules_tr_normal': 97336.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 28831.0, 'eqs_atom': 7941.0, 'eqs_body': 2337.0, 'eqs_other': 18553.0}, 'lpStep': {'atoms': 1966.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 21623.0, 'bodies_tr': 21623.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 41336.0, 'rules_normal': 41139.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 41336.0, 'rules_tr_normal': 41139.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3909.0, 'eqs_atom': 909.0, 'eqs_body': 424.0, 'eqs_other': 2576.0}, 'generator': {'vars': 3026.0, 'vars_eliminated': 0.0, 'vars_frozen': 1891.0, 'constraints': 146.0, 'constraints_binary': 2979.0, 'constraints_ternary': 388.0, 'acyc_edges': 0.0, 'complexity': 3571.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 132.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 0.0, 'times': {'total': 0.0910186767578125, 'cpu': 0.09375, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.26805686950683594, 'cpu': 0.25, 'solve': 0.007999420166015625, 'unsat': 0.0039997100830078125, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 18.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 29.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 6.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 228.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 6.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 70:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     73 : Maximum =    100

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(68)]), ('plan_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.091854s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007141s with result Unsatisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.09899519999999029, Incremental time limit = None
Running cumulative time = 0.3261625999998614, Cumulative time limit = 1800
Used memory = (RSS = 1038.300781Mb, VMS = 1030.406250Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=70, end_step=71, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.29981259999999565, solving_time=0.02634999999986576, total_time=0.3261625999998614, memory=Memory(rss=1038.30078125, vms=1030.40625), step_range=range(68, 72), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09185410000009142, solving_time=0.00714109999989887, total_time=0.09899519999999029, memory=Memory(rss=1038.30078125, vms=1030.40625), step_range=range(71, 72), clingo_stats={'problem': {'lp': {'atoms': 16895.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 71875.0, 'bodies_tr': 71875.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 666.0, 'count_bodies_tr': 666.0, 'sccs': 70.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 973.0, 'rules': 140492.0, 'rules_normal': 139553.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 140492.0, 'rules_tr_normal': 139553.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 36123.0, 'eqs_atom': 9514.0, 'eqs_body': 2841.0, 'eqs_other': 23768.0}, 'lpStep': {'atoms': 2707.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22052.0, 'bodies_tr': 22052.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 42414.0, 'rules_normal': 42217.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42414.0, 'rules_tr_normal': 42217.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7292.0, 'eqs_atom': 1573.0, 'eqs_body': 504.0, 'eqs_other': 5215.0}, 'generator': {'vars': 3595.0, 'vars_eliminated': 0.0, 'vars_frozen': 2314.0, 'constraints': 297.0, 'constraints_binary': 6667.0, 'constraints_ternary': 748.0, 'acyc_edges': 0.0, 'complexity': 7810.0}}, 'solving': {'solvers': {'choices': 147.0, 'conflicts': 9.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 16.0, 'integrated': 36.0, 'lemmas': 101.0, 'lits_learnt': 612.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 100.0, 'guiding_paths_lits': 145.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 62.0, 'lemmas_other': 36.0, 'lits_conflict': 6.0, 'lits_loop': 534.0, 'lits_other': 72.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 109.0, 'levels_bounded': 62.0, 'max': 41.0, 'max_executed': 25.0, 'max_bounded': 30.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.1000213623046875, 'cpu': 0.09375, 'solve': 0.00099945068359375, 'unsat': 0.00099945068359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.36807823181152344, 'cpu': 0.34375, 'solve': 0.008998870849609375, 'unsat': 0.0049991607666015625, 'sat': 0.00099945068359375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 165.0, 'conflicts': 11.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 1.0, 'models': 2.0, 'models_level': 29.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 11.0, 'distributed_sum_lbd': 20.0, 'integrated': 40.0, 'lemmas': 105.0, 'lits_learnt': 618.0, 'lemmas_binary': 32.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 12.0, 'integrated_jumps': 100.0, 'guiding_paths_lits': 373.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 66.0, 'lemmas_other': 36.0, 'lits_conflict': 6.0, 'lits_loop': 540.0, 'lits_other': 72.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 109.0, 'levels_bounded': 62.0, 'max': 41.0, 'max_executed': 25.0, 'max_bounded': 30.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 71:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     71 : Current =     72
Incrementor step ends | Minimum  =     73 : Maximum =    100

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(72)]), ('state_module', [Number(72), Number(68)]), ('plan_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.092767s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014005s with result Satisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.10677220000025045, Incremental time limit = None
Running cumulative time = 0.43293480000011186, Cumulative time limit = 1800
Used memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.392580s, Solving = 0.040355s, Total = 0.432935s, Memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Step range = [68-72]), Calls = 4
Final Model :: Total atoms = 5272, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=71, end_step=72, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.3925799000001007, solving_time=0.040354900000011185, total_time=0.43293480000011186, memory=Memory(rss=1038.34765625, vms=1030.44140625), step_range=range(68, 73), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09276730000010502, solving_time=0.014004900000145426, total_time=0.10677220000025045, memory=Memory(rss=1038.34765625, vms=1030.44140625), step_range=range(72, 73), clingo_stats={'problem': {'lp': {'atoms': 19651.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 94391.0, 'bodies_tr': 94391.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 868.0, 'count_bodies_tr': 868.0, 'sccs': 95.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1371.0, 'rules': 183379.0, 'rules_normal': 182243.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 183379.0, 'rules_tr_normal': 182243.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 42657.0, 'eqs_atom': 10895.0, 'eqs_body': 3138.0, 'eqs_other': 28624.0}, 'lpStep': {'atoms': 2756.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 22516.0, 'bodies_tr': 22516.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 42887.0, 'rules_normal': 42690.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 42887.0, 'rules_tr_normal': 42690.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6534.0, 'eqs_atom': 1381.0, 'eqs_body': 297.0, 'eqs_other': 4856.0}, 'generator': {'vars': 4936.0, 'vars_eliminated': 0.0, 'vars_frozen': 3168.0, 'constraints': 653.0, 'constraints_binary': 16357.0, 'constraints_ternary': 1966.0, 'acyc_edges': 0.0, 'complexity': 19144.0}}, 'solving': {'solvers': {'choices': 244.0, 'conflicts': 14.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 1.0, 'models': 1.0, 'models_level': 67.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 8.0, 'distributed_sum_lbd': 18.0, 'integrated': 32.0, 'lemmas': 86.0, 'lits_learnt': 607.0, 'lemmas_binary': 14.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.015625, 'integrated_imps': 17.0, 'integrated_jumps': 69.0, 'guiding_paths_lits': 216.0, 'guiding_paths': 10.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 45.0, 'lemmas_other': 31.0, 'lits_conflict': 53.0, 'lits_loop': 420.0, 'lits_other': 134.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 1.0, 'levels': 39.0, 'levels_bounded': 2.0, 'max': 14.0, 'max_executed': 14.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 4.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 3.0, 'times': {'total': 0.10802268981933594, 'cpu': 0.078125, 'solve': 0.0070018768310546875, 'unsat': 0.005001068115234375, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.4761009216308594, 'cpu': 0.421875, 'solve': 0.016000747680664062, 'unsat': 0.010000228881835938, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 409.0, 'conflicts': 25.0, 'conflicts_analyzed': 13.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 2.0, 'models': 3.0, 'models_level': 96.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 19.0, 'distributed_sum_lbd': 38.0, 'integrated': 72.0, 'lemmas': 191.0, 'lits_learnt': 1225.0, 'lemmas_binary': 46.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.015625, 'integrated_imps': 29.0, 'integrated_jumps': 169.0, 'guiding_paths_lits': 589.0, 'guiding_paths': 35.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 111.0, 'lemmas_other': 67.0, 'lits_conflict': 59.0, 'lits_loop': 960.0, 'lits_other': 206.0, 'jumps': {'jumps': 13.0, 'jumps_bounded': 4.0, 'levels': 148.0, 'levels_bounded': 64.0, 'max': 41.0, 'max_executed': 25.0, 'max_bounded': 30.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 69, 41: 72}

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 42 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 3 ( 60.00% solved)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(42, 72)', truth=True, inc_range=None)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 42, step = 72]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 42)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 72:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     72 : Current =     73
Incrementor step ends | Minimum  =     73 : Maximum =    100

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(73)]), ('state_module', [Number(73), Number(68)]), ('plan_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.097789s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 73: original = External(symbol='current_last_sgoals(42, 72)', truth=True, inc_range=None), conversion = current_last_sgoals(42,72).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018852s with result Satisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11664079999991372, Incremental time limit = None
Running cumulative time = 0.5495756000000256, Cumulative time limit = 1800
Used memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.490369s, Solving = 0.059207s, Total = 0.549576s, Memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Step range = [68-73]), Calls = 5
Final Model :: Total atoms = 5645, Cost = (0, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=72, end_step=73, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.4903690999999526, solving_time=0.05920650000007299, total_time=0.5495756000000256, memory=Memory(rss=1038.34765625, vms=1030.44140625), step_range=range(68, 74), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.09778919999985192, solving_time=0.018851600000061808, total_time=0.11664079999991372, memory=Memory(rss=1038.34765625, vms=1030.44140625), step_range=range(73, 74), clingo_stats={'problem': {'lp': {'atoms': 22796.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 117889.0, 'bodies_tr': 117889.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1070.0, 'count_bodies_tr': 1070.0, 'sccs': 120.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1775.0, 'rules': 227520.0, 'rules_normal': 226187.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 227520.0, 'rules_tr_normal': 226187.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 53314.0, 'eqs_atom': 12566.0, 'eqs_body': 3423.0, 'eqs_other': 37325.0}, 'lpStep': {'atoms': 3145.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23498.0, 'bodies_tr': 23498.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 44141.0, 'rules_normal': 43944.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44141.0, 'rules_tr_normal': 43944.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 10657.0, 'eqs_atom': 1671.0, 'eqs_body': 285.0, 'eqs_other': 8701.0}, 'generator': {'vars': 6627.0, 'vars_eliminated': 0.0, 'vars_frozen': 4159.0, 'constraints': 1049.0, 'constraints_binary': 33099.0, 'constraints_ternary': 3897.0, 'acyc_edges': 0.0, 'complexity': 38283.0}}, 'solving': {'solvers': {'choices': 117.0, 'conflicts': 5.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 80.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 8.0, 'lemmas': 10.0, 'lits_learnt': 30.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 8.0, 'integrated_jumps': 16.0, 'guiding_paths_lits': 258.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 8.0, 'lits_conflict': 6.0, 'lits_loop': 0.0, 'lits_other': 24.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 6.0, 'levels_bounded': 3.0, 'max': 4.0, 'max_executed': 2.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 5.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, 0.0], 'lower': [0.0, 0.0], 'concurrency': 6.0, 'winner': 3.0, 'times': {'total': 0.11802482604980469, 'cpu': 0.109375, 'solve': 0.0070018768310546875, 'unsat': 0.006000518798828125, 'sat': 0.0010013580322265625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5941257476806641, 'cpu': 0.53125, 'solve': 0.02300262451171875, 'unsat': 0.016000747680664062, 'sat': 0.004001617431640625}, 'models': {'enumerated': 4.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 526.0, 'conflicts': 30.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 2.0, 'models': 4.0, 'models_level': 176.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 42.0, 'integrated': 80.0, 'lemmas': 201.0, 'lits_learnt': 1255.0, 'lemmas_binary': 51.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.015625, 'integrated_imps': 37.0, 'integrated_jumps': 185.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 44.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 111.0, 'lemmas_other': 75.0, 'lits_conflict': 65.0, 'lits_loop': 960.0, 'lits_other': 230.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 6.0, 'levels': 154.0, 'levels_bounded': 67.0, 'max': 41.0, 'max_executed': 25.0, 'max_bounded': 30.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 69, 41: 72, 42: 73}

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 43 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 4 ( 80.00% solved)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(43, 73)', truth=True, inc_range=None)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 43, step = 73]:
sub_goal(2, talos, put(manipulator_arm_1,(block,4),(block,5)), on((block,4)), (block,5), 43)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Reaction at search length 73:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     73 : Current =     74
Incrementor step ends | Minimum  =     73 : Maximum =    100

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(74)]), ('state_module', [Number(74), Number(68)]), ('plan_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100006s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 74: original = External(symbol='current_last_sgoals(43, 73)', truth=True, inc_range=None), conversion = current_last_sgoals(43,73).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018268s with result Satisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.11827360000006593, Incremental time limit = None
Running cumulative time = 0.6678492000000915, Cumulative time limit = 1800
Used memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.590375s, Solving = 0.077474s, Total = 0.667849s, Memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Step range = [68-74]), Calls = 6
Final Model :: Total atoms = 6019, Cost = (0, -1), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=73, end_step=74, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5903748999999152, solving_time=0.0774743000001763, total_time=0.6678492000000915, memory=Memory(rss=1038.34765625, vms=1030.44140625), step_range=range(68, 75), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10000579999996262, solving_time=0.018267800000103307, total_time=0.11827360000006593, memory=Memory(rss=1038.34765625, vms=1030.44140625), step_range=range(74, 75), clingo_stats={'problem': {'lp': {'atoms': 25970.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 141971.0, 'bodies_tr': 141971.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1272.0, 'count_bodies_tr': 1272.0, 'sccs': 145.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2369.0, 'rules': 272255.0, 'rules_normal': 270725.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 272255.0, 'rules_tr_normal': 270725.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 59987.0, 'eqs_atom': 14146.0, 'eqs_body': 3499.0, 'eqs_other': 42342.0}, 'lpStep': {'atoms': 3174.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24082.0, 'bodies_tr': 24082.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 44735.0, 'rules_normal': 44538.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 44735.0, 'rules_tr_normal': 44538.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 6673.0, 'eqs_atom': 1580.0, 'eqs_body': 76.0, 'eqs_other': 5017.0}, 'generator': {'vars': 8940.0, 'vars_eliminated': 0.0, 'vars_frozen': 5510.0, 'constraints': 1649.0, 'constraints_binary': 58249.0, 'constraints_ternary': 6860.0, 'acyc_edges': 0.0, 'complexity': 67082.0}}, 'solving': {'solvers': {'choices': 210.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 93.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 300.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 6.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -1.0], 'lower': [0.0, -1.0], 'concurrency': 6.0, 'winner': 1.0, 'times': {'total': 0.11902427673339844, 'cpu': 0.109375, 'solve': 0.0070018768310546875, 'unsat': 0.005001068115234375, 'sat': 0.0020008087158203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.7131500244140625, 'cpu': 0.640625, 'solve': 0.030004501342773438, 'unsat': 0.021001815795898438, 'sat': 0.0060024261474609375}, 'models': {'enumerated': 5.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 736.0, 'conflicts': 31.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 2.0, 'models': 5.0, 'models_level': 269.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 42.0, 'integrated': 80.0, 'lemmas': 201.0, 'lits_learnt': 1255.0, 'lemmas_binary': 51.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.015625, 'integrated_imps': 37.0, 'integrated_jumps': 185.0, 'guiding_paths_lits': 1147.0, 'guiding_paths': 50.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 111.0, 'lemmas_other': 75.0, 'lits_conflict': 65.0, 'lits_loop': 960.0, 'lits_other': 230.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 6.0, 'levels': 154.0, 'levels_bounded': 67.0, 'max': 41.0, 'max_executed': 25.0, 'max_bounded': 30.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 69, 41: 72, 42: 73, 43: 74}

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 44 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 5 (100.00% solved)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(44, 74)', truth=True, inc_range=None)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 44, step = 74]:
sub_goal(2, talos, put(manipulator_arm_2,(block,1),(block,2)), on((block,1)), (block,2), 44)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(74)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete_tower(blue,puzzle_room_table), false, false)
final_goal(1, complete_tower(blue,puzzle_room_table), true, true)
final_goal(1, complete_tower(red,puzzle_room_table), false, false)
final_goal(1, complete_tower(red,puzzle_room_table), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1),puzzle_room_table), false, true)
final_goal(1, tower_base((block,1),puzzle_room_table), true, false)
final_goal(1, tower_base((block,2),puzzle_room_table), false, true)
final_goal(1, tower_base((block,2),puzzle_room_table), true, false)
final_goal(1, tower_base((block,3),puzzle_room_table), false, false)
final_goal(1, tower_base((block,3),puzzle_room_table), true, true)
final_goal(1, tower_base((block,4),puzzle_room_table), false, true)
final_goal(1, tower_base((block,4),puzzle_room_table), true, false)
final_goal(1, tower_base((block,5),puzzle_room_table), false, true)
final_goal(1, tower_base((block,5),puzzle_room_table), true, false)
final_goal(1, tower_base((block,6),puzzle_room_table), false, false)
final_goal(1, tower_base((block,6),puzzle_room_table), true, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false)
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true)
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false)

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     74 : Current =     75
Incrementor step ends | Minimum  =     73 : Maximum =    100

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('state_module', [Number(75), Number(68)]), ('plan_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(68), Function('false', [], True), Function('false', [], True), Function('true', [], True), Function('false', [], True), Function('optimise', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(68), Number(40), Number(44), Function('sequential', [], True), Function('true', [], True)])]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.103354s.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 75: original = External(symbol='current_last_sgoals(44, 74)', truth=True, inc_range=None), conversion = current_last_sgoals(44,74).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 75: original = External(symbol='seq_achieve_fgoals(74)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(74).

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.021327s with result Satisfiable.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.12468119999994087, Incremental time limit = None
Running cumulative time = 0.7925304000000324, Cumulative time limit = 1800
Used memory = (RSS = 1039.558594Mb, VMS = 1031.660156Mb), Total system virtual memory = 16324.0078125Mb

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 6
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.693729s, Solving = 0.098801s, Total = 0.792530s, Memory = (RSS = 1039.558594Mb, VMS = 1031.660156Mb), Step range = [68-75]), Calls = 7
Final Model :: Total atoms = 6683, Cost = (0, -2), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=74, end_step=75, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.693729299999859, solving_time=0.09880110000017339, total_time=0.7925304000000324, memory=Memory(rss=1039.55859375, vms=1031.66015625), step_range=range(68, 76), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.10335439999994378, solving_time=0.021326799999997093, total_time=0.12468119999994087, memory=Memory(rss=1039.55859375, vms=1031.66015625), step_range=range(75, 76), clingo_stats={'problem': {'lp': {'atoms': 29389.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166514.0, 'bodies_tr': 166514.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1474.0, 'count_bodies_tr': 1474.0, 'sccs': 170.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2963.0, 'rules': 317635.0, 'rules_normal': 315908.0, 'rules_choice': 1713.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 317635.0, 'rules_tr_normal': 315908.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 67295.0, 'eqs_atom': 15935.0, 'eqs_body': 3569.0, 'eqs_other': 47791.0}, 'lpStep': {'atoms': 3419.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 24543.0, 'bodies_tr': 24543.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 202.0, 'count_bodies_tr': 202.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 45380.0, 'rules_normal': 45183.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 0.0, 'rules_tr': 45380.0, 'rules_tr_normal': 45183.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7308.0, 'eqs_atom': 1789.0, 'eqs_body': 70.0, 'eqs_other': 5449.0}, 'generator': {'vars': 11321.0, 'vars_eliminated': 0.0, 'vars_frozen': 6873.0, 'constraints': 2271.0, 'constraints_binary': 83505.0, 'constraints_ternary': 10309.0, 'acyc_edges': 0.0, 'complexity': 96495.0}}, 'solving': {'solvers': {'choices': 240.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 106.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 342.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [0.0, -2.0], 'lower': [0.0, -2.0], 'concurrency': 6.0, 'winner': 5.0, 'times': {'total': 0.12602806091308594, 'cpu': 0.125, 'solve': 0.009004592895507812, 'unsat': 0.00600433349609375, 'sat': 0.0030002593994140625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.8391780853271484, 'cpu': 0.765625, 'solve': 0.03900909423828125, 'unsat': 0.027006149291992188, 'sat': 0.009002685546875}, 'models': {'enumerated': 6.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 976.0, 'conflicts': 31.0, 'conflicts_analyzed': 15.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 2.0, 'models': 6.0, 'models_level': 375.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 42.0, 'integrated': 80.0, 'lemmas': 201.0, 'lits_learnt': 1255.0, 'lemmas_binary': 51.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.03125, 'integrated_imps': 37.0, 'integrated_jumps': 185.0, 'guiding_paths_lits': 1489.0, 'guiding_paths': 56.0, 'splits': 0.0, 'lemmas_conflict': 15.0, 'lemmas_loop': 111.0, 'lemmas_other': 75.0, 'lits_conflict': 65.0, 'lits_loop': 960.0, 'lits_other': 230.0, 'jumps': {'jumps': 15.0, 'jumps_bounded': 6.0, 'levels': 154.0, 'levels_bounded': 67.0, 'max': 41.0, 'max_executed': 25.0, 'max_bounded': 30.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{40: 69, 41: 72, 42: 73, 43: 74, 44: 75}

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 45 achieved :: Progression >> total requested sgoals = 5, current total achieved sgoals = 6 (120.00% solved)

[19-01-2022_17-35-51] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 44 was achieved successfully.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.122507s, Solving = 0.014030s, Total = 0.136537s, Memory = (RSS = 1038.160156Mb, VMS = 1030.296875Mb), Step range = [68-69]
2 : Statistics :: Grounding = 0.085451s, Solving = 0.005179s, Total = 0.090630s, Memory = (RSS = 1038.253906Mb, VMS = 1030.406250Mb), Step range = [70-70]
3 : Statistics :: Grounding = 0.091854s, Solving = 0.007141s, Total = 0.098995s, Memory = (RSS = 1038.300781Mb, VMS = 1030.406250Mb), Step range = [71-71]
4 : Statistics :: Grounding = 0.092767s, Solving = 0.014005s, Total = 0.106772s, Memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Step range = [72-72]
5 : Statistics :: Grounding = 0.097789s, Solving = 0.018852s, Total = 0.116641s, Memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Step range = [73-73]
6 : Statistics :: Grounding = 0.100006s, Solving = 0.018268s, Total = 0.118274s, Memory = (RSS = 1038.347656Mb, VMS = 1030.441406Mb), Step range = [74-74]
7 : Statistics :: Grounding = 0.103354s, Solving = 0.021327s, Total = 0.124681s, Memory = (RSS = 1039.558594Mb, VMS = 1031.660156Mb), Step range = [75-75]

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.792530s due to: External generator exit.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[19-01-2022_17-35-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 20, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 23, 43: 24, 44: 24, 45: 25, 46: 26, 47: 27, 48: 27, 49: 28, 50: 29, 51: 30, 52: 31, 53: 32, 54: 33, 55: 33, 56: 34, 57: 34, 58: 34, 59: 35, 60: 35, 61: 36, 62: 36, 63: 37, 64: 38, 65: 38, 66: 39, 67: 39, 68: 39}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 35, 20: 38, 21: 39, 22: 40, 23: 42, 24: 44, 25: 45, 26: 46, 27: 48, 28: 49, 29: 50, 30: 51, 31: 52, 32: 53, 33: 55, 34: 58, 35: 60, 36: 62, 37: 63, 38: 65, 39: 68}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 11, 29: 11, 30: 12, 31: 13, 32: 14, 33: 15, 34: 15, 35: 16, 36: 16, 37: 17, 38: 17, 39: 17, 40: 18, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 29, 12: 30, 13: 31, 14: 32, 15: 34, 16: 36, 17: 39, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 5, 9: 6, 10: 6, 11: 6, 12: 6, 13: 6, 14: 6, 15: 7, 16: 8, 17: 9, 18: 10, 19: 10, 20: 10, 21: 11, 22: 11, 23: 12, 24: 12, 25: 13, 26: 14, 27: 15, 28: 15, 29: 16, 30: 17, 31: 17, 32: 18, 33: 18, 34: 18, 35: 19, 36: 20, 37: 20, 38: 20, 39: 21, 40: 22, 41: 23, 42: 23, 43: 24, 44: 24, 45: 25, 46: 26, 47: 27, 48: 27, 49: 28, 50: 29, 51: 30, 52: 31, 53: 32, 54: 33, 55: 33, 56: 34, 57: 34, 58: 34, 59: 35, 60: 35, 61: 36, 62: 36, 63: 37, 64: 38, 65: 38, 66: 39, 67: 39, 68: 39, 69: 40, 70: 40, 71: 41, 72: 41, 73: 42, 74: 43, 75: 44}
Sub-goal achievement steps: {1: 2, 2: 4, 3: 6, 4: 7, 5: 8, 6: 14, 7: 15, 8: 16, 9: 17, 10: 20, 11: 22, 12: 24, 13: 25, 14: 26, 15: 28, 16: 29, 17: 31, 18: 34, 19: 35, 20: 38, 21: 39, 22: 40, 23: 42, 24: 44, 25: 45, 26: 46, 27: 48, 28: 49, 29: 50, 30: 51, 31: 52, 32: 53, 33: 55, 34: 58, 35: 60, 36: 62, 37: 63, 38: 65, 39: 68, 40: 70, 41: 72, 42: 73, 43: 74, 44: 75}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 3, 14: 3, 15: 3, 16: 4, 17: 4, 18: 4, 19: 5, 20: 5, 21: 5, 22: 6, 23: 7, 24: 8, 25: 9, 26: 10, 27: 11, 28: 11, 29: 11, 30: 12, 31: 13, 32: 14, 33: 15, 34: 15, 35: 16, 36: 16, 37: 17, 38: 17, 39: 17, 40: 18, 41: 18, 42: 19, 43: 19, 44: 20}
Sub-goal achievement steps: {1: 10, 2: 12, 3: 15, 4: 18, 5: 21, 6: 22, 7: 23, 8: 24, 9: 25, 10: 26, 11: 29, 12: 30, 13: 31, 14: 32, 15: 34, 16: 36, 17: 39, 18: 41, 19: 43, 20: 44}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 44, Last requested goal index = 44, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.693729s, Solving = 0.098801s, Total = 0.792530s, Memory = (RSS = 1039.558594Mb, VMS = 1031.660156Mb), Step range = [68-75]), Calls = 7
Model :: Total atoms = 6683, Cost = (0, -2), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 7 :: Actions = 7                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(store_room_door_handle_outer))
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,store_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 12:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 13:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 16:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 18:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 19:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 23:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 25:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 27:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 28:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 29:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 30:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 31:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 32:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 33:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 34:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 35:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 36:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 37:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 38:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 39:
    Current Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 21] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 40:
    Current Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 22] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 41:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 42:
    Current Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 23] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 43:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 44:
    Current Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 24] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 45:
    Current Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 25] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
Step 46:
    Current Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 26] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 47:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 48:
    Current Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 27] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 49:
    Current Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 28] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 50:
    Current Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 29] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 51:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 52:
    Current Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 31] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 53:
    Current Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 32] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 54:
    Current Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 55:
    Current Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 33] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 56:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 57:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 58:
    Current Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 34] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 59:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 60:
    Current Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 35] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 61:
    Current Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,4)))
Step 62:
    Current Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Achieved Sub-goals:
        [Index = 36] talos : grasp(manipulator_arm_1,(block,4)) -> grasping(manipulator_arm_1) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,4))
Step 63:
    Current Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 37] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 64:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 65:
    Current Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 38] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 66:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 67:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 68:
    Current Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 39] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 69:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 70:
    Current Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 40] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,1)))
Step 72:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Achieved Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_2,(block,1)) -> grasping(manipulator_arm_2) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,1))
Step 73:
    Current Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 42] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 74:
    Current Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 43] talos : put(manipulator_arm_1,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,4),(block,5))
Step 75:
    Current Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 44] talos : put(manipulator_arm_2,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_2,(block,1),(block,2))

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=75, step_range=range(0, 76)

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 75, Tota actions = 75, Produced sub-goal stages = 0

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 75, Tota actions = 75, Produced sub-goal stages = 0

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 75, Tota actions = 75, Produced sub-goal stages = 0

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 75, Actions = 75

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 6.34237370000028, Average ground wait time = 1.937577712499916, Absolution time = 15.22839049999925)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.15s, ST =   0.74s, OT = 0.00s, TT =   1.89s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  44, AC =  44, CF = 1.0, GT =   3.58s, ST =   0.95s, OT = 0.02s, TT =   4.55s, EF = (LE = 2.2, AC = 2.2), ED = (LE = 2.0, AC = 2.0), EB = (LE = 0.9, AC = 0.9)        |     
     |        Lvl = 1 (com-ref), LE =  75, AC =  75, CF = 1.0, GT =   7.53s, ST =   1.23s, OT = 0.03s, TT =   8.79s, EF = (LE = 1.7, AC = 1.7), ED = (LE = 1.0, AC = 1.0), EB = (LE = 0.6, AC = 0.6)        |     
     ========================================================================================================================================================================================================     

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=75, step_range=range(0, 76)

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 75, Tota actions = 75, Produced sub-goal stages = 0

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=44, step_range=range(0, 45)

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 75, Tota actions = 75, Produced sub-goal stages = 0

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[19-01-2022_17-35-52] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Tota actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 44, Tota actions = 44, Produced sub-goal stages = 44
Level [1]: Length = 75, Tota actions = 75, Produced sub-goal stages = 0

[19-01-2022_17-35-52] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 21.012109s            
      ================================================      

[19-01-2022_17-35-52] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 1032.389932s, Proccess time 1336.156250s         
  ################################################################################################  

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=0, level=2: rmse_mchild=5.871967302361279, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=0, level=1: rmse_mchild=3.3053534713019634, rmse_div_indices=1.855921454276674, rmse_div_steps=5.453719423985392

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=1, level=2: rmse_mchild=7.428660713749147, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=1, level=1: rmse_mchild=3.008412870098878, rmse_div_indices=5.236092690801669, rmse_div_steps=11.42335570467608

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=2, level=2: rmse_mchild=4.773887304912003, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=2, level=1: rmse_mchild=2.898551576161689, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=3, level=2: rmse_mchild=5.318834458788879, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=3, level=1: rmse_mchild=3.4332101331234908, rmse_div_indices=1.3333333333333333, rmse_div_steps=5.024246764994287

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=4, level=2: rmse_mchild=5.98748695196908, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=4, level=1: rmse_mchild=3.1824268898265218, rmse_div_indices=1.855921454276674, rmse_div_steps=4.982608642958916

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=5, level=2: rmse_mchild=7.0099928673287515, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=5, level=1: rmse_mchild=2.621381803931557, rmse_div_indices=4.041451884327381, rmse_div_steps=8.870597499605086

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=6, level=2: rmse_mchild=7.3576490810584305, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=6, level=1: rmse_mchild=2.7291260967021453, rmse_div_indices=5.236092690801669, rmse_div_steps=11.234557302260635

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=7, level=2: rmse_mchild=7.236366491548087, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-52] DEBUG :: Experiment >> Refinement spread at run=7, level=1: rmse_mchild=2.8682818578944675, rmse_div_indices=5.236092690801669, rmse_div_steps=11.375839407367803

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=8, level=2: rmse_mchild=7.4709437154886915, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=8, level=1: rmse_mchild=3.55577256282211, rmse_div_indices=5.236092690801669, rmse_div_steps=12.086206554948864

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=9, level=2: rmse_mchild=6.9670653793401405, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=9, level=1: rmse_mchild=1.5610013474086328, rmse_div_indices=3.3166247903554, rmse_div_steps=5.903741751352837

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=10, level=2: rmse_mchild=5.085272854036447, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=10, level=1: rmse_mchild=2.009211740504673, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.2818947779192027

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=11, level=2: rmse_mchild=5.244997616777342, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=11, level=1: rmse_mchild=3.030961102787622, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=12, level=2: rmse_mchild=5.23259018078045, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=12, level=1: rmse_mchild=1.6869546869144056, rmse_div_indices=1.1055415967851334, rmse_div_steps=2.706730294818619

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=13, level=2: rmse_mchild=7.762409419761365, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=13, level=1: rmse_mchild=2.991974020808713, rmse_div_indices=5.236092690801669, rmse_div_steps=11.275280237956148

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=14, level=2: rmse_mchild=4.82078831727758, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=14, level=1: rmse_mchild=3.0950423567509757, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=15, level=2: rmse_mchild=5.818504962617113, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-53] DEBUG :: Experiment >> Refinement spread at run=15, level=1: rmse_mchild=2.361247828508089, rmse_div_indices=1.9364916731037085, rmse_div_steps=5.11737237261468

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=16, level=2: rmse_mchild=8.17649068977639, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=16, level=1: rmse_mchild=2.4604006642356917, rmse_div_indices=5.236092690801669, rmse_div_steps=10.739012472703852

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=17, level=2: rmse_mchild=7.356629663099808, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=17, level=1: rmse_mchild=2.746475953888773, rmse_div_indices=4.041451884327381, rmse_div_steps=8.772985682068436

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=18, level=2: rmse_mchild=5.252618394667557, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=18, level=1: rmse_mchild=3.388841375421488, rmse_div_indices=1.855921454276674, rmse_div_steps=5.453719423985392

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=19, level=2: rmse_mchild=5.451605268175603, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=19, level=1: rmse_mchild=3.435917178789986, rmse_div_indices=1.855921454276674, rmse_div_steps=5.453719423985392

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=20, level=2: rmse_mchild=5.369357503463518, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=20, level=1: rmse_mchild=2.9198575619057485, rmse_div_indices=1.855921454276674, rmse_div_steps=4.8498281756504875

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=21, level=2: rmse_mchild=7.33246206945525, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=21, level=1: rmse_mchild=3.482314132268574, rmse_div_indices=5.236092690801669, rmse_div_steps=12.086206554948864

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=22, level=2: rmse_mchild=5.130302135352263, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=22, level=1: rmse_mchild=2.2454614464376856, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.861310946067698

[19-01-2022_17-35-54] DEBUG :: Experiment >> Refinement spread at run=23, level=2: rmse_mchild=4.92645917470144, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=23, level=1: rmse_mchild=3.020034685915415, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=24, level=2: rmse_mchild=5.393514624064719, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=24, level=1: rmse_mchild=2.3823017378677975, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.329325069286846

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=25, level=2: rmse_mchild=4.779121258139408, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=25, level=1: rmse_mchild=3.036239450372778, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=26, level=2: rmse_mchild=5.435991169970752, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=26, level=1: rmse_mchild=2.348894148106351, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=27, level=2: rmse_mchild=5.0556898639058145, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=27, level=1: rmse_mchild=2.372307085748155, rmse_div_indices=1.3333333333333333, rmse_div_steps=4.329325069286846

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=28, level=2: rmse_mchild=7.416535579365879, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=28, level=1: rmse_mchild=2.69904871122739, rmse_div_indices=5.236092690801669, rmse_div_steps=11.234557302260635

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=29, level=2: rmse_mchild=5.025932749251624, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=29, level=1: rmse_mchild=2.309866995562751, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.861310946067698

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=30, level=2: rmse_mchild=4.968903299521937, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=30, level=1: rmse_mchild=1.9807310404356908, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.2818947779192027

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=31, level=2: rmse_mchild=6.984983894040127, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006

[19-01-2022_17-35-55] DEBUG :: Experiment >> Refinement spread at run=31, level=1: rmse_mchild=2.707265629760522, rmse_div_indices=4.041451884327381, rmse_div_steps=8.973340143632878

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=32, level=2: rmse_mchild=7.443453499552475, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=32, level=1: rmse_mchild=2.9718221910636857, rmse_div_indices=5.236092690801669, rmse_div_steps=11.42335570467608

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=33, level=2: rmse_mchild=7.428660713749147, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=33, level=1: rmse_mchild=2.9465347904535233, rmse_div_indices=5.236092690801669, rmse_div_steps=11.42335570467608

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=34, level=2: rmse_mchild=4.880573736764972, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=34, level=1: rmse_mchild=2.322133441257903, rmse_div_indices=1.1055415967851334, rmse_div_steps=3.861310946067698

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=35, level=2: rmse_mchild=5.231634543811331, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=35, level=1: rmse_mchild=2.2977598684856386, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=36, level=2: rmse_mchild=7.478301946297701, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=36, level=1: rmse_mchild=2.8474538095075252, rmse_div_indices=5.236092690801669, rmse_div_steps=11.234557302260635

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=37, level=2: rmse_mchild=5.983727934991696, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=37, level=1: rmse_mchild=3.221288667640964, rmse_div_indices=1.9364916731037085, rmse_div_steps=5.880169120772709

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=38, level=2: rmse_mchild=5.4460995216760395, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=38, level=1: rmse_mchild=3.544689602795327, rmse_div_indices=1.855921454276674, rmse_div_steps=5.453719423985392

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=39, level=2: rmse_mchild=5.056678751908212, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-56] DEBUG :: Experiment >> Refinement spread at run=39, level=1: rmse_mchild=3.0039144571900995, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=40, level=2: rmse_mchild=6.002915958099029, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=40, level=1: rmse_mchild=2.7484448980324823, rmse_div_indices=1.9364916731037085, rmse_div_steps=5.251322584729383

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=41, level=2: rmse_mchild=6.079473661428265, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=41, level=1: rmse_mchild=3.5133673306387996, rmse_div_indices=1.855921454276674, rmse_div_steps=5.587063430620578

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=42, level=2: rmse_mchild=4.792702786528703, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=42, level=1: rmse_mchild=2.954676570517258, rmse_div_indices=1.1055415967851334, rmse_div_steps=4.529992641642294

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=43, level=2: rmse_mchild=5.854058421300558, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=43, level=1: rmse_mchild=3.774335637450945, rmse_div_indices=1.855921454276674, rmse_div_steps=5.453719423985392

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=44, level=2: rmse_mchild=6.135144660071186, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=44, level=1: rmse_mchild=3.6594085124726137, rmse_div_indices=1.855921454276674, rmse_div_steps=5.519536011095297

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=45, level=2: rmse_mchild=6.472634703117424, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=45, level=1: rmse_mchild=2.5516397585266675, rmse_div_indices=3.032234233110042, rmse_div_steps=7.39509972887452

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=46, level=2: rmse_mchild=5.840376700179534, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=46, level=1: rmse_mchild=2.581071835145589, rmse_div_indices=1.855921454276674, rmse_div_steps=5.073761479962924

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=47, level=2: rmse_mchild=6.280923498976882, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=47, level=1: rmse_mchild=1.9558003371197377, rmse_div_indices=1.855921454276674, rmse_div_steps=4.108764345207017

[19-01-2022_17-35-57] DEBUG :: Experiment >> Refinement spread at run=48, level=2: rmse_mchild=6.376127351300317, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544

[19-01-2022_17-35-58] DEBUG :: Experiment >> Refinement spread at run=48, level=1: rmse_mchild=2.052665431615601, rmse_div_indices=3.032234233110042, rmse_div_steps=6.7097565778002215

[19-01-2022_17-35-58] DEBUG :: Experiment >> Refinement spread at run=49, level=2: rmse_mchild=5.6736231810017115, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503

[19-01-2022_17-35-58] DEBUG :: Experiment >> Refinement spread at run=49, level=1: rmse_mchild=2.079203896440944, rmse_div_indices=1.855921454276674, rmse_div_steps=4.645039169790594

[19-01-2022_17-35-58] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL       GT       ST       OT        TT       LT        CT       WT         RSS         VMS  LE  AC  CF  PSG
  0   3 1.139178 0.770939 0.000000  1.910118 1.910118  1.910118 1.910118  246.886719  236.597656  20  20 1.0   20
  0   2 3.596458 0.987172 0.016129  4.599759 4.685895  6.509877 3.269148  273.433594  264.703125  44  44 1.0   44
  0   1 8.006790 1.612458 0.031536  9.650783 6.485205 16.160660 2.053350  269.621094  261.949219  79  79 1.0    0
  1   3 1.139804 0.960236 0.000000  2.100039 2.100039  2.100039 2.100039  258.582031  247.230469  20  20 1.0   20
  1   2 3.535277 1.156277 0.015888  4.707442 5.852164  6.807482 3.418231  296.003906  292.593750  42  42 1.0   42
  1   1 7.379497 1.442652 0.030089  8.852237 7.766856 15.659719 1.991101  283.492188  275.976562  71  71 1.0    0
  2   3 1.136735 0.783365 0.000000  1.920100 1.920100  1.920100 1.920100  279.300781  267.804688  20  20 1.0   20
  2   2 3.552466 0.868208 0.016648  4.437321 4.386729  6.357421 3.192947  303.519531  295.589844  44  44 1.0   44
  2   1 7.262990 1.310562 0.031865  8.605416 6.148775 14.962837 1.904443  296.519531  286.507812  73  73 1.0    0
  3   3 1.136317 0.768726 0.000000  1.905043 1.905043  1.905043 1.905043  295.269531  284.121094  20  20 1.0   20
  3   2 3.551197 1.098568 0.016546  4.666311 4.493874  6.571355 3.299906  318.484375  308.046875  44  44 1.0   44
  3   1 7.746420 1.637844 0.031609  9.415872 6.341698 15.987227 2.043455  313.847656  305.703125  77  77 1.0    0
  4   3 1.136480 0.738719 0.000000  1.875198 1.875198  1.875198 1.875198  311.269531  300.054688  20  20 1.0   20
  4   2 3.556465 1.040237 0.016821  4.613523 4.647818  6.488722 3.258582  334.183594  324.527344  44  44 1.0   44
  4   1 7.788199 1.815407 0.031413  9.635019 6.514978 16.123741 2.049505  333.308594  325.757812  77  77 1.0    0
  5   3 1.138398 0.673611 0.000000  1.812009 1.812009  1.812009 1.812009  324.507812  314.417969  20  20 1.0   20
  5   2 3.618728 1.423515 0.016821  5.059064 5.527333  6.871073 3.449836  367.101562  365.121094  44  44 1.0   44
  5   1 7.352432 1.490753 0.030947  8.874131 7.555724 15.745205 2.017526  354.898438  345.851562  73  73 1.0    0
  6   3 1.144882 0.966860 0.000000  2.111742 2.111742  2.111742 2.111742  348.707031  337.675781  20  20 1.0   20
  6   2 3.530567 1.385247 0.015444  4.931258 6.090736  7.043000 3.535895  386.722656  383.097656  42  42 1.0   42
  6   1 7.057870 1.664493 0.030696  8.753060 8.016372 15.796059 2.008545  374.089844  364.796875  69  69 1.0    0
  7   3 1.149809 0.781122 0.000000  1.930931 1.930931  1.930931 1.930931  368.816406  357.910156  20  20 1.0   20
  7   2 3.524013 1.575143 0.014969  5.114125 5.921916  7.045056 3.536677  402.421875  400.117188  42  42 1.0   42
  7   1 7.043305 1.566313 0.030521  8.640139 7.823521 15.685195 1.994591  392.093750  381.562500  69  69 1.0    0
  8   3 1.150843 0.903145 0.000000  2.053989 2.053989  2.053989 2.053989  383.460938  372.503906  20  20 1.0   20
  8   2 3.557591 1.574832 0.015481  5.147905 6.248258  7.201894 3.615226  418.640625  415.503906  42  42 1.0   42
  8   1 7.257446 1.779122 0.029785  9.066353 8.152321 16.268247 2.067233  408.984375  399.945312  71  71 1.0    0
  9   3 1.144247 0.747403 0.000000  1.891651 1.891651  1.891651 1.891651  402.152344  391.304688  20  20 1.0   20
  9   2 3.617811 1.337229 0.017368  4.972408 5.197991  6.864059 3.446372  426.191406  416.503906  44  44 1.0   44
  9   1 7.534780 1.422527 0.032523  8.989830 7.107130 15.853889 2.016028  422.460938  411.996094  75  75 1.0    0
 10   3 1.133918 0.768724 0.000000  1.902641 1.902641  1.902641 1.902641  417.367188  406.433594  20  20 1.0   20
 10   2 3.561316 1.217900 0.017186  4.796402 4.495122  6.699043 3.363997  440.859375  433.605469  44  44 1.0   44
 10   1 7.647726 1.639398 0.031513  9.318637 6.245958 16.017680 2.036513  439.628906  431.367188  77  77 1.0    0
 11   3 1.138471 0.802534 0.000000  1.941005 1.941005  1.941005 1.941005  433.597656  422.898438  20  20 1.0   20
 11   2 3.539067 0.792841 0.016603  4.348511 4.318012  6.289516 3.159069  455.871094  448.542969  44  44 1.0   44
 11   1 7.276413 1.849039 0.031093  9.156545 6.314505 15.446061 1.964312  448.425781  439.746094  73  73 1.0    0
 12   3 1.139104 0.821525 0.000000  1.960629 1.960629  1.960629 1.960629  447.632812  436.921875  20  20 1.0   20
 12   2 3.512519 1.048794 0.017055  4.578369 4.332733  6.538998 3.283559  470.851562  463.535156  44  44 1.0   44
 12   1 7.432034 1.418138 0.033332  8.883504 6.079204 15.422502 1.961635  468.761719  460.347656  75  75 1.0    0
 13   3 1.127482 0.949126 0.000000  2.076607 2.076607  2.076607 2.076607  462.964844  452.128906  20  20 1.0   20
 13   2 3.504679 1.084270 0.015469  4.604418 5.724916  6.681025 3.355193  499.105469  496.070312  42  42 1.0   42
 13   1 7.220758 1.516072 0.031408  8.768238 7.889938 15.449263 1.965104  494.648438  488.367188  71  71 1.0    0
 14   3 1.143684 0.853172 0.000000  1.996856 1.996856  1.996856 1.996856  481.707031  471.480469  20  20 1.0   20
 14   2 3.520915 1.075623 0.016698  4.613237 4.626874  6.610092 3.319037  508.234375  501.531250  44  44 1.0   44
 14   1 7.240886 1.703664 0.032370  8.976919 6.374414 15.587012 1.981982  499.464844  489.902344  73  73 1.0    0
 15   3 1.144963 0.970016 0.000000  2.114979 2.114979  2.114979 2.114979  497.906250  487.496094  20  20 1.0   20
 15   2 3.356028 1.373460 0.016632  4.746121 4.954896  6.861099 3.444751  520.488281  512.664062  42  42 1.0   42
 15   1 7.021119 1.104266 0.030730  8.156115 6.674531 15.017215 1.911001  511.406250  501.019531  71  71 1.0    0
 16   3 1.147793 0.655080 0.000000  1.802873 1.802873  1.802873 1.802873  508.617188  498.710938  20  20 1.0   20
 16   2 3.505781 1.569099 0.015688  5.090568 5.951483  6.893441 3.460901  549.402344  547.589844  42  42 1.0   42
 16   1 6.989405 1.846866 0.031557  8.867828 7.845604 15.761269 2.003782  542.992188  537.449219  69  69 1.0    0
 17   3 1.133128 0.771226 0.000000  1.904354 1.904354  1.904354 1.904354  531.343750  520.945312  20  20 1.0   20
 17   2 3.658322 1.490878 0.016544  5.165744 5.516427  7.070099 3.549373  564.593750  562.781250  44  44 1.0   44
 17   1 7.295524 1.531661 0.031315  8.858499 7.737838 15.928598 2.024774  553.500000  544.546875  73  73 1.0    0
 18   3 1.125067 0.780964 0.000000  1.906032 1.906032  1.906032 1.906032  547.976562  537.730469  20  20 1.0   20
 18   2 3.579182 1.269933 0.016285  4.865399 4.621230  6.771431 3.400390  573.242188  565.089844  44  44 1.0   44
 18   1 7.908201 1.708360 0.033464  9.650025 6.710397 16.421455 2.086913  572.031250  564.781250  79  79 1.0    0
 19   3 1.125998 0.631944 0.000000  1.757942 1.757942  1.757942 1.757942  563.507812  553.484375  20  20 1.0   20
 19   2 3.581258 1.661330 0.016301  5.258889 4.870453  7.016830 3.523273  587.566406  578.859375  44  44 1.0   44
 19   1 7.903178 1.375464 0.032196  9.310839 6.617778 16.327669 2.074964  585.402344  579.632812  79  79 1.0    0
 20   3 1.127658 0.765300 0.000000  1.892959 1.892959  1.892959 1.892959  579.773438  570.601562  20  20 1.0   20
 20   2 3.536560 1.712545 0.016536  5.265642 4.941665  7.158601 3.593734  601.136719  594.527344  44  44 1.0   44
 20   1 7.721628 1.361314 0.032644  9.115585 6.687081 16.274186 2.068344  600.703125  594.621094  77  77 1.0    0
 21   3 1.124946 0.714627 0.000000  1.839573 1.839573  1.839573 1.839573  592.855469  583.761719  20  20 1.0   20
 21   2 3.525275 1.751696 0.016144  5.293115 6.175082  7.132688 3.580862  626.625000  625.082031  42  42 1.0   42
 21   1 7.205871 1.244551 0.031270  8.481693 8.076488 15.614381 1.985638  615.480469  608.031250  71  71 1.0    0
 22   3 1.140382 0.835789 0.000000  1.976171 1.976171  1.976171 1.976171  611.351562  602.636719  20  20 1.0   20
 22   2 3.516085 0.786520 0.017071  4.319675 4.330070  6.295846 3.162151  636.402344  630.691406  44  44 1.0   44
 22   1 7.028302 1.949478 0.032083  9.009863 6.493735 15.305710 1.946799  628.441406  620.023438  71  71 1.0    0
 23   3 1.141705 0.813731 0.000000  1.955436 1.955436  1.955436 1.955436  627.250000  618.246094  20  20 1.0   20
 23   2 3.520496 0.778870 0.017272  4.316638 4.301872  6.272074 3.150386  650.632812  645.730469  44  44 1.0   44
 23   1 7.199501 1.996074 0.030759  9.226334 6.023389 15.498407 1.970976  641.394531  635.121094  73  73 1.0    0
 24   3 1.142193 0.700446 0.000000  1.842639 1.842639  1.842639 1.842639  639.664062  630.933594  20  20 1.0   20
 24   2 3.573796 0.946358 0.016177  4.536330 4.380630  6.378969 3.203783  664.042969  656.625000  44  44 1.0   44
 24   1 7.242776 1.621335 0.032641  8.896752 6.097975 15.275721 1.943309  659.261719  650.707031  73  73 1.0    0
 25   3 1.139453 0.718898 0.000000  1.858351 1.858351  1.858351 1.858351  655.695312  646.660156  20  20 1.0   20
 25   2 3.542732 1.246274 0.017568  4.806574 4.681396  6.664925 3.346757  681.125000  676.234375  44  44 1.0   44
 25   1 7.200828 1.596630 0.031738  8.829196 6.427182 15.494121 1.970702  671.457031  663.757812  73  73 1.0    0
 26   3 1.136538 0.727152 0.000000  1.863690 1.863690  1.863690 1.863690  670.015625  660.937500  20  20 1.0   20
 26   2 3.590558 0.982923 0.016437  4.589917 4.602464  6.453607 3.241039  693.855469  686.687500  44  44 1.0   44
 26   1 7.466461 1.687961 0.031730  9.186152 6.343682 15.639759 1.989037  688.781250  680.269531  75  75 1.0    0
 27   3 1.127250 0.840356 0.000000  1.967606 1.967606  1.967606 1.967606  684.921875  675.875000  20  20 1.0   20
 27   2 3.562643 1.935198 0.016285  5.514126 5.027647  7.481732 3.755051  709.640625  702.292969  44  44 1.0   44
 27   1 7.278245 1.166806 0.031570  8.476621 6.780624 15.958353 2.028623  704.082031  696.738281  73  73 1.0    0
 28   3 1.128227 0.824440 0.000000  1.952667 1.952667  1.952667 1.952667  701.292969  692.269531  20  20 1.0   20
 28   2 3.500360 1.361988 0.015805  4.878153 5.876429  6.830820 3.429509  737.796875  737.535156  42  42 1.0   42
 28   1 7.004353 1.775104 0.030599  8.810056 7.791744 15.640876 1.988763  728.207031  719.664062  69  69 1.0    0
 29   3 1.138273 0.790989 0.000000  1.929263 1.929263  1.929263 1.929263  720.875000  712.015625  20  20 1.0   20
 29   2 3.515986 1.324259 0.017062  4.857308 4.801595  6.786570 3.407516  745.105469  740.132812  44  44 1.0   44
 29   1 7.019670 1.112477 0.031599  8.163746 6.545507 14.950317 1.902539  736.054688  727.574219  71  71 1.0    0
 30   3 1.142885 0.777672 0.000000  1.920558 1.920558  1.920558 1.920558  733.535156  726.230469  20  20 1.0   20
 30   2 3.526016 0.792091 0.017139  4.335246 4.281132  6.255804 3.142286  758.937500  754.089844  44  44 1.0   44
 30   1 7.646258 1.764246 0.033921  9.444425 6.013581 15.700228 1.996540  755.914062  749.828125  77  77 1.0    0
 31   3 1.143216 0.840375 0.000000  1.983591 1.983591  1.983591 1.983591  750.058594  741.457031  20  20 1.0   20
 31   2 3.589423 1.076446 0.016687  4.682556 5.461660  6.666147 3.347654  776.285156  768.593750  44  44 1.0   44
 31   1 7.308106 1.754034 0.032514  9.094655 7.921860 15.760802 2.004001  772.285156  764.675781  73  73 1.0    0
 32   3 1.147746 1.351703 0.000000  2.499449 2.499449  2.499449 2.499449  764.792969  756.273438  20  20 1.0   20
 32   2 3.518885 1.735531 0.015095  5.269512 6.236203  7.768961 3.899161  799.398438  798.878906  42  42 1.0   42
 32   1 7.214243 1.257278 0.030979  8.502500 8.130787 16.271461 2.067815  790.070312  786.441406  71  71 1.0    0
 33   3 1.148757 0.783110 0.000000  1.931867 1.931867  1.931867 1.931867  783.000000  774.695312  20  20 1.0   20
 33   2 3.524526 1.120796 0.015247  4.660569 5.644524  6.592436 3.310570  817.695312  816.917969  42  42 1.0   42
 33   1 7.194660 1.836376 0.031861  9.062898 7.535291 15.655334 1.990584  808.464844  804.304688  71  71 1.0    0
 34   3 1.134484 0.850659 0.000000  1.985143 1.985143  1.985143 1.985143  798.109375  789.511719  20  20 1.0   20
 34   2 3.536530 0.793654 0.016741  4.346925 4.358101  6.332068 3.180429  822.437500  817.371094  44  44 1.0   44
 34   1 7.034425 1.722650 0.032513  8.789588 6.110239 15.121656 1.923992  815.511719  808.687500  71  71 1.0    0
 35   3 1.130820 0.768900 0.000000  1.899720 1.899720  1.899720 1.899720  812.593750  804.242188  20  20 1.0   20
 35   2 3.546940 1.492353 0.016542  5.055835 5.206443  6.955555 3.491848  835.546875  829.351562  44  44 1.0   44
 35   1 7.491433 1.851331 0.032950  9.375714 6.968155 16.331269 2.075470  829.058594  822.164062  75  75 1.0    0
 36   3 1.130501 0.755158 0.000000  1.885659 1.885659  1.885659 1.885659  827.078125  818.585938  20  20 1.0   20
 36   2 3.491657 1.260129 0.015014  4.766801 5.702085  6.652460 3.340450  861.605469  861.832031  42  42 1.0   42
 36   1 7.020104 1.903903 0.031738  8.955745 7.602653 15.608204 1.984919  849.492188  842.613281  69  69 1.0    0
 37   3 1.144187 0.809899 0.000000  1.954085 1.954085  1.954085 1.954085  842.531250  834.253906  20  20 1.0   20
 37   2 3.364869 0.767235 0.017008  4.149113 4.496241  6.103198 3.066109  864.882812  858.816406  42  42 1.0   42
 37   1 7.500048 1.265414 0.030250  8.795712 6.217468 14.898910 1.896263  862.328125  858.070312  75  75 1.0    0
 38   3 1.141800 0.852255 0.000000  1.994055 1.994055  1.994055 1.994055  856.613281  848.257812  20  20 1.0   20
 38   2 3.565500 0.921850 0.016018  4.503369 4.701459  6.497424 3.263048  879.257812  873.289062  44  44 1.0   44
 38   1 7.946176 2.121997 0.032939 10.101112 6.450388 16.598536 2.108799  877.042969  872.250000  79  79 1.0    0
 39   3 1.144348 0.842705 0.000000  1.987053 1.987053  1.987053 1.987053  871.261719  862.953125  20  20 1.0   20
 39   2 3.534123 0.810852 0.017257  4.362232 4.359926  6.349285 3.188947  898.171875  894.097656  44  44 1.0   44
 39   1 7.227531 1.862626 0.032269  9.122425 6.105664 15.471709 1.967868  887.957031  881.812500  73  73 1.0    0
 40   3 1.141606 0.750649 0.000000  1.892255 1.892255  1.892255 1.892255  887.082031  878.789062  20  20 1.0   20
 40   2 3.379134 0.782190 0.016687  4.178011 4.458282  6.070266 3.049362  911.644531  905.925781  42  42 1.0   42
 40   1 7.271320 1.912911 0.029893  9.214125 6.177400 15.284391 1.944182  906.156250  901.867188  73  73 1.0    0
 41   3 1.140877 0.785273 0.000000  1.926150 1.926150  1.926150 1.926150  902.152344  893.886719  20  20 1.0   20
 41   2 3.580198 0.833862 0.017041  4.431101 4.617200  6.357250 3.193128  926.484375  920.601562  44  44 1.0   44
 41   1 7.921794 2.155835 0.032749 10.110377 6.360598 16.467628 2.092218  925.625000  921.050781  79  79 1.0    0
 42   3 1.136591 0.721680 0.000000  1.858271 1.858271  1.858271 1.858271  917.707031  909.578125  20  20 1.0   20
 42   2 3.547555 0.799648 0.017094  4.364297 4.237366  6.222568 3.125512  943.390625  939.312500  44  44 1.0   44
 42   1 7.241173 1.906972 0.032247  9.180391 5.986222 15.402960 1.959059  935.382812  927.812500  73  73 1.0    0
 43   3 1.132304 0.712808 0.000000  1.845113 1.845113  1.845113 1.845113  934.011719  925.683594  20  20 1.0   20
 43   2 3.583016 0.896820 0.016049  4.495884 4.572966  6.340997 3.185033  959.511719  953.253906  44  44 1.0   44
 43   1 7.947601 2.187611 0.032427 10.167639 6.329612 16.508636 2.097419  958.152344  953.449219  79  79 1.0    0
 44   3 1.137348 0.687376 0.000000  1.824724 1.824724  1.824724 1.824724  947.324219  940.296875  20  20 1.0   20
 44   2 3.574312 0.832957 0.016503  4.423772 4.525692  6.248496 3.138942  973.914062  967.984375  44  44 1.0   44
 44   1 7.943251 2.223731 0.032256 10.199238 6.273610 16.447735 2.089885  973.710938  968.890625  79  79 1.0    0
 45   3 1.130665 0.877817 0.000000  2.008482 2.008482  2.008482 2.008482  966.519531  958.273438  20  20 1.0   20
 45   2 3.394858 0.798697 0.016998  4.210553 4.838427  6.219035 3.123834  990.996094  984.589844  42  42 1.0   42
 45   1 7.075364 1.952645 0.030375  9.058385 6.584196 15.277419 1.943485  983.906250  977.601562  71  71 1.0    0
 46   3 1.133044 0.706692 0.000000  1.839737 1.839737  1.839737 1.839737  979.906250  971.699219  20  20 1.0   20
 46   2 3.553236 0.896613 0.016463  4.466312 4.554548  6.306049 3.167512 1005.246094  998.937500  44  44 1.0   44
 46   1 7.769694 2.195193 0.032227  9.997114 6.300622 16.303163 2.071785 1003.320312  998.914062  77  77 1.0    0
 47   3 1.137782 0.720470 0.000000  1.858253 1.858253  1.858253 1.858253  996.957031  989.375000  20  20 1.0   20
 47   2 3.542934 0.827125 0.016879  4.386938 4.532963  6.245191 3.137492 1020.281250 1013.695312  44  44 1.0   44
 47   1 7.283821 2.032433 0.032098  9.348352 6.288720 15.593543 1.983100 1017.445312 1010.183594  73  73 1.0    0
 48   3 1.144835 0.694873 0.000000  1.839708 1.839708  1.839708 1.839708 1012.218750 1004.082031  20  20 1.0   20
 48   2 3.384679 0.791123 0.016760  4.192561 4.671053  6.032270 3.030666 1037.187500 1031.070312  42  42 1.0   42
 48   1 6.861498 1.989983 0.030117  8.881599 6.408779 14.913868 1.898189 1031.261719 1025.035156  69  69 1.0    0
 49   3 1.145538 0.742176 0.000000  1.887714 1.887714  1.887714 1.887714 1026.988281 1018.882812  20  20 1.0   20
 49   2 3.583907 0.952483 0.016416  4.552806 4.590993  6.440520 3.234590 1052.117188 1046.671875  44  44 1.0   44
 49   1 7.528738 1.228446 0.030687  8.787870 6.342374 15.228390 1.937578 1041.128906 1034.460938  75  75 1.0    0

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL       GT       ST       OT       TT       LT        CT       WT        RSS        VMS    LE    AC  CF   PSG
  3 1.138245 0.797248 0.000000 1.935494 1.935494  1.935494 1.935494 644.114219 634.775938 20.00 20.00 1.0 20.00
  2 3.533329 1.140793 0.016451 4.690573 4.952619  6.626066 3.327394 671.565469 666.137891 43.36 43.36 1.0 43.36
  1 7.383197 1.681448 0.031672 9.096317 6.795567 15.722383 1.999693 665.273125 658.076563 73.64 73.64 1.0  0.00

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       GT       ST       OT       TT       LT       CT       WT        RSS        VMS       LE       AC  CF      PSG
  3 0.006825 0.111592 0.000000 0.113488 0.113488 0.113488 0.113488 231.220683 232.344036 0.000000 0.000000 0.0 0.000000
  2 0.062601 0.324539 0.000644 0.342217 0.620086 0.372753 0.186373 229.689682 230.123748 0.942424 0.942424 0.0 0.942424
  1 0.314424 0.298271 0.000968 0.474006 0.705668 0.463586 0.058189 230.282275 231.461096 3.167179 3.167179 0.0 0.000000

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN       GT       ST       OT       TT        YT       WT       ET         RSS         VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I  TOT_CHOICES  PRE_CHOICES
  0   3   1   1 1.139178 0.770939 0.000000 1.910118  1.910118 1.910118 0.000000  246.886719  236.597656  20  20 1.0   20        1     20     0         0        1       1            0            0
  0   2   1   1 2.155947 0.611398 0.008432 2.775777  4.685895 4.685895 1.852401  273.433594  264.703125  26  26 1.0   26        1     26    10        10        1      10            0            3
  0   2   2   2 1.465184 0.379520 0.007697 1.852401  6.538296 1.852401 0.000000  269.722656  259.453125  18  18 1.0   18       27     44    10        10       11      20            0            3
  0   1   1   1 1.479488 0.315118 0.004704 1.799310  6.485205 6.485205 2.764052  262.292969  252.437500  14  14 1.0    0        1     14     6         6        1       6            0            0
  0   1   2   2 0.794175 0.113651 0.003824 0.911651  9.249257 2.764052 2.267173  251.355469  240.675781   8   8 1.0    0       15     22     6         6        7      12            0            0
  0   1   3   3 1.801527 0.460195 0.005451 2.267173 11.516430 2.267173 1.416470  269.621094  261.949219  17  17 1.0    0       23     39     7         7       13      19            0            0
  0   1   4   4 1.142162 0.269059 0.005250 1.416470 12.932900 1.416470 0.589301  264.738281  255.214844  11  11 1.0    0       40     50     7         7       20      26            0            3
  0   1   5   5 0.517118 0.070054 0.002129 0.589301 13.522202 0.589301 0.812518  259.945312  248.609375   5   5 1.0    0       51     55     4         4       27      30            0            1
  0   1   6   6 0.710563 0.099761 0.002194 0.812518 14.334719 0.812518 1.258556  261.230469  249.820312   7   7 1.0    0       56     62     4         4       31      34            0            0
  0   1   7   7 1.037549 0.217192 0.003815 1.258556 15.593276 1.258556 0.833528  264.566406  253.859375  10  10 1.0    0       63     72     5         5       35      39            0            0
  0   1   8   8 0.727863 0.101495 0.004169 0.833528 16.426803 0.833528 0.000000  262.417969  251.289062   7   7 1.0    0       73     79     5         5       40      44            0            2
  1   3   1   1 1.139804 0.960236 0.000000 2.100039  2.100039 2.100039 0.000000  258.582031  247.230469  20  20 1.0   20        1     20     0         0        1       1            0            0
  1   2   1   1 2.737159 1.006319 0.008646 3.752124  5.852164 5.852164 0.984299  296.003906  292.593750  31  31 1.0   31        1     31    10        10        1      10            0            2
  1   2   2   2 0.822886 0.154171 0.007242 0.984299  6.836463 0.984299 0.000000  272.546875  261.140625  11  11 1.0   11       32     42    10        10       11      20            0            4
  1   1   1   1 1.595286 0.313801 0.005606 1.914693  7.766856 7.766856 2.587371  280.589844  272.914062  15  15 1.0    0        1     15     7         7        1       7            0            0
  1   1   2   2 1.330394 0.266981 0.005697 1.603072 10.354228 2.587371 1.658890  277.144531  267.000000  13  13 1.0    0       16     28     8         8        8      15            0            0
  1   1   3   3 1.346951 0.305726 0.006213 1.658890 12.013118 1.658890 2.110681  278.390625  267.718750  13  13 1.0    0       29     41     8         8       16      23            0            1
  1   1   4   4 1.752154 0.352079 0.006448 2.110681 14.123799 2.110681 0.353124  283.492188  275.976562  16  16 1.0    0       42     57     8         8       24      31            0            1
  1   1   5   5 0.317628 0.034575 0.000922 0.353124 14.476923 0.353124 0.424901  271.453125  260.101562   3   3 1.0    0       58     60     2         2       32      33            0            0
  1   1   6   6 0.320965 0.102810 0.001126 0.424901 14.901824 0.424901 0.568811  271.515625  260.101562   3   3 1.0    0       61     63     3         3       34      36            0            1
  1   1   7   7 0.512178 0.054912 0.001721 0.568811 15.470635 0.568811 0.458174  277.808594  266.398438   4   4 1.0    0       64     67     3         3       37      39            0            2
  1   1   8   8 0.409225 0.046592 0.002356 0.458174 15.928809 0.458174 0.000000  277.808594  266.398438   4   4 1.0    0       68     71     3         3       40      42            0            1
  2   3   1   1 1.136735 0.783365 0.000000 1.920100  1.920100 1.920100 0.000000  279.300781  267.804688  20  20 1.0   20        1     20     0         0        1       1            0            0
  2   2   1   1 1.946884 0.511416 0.008329 2.466629  4.386729 4.386729 1.999164  301.242188  292.832031  24  24 1.0   24        1     24    10        10        1      10            0            3
  2   2   2   2 1.630051 0.360794 0.008319 1.999164  6.385893 1.999164 0.000000  303.519531  295.589844  20  20 1.0   20       25     44    10        10       11      20            0            3
  2   1   1   1 1.485225 0.272314 0.004506 1.762045  6.148775 6.148775 3.159396  296.519531  285.265625  14  14 1.0    0        1     14     6         6        1       6            0            0
  2   1   2   2 1.008168 0.147959 0.004106 1.160232  9.308171 3.159396 1.318805  285.886719  274.386719  10  10 1.0    0       15     24     6         6        7      12            0            0
  2   1   3   3 1.119093 0.195131 0.004581 1.318805 10.626976 1.318805 0.892798  293.601562  284.710938  11  11 1.0    0       25     35     6         6       13      18            0            1
  2   1   4   4 0.704851 0.183594 0.004353 0.892798 11.519774 0.892798 0.943645  287.976562  276.640625   7   7 1.0    0       36     42     6         6       19      24            0            2
  2   1   5   5 0.819593 0.120989 0.003062 0.943645 12.463419 0.943645 0.941248  295.082031  284.281250   8   8 1.0    0       43     50     5         5       25      29            0            0
  2   1   6   6 0.817499 0.120147 0.003602 0.941248 13.404667 0.941248 1.135367  292.117188  280.636719   8   8 1.0    0       51     58     5         5       30      34            0            0
  2   1   7   7 0.913479 0.218269 0.003619 1.135367 14.540034 1.135367 0.695512  296.507812  286.507812   9   9 1.0    0       59     67     5         5       35      39            0            1
  2   1   8   8 0.603605 0.087870 0.004036 0.695512 15.235546 0.695512 0.000000  294.167969  283.210938   6   6 1.0    0       68     73     5         5       40      44            0            2
  3   3   1   1 1.136317 0.768726 0.000000 1.905043  1.905043 1.905043 0.000000  295.269531  284.121094  20  20 1.0   20        1     20     0         0        1       1            0            0
  3   2   1   1 2.027273 0.552969 0.008589 2.588831  4.493874 4.493874 2.105937  315.886719  307.136719  25  25 1.0   25        1     25    10        10        1      10            0            2
  3   2   2   2 1.548387 0.549593 0.007957 2.105937  6.599812 2.105937 0.000000  318.484375  308.046875  19  19 1.0   19       26     44    10        10       11      20            0            4
  3   1   1   1 1.484620 0.358562 0.004642 1.847824  6.341698 6.341698 3.031288  310.535156  299.660156  14  14 1.0    0        1     14     6         6        1       6            0            0
  3   1   2   2 0.804659 0.116374 0.004319 0.925351  9.372987 3.031288 2.150108  301.656250  290.292969   8   8 1.0    0       15     22     6         6        7      12            0            0
  3   1   3   3 1.665474 0.480070 0.004564 2.150108 11.523095 2.150108 1.306331  311.292969  305.703125  16  16 1.0    0       23     38     6         6       13      18            0            0
  3   1   4   4 1.030129 0.270900 0.005302 1.306331 12.829426 1.306331 0.465281  304.746094  294.597656  10  10 1.0    0       39     48     7         7       19      25            0            2
  3   1   5   5 0.411661 0.051676 0.001943 0.465281 13.294707 0.465281 0.944141  307.347656  296.175781   4   4 1.0    0       49     52     4         4       26      29            0            2
  3   1   6   6 0.815591 0.125487 0.003063 0.944141 14.238847 0.944141 1.294537  308.949219  297.753906   8   8 1.0    0       53     60     5         5       30      34            0            0
  3   1   7   7 1.031694 0.259065 0.003778 1.294537 15.533385 1.294537 0.814256  313.847656  302.964844  10  10 1.0    0       61     70     5         5       35      39            0            0
  3   1   8   8 0.711274 0.098985 0.003997 0.814256 16.347641 0.814256 0.000000  310.414062  299.109375   7   7 1.0    0       71     77     5         5       40      44            0            2
  4   3   1   1 1.136480 0.738719 0.000000 1.875198  1.875198 1.875198 0.000000  311.269531  300.054688  20  20 1.0   20        1     20     0         0        1       1            0            0
  4   2   1   1 2.136824 0.627376 0.008419 2.772619  4.647818 4.647818 1.869346  334.183594  324.527344  26  26 1.0   26        1     26    10        10        1      10            0            3
  4   2   2   2 1.444048 0.416896 0.008402 1.869346  6.517164 1.869346 0.000000  334.070312  323.914062  18  18 1.0   18       27     44    10        10       11      20            0            3
  4   1   1   1 1.485805 0.376600 0.004754 1.867160  6.514978 6.514978 2.556886  326.898438  315.886719  14  14 1.0    0        1     14     6         6        1       6            0            0
  4   1   2   2 0.603077 0.080780 0.003682 0.687539  9.071863 2.556886 2.323564  315.488281  304.167969   6   6 1.0    0       15     20     6         6        7      12            0            0
  4   1   3   3 1.808560 0.509658 0.005346 2.323564 11.395427 2.323564 1.452825  333.308594  325.757812  17  17 1.0    0       21     37     7         7       13      19            0            0
  4   1   4   4 1.128228 0.319240 0.005356 1.452825 12.848252 1.452825 0.585512  329.398438  319.988281  11  11 1.0    0       38     48     7         7       20      26            0            3
  4   1   5   5 0.510701 0.072795 0.002017 0.585512 13.433764 0.585512 0.939296  308.332031  299.015625   5   5 1.0    0       49     53     4         4       27      30            0            0
  4   1   6   6 0.815805 0.120958 0.002533 0.939296 14.373060 0.939296 1.320380  316.886719  306.808594   8   8 1.0    0       54     61     4         4       31      34            0            0
  4   1   7   7 1.035005 0.281702 0.003674 1.320380 15.693441 1.320380 0.702603  327.070312  317.511719  10  10 1.0    0       62     71     5         5       35      39            0            1
  4   1   8   8 0.609029 0.089524 0.004050 0.702603 16.396044 0.702603 0.000000  321.484375  311.742188   6   6 1.0    0       72     77     5         5       40      44            0            2
  5   3   1   1 1.138398 0.673611 0.000000 1.812009  1.812009 1.812009 0.000000  324.507812  314.417969  20  20 1.0   20        1     20     0         0        1       1            0            0
  5   2   1   1 2.600736 1.105722 0.008866 3.715324  5.527333 5.527333 1.372339  367.101562  365.121094  30  30 1.0   30        1     30    10        10        1      10            0            2
  5   2   2   2 1.042387 0.321997 0.007955 1.372339  6.899672 1.372339 0.000000  352.906250  342.527344  14  14 1.0   14       31     44    10        10       11      20            0            4
  5   1   1   1 1.597102 0.425581 0.005709 2.028392  7.555724 7.555724 2.676599  352.792969  345.851562  15  15 1.0    0        1     15     7         7        1       7            0            0
  5   1   2   2 1.124908 0.174608 0.004744 1.304259 10.232323 2.676599 1.747536  348.429688  339.535156  11  11 1.0    0       16     26     7         7        8      14            0            0
  5   1   3   3 1.347694 0.393580 0.006262 1.747536 11.979859 1.747536 1.740058  354.898438  344.957031  13  13 1.0    0       27     39     8         8       15      22            0            1
  5   1   4   4 1.357210 0.377161 0.005687 1.740058 13.719917 1.740058 0.674255  354.742188  344.984375  13  13 1.0    0       40     52     8         8       23      30            0            1
  5   1   5   5 0.601619 0.070709 0.001927 0.674255 14.394172 0.674255 0.585862  347.015625  336.269531   6   6 1.0    0       53     58     3         3       31      33            0            0
  5   1   6   6 0.514057 0.069970 0.001835 0.585862 14.980035 0.585862 0.580108  347.015625  336.269531   5   5 1.0    0       59     63     3         3       34      36            0            1
  5   1   7   7 0.508970 0.069073 0.002066 0.580108 15.560143 0.580108 0.580067  347.015625  336.269531   5   5 1.0    0       64     68     4         4       37      40            0            1
  5   1   8   8 0.509276 0.068073 0.002717 0.580067 16.140210 0.580067 0.000000  347.214844  336.269531   5   5 1.0    0       69     73     4         4       41      44            0            2
  6   3   1   1 1.144882 0.966860 0.000000 2.111742  2.111742 2.111742 0.000000  348.707031  337.675781  20  20 1.0   20        1     20     0         0        1       1            0            0
  6   2   1   1 2.732810 1.237468 0.008715 3.978994  6.090736 6.090736 0.981055  386.722656  383.097656  31  31 1.0   31        1     31    10        10        1      10            0            2
  6   2   2   2 0.822707 0.151620 0.006728 0.981055  7.071791 0.981055 0.000000  368.304688  357.296875  11  11 1.0   11       32     42    10        10       11      20            0            4
  6   1   1   1 1.608863 0.310971 0.005802 1.925636  8.016372 8.016372 2.714280  372.128906  364.796875  15  15 1.0    0        1     15     7         7        1       7            0            0
  6   1   2   2 1.343596 0.384112 0.005517 1.733225 10.730652 2.714280 1.786513  370.613281  360.468750  13  13 1.0    0       16     28     8         8        8      15            0            0
  6   1   3   3 1.494102 0.286033 0.006378 1.786513 12.517165 1.786513 1.750694  374.089844  363.230469  14  14 1.0    0       29     42     8         8       16      23            0            1
  6   1   4   4 1.354043 0.390468 0.006184 1.750694 14.267859 1.750694 0.262860  373.683594  364.273438  13  13 1.0    0       43     55     8         8       24      31            0            1
  6   1   5   5 0.233734 0.028242 0.000884 0.262860 14.530720 0.262860 0.614651  367.523438  356.511719   2   2 1.0    0       56     57     2         2       32      33            0            0
  6   1   6   6 0.409174 0.203784 0.001693 0.614651 15.145371 0.614651 0.462295  367.585938  356.511719   4   4 1.0    0       58     61     3         3       34      36            0            2
  6   1   7   7 0.410861 0.049656 0.001779 0.462295 15.607666 0.462295 0.460690  367.585938  356.511719   4   4 1.0    0       62     65     3         3       37      39            0            1
  6   1   8   8 0.409756 0.048475 0.002459 0.460690 16.068357 0.460690 0.000000  367.585938  356.511719   4   4 1.0    0       66     69     3         3       40      42            0            1
  7   3   1   1 1.149809 0.781122 0.000000 1.930931  1.930931 1.930931 0.000000  368.816406  357.910156  20  20 1.0   20        1     20     0         0        1       1            0            0
  7   2   1   1 2.725928 1.256326 0.008731 3.990985  5.921916 5.921916 1.151438  402.421875  400.117188  31  31 1.0   31        1     31    10        10        1      10            0            2
  7   2   2   2 0.822563 0.322637 0.006238 1.151438  7.073354 1.151438 0.000000  382.378906  371.476562  11  11 1.0   11       32     42    10        10       11      20            0            4
  7   1   1   1 1.600491 0.295676 0.005438 1.901605  7.823521 7.823521 2.895984  388.125000  380.957031  15  15 1.0    0        1     15     7         7        1       7            0            0
  7   1   2   2 1.346242 0.391896 0.006407 1.744546 10.719505 2.895984 2.001727  380.015625  370.808594  13  13 1.0    0       16     28     8         8        8      15            0            0
  7   1   3   3 1.508479 0.486940 0.006309 2.001727 12.721232 2.001727 1.601019  392.093750  381.562500  14  14 1.0    0       29     42     8         8       16      23            0            1
  7   1   4   4 1.349924 0.244836 0.006258 1.601019 14.322251 1.601019 0.349215  388.812500  379.703125  13  13 1.0    0       43     55     8         8       24      31            0            1
  7   1   5   5 0.314021 0.034311 0.000883 0.349215 14.671466 0.349215 0.358390  381.558594  370.734375   3   3 1.0    0       56     58     2         2       32      33            0            0
  7   1   6   6 0.312642 0.044614 0.001134 0.358390 15.029856 0.358390 0.469530  381.562500  370.734375   3   3 1.0    0       59     61     3         3       34      36            0            1
  7   1   7   7 0.410279 0.057556 0.001695 0.469530 15.499386 0.469530 0.457342  381.562500  370.734375   4   4 1.0    0       62     65     3         3       37      39            0            2
  7   1   8   8 0.408306 0.046639 0.002396 0.457342 15.956727 0.457342 0.000000  381.562500  370.734375   4   4 1.0    0       66     69     3         3       40      42            0            1
  8   3   1   1 1.150843 0.903145 0.000000 2.053989  2.053989 2.053989 0.000000  383.460938  372.503906  20  20 1.0   20        1     20     0         0        1       1            0            0
  8   2   1   1 2.759877 1.425597 0.008796 4.194270  6.248258 6.248258 0.982193  418.640625  415.503906  31  31 1.0   31        1     31    10        10        1      10            0            2
  8   2   2   2 0.822058 0.153449 0.006686 0.982193  7.230452 0.982193 0.000000  401.515625  390.687500  11  11 1.0   11       32     42    10        10       11      20            0            4
  8   1   1   1 1.595664 0.302998 0.005401 1.904063  8.152321 8.152321 2.998606  404.562500  397.640625  15  15 1.0    0        1     15     7         7        1       7            0            0
  8   1   2   2 1.563984 0.446481 0.005947 2.016413 11.150927 2.998606 1.785511  405.433594  394.812500  15  15 1.0    0       16     30     8         8        8      15            0            0
  8   1   3   3 1.496574 0.282693 0.006243 1.785511 12.936438 1.785511 1.776131  407.453125  396.988281  14  14 1.0    0       31     44     8         8       16      23            0            1
  8   1   4   4 1.350262 0.420165 0.005703 1.776131 14.712569 1.776131 0.353586  408.984375  399.945312  13  13 1.0    0       45     57     8         8       24      31            0            1
  8   1   5   5 0.318984 0.033675 0.000927 0.353586 15.066155 0.353586 0.544047  400.671875  389.902344   3   3 1.0    0       58     60     2         2       32      33            0            0
  8   1   6   6 0.318244 0.224158 0.001645 0.544047 15.610202 0.544047 0.468927  400.734375  389.902344   3   3 1.0    0       61     63     3         3       34      36            0            1
  8   1   7   7 0.410491 0.056747 0.001689 0.468927 16.079129 0.468927 0.458738  400.734375  389.902344   4   4 1.0    0       64     67     3         3       37      39            0            2
  8   1   8   8 0.410063 0.046446 0.002230 0.458738 16.537867 0.458738 0.000000  400.734375  389.902344   4   4 1.0    0       68     71     3         3       40      42            0            1
  9   3   1   1 1.144247 0.747403 0.000000 1.891651  1.891651 1.891651 0.000000  402.152344  391.304688  20  20 1.0   20        1     20     0         0        1       1            0            0
  9   2   1   1 2.394053 0.903766 0.008521 3.306340  5.197991 5.197991 1.694753  426.191406  416.503906  28  28 1.0   28        1     28    10        10        1      10            0            2
  9   2   2   2 1.248249 0.437657 0.008847 1.694753  6.892744 1.694753 0.000000  423.390625  412.585938  16  16 1.0   16       29     44    10        10       11      20            0            4
  9   1   1   1 1.600526 0.302968 0.005645 1.909139  7.107130 7.107130 2.869652  419.000000  411.753906  15  15 1.0    0        1     15     7         7        1       7            0            0
  9   1   2   2 1.008918 0.161183 0.004797 1.174899  9.976783 2.869652 1.532110  410.453125  399.703125  10  10 1.0    0       16     25     7         7        8      14            0            0
  9   1   3   3 1.136497 0.390273 0.005340 1.532110 11.508892 1.532110 1.484912  417.363281  408.824219  11  11 1.0    0       26     36     7         7       15      21            0            2
  9   1   4   4 1.260615 0.218559 0.005738 1.484912 12.993805 1.484912 0.570508  420.222656  411.554688  12  12 1.0    0       37     48     7         7       22      28            0            0
  9   1   5   5 0.503273 0.065227 0.002007 0.570508 13.564313 0.570508 0.809706  414.519531  403.574219   5   5 1.0    0       49     53     4         4       29      32            0            0
  9   1   6   6 0.711699 0.094531 0.003476 0.809706 14.374019 0.809706 1.175857  415.804688  404.863281   7   7 1.0    0       54     60     4         4       33      36            0            0
  9   1   7   7 1.015803 0.157214 0.002840 1.175857 15.549876 1.175857 0.578346  422.460938  411.996094  10  10 1.0    0       61     70     4         4       37      40            0            2
  9   1   8   8 0.506762 0.068904 0.002680 0.578346 16.128222 0.578346 0.000000  414.773438  404.074219   5   5 1.0    0       71     75     4         4       41      44            0            2
 10   3   1   1 1.133918 0.768724 0.000000 1.902641  1.902641 1.902641 0.000000  417.367188  406.433594  20  20 1.0   20        1     20     0         0        1       1            0            0
 10   2   1   1 1.946236 0.637876 0.008368 2.592480  4.495122 4.495122 2.232872  437.378906  428.925781  24  24 1.0   24        1     24    10        10        1      10            0            3
 10   2   2   2 1.640108 0.583946 0.008818 2.232872  6.727994 2.232872 0.000000  440.859375  433.605469  20  20 1.0   20       25     44    10        10       11      20            0            3
 10   1   1   1 1.478831 0.267479 0.004527 1.750837  6.245958 6.245958 3.600849  431.597656  421.746094  14  14 1.0    0        1     14     6         6        1       6            0            0
 10   1   2   2 1.002221 0.361591 0.004164 1.367977  9.846808 3.600849 1.310540  423.238281  412.324219  10  10 1.0    0       15     24     6         6        7      12            0            0
 10   1   3   3 1.116817 0.189205 0.004517 1.310540 11.157347 1.310540 0.808619  430.617188  421.988281  11  11 1.0    0       25     35     6         6       13      18            0            0
 10   1   4   4 0.699753 0.105086 0.003780 0.808619 11.965966 0.808619 0.939648  425.152344  414.230469   7   7 1.0    0       36     42     6         6       19      24            0            3
 10   1   5   5 0.815030 0.120817 0.003801 0.939648 12.905614 0.939648 0.950905  430.671875  420.011719   8   8 1.0    0       43     50     5         5       25      29            0            0
 10   1   6   6 0.823764 0.124069 0.003072 0.950905 13.856519 0.950905 0.913318  430.613281  419.949219   8   8 1.0    0       51     58     5         5       30      34            0            0
 10   1   7   7 0.800587 0.109143 0.003588 0.913318 14.769837 0.913318 1.522268  430.976562  420.441406   8   8 1.0    0       59     66     5         5       35      39            0            0
 10   1   8   8 1.119861 0.398342 0.004064 1.522268 16.292105 1.522268 0.000000  439.628906  431.367188  11  11 1.0    0       67     77     5         5       40      44            0            3
 11   3   1   1 1.138471 0.802534 0.000000 1.941005  1.941005 1.941005 0.000000  433.597656  422.898438  20  20 1.0   20        1     20     0         0        1       1            0            0
 11   2   1   1 1.938050 0.430631 0.008326 2.377007  4.318012 4.318012 2.000127  452.828125  444.914062  24  24 1.0   24        1     24    10        10        1      10            0            3
 11   2   2   2 1.625513 0.366337 0.008277 2.000127  6.318139 2.000127 0.000000  455.871094  448.542969  20  20 1.0   20       25     44    10        10       11      20            0            3
 11   1   1   1 1.488940 0.502689 0.004864 1.996493  6.314505 6.314505 3.159796  447.957031  437.300781  14  14 1.0    0        1     14     6         6        1       6            0            0
 11   1   2   2 1.008083 0.147660 0.003927 1.159670  9.474302 3.159796 1.305872  439.800781  428.937500  10  10 1.0    0       15     24     6         6        7      12            0            0
 11   1   3   3 1.116955 0.184322 0.004595 1.305872 10.780174 1.305872 1.057803  447.894531  439.746094  11  11 1.0    0       25     35     6         6       13      18            0            0
 11   1   4   4 0.710490 0.343629 0.003685 1.057803 11.837977 1.057803 0.947584  442.882812  432.179688   7   7 1.0    0       36     42     6         6       19      24            0            3
 11   1   5   5 0.819107 0.125311 0.003167 0.947584 12.785561 0.947584 0.951423  446.746094  436.843750   8   8 1.0    0       43     50     5         5       25      29            0            0
 11   1   6   6 0.823414 0.124434 0.003575 0.951423 13.736984 0.951423 1.286498  445.402344  435.015625   8   8 1.0    0       51     58     5         5       30      34            0            0
 11   1   7   7 0.913191 0.369720 0.003587 1.286498 15.023481 1.286498 0.691011  448.425781  439.324219   9   9 1.0    0       59     67     5         5       35      39            0            1
 11   1   8   8 0.601349 0.085968 0.003694 0.691011 15.714492 0.691011 0.000000  446.675781  436.023438   6   6 1.0    0       68     73     5         5       40      44            0            2
 12   3   1   1 1.139104 0.821525 0.000000 1.960629  1.960629 1.960629 0.000000  447.632812  436.921875  20  20 1.0   20        1     20     0         0        1       1            0            0
 12   2   1   1 1.927203 0.436442 0.008459 2.372104  4.332733 4.332733 2.234385  468.292969  460.484375  24  24 1.0   24        1     24    10        10        1      10            0            3
 12   2   2   2 1.609718 0.616070 0.008597 2.234385  6.567118 2.234385 0.000000  470.851562  463.535156  20  20 1.0   20       25     44    10        10       11      20            0            3
 12   1   1   1 1.474212 0.266600 0.005660 1.746471  6.079204 6.079204 3.153157  461.414062  450.835938  14  14 1.0    0        1     14     6         6        1       6            0            0
 12   1   2   2 0.800803 0.114038 0.003931 0.918772  9.232361 3.153157 1.297837  452.847656  442.015625   8   8 1.0    0       15     22     6         6        7      12            0            0
 12   1   3   3 1.115570 0.177838 0.004428 1.297837 10.530198 1.297837 0.823913  456.546875  445.882812  11  11 1.0    0       23     33     6         6       13      18            0            0
 12   1   4   4 0.703863 0.115111 0.004939 0.823913 11.354111 0.823913 0.927566  455.882812  445.089844   7   7 1.0    0       34     40     6         6       19      24            0            3
 12   1   5   5 0.807627 0.116852 0.003087 0.927566 12.281677 0.927566 0.937663  461.261719  450.453125   8   8 1.0    0       41     48     5         5       25      29            0            0
 12   1   6   6 0.813155 0.121527 0.002981 0.937663 13.219339 0.937663 0.918733  461.289062  450.476562   8   8 1.0    0       49     56     5         5       30      34            0            0
 12   1   7   7 0.801170 0.113717 0.003846 0.918733 14.138072 0.918733 1.555011  461.398438  450.589844   8   8 1.0    0       57     64     5         5       35      39            0            0
 12   1   8   8 1.121424 0.429127 0.004460 1.555011 15.693083 1.555011 0.000000  468.761719  460.347656  11  11 1.0    0       65     75     5         5       40      44            0            3
 13   3   1   1 1.127482 0.949126 0.000000 2.076607  2.076607 2.076607 0.000000  462.964844  452.128906  20  20 1.0   20        1     20     0         0        1       1            0            0
 13   2   1   1 2.704996 0.934510 0.008803 3.648309  5.724916 5.724916 0.985469  499.105469  496.070312  31  31 1.0   31        1     31    10        10        1      10            0            2
 13   2   2   2 0.825058 0.153745 0.006666 0.985469  6.710385 0.985469 0.000000  481.722656  471.054688  11  11 1.0   11       32     42    10        10       11      20            0            4
 13   1   1   1 1.597936 0.561272 0.005813 2.165021  7.889938 7.889938 2.534927  485.601562  479.398438  15  15 1.0    0        1     15     7         7        1       7            0            0
 13   1   2   2 1.328935 0.214515 0.006007 1.549458 10.424864 2.534927 1.577388  484.246094  474.925781  13  13 1.0    0       16     28     8         8        8      15            0            0
 13   1   3   3 1.332789 0.238123 0.006476 1.577388 12.002252 1.577388 2.058221  488.226562  478.496094  13  13 1.0    0       29     41     8         8       16      23            0            1
 13   1   4   4 1.699610 0.352055 0.006556 2.058221 14.060474 2.058221 0.259712  494.648438  488.367188  16  16 1.0    0       42     57     8         8       24      31            0            1
 13   1   5   5 0.232063 0.026825 0.000824 0.259712 14.320186 0.259712 0.467842  479.703125  469.277344   2   2 1.0    0       58     59     2         2       32      33            0            0
 13   1   6   6 0.410634 0.055499 0.001709 0.467842 14.788028 0.467842 0.473004  479.703125  469.277344   4   4 1.0    0       60     63     3         3       34      36            0            1
 13   1   7   7 0.415850 0.055497 0.001657 0.473004 15.261032 0.473004 0.459801  479.703125  469.277344   4   4 1.0    0       64     67     3         3       37      39            0            2
 13   1   8   8 0.409905 0.047531 0.002365 0.459801 15.720833 0.459801 0.000000  479.703125  469.277344   4   4 1.0    0       68     71     3         3       40      42            0            1
 14   3   1   1 1.143684 0.853172 0.000000 1.996856  1.996856 1.996856 0.000000  481.707031  471.480469  20  20 1.0   20        1     20     0         0        1       1            0            0
 14   2   1   1 1.926499 0.695381 0.008139 2.630018  4.626874 4.626874 2.011200  504.554688  496.742188  24  24 1.0   24        1     24    10        10        1      10            0            3
 14   2   2   2 1.618724 0.383917 0.008559 2.011200  6.638074 2.011200 0.000000  508.234375  501.531250  20  20 1.0   20       25     44    10        10       11      20            0            3
 14   1   1   1 1.469763 0.273121 0.004655 1.747540  6.374414 6.374414 3.176566  499.464844  489.144531  14  14 1.0    0        1     14     6         6        1       6            0            0
 14   1   2   2 1.010885 0.150534 0.003947 1.165366  9.550980 3.176566 1.590428  490.128906  479.523438  10  10 1.0    0       15     24     6         6        7      12            0            0
 14   1   3   3 1.120221 0.465420 0.004787 1.590428 11.141408 1.590428 0.826533  497.730469  489.902344  11  11 1.0    0       25     35     6         6       13      18            0            1
 14   1   4   4 0.714027 0.108289 0.004218 0.826533 11.967941 0.826533 1.208828  492.265625  481.898438   7   7 1.0    0       36     42     6         6       19      24            0            2
 14   1   5   5 0.803805 0.401886 0.003137 1.208828 13.176770 1.208828 0.932033  497.007812  486.523438   8   8 1.0    0       43     50     5         5       25      29            0            0
 14   1   6   6 0.808390 0.119991 0.003653 0.932033 14.108803 0.932033 1.048084  497.019531  486.460938   8   8 1.0    0       51     58     5         5       30      34            0            0
 14   1   7   7 0.910314 0.133919 0.003851 1.048084 15.156887 1.048084 0.698969  498.910156  489.339844   9   9 1.0    0       59     67     5         5       35      39            0            1
 14   1   8   8 0.608327 0.086521 0.004121 0.698969 15.855856 0.698969 0.000000  496.699219  486.343750   6   6 1.0    0       68     73     5         5       40      44            0            2
 15   3   1   1 1.144963 0.970016 0.000000 2.114979  2.114979 2.114979 0.000000  497.906250  487.496094  20  20 1.0   20        1     20     0         0        1       1            0            0
 15   2   1   1 2.033049 0.798394 0.008474 2.839917  4.954896 4.954896 1.934606  520.488281  512.664062  25  25 1.0   25        1     25    10        10        1      10            0            2
 15   2   2   2 1.347668 0.578779 0.008158 1.934606  6.889501 1.934606 0.000000  517.925781  508.976562  17  17 1.0   17       26     42    10        10       11      20            0            4
 15   1   1   1 1.458607 0.256388 0.004640 1.719636  6.674531 6.674531 3.080938  511.406250  501.019531  14  14 1.0    0        1     14     6         6        1       6            0            0
 15   1   2   2 0.997716 0.144460 0.004156 1.146332  9.755469 3.080938 1.199203  502.925781  492.304688  10  10 1.0    0       15     24     6         6        7      12            0            0
 15   1   3   3 1.022699 0.171999 0.004505 1.199203 10.954672 1.199203 1.231270  504.265625  493.640625  10  10 1.0    0       25     34     6         6       13      18            0            0
 15   1   4   4 1.037712 0.188279 0.005278 1.231270 12.185942 1.231270 0.571728  508.285156  497.902344  10  10 1.0    0       35     44     7         7       19      25            0            2
 15   1   5   5 0.501115 0.068504 0.002109 0.571728 12.757670 0.571728 0.926617  489.894531  481.175781   5   5 1.0    0       45     49     4         4       26      29            0            1
 15   1   6   6 0.806490 0.117356 0.002772 0.926617 13.684287 0.926617 0.908027  499.621094  490.062500   8   8 1.0    0       50     57     4         4       30      33            0            0
 15   1   7   7 0.796390 0.108282 0.003355 0.908027 14.592314 0.908027 0.695692  500.335938  490.566406   8   8 1.0    0       58     65     4         4       34      37            0            1
 15   1   8   8 0.605456 0.086321 0.003915 0.695692 15.288007 0.695692 0.000000  501.625000  492.125000   6   6 1.0    0       66     71     5         5       38      42            0            2
 16   3   1   1 1.147793 0.655080 0.000000 1.802873  1.802873 1.802873 0.000000  508.617188  498.710938  20  20 1.0   20        1     20     0         0        1       1            0            0
 16   2   1   1 2.717643 1.422195 0.008771 4.148609  5.951483 5.951483 0.970319  549.402344  547.589844  31  31 1.0   31        1     31    10        10        1      10            0            2
 16   2   2   2 0.812606 0.150796 0.006917 0.970319  6.921802 0.970319 0.000000  529.777344  519.378906  11  11 1.0   11       32     42    10        10       11      20            0            4
 16   1   1   1 1.589576 0.299030 0.005516 1.894121  7.845604 7.845604 2.264400  534.074219  528.449219  15  15 1.0    0        1     15     7         7        1       7            0            0
 16   1   2   2 1.109189 0.179214 0.005677 1.294081 10.110004 2.264400 1.902320  529.769531  521.566406  11  11 1.0    0       16     26     8         8        8      15            0            0
 16   1   3   3 1.345065 0.550848 0.006407 1.902320 12.012324 1.902320 2.091013  533.593750  523.898438  13  13 1.0    0       27     39     8         8       16      23            0            1
 16   1   4   4 1.714207 0.369961 0.006846 2.091013 14.103337 2.091013 0.347657  542.992188  537.449219  16  16 1.0    0       40     55     8         8       24      31            0            1
 16   1   5   5 0.313114 0.033639 0.000905 0.347657 14.450994 0.347657 0.670575  528.933594  518.589844   3   3 1.0    0       56     58     2         2       32      33            0            0
 16   1   6   6 0.312236 0.356635 0.001704 0.670575 15.121570 0.670575 0.453875  528.996094  518.589844   3   3 1.0    0       59     61     3         3       34      36            0            2
 16   1   7   7 0.405149 0.046925 0.001801 0.453875 15.575445 0.453875 0.454812  528.996094  518.589844   4   4 1.0    0       62     65     3         3       37      39            0            1
 16   1   8   8 0.405669 0.046441 0.002702 0.454812 16.030257 0.454812 0.000000  528.996094  518.589844   4   4 1.0    0       66     69     3         3       40      42            0            1
 17   3   1   1 1.133128 0.771226 0.000000 1.904354  1.904354 1.904354 0.000000  531.343750  520.945312  20  20 1.0   20        1     20     0         0        1       1            0            0
 17   2   1   1 2.629406 0.973942 0.008725 3.612073  5.516427 5.516427 1.582319  564.593750  562.781250  30  30 1.0   30        1     30    10        10        1      10            0            2
 17   2   2   2 1.053738 0.520762 0.007819 1.582319  7.098746 1.582319 0.000000  552.640625  543.183594  14  14 1.0   14       31     44    10        10       11      20            0            4
 17   1   1   1 1.583941 0.631884 0.005586 2.221411  7.737838 7.737838 2.853787  550.671875  544.546875  15  15 1.0    0        1     15     7         7        1       7            0            0
 17   1   2   2 1.101975 0.164621 0.004873 1.271469 10.591626 2.853787 1.600576  541.726562  531.550781  11  11 1.0    0       16     26     7         7        8      14            0            0
 17   1   3   3 1.342566 0.251700 0.006310 1.600576 12.192202 1.600576 1.615307  553.250000  544.187500  13  13 1.0    0       27     39     8         8       15      22            0            1
 17   1   4   4 1.360937 0.248083 0.006286 1.615307 13.807509 1.615307 0.670566  553.500000  544.160156  13  13 1.0    0       40     52     8         8       23      30            0            1
 17   1   5   5 0.598696 0.070048 0.001822 0.670566 14.478075 0.670566 0.458057  546.335938  536.324219   6   6 1.0    0       53     58     3         3       31      33            0            0
 17   1   6   6 0.409881 0.046927 0.001249 0.458057 14.936132 0.458057 0.689127  546.335938  536.324219   4   4 1.0    0       59     62     3         3       34      36            0            1
 17   1   7   7 0.599565 0.086987 0.002575 0.689127 15.625258 0.689127 0.572935  547.523438  537.386719   6   6 1.0    0       63     68     4         4       37      40            0            1
 17   1   8   8 0.503284 0.067037 0.002614 0.572935 16.198193 0.572935 0.000000  546.460938  536.324219   5   5 1.0    0       69     73     4         4       41      44            0            2
 18   3   1   1 1.125067 0.780964 0.000000 1.906032  1.906032 1.906032 0.000000  547.976562  537.730469  20  20 1.0   20        1     20     0         0        1       1            0            0
 18   2   1   1 2.148657 0.558131 0.008410 2.715198  4.621230 4.621230 2.179551  573.242188  565.089844  26  26 1.0   26        1     26    10        10        1      10            0            3
 18   2   2   2 1.455299 0.716378 0.007874 2.179551  6.800781 2.179551 0.000000  569.117188  560.507812  18  18 1.0   18       27     44    10        10       11      20            0            3
 18   1   1   1 1.477527 0.606710 0.004931 2.089168  6.710397 6.710397 3.091250  565.238281  555.160156  14  14 1.0    0        1     14     6         6        1       6            0            0
 18   1   2   2 0.794362 0.113351 0.003986 0.911699  9.801648 3.091250 2.181364  555.339844  545.289062   8   8 1.0    0       15     22     6         6        7      12            0            0
 18   1   3   3 1.790015 0.385870 0.005479 2.181364 11.983012 2.181364 1.335798  572.031250  564.781250  17  17 1.0    0       23     39     7         7       13      19            0            0
 18   1   4   4 1.120014 0.209948 0.005835 1.335798 13.318809 1.335798 0.579527  561.550781  554.921875  11  11 1.0    0       40     50     7         7       20      26            0            3
 18   1   5   5 0.508721 0.068234 0.002572 0.579527 13.898336 0.579527 0.807542  559.023438  549.394531   5   5 1.0    0       51     55     4         4       27      30            0            1
 18   1   6   6 0.703986 0.101407 0.002150 0.807542 14.705878 0.807542 1.178328  560.781250  551.144531   7   7 1.0    0       56     62     4         4       31      34            0            0
 18   1   7   7 1.015757 0.158862 0.003709 1.178328 15.884205 1.178328 0.811100  565.781250  556.714844  10  10 1.0    0       63     72     5         5       35      39            0            0
 18   1   8   8 0.705258 0.101038 0.004803 0.811100 16.695305 0.811100 0.000000  561.234375  551.386719   7   7 1.0    0       73     79     5         5       40      44            0            2
 19   3   1   1 1.125998 0.631944 0.000000 1.757942  1.757942 1.757942 0.000000  563.507812  553.484375  20  20 1.0   20        1     20     0         0        1       1            0            0
 19   2   1   1 2.155494 0.948681 0.008336 3.112511  4.870453 4.870453 2.176092  587.566406  578.859375  26  26 1.0   26        1     26    10        10        1      10            0            3
 19   2   2   2 1.450783 0.717344 0.007965 2.176092  7.046545 2.176092 0.000000  586.542969  578.394531  18  18 1.0   18       27     44    10        10       11      20            0            3
 19   1   1   1 1.471980 0.270594 0.004751 1.747325  6.617778 6.617778 3.090215  578.484375  569.722656  14  14 1.0    0        1     14     6         6        1       6            0            0
 19   1   2   2 0.795357 0.114709 0.004057 0.914123  9.707993 3.090215 2.173388  569.886719  560.843750   8   8 1.0    0       15     22     6         6        7      12            0            0
 19   1   3   3 1.776616 0.391061 0.005710 2.173388 11.881381 2.173388 1.330511  585.402344  579.632812  17  17 1.0    0       23     39     7         7       13      19            0            0
 19   1   4   4 1.121968 0.203374 0.005169 1.330511 13.211893 1.330511 0.578408  581.718750  574.242188  11  11 1.0    0       40     50     7         7       20      26            0            3
 19   1   5   5 0.506042 0.069854 0.002512 0.578408 13.790301 0.578408 0.806603  576.289062  566.964844   5   5 1.0    0       51     55     4         4       27      30            0            1
 19   1   6   6 0.704099 0.100353 0.002150 0.806603 14.596903 0.806603 1.193710  577.492188  568.171875   7   7 1.0    0       56     62     4         4       31      34            0            0
 19   1   7   7 1.027720 0.162281 0.003709 1.193710 15.790614 1.193710 0.809096  581.714844  573.746094  10  10 1.0    0       63     72     5         5       35      39            0            0
 19   1   8   8 0.705641 0.099317 0.004138 0.809096 16.599710 0.809096 0.000000  578.898438  569.664062   7   7 1.0    0       73     79     5         5       40      44            0            2
 20   3   1   1 1.127658 0.765300 0.000000 1.892959  1.892959 1.892959 0.000000  579.773438  570.601562  20  20 1.0   20        1     20     0         0        1       1            0            0
 20   2   1   1 2.119137 0.920795 0.008774 3.048706  4.941665 4.941665 2.245803  601.136719  594.527344  26  26 1.0   26        1     26    10        10        1      10            0            3
 20   2   2   2 1.442221 0.795820 0.007762 2.245803  7.187468 2.245803 0.000000  599.562500  591.382812  18  18 1.0   18       27     44    10        10       11      20            0            3
 20   1   1   1 1.473126 0.267260 0.005031 1.745417  6.687081 6.687081 2.929921  594.281250  585.125000  14  14 1.0    0        1     14     6         6        1       6            0            0
 20   1   2   2 0.599072 0.081251 0.003795 0.684118  9.617002 2.929921 2.206530  582.921875  573.597656   6   6 1.0    0       15     20     6         6        7      12            0            0
 20   1   3   3 1.792131 0.408784 0.005614 2.206530 11.823532 2.206530 1.337163  600.703125  594.621094  17  17 1.0    0       21     37     7         7       13      19            0            0
 20   1   4   4 1.121906 0.209872 0.005385 1.337163 13.160694 1.337163 0.578235  595.324219  587.734375  11  11 1.0    0       38     48     7         7       20      26            0            3
 20   1   5   5 0.504902 0.070836 0.002497 0.578235 13.738929 0.578235 0.801056  588.964844  579.898438   5   5 1.0    0       49     53     4         4       27      30            0            1
 20   1   6   6 0.703197 0.095663 0.002196 0.801056 14.539986 0.801056 1.197799  590.210938  581.144531   7   7 1.0    0       54     60     4         4       31      34            0            0
 20   1   7   7 1.030022 0.163943 0.003833 1.197799 15.737784 1.197799 0.808971  595.230469  586.679688  10  10 1.0    0       61     70     5         5       35      39            0            0
 20   1   8   8 0.704642 0.100036 0.004292 0.808971 16.546755 0.808971 0.000000  591.917969  582.816406   7   7 1.0    0       71     77     5         5       40      44            0            2
 21   3   1   1 1.124946 0.714627 0.000000 1.839573  1.839573 1.839573 0.000000  592.855469  583.761719  20  20 1.0   20        1     20     0         0        1       1            0            0
 21   2   1   1 2.727395 1.599404 0.008710 4.335509  6.175082 6.175082 0.986642  626.625000  625.082031  31  31 1.0   31        1     31    10        10        1      10            0            2
 21   2   2   2 0.822602 0.156606 0.007434 0.986642  7.161724 0.986642 0.000000  610.156250  601.332031  11  11 1.0   11       32     42    10        10       11      20            0            4
 21   1   1   1 1.592437 0.303147 0.005821 1.901406  8.076488 8.076488 2.818159  609.105469  605.496094  15  15 1.0    0        1     15     7         7        1       7            0            0
 21   1   2   2 1.551623 0.273783 0.006112 1.831517 10.894647 2.818159 1.770054  609.625000  601.261719  15  15 1.0    0       16     30     8         8        8      15            0            0
 21   1   3   3 1.477720 0.286025 0.006309 1.770054 12.664700 1.770054 1.583518  614.933594  606.332031  14  14 1.0    0       31     44     8         8       16      23            0            1
 21   1   4   4 1.339252 0.237915 0.006352 1.583518 14.248219 1.583518 0.351867  615.480469  608.031250  13  13 1.0    0       45     57     8         8       24      31            0            1
 21   1   5   5 0.317613 0.033352 0.000902 0.351867 14.600085 0.351867 0.362120  607.621094  598.824219   3   3 1.0    0       58     60     2         2       32      33            0            0
 21   1   6   6 0.316435 0.044013 0.001673 0.362120 14.962205 0.362120 0.466096  607.636719  598.843750   3   3 1.0    0       61     63     3         3       34      36            0            1
 21   1   7   7 0.410361 0.054023 0.001712 0.466096 15.428301 0.466096 0.456799  607.636719  598.843750   4   4 1.0    0       64     67     3         3       37      39            0            2
 21   1   8   8 0.407285 0.047124 0.002390 0.456799 15.885100 0.456799 0.000000  607.664062  598.863281   4   4 1.0    0       68     71     3         3       40      42            0            1
 22   3   1   1 1.140382 0.835789 0.000000 1.976171  1.976171 1.976171 0.000000  611.351562  602.636719  20  20 1.0   20        1     20     0         0        1       1            0            0
 22   2   1   1 1.922746 0.422883 0.008270 2.353899  4.330070 4.330070 1.994233  633.425781  627.132812  24  24 1.0   24        1     24    10        10        1      10            0            3
 22   2   2   2 1.617849 0.367583 0.008800 1.994233  6.324303 1.994233 0.000000  636.402344  630.691406  20  20 1.0   20       25     44    10        10       11      20            0            3
 22   1   1   1 1.470707 0.688239 0.004719 2.163665  6.493735 6.493735 2.914376  626.625000  617.929688  14  14 1.0    0        1     14     6         6        1       6            0            0
 22   1   2   2 0.801974 0.114219 0.003950 0.920143  9.408111 2.914376 1.309668  618.902344  609.820312   8   8 1.0    0       15     22     6         6        7      12            0            0
 22   1   3   3 1.123177 0.181830 0.004660 1.309668 10.717778 1.309668 0.838299  626.710938  619.957031  11  11 1.0    0       23     33     6         6       13      18            0            0
 22   1   4   4 0.706810 0.127348 0.004142 0.838299 11.556078 0.838299 0.926307  623.343750  614.386719   7   7 1.0    0       34     40     6         6       19      24            0            3
 22   1   5   5 0.805988 0.117238 0.003080 0.926307 12.482385 0.926307 1.351991  626.289062  617.195312   8   8 1.0    0       41     48     5         5       25      29            0            0
 22   1   6   6 0.813451 0.534956 0.003583 1.351991 13.834376 1.351991 1.046782  626.261719  617.136719   8   8 1.0    0       49     56     5         5       30      34            0            0
 22   1   7   7 0.908987 0.134184 0.003611 1.046782 14.881158 1.046782 0.693236  628.441406  620.023438   9   9 1.0    0       57     65     5         5       35      39            0            1
 22   1   8   8 0.602944 0.085955 0.004337 0.693236 15.574394 0.693236 0.000000  625.300781  616.394531   6   6 1.0    0       66     71     5         5       40      44            0            2
 23   3   1   1 1.141705 0.813731 0.000000 1.955436  1.955436 1.955436 0.000000  627.250000  618.246094  20  20 1.0   20        1     20     0         0        1       1            0            0
 23   2   1   1 1.923940 0.413988 0.008508 2.346436  4.301872 4.301872 1.998901  646.511719  640.683594  24  24 1.0   24        1     24    10        10        1      10            0            3
 23   2   2   2 1.621235 0.368902 0.008764 1.998901  6.300772 1.998901 0.000000  650.632812  645.730469  20  20 1.0   20       25     44    10        10       11      20            0            3
 23   1   1   1 1.459477 0.257447 0.004592 1.721517  6.023389 6.023389 3.591079  640.261719  631.281250  14  14 1.0    0        1     14     6         6        1       6            0            0
 23   1   2   2 1.007357 0.580660 0.004161 1.592178  9.614468 3.591079 1.312514  633.484375  624.542969  10  10 1.0    0       15     24     6         6        7      12            0            0
 23   1   3   3 1.117662 0.190067 0.004785 1.312514 10.926982 1.312514 0.821542  641.394531  635.121094  11  11 1.0    0       25     35     6         6       13      18            0            1
 23   1   4   4 0.706396 0.111234 0.003912 0.821542 11.748523 0.821542 0.922231  634.460938  625.417969   7   7 1.0    0       36     42     6         6       19      24            0            2
 23   1   5   5 0.802329 0.116816 0.003086 0.922231 12.670754 0.922231 0.931288  639.058594  630.464844   8   8 1.0    0       43     50     5         5       25      29            0            0
 23   1   6   6 0.808777 0.119498 0.003013 0.931288 13.602042 0.931288 1.033664  637.726562  628.621094   8   8 1.0    0       51     58     5         5       30      34            0            0
 23   1   7   7 0.896306 0.133667 0.003691 1.033664 14.635706 1.033664 1.132102  641.265625  633.507812   9   9 1.0    0       59     67     5         5       35      39            0            1
 23   1   8   8 0.605855 0.522726 0.003520 1.132102 15.767808 1.132102 0.000000  638.343750  629.597656   6   6 1.0    0       68     73     5         5       40      44            0            2
 24   3   1   1 1.142193 0.700446 0.000000 1.842639  1.842639 1.842639 0.000000  639.664062  630.933594  20  20 1.0   20        1     20     0         0        1       1            0            0
 24   2   1   1 2.047062 0.482756 0.008173 2.537991  4.380630 4.380630 2.026935  662.296875  656.625000  25  25 1.0   25        1     25    10        10        1      10            0            2
 24   2   2   2 1.551482 0.467449 0.008004 2.026935  6.407565 2.026935 0.000000  664.042969  655.550781  19  19 1.0   19       26     44    10        10       11      20            0            4
 24   1   1   1 1.455660 0.256612 0.005073 1.717345  6.097975 6.097975 3.182684  655.707031  646.957031  14  14 1.0    0        1     14     6         6        1       6            0            0
 24   1   2   2 0.999171 0.152171 0.004407 1.155749  9.280659 3.182684 1.193415  647.726562  638.617188  10  10 1.0    0       15     24     6         6        7      12            0            0
 24   1   3   3 1.018982 0.169664 0.004769 1.193415 10.474074 1.193415 1.682839  648.957031  640.082031  10  10 1.0    0       25     34     6         6       13      18            0            0
 24   1   4   4 1.037334 0.640130 0.005375 1.682839 12.156913 1.682839 0.459128  652.464844  643.593750  10  10 1.0    0       35     44     7         7       19      25            0            2
 24   1   5   5 0.404616 0.052447 0.002066 0.459128 12.616042 0.459128 0.928642  653.031250  643.925781   4   4 1.0    0       45     48     4         4       26      29            0            1
 24   1   6   6 0.803619 0.121626 0.003398 0.928642 13.544684 0.928642 1.190018  654.542969  645.437500   8   8 1.0    0       49     56     5         5       30      34            0            1
 24   1   7   7 1.022029 0.164149 0.003840 1.190018 14.734701 1.190018 0.811769  659.261719  650.707031  10  10 1.0    0       57     66     5         5       35      39            0            0
 24   1   8   8 0.706762 0.101294 0.003713 0.811769 15.546471 0.811769 0.000000  654.816406  645.710938   7   7 1.0    0       67     73     5         5       40      44            0            2
 25   3   1   1 1.139453 0.718898 0.000000 1.858351  1.858351 1.858351 0.000000  655.695312  646.660156  20  20 1.0   20        1     20     0         0        1       1            0            0
 25   2   1   1 1.929262 0.884916 0.008866 2.823045  4.681396 4.681396 2.012118  676.097656  670.042969  24  24 1.0   24        1     24    10        10        1      10            0            3
 25   2   2   2 1.638201 0.365214 0.008702 2.012118  6.693513 2.012118 0.000000  681.125000  676.234375  20  20 1.0   20       25     44    10        10       11      20            0            3
 25   1   1   1 1.474688 0.266385 0.004713 1.745787  6.427182 6.427182 3.166883  671.324219  662.500000  14  14 1.0    0        1     14     6         6        1       6            0            0
 25   1   2   2 1.001352 0.149222 0.004192 1.154766  9.594066 3.166883 1.292693  662.964844  653.882812  10  10 1.0    0       15     24     6         6        7      12            0            0
 25   1   3   3 1.108833 0.179310 0.004550 1.292693 10.886759 1.292693 0.823970  670.257812  663.757812  11  11 1.0    0       25     35     6         6       13      18            0            1
 25   1   4   4 0.710366 0.109054 0.004549 0.823970 11.710729 0.823970 1.395568  665.273438  656.257812   7   7 1.0    0       36     42     6         6       19      24            0            2
 25   1   5   5 0.804892 0.587309 0.003368 1.395568 13.106297 1.395568 0.931882  669.855469  661.289062   8   8 1.0    0       43     50     5         5       25      29            0            0
 25   1   6   6 0.808566 0.120182 0.003134 0.931882 14.038179 0.931882 1.037995  668.417969  659.558594   8   8 1.0    0       51     58     5         5       30      34            0            0
 25   1   7   7 0.898910 0.135386 0.003700 1.037995 15.076174 1.037995 0.689442  671.457031  663.328125   9   9 1.0    0       59     67     5         5       35      39            0            1
 25   1   8   8 0.599984 0.085928 0.003531 0.689442 15.765616 0.689442 0.000000  669.117188  660.039062   6   6 1.0    0       68     73     5         5       40      44            0            2
 26   3   1   1 1.136538 0.727152 0.000000 1.863690  1.863690 1.863690 0.000000  670.015625  660.937500  20  20 1.0   20        1     20     0         0        1       1            0            0
 26   2   1   1 2.157847 0.572373 0.008553 2.738774  4.602464 4.602464 1.879614  693.855469  686.687500  26  26 1.0   26        1     26    10        10        1      10            0            3
 26   2   2   2 1.457471 0.414259 0.007883 1.879614  6.482078 1.879614 0.000000  690.859375  682.589844  18  18 1.0   18       27     44    10        10       11      20            0            3
 26   1   1   1 1.476035 0.260435 0.004748 1.741218  6.343682 6.343682 3.032277  685.179688  676.355469  14  14 1.0    0        1     14     6         6        1       6            0            0
 26   1   2   2 1.003702 0.144903 0.004057 1.152663  9.375959 3.032277 1.800742  676.792969  667.734375  10  10 1.0    0       15     24     6         6        7      12            0            0
 26   1   3   3 1.118596 0.676513 0.005633 1.800742 11.176701 1.800742 1.341937  682.722656  676.121094  11  11 1.0    0       25     35     7         7       13      19            0            0
 26   1   4   4 1.124993 0.211394 0.005551 1.341937 12.518638 1.341937 0.578519  686.574219  679.406250  11  11 1.0    0       36     46     7         7       20      26            0            3
 26   1   5   5 0.510540 0.065922 0.002056 0.578519 13.097157 0.578519 0.807779  680.417969  671.566406   5   5 1.0    0       47     51     4         4       27      30            0            1
 26   1   6   6 0.706054 0.099506 0.002218 0.807779 13.904936 0.807779 1.193479  682.570312  673.718750   7   7 1.0    0       52     58     4         4       31      34            0            0
 26   1   7   7 1.024126 0.165525 0.003828 1.193479 15.098415 1.193479 0.813880  688.781250  680.269531  10  10 1.0    0       59     68     5         5       35      39            0            0
 26   1   8   8 0.709814 0.100427 0.003639 0.813880 15.912294 0.813880 0.000000  684.011719  675.175781   7   7 1.0    0       69     75     5         5       40      44            0            2
 27   3   1   1 1.127250 0.840356 0.000000 1.967606  1.967606 1.967606 0.000000  684.921875  675.875000  20  20 1.0   20        1     20     0         0        1       1            0            0
 27   2   1   1 2.052807 0.998850 0.008383 3.060040  5.027647 5.027647 2.482456  708.550781  702.292969  25  25 1.0   25        1     25    10        10        1      10            0            2
 27   2   2   2 1.534346 0.940208 0.007902 2.482456  7.510103 2.482456 0.000000  709.640625  701.464844  19  19 1.0   19       26     44    10        10       11      20            0            4
 27   1   1   1 1.477675 0.270468 0.004835 1.752977  6.780624 6.780624 3.646519  702.750000  694.558594  14  14 1.0    0        1     14     6         6        1       6            0            0
 27   1   2   2 1.007568 0.152455 0.004040 1.164063 10.427143 3.646519 1.187207  693.281250  684.460938  10  10 1.0    0       15     24     6         6        7      12            0            0
 27   1   3   3 1.011861 0.170852 0.004494 1.187207 11.614350 1.187207 1.218515  694.515625  685.746094  10  10 1.0    0       25     34     6         6       13      18            0            0
 27   1   4   4 1.035883 0.177331 0.005302 1.218515 12.832865 1.218515 0.461755  697.289062  688.500000  10  10 1.0    0       35     44     7         7       19      25            0            2
 27   1   5   5 0.409087 0.050787 0.001881 0.461755 13.294620 0.461755 0.938386  698.085938  689.089844   4   4 1.0    0       45     48     4         4       26      29            0            2
 27   1   6   6 0.810792 0.124466 0.003128 0.938386 14.233006 0.938386 1.182686  699.660156  690.664062   8   8 1.0    0       49     56     5         5       30      34            0            0
 27   1   7   7 1.023499 0.155386 0.003801 1.182686 15.415692 1.182686 0.813293  704.082031  696.738281  10  10 1.0    0       57     66     5         5       35      39            0            0
 27   1   8   8 0.707921 0.101283 0.004089 0.813293 16.228985 0.813293 0.000000  700.355469  691.328125   7   7 1.0    0       67     73     5         5       40      44            0            2
 28   3   1   1 1.128227 0.824440 0.000000 1.952667  1.952667 1.952667 0.000000  701.292969  692.269531  20  20 1.0   20        1     20     0         0        1       1            0            0
 28   2   1   1 2.701058 1.213774 0.008930 3.923762  5.876429 5.876429 0.982589  737.796875  737.535156  31  31 1.0   31        1     31    10        10        1      10            0            2
 28   2   2   2 0.823723 0.151991 0.006875 0.982589  6.859018 0.982589 0.000000  720.171875  711.398438  11  11 1.0   11       32     42    10        10       11      20            0            4
 28   1   1   1 1.594393 0.315254 0.005668 1.915315  7.791744 7.791744 3.087216  722.898438  717.867188  15  15 1.0    0        1     15     7         7        1       7            0            0
 28   1   2   2 1.333350 0.765642 0.005635 2.104627 10.878961 3.087216 1.815570  721.441406  713.539062  13  13 1.0    0       16     28     8         8        8      15            0            0
 28   1   3   3 1.490768 0.318117 0.006685 1.815570 12.694531 1.815570 1.575430  728.207031  719.417969  14  14 1.0    0       29     42     8         8       16      23            0            1
 28   1   4   4 1.335557 0.234143 0.005730 1.575430 14.269961 1.575430 0.259190  726.843750  719.664062  13  13 1.0    0       43     55     8         8       24      31            0            1
 28   1   5   5 0.231531 0.026760 0.000899 0.259190 14.529152 0.259190 0.464908  719.328125  710.609375   2   2 1.0    0       56     57     2         2       32      33            0            0
 28   1   6   6 0.407733 0.055450 0.001726 0.464908 14.994060 0.464908 0.457790  719.328125  710.609375   4   4 1.0    0       58     61     3         3       34      36            0            2
 28   1   7   7 0.408967 0.047163 0.001661 0.457790 15.451850 0.457790 0.458252  719.328125  710.609375   4   4 1.0    0       62     65     3         3       37      39            0            1
 28   1   8   8 0.408523 0.047135 0.002594 0.458252 15.910103 0.458252 0.000000  719.453125  710.609375   4   4 1.0    0       66     69     3         3       40      42            0            1
 29   3   1   1 1.138273 0.790989 0.000000 1.929263  1.929263 1.929263 0.000000  720.875000  712.015625  20  20 1.0   20        1     20     0         0        1       1            0            0
 29   2   1   1 1.917387 0.946332 0.008613 2.872332  4.801595 4.801595 2.013437  739.156250  733.519531  24  24 1.0   24        1     24    10        10        1      10            0            3
 29   2   2   2 1.623006 0.381982 0.008449 2.013437  6.815032 2.013437 0.000000  745.105469  740.132812  20  20 1.0   20       25     44    10        10       11      20            0            3
 29   1   1   1 1.467368 0.271443 0.005102 1.743913  6.545507 6.545507 2.932860  736.054688  727.574219  14  14 1.0    0        1     14     6         6        1       6            0            0
 29   1   2   2 0.801186 0.113827 0.004410 0.919422  9.478367 2.932860 1.308947  728.500000  719.714844   8   8 1.0    0       15     22     6         6        7      12            0            0
 29   1   3   3 1.116848 0.186879 0.005219 1.308947 10.787314 1.308947 0.821857  730.980469  722.308594  11  11 1.0    0       23     33     6         6       13      18            0            1
 29   1   4   4 0.707773 0.110215 0.003868 0.821857 11.609171 0.821857 0.929634  730.886719  722.292969   7   7 1.0    0       34     40     6         6       19      24            0            2
 29   1   5   5 0.805519 0.121095 0.003021 0.929634 12.538805 0.929634 0.939803  719.675781  714.289062   8   8 1.0    0       41     48     5         5       25      29            0            0
 29   1   6   6 0.812732 0.124038 0.003034 0.939803 13.478608 0.939803 1.044085  723.335938  717.855469   8   8 1.0    0       49     56     5         5       30      34            0            0
 29   1   7   7 0.906781 0.133860 0.003444 1.044085 14.522693 1.044085 0.697621  728.355469  722.675781   9   9 1.0    0       57     65     5         5       35      39            0            1
 29   1   8   8 0.607672 0.086447 0.003501 0.697621 15.220314 0.697621 0.000000  729.125000  722.503906   6   6 1.0    0       66     71     5         5       40      44            0            2
 30   3   1   1 1.142885 0.777672 0.000000 1.920558  1.920558 1.920558 0.000000  733.535156  726.230469  20  20 1.0   20        1     20     0         0        1       1            0            0
 30   2   1   1 1.932340 0.419828 0.008406 2.360574  4.281132 4.281132 2.003440  755.613281  749.699219  24  24 1.0   24        1     24    10        10        1      10            0            3
 30   2   2   2 1.618454 0.376253 0.008733 2.003440  6.284572 2.003440 0.000000  758.937500  754.089844  20  20 1.0   20       25     44    10        10       11      20            0            3
 30   1   1   1 1.470308 0.257176 0.004966 1.732449  6.013581 6.013581 3.172362  750.621094  742.218750  14  14 1.0    0        1     14     6         6        1       6            0            0
 30   1   2   2 1.012007 0.152676 0.004239 1.168922  9.185943 3.172362 1.315647  742.027344  733.457031  10  10 1.0    0       15     24     6         6        7      12            0            0
 30   1   3   3 1.125123 0.185856 0.004667 1.315647 10.501590 1.315647 1.376303  748.441406  742.242188  11  11 1.0    0       25     35     6         6       13      18            0            1
 30   1   4   4 0.708128 0.663092 0.005083 1.376303 11.877893 1.376303 0.922481  743.070312  734.480469   7   7 1.0    0       36     42     6         6       19      24            0            2
 30   1   5   5 0.801291 0.117775 0.003415 0.922481 12.800374 0.922481 0.942672  749.683594  741.660156   8   8 1.0    0       43     50     5         5       25      29            0            0
 30   1   6   6 0.812524 0.126419 0.003728 0.942672 13.743046 0.942672 0.917673  753.496094  746.800781   8   8 1.0    0       51     58     5         5       30      34            0            0
 30   1   7   7 0.798053 0.116070 0.003549 0.917673 14.660719 0.917673 1.311600  749.050781  740.812500   8   8 1.0    0       59     66     5         5       35      39            0            0
 30   1   8   8 1.125623 0.181705 0.004272 1.311600 15.972319 1.311600 0.000000  755.914062  749.828125  11  11 1.0    0       67     77     5         5       40      44            0            3
 31   3   1   1 1.143216 0.840375 0.000000 1.983591  1.983591 1.983591 0.000000  750.058594  741.457031  20  20 1.0   20        1     20     0         0        1       1            0            0
 31   2   1   1 2.572492 0.896470 0.009107 3.478069  5.461660 5.461660 1.233647  776.285156  768.593750  30  30 1.0   30        1     30    10        10        1      10            0            2
 31   2   2   2 1.041274 0.184793 0.007580 1.233647  6.695307 1.233647 0.000000  769.828125  761.960938  14  14 1.0   14       31     44    10        10       11      20            0            4
 31   1   1   1 1.593442 0.861180 0.005577 2.460200  7.921860 7.921860 2.655000  768.601562  763.687500  15  15 1.0    0        1     15     7         7        1       7            0            0
 31   1   2   2 1.223613 0.192535 0.005205 1.421353 10.576860 2.655000 1.454875  765.703125  759.148438  12  12 1.0    0       16     27     7         7        8      14            0            0
 31   1   3   3 1.229152 0.219638 0.006085 1.454875 12.031735 1.454875 1.610875  769.621094  762.785156  12  12 1.0    0       28     39     8         8       15      22            0            1
 31   1   4   4 1.355734 0.249328 0.005813 1.610875 13.642610 1.610875 0.665099  772.285156  764.675781  13  13 1.0    0       40     52     8         8       23      30            0            1
 31   1   5   5 0.593337 0.069783 0.001979 0.665099 14.307708 0.665099 0.572298  763.105469  754.617188   6   6 1.0    0       53     58     3         3       31      33            0            0
 31   1   6   6 0.508548 0.061923 0.001827 0.572298 14.880006 0.572298 0.574660  763.105469  754.617188   5   5 1.0    0       59     63     3         3       34      36            0            1
 31   1   7   7 0.503813 0.068257 0.002591 0.574660 15.454666 0.574660 0.577340  763.105469  754.617188   5   5 1.0    0       64     68     4         4       37      40            0            1
 31   1   8   8 0.506758 0.067144 0.003438 0.577340 16.032006 0.577340 0.000000  763.105469  754.617188   5   5 1.0    0       69     73     4         4       41      44            0            2
 32   3   1   1 1.147746 1.351703 0.000000 2.499449  2.499449 2.499449 0.000000  764.792969  756.273438  20  20 1.0   20        1     20     0         0        1       1            0            0
 32   2   1   1 2.725462 1.002518 0.008774 3.736754  6.236203 6.236203 1.562118  799.398438  798.878906  31  31 1.0   31        1     31    10        10        1      10            0            2
 32   2   2   2 0.818380 0.737417 0.006322 1.562118  7.798322 1.562118 0.000000  780.531250  773.242188  11  11 1.0   11       32     42    10        10       11      20            0            4
 32   1   1   1 1.583449 0.305405 0.005730 1.894584  8.130787 8.130787 3.105420  786.671875  782.167969  15  15 1.0    0        1     15     7         7        1       7            0            0
 32   1   2   2 1.326468 0.211144 0.005690 1.543302 11.236208 3.105420 1.602178  783.566406  776.542969  13  13 1.0    0       16     28     8         8        8      15            0            0
 32   1   3   3 1.349448 0.246359 0.006371 1.602178 12.838386 1.602178 2.068282  779.343750  772.847656  13  13 1.0    0       29     41     8         8       16      23            0            1
 32   1   4   4 1.716583 0.345195 0.006504 2.068282 14.906668 2.068282 0.347665  790.070312  786.441406  16  16 1.0    0       42     57     8         8       24      31            0            1
 32   1   5   5 0.313363 0.033425 0.000877 0.347665 15.254332 0.347665 0.361286  778.976562  770.699219   3   3 1.0    0       58     60     2         2       32      33            0            0
 32   1   6   6 0.315199 0.044455 0.001631 0.361286 15.615618 0.361286 0.466166  779.003906  770.710938   3   3 1.0    0       61     63     3         3       34      36            0            1
 32   1   7   7 0.409151 0.055306 0.001709 0.466166 16.081784 0.466166 0.460736  779.136719  770.835938   4   4 1.0    0       64     67     3         3       37      39            0            1
 32   1   8   8 0.407171 0.051098 0.002467 0.460736 16.542520 0.460736 0.000000  779.464844  771.234375   4   4 1.0    0       68     71     3         3       40      42            0            2
 33   3   1   1 1.148757 0.783110 0.000000 1.931867  1.931867 1.931867 0.000000  783.000000  774.695312  20  20 1.0   20        1     20     0         0        1       1            0            0
 33   2   1   1 2.732439 0.971549 0.008669 3.712657  5.644524 5.644524 0.976616  817.695312  816.917969  31  31 1.0   31        1     31    10        10        1      10            0            2
 33   2   2   2 0.816931 0.153107 0.006579 0.976616  6.621140 0.976616 0.000000  796.531250  787.945312  11  11 1.0   11       32     42    10        10       11      20            0            4
 33   1   1   1 1.586556 0.298283 0.005928 1.890767  7.535291 7.535291 2.504870  801.339844  796.695312  15  15 1.0    0        1     15     7         7        1       7            0            0
 33   1   2   2 1.319492 0.202720 0.006041 1.528254 10.040162 2.504870 2.203969  798.984375  792.234375  13  13 1.0    0       16     28     8         8        8      15            0            0
 33   1   3   3 1.340200 0.857328 0.006441 2.203969 12.244131 2.203969 2.063908  803.210938  795.699219  13  13 1.0    0       29     41     8         8       16      23            0            1
 33   1   4   4 1.715968 0.341332 0.006609 2.063908 14.308039 2.063908 0.347053  808.464844  804.304688  16  16 1.0    0       42     57     8         8       24      31            0            1
 33   1   5   5 0.312414 0.033730 0.000908 0.347053 14.655092 0.347053 0.360482  795.687500  787.156250   3   3 1.0    0       58     60     2         2       32      33            0            0
 33   1   6   6 0.314007 0.044778 0.001698 0.360482 15.015574 0.360482 0.454346  795.750000  787.156250   3   3 1.0    0       61     63     3         3       34      36            0            2
 33   1   7   7 0.405858 0.046633 0.001855 0.454346 15.469920 0.454346 0.454754  795.750000  787.156250   4   4 1.0    0       64     67     3         3       37      39            0            1
 33   1   8   8 0.405484 0.046888 0.002382 0.454754 15.924674 0.454754 0.000000  795.757812  787.156250   4   4 1.0    0       68     71     3         3       40      42            0            1
 34   3   1   1 1.134484 0.850659 0.000000 1.985143  1.985143 1.985143 0.000000  798.109375  789.511719  20  20 1.0   20        1     20     0         0        1       1            0            0
 34   2   1   1 1.938097 0.426554 0.008308 2.372958  4.358101 4.358101 2.002757  818.824219  812.789062  24  24 1.0   24        1     24    10        10        1      10            0            3
 34   2   2   2 1.623152 0.371172 0.008434 2.002757  6.360858 2.002757 0.000000  822.437500  817.371094  20  20 1.0   20       25     44    10        10       11      20            0            3
 34   1   1   1 1.481849 0.265425 0.004864 1.752138  6.110239 6.110239 3.534639  812.160156  803.917969  14  14 1.0    0        1     14     6         6        1       6            0            0
 34   1   2   2 0.797956 0.730150 0.003776 1.531882  9.644878 3.534639 1.300641  803.953125  795.562500   8   8 1.0    0       15     22     6         6        7      12            0            0
 34   1   3   3 1.111381 0.184530 0.004730 1.300641 10.945519 1.300641 0.827699  806.921875  798.457031  11  11 1.0    0       23     33     6         6       13      18            0            1
 34   1   4   4 0.705215 0.118181 0.004304 0.827699 11.773218 0.827699 0.930290  807.656250  799.187500   7   7 1.0    0       34     40     6         6       19      24            0            2
 34   1   5   5 0.812864 0.114240 0.003186 0.930290 12.703508 0.930290 0.951045  811.171875  803.039062   8   8 1.0    0       41     48     5         5       25      29            0            0
 34   1   6   6 0.822299 0.124928 0.003819 0.951045 13.654553 0.951045 1.045758  815.511719  808.687500   8   8 1.0    0       49     56     5         5       30      34            0            0
 34   1   7   7 0.908068 0.133952 0.003738 1.045758 14.700311 1.045758 0.691629  813.339844  805.722656   9   9 1.0    0       57     65     5         5       35      39            0            1
 34   1   8   8 0.601530 0.086001 0.004097 0.691629 15.391940 0.691629 0.000000  810.730469  802.132812   6   6 1.0    0       66     71     5         5       40      44            0            2
 35   3   1   1 1.130820 0.768900 0.000000 1.899720  1.899720 1.899720 0.000000  812.593750  804.242188  20  20 1.0   20        1     20     0         0        1       1            0            0
 35   2   1   1 2.134085 1.163783 0.008855 3.306723  5.206443 5.206443 1.777253  835.546875  829.351562  26  26 1.0   26        1     26    10        10        1      10            0            3
 35   2   2   2 1.437159 0.332407 0.007687 1.777253  6.983696 1.777253 0.000000  833.785156  826.632812  18  18 1.0   18       27     44    10        10       11      20            0            3
 35   1   1   1 1.481392 0.275461 0.004859 1.761712  6.968155 6.968155 2.941707  827.742188  819.382812  14  14 1.0    0        1     14     6         6        1       6            0            0
 35   1   2   2 1.010940 0.149490 0.004025 1.164455  9.909862 2.941707 1.322162  806.605469  799.851562  10  10 1.0    0       15     24     6         6        7      12            0            0
 35   1   3   3 1.125394 0.190991 0.005777 1.322162 11.232025 1.322162 1.326964  820.917969  815.925781  11  11 1.0    0       25     35     7         7       13      19            0            0
 35   1   4   4 1.122303 0.198884 0.005776 1.326964 12.558988 1.326964 0.579789  825.429688  819.421875  11  11 1.0    0       36     46     7         7       20      26            0            3
 35   1   5   5 0.506966 0.070274 0.002549 0.579789 13.138777 0.579789 0.806642  823.078125  815.101562   5   5 1.0    0       47     51     4         4       27      30            0            1
 35   1   6   6 0.705591 0.098870 0.002181 0.806642 13.945419 0.806642 1.195747  824.410156  816.382812   7   7 1.0    0       52     58     4         4       31      34            0            0
 35   1   7   7 1.033585 0.158461 0.003702 1.195747 15.141166 1.195747 1.462590  829.058594  822.164062  10  10 1.0    0       59     68     5         5       35      39            0            0
 35   1   8   8 0.712631 0.745877 0.004082 1.462590 16.603756 1.462590 0.000000  825.027344  816.855469   7   7 1.0    0       69     75     5         5       40      44            0            2
 36   3   1   1 1.130501 0.755158 0.000000 1.885659  1.885659 1.885659 0.000000  827.078125  818.585938  20  20 1.0   20        1     20     0         0        1       1            0            0
 36   2   1   1 2.696471 1.111089 0.008867 3.816427  5.702085 5.702085 0.978815  861.605469  861.832031  31  31 1.0   31        1     31    10        10        1      10            0            2
 36   2   2   2 0.819722 0.152946 0.006147 0.978815  6.680901 0.978815 0.000000  842.253906  833.886719  11  11 1.0   11       32     42    10        10       11      20            0            4
 36   1   1   1 1.590289 0.304403 0.005875 1.900568  7.602653 7.602653 2.561101  847.375000  842.613281  15  15 1.0    0        1     15     7         7        1       7            0            0
 36   1   2   2 1.342150 0.234094 0.006042 1.582286 10.163754 2.561101 1.809731  843.585938  836.187500  13  13 1.0    0       16     28     8         8        8      15            0            0
 36   1   3   3 1.489868 0.313203 0.006659 1.809731 11.973485 1.809731 1.593119  849.492188  841.125000  14  14 1.0    0       29     42     8         8       16      23            0            1
 36   1   4   4 1.343360 0.243472 0.006287 1.593119 13.566604 1.593119 0.917257  848.640625  841.906250  13  13 1.0    0       43     55     8         8       24      31            0            1
 36   1   5   5 0.230851 0.685587 0.000818 0.917257 14.483860 0.917257 0.462535  841.132812  832.847656   2   2 1.0    0       56     57     2         2       32      33            0            0
 36   1   6   6 0.408493 0.052229 0.001813 0.462535 14.946396 0.462535 0.468889  841.132812  832.847656   4   4 1.0    0       58     61     3         3       34      36            0            1
 36   1   7   7 0.411140 0.055969 0.001779 0.468889 15.415284 0.468889 0.464068  841.132812  832.847656   4   4 1.0    0       62     65     3         3       37      39            0            1
 36   1   8   8 0.410161 0.051444 0.002464 0.464068 15.879353 0.464068 0.000000  841.132812  832.847656   4   4 1.0    0       66     69     3         3       40      42            0            2
 37   3   1   1 1.144187 0.809899 0.000000 1.954085  1.954085 1.954085 0.000000  842.531250  834.253906  20  20 1.0   20        1     20     0         0        1       1            0            0
 37   2   1   1 2.041817 0.491844 0.008495 2.542156  4.496241 4.496241 1.635977  864.882812  858.816406  25  25 1.0   25        1     25    10        10        1      10            0            2
 37   2   2   2 1.347459 0.280004 0.008514 1.635977  6.132218 1.635977 0.000000  864.660156  857.945312  17  17 1.0   17       26     42    10        10       11      20            0            4
 37   1   1   1 1.453149 0.263078 0.004999 1.721226  6.217468 6.217468 2.546416  859.062500  850.863281  14  14 1.0    0        1     14     6         6        1       6            0            0
 37   1   2   2 0.796737 0.109916 0.003786 0.910440  8.763884 2.546416 2.060992  848.746094  840.277344   8   8 1.0    0       15     22     6         6        7      12            0            0
 37   1   3   3 1.687636 0.368687 0.004668 2.060992 10.824876 2.060992 1.218794  862.328125  858.070312  16  16 1.0    0       23     38     6         6       13      18            0            0
 37   1   4   4 1.034858 0.178701 0.005235 1.218794 12.043670 1.218794 0.569388  853.945312  845.617188  10  10 1.0    0       39     48     7         7       19      25            0            2
 37   1   5   5 0.501992 0.065396 0.002001 0.569388 12.613058 0.569388 0.929716  855.175781  846.699219   5   5 1.0    0       49     53     4         4       26      29            0            1
 37   1   6   6 0.811611 0.115463 0.002642 0.929716 13.542774 0.929716 0.929406  856.332031  847.855469   8   8 1.0    0       54     61     4         4       30      33            0            0
 37   1   7   7 0.812918 0.113678 0.002811 0.929406 14.472180 0.929406 0.697920  856.191406  847.710938   8   8 1.0    0       62     69     4         4       34      37            0            1
 37   1   8   8 0.607213 0.086599 0.004108 0.697920 15.170101 0.697920 0.000000  855.839844  847.355469   6   6 1.0    0       70     75     5         5       38      42            0            2
 38   3   1   1 1.141800 0.852255 0.000000 1.994055  1.994055 1.994055 0.000000  856.613281  848.257812  20  20 1.0   20        1     20     0         0        1       1            0            0
 38   2   1   1 2.144878 0.554152 0.008374 2.707404  4.701459 4.701459 1.824637  879.257812  873.289062  26  26 1.0   26        1     26    10        10        1      10            0            3
 38   2   2   2 1.444878 0.372115 0.007644 1.824637  6.526096 1.824637 0.000000  879.230469  871.621094  18  18 1.0   18       27     44    10        10       11      20            0            3
 38   1   1   1 1.472508 0.271370 0.005052 1.748930  6.450388 6.450388 2.734821  865.238281  858.492188  14  14 1.0    0        1     14     6         6        1       6            0            0
 38   1   2   2 0.793195 0.112901 0.004088 0.910184  9.185209 2.734821 2.245928  857.851562  850.722656   8   8 1.0    0       15     22     6         6        7      12            0            0
 38   1   3   3 1.808994 0.431297 0.005637 2.245928 11.431138 2.245928 2.050112  877.042969  872.250000  17  17 1.0    0       23     39     7         7       13      19            0            0
 38   1   4   4 1.127501 0.917387 0.005224 2.050112 13.481250 2.050112 0.578302  874.257812  867.703125  11  11 1.0    0       40     50     7         7       20      26            0            3
 38   1   5   5 0.507528 0.068115 0.002658 0.578302 14.059552 0.578302 0.798354  868.777344  860.640625   5   5 1.0    0       51     55     4         4       27      30            0            1
 38   1   6   6 0.700443 0.095667 0.002244 0.798354 14.857906 0.798354 1.193991  870.078125  861.937500   7   7 1.0    0       56     62     4         4       31      34            0            0
 38   1   7   7 1.029931 0.160224 0.003835 1.193991 16.051897 1.193991 0.818497  874.367188  866.542969  10  10 1.0    0       63     72     5         5       35      39            0            0
 38   1   8   8 0.712401 0.101896 0.004200 0.818497 16.870394 0.818497 0.000000  869.316406  860.933594   7   7 1.0    0       73     79     5         5       40      44            0            2
 39   3   1   1 1.144348 0.842705 0.000000 1.987053  1.987053 1.987053 0.000000  871.261719  862.953125  20  20 1.0   20        1     20     0         0        1       1            0            0
 39   2   1   1 1.929221 0.434983 0.008669 2.372874  4.359926 4.359926 2.017968  894.367188  889.421875  24  24 1.0   24        1     24    10        10        1      10            0            3
 39   2   2   2 1.629707 0.379673 0.008588 2.017968  6.377894 2.017968 0.000000  898.171875  894.097656  20  20 1.0   20       25     44    10        10       11      20            0            3
 39   1   1   1 1.467862 0.272452 0.005423 1.745738  6.105664 6.105664 3.178901  887.785156  879.609375  14  14 1.0    0        1     14     6         6        1       6            0            0
 39   1   2   2 1.005855 0.151074 0.004004 1.160934  9.284565 3.178901 1.317846  879.675781  871.246094  10  10 1.0    0       15     24     6         6        7      12            0            0
 39   1   3   3 1.123837 0.189246 0.004764 1.317846 10.602411 1.317846 1.540349  887.957031  881.812500  11  11 1.0    0       25     35     6         6       13      18            0            1
 39   1   4   4 0.711857 0.824543 0.003950 1.540349 12.142760 1.540349 0.928081  882.242188  874.007812   7   7 1.0    0       36     42     6         6       19      24            0            2
 39   1   5   5 0.805067 0.119883 0.003131 0.928081 13.070841 0.928081 0.936968  886.328125  877.921875   8   8 1.0    0       43     50     5         5       25      29            0            0
 39   1   6   6 0.812230 0.121481 0.003256 0.936968 14.007809 0.936968 1.036559  886.265625  877.859375   8   8 1.0    0       51     58     5         5       30      34            0            0
 39   1   7   7 0.899177 0.133639 0.003742 1.036559 15.044368 1.036559 0.698580  887.851562  880.683594   9   9 1.0    0       59     67     5         5       35      39            0            1
 39   1   8   8 0.607466 0.087114 0.004000 0.698580 15.742948 0.698580 0.000000  886.007812  877.824219   6   6 1.0    0       68     73     5         5       40      44            0            2
 40   3   1   1 1.141606 0.750649 0.000000 1.892255  1.892255 1.892255 0.000000  887.082031  878.789062  20  20 1.0   20        1     20     0         0        1       1            0            0
 40   2   1   1 2.050372 0.507357 0.008298 2.566027  4.458282 4.458282 1.640443  911.644531  905.925781  25  25 1.0   25        1     25    10        10        1      10            0            2
 40   2   2   2 1.353396 0.278657 0.008390 1.640443  6.098725 1.640443 0.000000  909.839844  902.980469  17  17 1.0   17       26     42    10        10       11      20            0            4
 40   1   1   1 1.455774 0.258428 0.004916 1.719118  6.177400 6.177400 2.321032  903.375000  895.441406  14  14 1.0    0        1     14     6         6        1       6            0            0
 40   1   2   2 0.594825 0.082123 0.003641 0.680589  8.498432 2.321032 2.714148  893.425781  885.390625   6   6 1.0    0       15     20     6         6        7      12            0            0
 40   1   3   3 1.658980 1.050710 0.004458 2.714148 11.212581 2.714148 1.208885  906.156250  901.867188  16  16 1.0    0       21     36     6         6       13      18            0            0
 40   1   4   4 1.031935 0.171261 0.005689 1.208885 12.421466 1.208885 0.576440  898.183594  889.898438  10  10 1.0    0       37     46     7         7       19      25            0            2
 40   1   5   5 0.508051 0.066330 0.002060 0.576440 12.997906 0.576440 0.939531  899.843750  891.484375   5   5 1.0    0       47     51     4         4       26      29            0            1
 40   1   6   6 0.817397 0.119546 0.002588 0.939531 13.937437 0.939531 0.925170  901.339844  892.984375   8   8 1.0    0       52     59     4         4       30      33            0            0
 40   1   7   7 0.808513 0.113805 0.002852 0.925170 14.862607 0.925170 0.690845  901.250000  892.894531   8   8 1.0    0       60     67     4         4       34      37            0            1
 40   1   8   8 0.600634 0.086522 0.003689 0.690845 15.553452 0.690845 0.000000  901.097656  892.734375   6   6 1.0    0       68     73     5         5       38      42            0            2
 41   3   1   1 1.140877 0.785273 0.000000 1.926150  1.926150 1.926150 0.000000  902.152344  893.886719  20  20 1.0   20        1     20     0         0        1       1            0            0
 41   2   1   1 2.147367 0.535072 0.008612 2.691050  4.617200 4.617200 1.769056  926.484375  920.601562  26  26 1.0   26        1     26    10        10        1      10            0            3
 41   2   2   2 1.457971 0.302655 0.008429 1.769056  6.386256 1.769056 0.000000  925.847656  918.847656  18  18 1.0   18       27     44    10        10       11      20            0            3
 41   1   1   1 1.468324 0.269984 0.005090 1.743398  6.360598 6.360598 2.671866  918.578125  910.656250  14  14 1.0    0        1     14     6         6        1       6            0            0
 41   1   2   2 0.791336 0.107515 0.003959 0.902810  9.032464 2.671866 2.979988  907.144531  898.832031   8   8 1.0    0       15     22     6         6        7      12            0            0
 41   1   3   3 1.798485 1.175503 0.005999 2.979988 12.012452 2.979988 1.334488  925.625000  921.050781  17  17 1.0    0       23     39     7         7       13      19            0            0
 41   1   4   4 1.131557 0.197668 0.005263 1.334488 13.346940 1.334488 0.577703  920.148438  913.511719  11  11 1.0    0       40     50     7         7       20      26            0            3
 41   1   5   5 0.505818 0.069829 0.002056 0.577703 13.924643 0.577703 0.937336  915.039062  906.671875   5   5 1.0    0       51     55     4         4       27      30            0            0
 41   1   6   6 0.814252 0.120551 0.002533 0.937336 14.861979 0.937336 1.183929  916.574219  908.210938   8   8 1.0    0       56     63     4         4       31      34            0            0
 41   1   7   7 1.016379 0.163757 0.003792 1.183929 16.045908 1.183929 0.691832  922.386719  914.921875  10  10 1.0    0       64     73     5         5       35      39            0            1
 41   1   8   8 0.600948 0.086827 0.004057 0.691832 16.737740 0.691832 0.000000  916.042969  907.671875   6   6 1.0    0       74     79     5         5       40      44            0            2
 42   3   1   1 1.136591 0.721680 0.000000 1.858271  1.858271 1.858271 0.000000  917.707031  909.578125  20  20 1.0   20        1     20     0         0        1       1            0            0
 42   2   1   1 1.941884 0.428847 0.008364 2.379095  4.237366 4.237366 2.013658  940.656250  936.011719  24  24 1.0   24        1     24    10        10        1      10            0            3
 42   2   2   2 1.630315 0.374613 0.008730 2.013658  6.251025 2.013658 0.000000  943.390625  939.312500  20  20 1.0   20       25     44    10        10       11      20            0            3
 42   1   1   1 1.474519 0.269254 0.005083 1.748855  5.986222 5.986222 3.172372  933.210938  925.375000  14  14 1.0    0        1     14     6         6        1       6            0            0
 42   1   2   2 1.005570 0.149032 0.004112 1.158714  9.158594 3.172372 2.075428  925.085938  916.804688  10  10 1.0    0       15     24     6         6        7      12            0            0
 42   1   3   3 1.120673 0.949998 0.004757 2.075428 11.234022 2.075428 0.822057  933.050781  927.187500  11  11 1.0    0       25     35     6         6       13      18            0            1
 42   1   4   4 0.708059 0.109676 0.004322 0.822057 12.056079 0.822057 0.938433  927.468750  919.125000   7   7 1.0    0       36     42     6         6       19      24            0            2
 42   1   5   5 0.815490 0.119963 0.002980 0.938433 12.994512 0.938433 0.940037  932.617188  924.730469   8   8 1.0    0       43     50     5         5       25      29            0            0
 42   1   6   6 0.815899 0.120943 0.003195 0.940037 13.934549 0.940037 1.045672  932.996094  924.710938   8   8 1.0    0       51     58     5         5       30      34            0            0
 42   1   7   7 0.906395 0.135604 0.003674 1.045672 14.980221 1.045672 0.692249  935.382812  927.812500   9   9 1.0    0       59     67     5         5       35      39            0            1
 42   1   8   8 0.600726 0.087399 0.004124 0.692249 15.672470 0.692249 0.000000  933.109375  924.781250   6   6 1.0    0       68     73     5         5       40      44            0            2
 43   3   1   1 1.132304 0.712808 0.000000 1.845113  1.845113 1.845113 0.000000  934.011719  925.683594  20  20 1.0   20        1     20     0         0        1       1            0            0
 43   2   1   1 2.155472 0.563941 0.008440 2.727854  4.572966 4.572966 1.797100  959.511719  953.253906  26  26 1.0   26        1     26    10        10        1      10            0            3
 43   2   2   2 1.452815 0.336676 0.007608 1.797100  6.370066 1.797100 0.000000  958.312500  951.183594  18  18 1.0   18       27     44    10        10       11      20            0            3
 43   1   1   1 1.479299 0.272418 0.004930 1.756646  6.329612 6.329612 3.493764  950.589844  942.558594  14  14 1.0    0        1     14     6         6        1       6            0            0
 43   1   2   2 0.796455 0.896371 0.003838 1.696665  9.823377 3.493764 2.226754  940.332031  932.097656   8   8 1.0    0       15     22     6         6        7      12            0            0
 43   1   3   3 1.800581 0.420605 0.005568 2.226754 12.050131 2.226754 1.336961  958.152344  953.449219  17  17 1.0    0       23     39     7         7       13      19            0            0
 43   1   4   4 1.128084 0.203407 0.005470 1.336961 13.387092 1.336961 0.583351  953.136719  946.789062  11  11 1.0    0       40     50     7         7       20      26            0            3
 43   1   5   5 0.509573 0.071214 0.002564 0.583351 13.970443 0.583351 0.808845  925.625000  920.046875   5   5 1.0    0       51     55     4         4       27      30            0            1
 43   1   6   6 0.708393 0.098243 0.002209 0.808845 14.779287 0.808845 1.181763  936.101562  930.000000   7   7 1.0    0       56     62     4         4       31      34            0            0
 43   1   7   7 1.020348 0.157813 0.003603 1.181763 15.961051 1.181763 0.818298  944.582031  939.464844  10  10 1.0    0       63     72     5         5       35      39            0            0
 43   1   8   8 0.710899 0.103153 0.004247 0.818298 16.779349 0.818298 0.000000  942.878906  936.761719   7   7 1.0    0       73     79     5         5       40      44            0            2
 44   3   1   1 1.137348 0.687376 0.000000 1.824724  1.824724 1.824724 0.000000  947.324219  940.296875  20  20 1.0   20        1     20     0         0        1       1            0            0
 44   2   1   1 2.146759 0.545870 0.008339 2.700968  4.525692 4.525692 1.752191  973.027344  967.984375  26  26 1.0   26        1     26    10        10        1      10            0            3
 44   2   2   2 1.452705 0.291322 0.008164 1.752191  6.277884 1.752191 0.000000  973.914062  967.031250  18  18 1.0   18       27     44    10        10       11      20            0            3
 44   1   1   1 1.473739 0.269528 0.004652 1.747918  6.273610 6.273610 3.460897  966.562500  958.968750  14  14 1.0    0        1     14     6         6        1       6            0            0
 44   1   2   2 0.795337 0.909553 0.003816 1.708706  9.734508 3.460897 2.231386  957.851562  949.859375   8   8 1.0    0       15     22     6         6        7      12            0            0
 44   1   3   3 1.800746 0.424699 0.005941 2.231386 11.965894 2.231386 1.342749  973.710938  968.890625  17  17 1.0    0       23     39     7         7       13      19            0            0
 44   1   4   4 1.129180 0.208164 0.005404 1.342749 13.308643 1.342749 0.580905  968.417969  961.949219  11  11 1.0    0       40     50     7         7       20      26            0            3
 44   1   5   5 0.508633 0.070213 0.002059 0.580905 13.889548 0.580905 0.942380  962.968750  954.851562   5   5 1.0    0       51     55     4         4       27      30            0            0
 44   1   6   6 0.817153 0.122509 0.002719 0.942380 14.831928 0.942380 1.065482  964.742188  956.496094   8   8 1.0    0       56     63     4         4       31      34            0            0
 44   1   7   7 0.913955 0.147915 0.003611 1.065482 15.897410 1.065482 0.821671  969.570312  962.914062   9   9 1.0    0       64     72     5         5       35      39            0            1
 44   1   8   8 0.710411 0.107206 0.004054 0.821671 16.719081 0.821671 0.000000  965.085938  957.597656   7   7 1.0    0       73     79     5         5       40      44            0            2
 45   3   1   1 1.130665 0.877817 0.000000 2.008482  2.008482 2.008482 0.000000  966.519531  958.273438  20  20 1.0   20        1     20     0         0        1       1            0            0
 45   2   1   1 2.246987 0.574454 0.008504 2.829945  4.838427 4.838427 1.409241  990.996094  984.589844  27  27 1.0   27        1     27    10        10        1      10            0            2
 45   2   2   2 1.172534 0.228214 0.008493 1.409241  6.247668 1.409241 0.000000  986.785156  978.968750  15  15 1.0   15       28     42    10        10       11      20            0            4
 45   1   1   1 1.472437 0.268643 0.004689 1.745769  6.584196 6.584196 3.515392  981.246094  973.285156  14  14 1.0    0        1     14     6         6        1       6            0            0
 45   1   2   2 1.111438 0.989821 0.004893 2.106151 10.099588 3.515392 1.434400  978.785156  972.781250  11  11 1.0    0       15     25     7         7        7      13            0            0
 45   1   3   3 1.219505 0.209414 0.005480 1.434400 11.533988 1.434400 1.350223  981.800781  975.605469  12  12 1.0    0       26     37     7         7       14      20            0            1
 45   1   4   4 1.134773 0.210168 0.005282 1.350223 12.884211 1.350223 0.579583  983.906250  977.601562  11  11 1.0    0       38     48     7         7       21      27            0            1
 45   1   5   5 0.514680 0.063204 0.001699 0.579583 13.463795 0.579583 0.932561  978.402344  970.242188   5   5 1.0    0       49     53     3         3       28      30            0            0
 45   1   6   6 0.814842 0.115004 0.002715 0.932561 14.396356 0.932561 0.575772  980.000000  971.777344   8   8 1.0    0       54     61     4         4       31      34            0            1
 45   1   7   7 0.507988 0.065245 0.002539 0.575772 14.972128 0.575772 0.575753  978.464844  970.242188   5   5 1.0    0       62     66     4         4       35      38            0            1
 45   1   8   8 0.506201 0.066474 0.003078 0.575753 15.547880 0.575753 0.000000  978.507812  970.296875   5   5 1.0    0       67     71     4         4       39      42            0            2
 46   3   1   1 1.133044 0.706692 0.000000 1.839737  1.839737 1.839737 0.000000  979.906250  971.699219  20  20 1.0   20        1     20     0         0        1       1            0            0
 46   2   1   1 2.142037 0.564211 0.008564 2.714812  4.554548 4.554548 1.780476 1005.246094  998.937500  26  26 1.0   26        1     26    10        10        1      10            0            2
 46   2   2   2 1.435833 0.336744 0.007899 1.780476  6.335024 1.780476 0.000000  999.910156  994.093750  18  18 1.0   18       27     44    10        10       11      20            0            4
 46   1   1   1 1.482193 0.259051 0.004830 1.746073  6.300622 6.300622 2.463025  996.121094  988.203125  14  14 1.0    0        1     14     6         6        1       6            0            0
 46   1   2   2 0.598185 0.080734 0.003630 0.682549  8.763647 2.463025 3.031630  985.128906  976.968750   6   6 1.0    0       15     20     6         6        7      12            0            0
 46   1   3   3 1.788971 1.237162 0.005497 3.031630 11.795276 3.031630 1.473374 1003.320312  998.914062  17  17 1.0    0       21     37     7         7       13      19            0            0
 46   1   4   4 1.240901 0.226945 0.005528 1.473374 13.268650 1.473374 0.471204  991.742188  986.949219  12  12 1.0    0       38     49     7         7       20      26            0            2
 46   1   5   5 0.408119 0.060492 0.002592 0.471204 13.739853 0.471204 0.806691  990.050781  982.601562   4   4 1.0    0       50     53     4         4       27      30            0            2
 46   1   6   6 0.704992 0.099503 0.002196 0.806691 14.546544 0.806691 1.204541  991.605469  984.042969   7   7 1.0    0       54     60     4         4       31      34            0            0
 46   1   7   7 1.035783 0.164931 0.003827 1.204541 15.751085 1.204541 0.823198  996.246094  989.003906  10  10 1.0    0       61     70     5         5       35      39            0            0
 46   1   8   8 0.717133 0.101937 0.004127 0.823198 16.574283 0.823198 0.000000  994.765625  987.296875   7   7 1.0    0       71     77     5         5       40      44            0            2
 47   3   1   1 1.137782 0.720470 0.000000 1.858253  1.858253 1.858253 0.000000  996.957031  989.375000  20  20 1.0   20        1     20     0         0        1       1            0            0
 47   2   1   1 2.131039 0.535146 0.008524 2.674710  4.532963 4.532963 1.742021 1019.019531 1013.695312  26  26 1.0   26        1     26    10        10        1      10            0            3
 47   2   2   2 1.436955 0.296712 0.008355 1.742021  6.274984 1.742021 0.000000 1020.281250 1013.316406  18  18 1.0   18       27     44    10        10       11      20            0            3
 47   1   1   1 1.477343 0.273449 0.004965 1.755757  6.288720 6.288720 2.662724 1012.570312 1004.769531  14  14 1.0    0        1     14     6         6        1       6            0            0
 47   1   2   2 0.804366 0.112417 0.003920 0.920703  8.951444 2.662724 1.323492 1003.734375  995.687500   8   8 1.0    0       15     22     6         6        7      12            0            0
 47   1   3   3 1.125500 0.193072 0.004920 1.323492 10.274936 1.323492 2.183463 1011.941406 1006.250000  11  11 1.0    0       23     33     7         7       13      19            0            0
 47   1   4   4 1.132073 1.045963 0.005428 2.183463 12.458399 2.183463 0.576446 1014.835938 1008.476562  11  11 1.0    0       34     44     7         7       20      26            0            3
 47   1   5   5 0.504529 0.069711 0.002206 0.576446 13.034844 0.576446 0.934877 1009.800781 1001.878906   5   5 1.0    0       45     49     4         4       27      30            0            0
 47   1   6   6 0.813011 0.119102 0.002764 0.934877 13.969721 0.934877 1.199830 1011.394531 1003.464844   8   8 1.0    0       50     57     4         4       31      34            0            0
 47   1   7   7 1.027043 0.168997 0.003791 1.199830 15.169552 1.199830 0.695246 1017.445312 1010.183594  10  10 1.0    0       58     67     5         5       35      39            0            1
 47   1   8   8 0.605838 0.085304 0.004105 0.695246 15.864798 0.695246 0.000000 1010.328125 1002.429688   6   6 1.0    0       68     73     5         5       40      44            0            2
 48   3   1   1 1.144835 0.694873 0.000000 1.839708  1.839708 1.839708 0.000000 1012.218750 1004.082031  20  20 1.0   20        1     20     0         0        1       1            0            0
 48   2   1   1 2.250148 0.572604 0.008593 2.831345  4.671053 4.671053 1.390278 1037.187500 1031.070312  27  27 1.0   27        1     27    10        10        1      10            0            2
 48   2   2   2 1.158876 0.223235 0.008167 1.390278  6.061331 1.390278 0.000000 1034.070312 1026.152344  15  15 1.0   15       28     42    10        10       11      20            0            4
 48   1   1   1 1.460948 0.272081 0.004696 1.737726  6.408779 6.408779 2.438729 1028.933594 1021.175781  14  14 1.0    0        1     14     6         6        1       6            0            0
 48   1   2   2 0.907256 0.136360 0.004834 1.048451  8.847508 2.438729 1.458115 1020.390625 1012.398438   9   9 1.0    0       15     23     7         7        7      13            0            0
 48   1   3   3 1.230777 0.221802 0.005537 1.458115 10.305623 1.458115 2.231324 1029.820312 1023.535156  12  12 1.0    0       24     35     7         7       14      20            0            1
 48   1   4   4 1.138639 1.087150 0.005535 2.231324 12.536947 2.231324 0.578166 1031.261719 1025.035156  11  11 1.0    0       36     46     7         7       21      27            0            1
 48   1   5   5 0.512392 0.063893 0.001881 0.578166 13.115113 0.578166 0.921934 1025.320312 1017.425781   5   5 1.0    0       47     51     3         3       28      30            0            0
 48   1   6   6 0.807741 0.111428 0.002765 0.921934 14.037047 0.921934 0.571964 1026.894531 1019.007812   8   8 1.0    0       52     59     4         4       31      34            0            1
 48   1   7   7 0.505436 0.064513 0.002015 0.571964 14.609011 0.571964 0.576504 1025.371094 1017.476562   5   5 1.0    0       60     64     4         4       35      38            0            1
 48   1   8   8 0.505512 0.068138 0.002854 0.576504 15.185516 0.576504 0.000000 1025.523438 1017.476562   5   5 1.0    0       65     69     4         4       39      42            0            2
 49   3   1   1 1.145538 0.742176 0.000000 1.887714  1.887714 1.887714 0.000000 1026.988281 1018.882812  20  20 1.0   20        1     20     0         0        1       1            0            0
 49   2   1   1 2.151562 0.543323 0.008394 2.703279  4.590993 4.590993 1.878187 1052.117188 1046.671875  26  26 1.0   26        1     26    10        10        1      10            0            3
 49   2   2   2 1.457026 0.413139 0.008021 1.878187  6.469180 1.878187 0.000000 1046.851562 1039.847656  18  18 1.0   18       27     44    10        10       11      20            0            3
 49   1   1   1 1.473336 0.273207 0.004838 1.751381  6.342374 6.342374 3.041341 1041.128906 1033.253906  14  14 1.0    0        1     14     6         6        1       6            0            0
 49   1   2   2 1.009179 0.150004 0.003971 1.163153  9.383714 3.041341 1.325444 1021.320312 1015.230469  10  10 1.0    0       15     24     6         6        7      12            0            0
 49   1   3   3 1.127766 0.192748 0.004930 1.325444 10.709159 1.325444 1.348600 1036.484375 1031.656250  11  11 1.0    0       25     35     7         7       13      19            0            0
 49   1   4   4 1.134121 0.208987 0.005492 1.348600 12.057759 1.348600 0.576468 1040.261719 1034.460938  11  11 1.0    0       36     46     7         7       20      26            0            3
 49   1   5   5 0.507505 0.066820 0.002144 0.576468 12.634227 0.576468 0.808117 1035.835938 1027.898438   5   5 1.0    0       47     51     4         4       27      30            0            1
 49   1   6   6 0.704920 0.100990 0.002208 0.808117 13.442344 0.808117 1.226889 1037.125000 1029.144531   7   7 1.0    0       52     58     4         4       31      34            0            0
 49   1   7   7 1.055257 0.168302 0.003330 1.226889 14.669233 1.226889 0.831389 1040.773438 1033.097656  10  10 1.0    0       59     68     5         5       35      39            0            0
 49   1   8   8 0.723593 0.104022 0.003774 0.831389 15.500622 0.831389 0.000000 1039.558594 1031.660156   7   7 1.0    0       69     75     5         5       40      44            0            2

[19-01-2022_17-35-58] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-01-19_17-17-56_PS3_hcr_online_2_4_yield_preach_opt.xlsx

[19-01-2022_17-36-02] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-01-19_17-17-56_PS3_hcr_online_2_4_yield_preach_opt.dat

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[19-01-2022_17-36-02] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[19-01-2022_18-57-51] INFO :: __main__ >> Overall time: Real = 5995.0435511999995, Process = 1404.46875

[19-01-2022_18-57-51] INFO :: __main__ >> Exiting with code 0

