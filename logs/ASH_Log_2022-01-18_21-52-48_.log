[18-01-2022_21-52-48] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[18-01-2022_21-52-48] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[18-01-2022_21-52-48] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[18-01-2022_21-52-48] DEBUG :: __main__ >> Command line arguments:
'.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_problem_multi_puzzle_general.lp'
'.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_system_laws_tasking_complete.lp'
'-ao'
'verbose'
'-op'
'test'
'-cfn'
'--top_level=4'
'--bottom_level=4'

[18-01-2022_21-52-48] DEBUG :: __main__ >> Parsed command line arguments:
('files', ['.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_problem_multi_puzzle_general.lp', '.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_system_laws_tasking_complete.lp'])
('load_schema', None)
('config_file_naming', True)
('plan_file', './solutions/plans/ASH_Plan_2022-01-18_21-52-48.txt')
('log_file', './logs/ASH_Log_2022-01-18_21-52-48.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2022-01-18_21-52-48.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'verbose')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'test')
('experimental_runs', 1)
('initial_runs', 0)
('optimum', None)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', None)
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', False)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('problem_space_level', 1)
('top_level', 4)
('bottom_level', 4)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('online_method', 'ground-first')
('division_strategy', 'none')
('division_strategy_bounds', None)
('bound_type', 'incremental_time')
('save_grounding', False)
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', False)
('divide_tasks_on_final_goal_intermediate_achievement_ordering', False)
('final_goal_intermediate_achievement_ordering_preferences', None)
('positive_final_goal_preemptive_achievement', None)
('negative_final_goal_preemptive_achievement', None)
('final_goal_preemptive_achievement_mode', 'heuristic')

[18-01-2022_21-52-48] DEBUG :: __main__ >> Configuration file output file naming enabled: 

[18-01-2022_21-52-49] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [.\problems\blocks_world_plus\multi_puzzle\BWP_problem_multi_puzzle_general.lp
                .\problems\blocks_world_plus\multi_puzzle\BWP_system_laws_tasking_complete.lp]

[18-01-2022_21-52-49] DEBUG :: core.Planner >> The domain files ['.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_problem_multi_puzzle_general.lp', '.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_system_laws_tasking_complete.lp'] were loaded successfully, contain all domain program parts, and contain problem program parts: {'static_state': True, 'entities': True, 'initial_state': True, 'goal_state': True}.

[18-01-2022_21-52-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%                                         .
%%                                         .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Variables for changing number of puzzles

%% We test the blocks world plus with 1, 3 and 5 puzzles
total_puzzles(2).
% total_puzzles(3).
% total_puzzles(5).

%% There are 2 or 3 towers per blocks world puzzle
towers_per_puzzle(2).
% towers_per_puzzle(3).

%% There are between 3 and 5 blocks per tower
blocks_per_tower(3).
% blocks_per_tower(4).
% blocks_per_tower(5).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Cell connections between rooms
is(1, connected(((starting_room, 1), 1), ((hallway, 1), 1))).

is(1, connected(((store_room, N), 1), ((hallway, N), 0))) :- puzzle_number(N).
is(1, connected(((hallway, N), 2), ((puzzle_room, N), 0))) :- puzzle_number(N).

is(1, connected(((hallway, N), 1), ((hallway, N + 1), 1))) :- puzzle_number(N).

% is(1, connected_by_door(((starting_room, 1), door), ((starting_room, 1), 1), ((hallway, 1), 1))).

is(1, connected_by_door(((store_room, N), door), ((store_room, N), 1), ((hallway, N), 0))) :- puzzle_number(N).
is(1, connected_by_door(((puzzle_room, N), door), ((hallway, N), 2), ((puzzle_room, N), 0))) :- puzzle_number(N).

% is(1, connected_by_door(((hallway, N + 1), door), ((hallway, N), 1), ((hallway, N + 1), 1))) :- puzzle_number(N), puzzle_number(N + 1).

%% The door's handles are located on either side of it
is(1, in((((store_room, N), door), handle(inner)), ((store_room, N), 1))) :- puzzle_number(N).
is(1, in((((store_room, N), door), handle(outer)), ((hallway, N), 0))) :- puzzle_number(N).

is(1, in((((puzzle_room, N), door), handle(inner)), ((puzzle_room, N), 0))) :- puzzle_number(N).
is(1, in((((puzzle_room, N), door), handle(outer)), ((hallway, N), 2))) :- puzzle_number(N).

% is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
% is(1, in(starting_room_door_handle_outer, (hallway, 1))).

%% Block colouring
% is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
%                                       insta_of(AL, block, (BLOCK, N)),
%                                       V = (N \ (N_B * N_T)), V <= N_B,
%                                       blocks_per_tower(N_B), towers_per_puzzle(N_T), al(AL).
% is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
%                                        insta_of(AL, block, (BLOCK, N)),
%                                        V = (N \ (N_B * N_T)), V > N_B, V <= (N_B * 2),
%                                        blocks_per_tower(N_B), towers_per_puzzle(N_T), al(AL).
% is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
%                                          insta_of(AL, block, (BLOCK, N)),
%                                          N > 6, N <= 9, al(AL).

is(AL, colour_of((block, 1), red)) :- al(AL).
is(AL, colour_of((block, 2), red)) :- al(AL).
is(AL, colour_of((block, 3), red)) :- al(AL).
is(AL, colour_of((block, 7), red)) :- al(AL).
is(AL, colour_of((block, 8), red)) :- al(AL).
is(AL, colour_of((block, 9), red)) :- al(AL).
is(AL, colour_of((block, 4), blue)) :- al(AL).
is(AL, colour_of((block, 5), blue)) :- al(AL).
is(AL, colour_of((block, 6), blue)) :- al(AL).
is(AL, colour_of((block, 10), blue)) :- al(AL).
is(AL, colour_of((block, 11), blue)) :- al(AL).
is(AL, colour_of((block, 12), blue)) :- al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room, 1), 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(((puzzle_room, N), table)), ((puzzle_room, N), 1), 0) :- puzzle_number(N).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, (N * 6) - 5)), (((puzzle_room, N), table), left), 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 4)), (((puzzle_room, N), table), right), 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 3)), (block, (N * 6) - 5), 0) :- puzzle_number(N).

%% The other three blocks are on the floor in the store room
holds(1, in((block, (N * 6) - 2)), ((store_room, N), 0), 0) :- puzzle_number(N).
holds(1, in((block, (N * 6) - 1)), ((store_room, N), 0), 0) :- puzzle_number(N).
holds(1, in((block, (N * 6) - 0)), ((store_room, N), 0), 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 2)), nothing, 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 1)), nothing, 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 0)), nothing, 0) :- puzzle_number(N).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_puzzle(TABLE), true, true) :- insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete_puzzle(TABLE), true, true) :- insta_of(AL, table, TABLE), al(AL).
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, (N * 6) - 3)), (((puzzle_room, N), table), left), true) :- puzzle_number(N).
final_goal(1, on((block, (N * 6) - 0)), (((puzzle_room, N), table), right), true) :- puzzle_number(N).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal_order(AL, complete_puzzle(TABLE), true, true, N) :- insta_of(AL, table, TABLE), TABLE = ((_, N), _), al(AL).
% goal_order(AL, complete_tower(COLOUR, TABLE), true, true, N) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), TABLE = ((_, N), _), al(AL).

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_arm, manipulator_arm_2).

entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_limb, manipulator_limb_2).

entity(manipulator_end, manipulator_end_1).
entity(manipulator_end, manipulator_end_2).

puzzle_number(1..N) :- total_puzzles(N).
tower_number(1..N) :- towers_per_puzzle(N).

%% Define blocks
block_number(1..B_N) :- B_N = P_N * T_P * B_T, total_puzzles(P_N), towers_per_puzzle(T_P), blocks_per_tower(B_T).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, (starting_room, 1)).
entity(room, (store_room, N)) :- puzzle_number(N).
entity(room, (puzzle_room, N)) :- puzzle_number(N).
entity(room, (hallway, N)) :- puzzle_number(N).

%% All the rooms have two cells except the hallway which has three
declare_room_size(starting_room, 2).
declare_room_size(store_room, 2).
declare_room_size(hallway, 3).
declare_room_size(puzzle_room, 2).
entity(cell, (ROOM, 0..MAX)) :- entity(room, ROOM), ROOM = (TYPE, N), declare_room_size(TYPE, MAX), puzzle_number(N).

%% The is one door for each room except the starting room
entity(door, (ROOM, door)) :- entity(room, ROOM), ROOM != (starting_room, 1).

%% Each door has two handles
declare_handle(inner;outer).
entity(handle, (D, handle(H))) :- entity(door, D), declare_handle(H).

%% There is one table in each puzzle room
entity(table, (ROOM, table)) :- entity(room, ROOM), ROOM = (TYPE, N), TYPE = puzzle_room, puzzle_number(N).

%% The table has three sides
declare_table_side(left;middle;right).
entity(side, (TABLE, SIDE)) :- declare_table_side(SIDE), entity(table, TABLE).

%% Create available block colours and assign each colour to exactly one tower number
declare_colour(red;blue) :- towers_per_puzzle(2).
declare_colour(red;blue;yellow) :- towers_per_puzzle(3).
entity(colour, C) :- declare_colour(C).
% { tower_colour(T_N, C) } :- tower_number(T_N), declare_colour(C).
% :- not { tower_colour(T_N, C) : declare_colour(C) } = 1, tower_number(T_N).
% :- not { tower_colour(T_N, C) : tower_number(T_N) } <= 1, declare_colour(C).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, CELL)) :- entity(cell, (ROOM, CELL)), entity(room, ROOM).

%% Relations between the puzzle room door and its handles
ancestry_relation(DOOR, (DOOR, HANDLE)) :- entity(handle, (DOOR, HANDLE)), entity(door, DOOR).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(TABLE, (TABLE, SIDE)) :- entity(side, (TABLE, SIDE)), entity(table, TABLE).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const tasking_2 = 5.
#const tasking_1 = 4.
#const reduc = 3. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking).
model_type(4, tasking).
model_type(3, reduced).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by tasking
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted by refinement
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < tasking_1, AL_2 < tasking_1,
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= tasking_1,
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%% A puzzle table is complete if it has a complete tower of each available colour on it
fluent(AL, defined, complete_puzzle(TABLE), B) :- insta_of(AL, table, TABLE),
                                                  sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < tasking_1, sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < tasking_1, sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < tasking_1, AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < tasking_1, sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < tasking_1, sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < tasking_1, AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                            AL = tasking_1, sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                            AL = tasking_1, sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        AL >= tasking_1, sl(AL).

action(AL, concurrent, transportation, ROBO, transport_object_to(OBJ, L)) :- insta_of(AL, armed_robot, ROBO),
                                                                             insta_of(AL, graspable, OBJ),
                                                                             OBJ != nothing,
                                                                             insta_of(AL, location, L),
                                                                             AL = tasking_2, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% effect(AL, ROBO, transport_object_to(OBJ, L), in(ROBO), L) :- action(AL, _, _, ROBO, transport_object_to(OBJ, L)),
%                                                               fluent(AL, inertial, in(ROBO), L),
%                                                               insta_of(AL, robot, ROBO),
%                                                               insta_of(AL, graspable, OBJ),
%                                                               insta_of(AL, location, L),
%                                                               AL = tasking_2, pl(AL).

effect(AL, ROBO, transport_object_to(OBJ, L), in(OBJ), L) :- action(AL, _, _, ROBO, transport_object_to(OBJ, L)),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             insta_of(AL, robot, ROBO),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             AL = tasking_2, pl(AL).

precond(AL, ROBO, transport_object_to(OBJ, L_1), in(OBJ), L_2, true, t) :- holds(AL, in(ROBO), L_2, t - 1),
                                                                           action(AL, _, _, ROBO, transport_object_to(OBJ, L_1)),
                                                                           fluent(AL, inertial, in(ROBO), L_2),
                                                                           fluent(AL, inertial, in(OBJ), L_2),
                                                                           insta_of(AL, robot, ROBO),
                                                                           insta_of(AL, graspable, OBJ),
                                                                           insta_of(AL, location, L_1),
                                                                           insta_of(AL, location, L_2),
                                                                           AL = tasking_2, pl(AL).

precond(AL, ROBO, transport_object_to(OBJ, L_1), in(ROBO), L_2, true, t) :- holds(AL, in(OBJ), L_2, t - 1),
                                                                            action(AL, _, _, ROBO, transport_object_to(OBJ, L_1)),
                                                                            fluent(AL, inertial, in(ROBO), L_2),
                                                                            fluent(AL, inertial, in(OBJ), L_2),
                                                                            insta_of(AL, robot, ROBO),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            insta_of(AL, location, L_1),
                                                                            insta_of(AL, location, L_2),
                                                                            AL = tasking_2, pl(AL).

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL = tasking_1, pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL = tasking_1, pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL = tasking_1, pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= tasking_1, pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= tasking_1, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL = tasking_1, pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL = tasking_1, pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL = tasking_1, pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL = tasking_1, pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= tasking_1, pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= tasking_1, pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= tasking_1, pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= tasking_1, pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= tasking_1, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
:- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
                      fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                      insta_of(AL_1, graspable, OBJ) },
   M = #count { ARM : desce_of(AL_2, ROBO, ARM),
                      insta_of(AL_2, manipulator_arm, ARM),
                      al(AL_2), AL_1 >= AL_2 },
   N > M, block_number(N), block_number(M),
   insta_of(AL_1, robot, ROBO),
   AL_1 >= tasking_1, sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                               fluent(AL, defined, tower_base(BASE, TABLE), true),
                                               fluent(AL, inertial, on(BASE), TABLE),
                                               insta_of(AL, block, BASE),
                                               insta_of(AL, table, TABLE),
                                               sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                               fluent(AL, defined, tower_base(BASE, TABLE), true),
                                               fluent(AL, inertial, on(BASE), SURFACE),
                                               desce_of(AL, TABLE, SURFACE),
                                               insta_of(AL, block, BASE),
                                               insta_of(AL, table, TABLE),
                                               insta_of(AL, surface, SURFACE),
                                               sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

holds(AL, complete_puzzle(TABLE), true, t) :- N = #count { COLOUR : holds(AL, complete_tower(COLOUR, TABLE), true, t),
                                                                    fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                                    insta_of(AL, colour, COLOUR) },
                                              towers_per_puzzle(N),
                                              fluent(AL, defined, complete_puzzle(TABLE), true),
                                              insta_of(AL, table, TABLE),
                                              sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= tasking_1,
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= tasking_1,
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 391 rules

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.0034768000000000576s

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:946:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:959:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:960:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:964:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:965:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:966:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:970:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:971:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:972:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:976:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:977:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:989:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:990:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:991:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:997:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:998:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1003:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:1004:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.011828s.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001401s with result Satisfiable.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[18-01-2022_21-52-49] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.011828s, Solving = 0.001401s, Total = 0.013229s, Memory = (RSS = 105.585938Mb, VMS = 92.437500Mb)
Final Model :: Total atoms = 76, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-01-2022_21-52-49] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-5] instantiated successfully

[18-01-2022_21-52-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if;
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively,
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either;
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete;
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level;
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total quantity of actions in a plan, False to disable.
%%%%    order_fgoals: bool - A Boolean, True to enable enforce the task critical final-goal literal intermediate ordering preferences as a minimisation problem, False to disable.
%%%%    preempt_pos_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-mptively achieving positive final-goal literals, False to disable.
%%%%    preempt_neg_fgoals: bool - A Boolean, True to enable the search heuristic that prefers pre-emptively achieving negative final-goal literals, False to disable.
%%%%    preempt_mode: {heuristic, optimise} - A string defining the type of statements used to enforce pre-emptive achievement of final-goal literals.
%%%%                                          Heuristic uses domain heuristic rules which affect solving throughout all search steps.
%%%%                                          Optimise uses weak constraint rules which maximise pre-emptive achievement of final-goals in the end state only.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Eliminate any unnecessary actions from the plan by minimising the total quantity of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final-goal intermediate achievement ordering preferences;
%%      - Solve the perference order problem as a minimisation problem,
%%      - TODO
% :~ not goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
%    fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * step) @ 4, AL, F, V, B]
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B),
   fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M), order_fgoals = true. [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B),
                fluent(AL, _, F, V), pl(AL), boolean(B), order_fgoals = true.

%% Final goal preemptive achievement heuristics;
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true), fluent(AL, inertial, F, V), pl(AL),
                                        step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = heuristic. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
                                        fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = heuristic. [10 @ 0, false]

:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, true),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_pos_fgoals = true, preempt_mode = optimise. [-1 @ 0, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), final_goal(AL, F, V, false),
   fluent(AL, inertial, F, V), pl(AL), step > start, preempt_neg_fgoals = true, preempt_mode = optimise. [1 @ -1, AL, ROBOT, A, F, V, step]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Solution checking constraint - The problem is satisfiable only iff all currently included goals are achieved
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- step > minimum_search_length_bound, incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
% :- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Enforce conformance constraints by ensuring plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    first: int - A natural number defining the first inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    last: int - A natural number defining the last inclusive in sequence sub-goal stage index of the current conformance refinement planning problem.
%%%%    type: {simultaneous, sequential} - A string defining the sub-goal stage achievement type of subgoal stages.
%%%%    yield: bool - A Boolean, True to enable sequential yield planning mode, False to use standard planning mode.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint
%% and the step it was first commited at during sequential yield planning progression through the goal sequence.
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given;
%%          - Explicitly and fixed iff this program grounding will not be saved,
%%          - By a dynamic external context function (allowing it to be modified) if this program
%%            grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first),
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% The current sub-goal stage sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

%% Search heuristic that prefers planning actions that achieve a sub-goal literal in the current sub-goal stage;
%%      - This works only for sub-goal stages containing literals that are indentical to the state literals at the current planning level.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%                                         ^
%%                                         .
%%                                         .

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Variables for changing number of puzzles

%% We test the blocks world plus with 1, 3 and 5 puzzles
total_puzzles(2).
% total_puzzles(3).
% total_puzzles(5).

%% There are 2 or 3 towers per blocks world puzzle
towers_per_puzzle(2).
% towers_per_puzzle(3).

%% There are between 3 and 5 blocks per tower
blocks_per_tower(3).
% blocks_per_tower(4).
% blocks_per_tower(5).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Cell connections between rooms
is(1, connected(((starting_room, 1), 1), ((hallway, 1), 1))).

is(1, connected(((store_room, N), 1), ((hallway, N), 0))) :- puzzle_number(N).
is(1, connected(((hallway, N), 2), ((puzzle_room, N), 0))) :- puzzle_number(N).

is(1, connected(((hallway, N), 1), ((hallway, N + 1), 1))) :- puzzle_number(N).

% is(1, connected_by_door(((starting_room, 1), door), ((starting_room, 1), 1), ((hallway, 1), 1))).

is(1, connected_by_door(((store_room, N), door), ((store_room, N), 1), ((hallway, N), 0))) :- puzzle_number(N).
is(1, connected_by_door(((puzzle_room, N), door), ((hallway, N), 2), ((puzzle_room, N), 0))) :- puzzle_number(N).

% is(1, connected_by_door(((hallway, N + 1), door), ((hallway, N), 1), ((hallway, N + 1), 1))) :- puzzle_number(N), puzzle_number(N + 1).

%% The door's handles are located on either side of it
is(1, in((((store_room, N), door), handle(inner)), ((store_room, N), 1))) :- puzzle_number(N).
is(1, in((((store_room, N), door), handle(outer)), ((hallway, N), 0))) :- puzzle_number(N).

is(1, in((((puzzle_room, N), door), handle(inner)), ((puzzle_room, N), 0))) :- puzzle_number(N).
is(1, in((((puzzle_room, N), door), handle(outer)), ((hallway, N), 2))) :- puzzle_number(N).

% is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
% is(1, in(starting_room_door_handle_outer, (hallway, 1))).

%% Block colouring
% is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
%                                       insta_of(AL, block, (BLOCK, N)),
%                                       V = (N \ (N_B * N_T)), V <= N_B,
%                                       blocks_per_tower(N_B), towers_per_puzzle(N_T), al(AL).
% is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
%                                        insta_of(AL, block, (BLOCK, N)),
%                                        V = (N \ (N_B * N_T)), V > N_B, V <= (N_B * 2),
%                                        blocks_per_tower(N_B), towers_per_puzzle(N_T), al(AL).
% is(AL, colour_of((BLOCK, N), yellow)) :- static(AL, colour_of((BLOCK, N), yellow)),
%                                          insta_of(AL, block, (BLOCK, N)),
%                                          N > 6, N <= 9, al(AL).

is(AL, colour_of((block, 1), red)) :- al(AL).
is(AL, colour_of((block, 2), red)) :- al(AL).
is(AL, colour_of((block, 3), red)) :- al(AL).
is(AL, colour_of((block, 7), red)) :- al(AL).
is(AL, colour_of((block, 8), red)) :- al(AL).
is(AL, colour_of((block, 9), red)) :- al(AL).
is(AL, colour_of((block, 4), blue)) :- al(AL).
is(AL, colour_of((block, 5), blue)) :- al(AL).
is(AL, colour_of((block, 6), blue)) :- al(AL).
is(AL, colour_of((block, 10), blue)) :- al(AL).
is(AL, colour_of((block, 11), blue)) :- al(AL).
is(AL, colour_of((block, 12), blue)) :- al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), ((starting_room, 1), 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(((puzzle_room, N), table)), ((puzzle_room, N), 1), 0) :- puzzle_number(N).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, (N * 6) - 5)), (((puzzle_room, N), table), left), 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 4)), (((puzzle_room, N), table), right), 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 3)), (block, (N * 6) - 5), 0) :- puzzle_number(N).

%% The other three blocks are on the floor in the store room
holds(1, in((block, (N * 6) - 2)), ((store_room, N), 0), 0) :- puzzle_number(N).
holds(1, in((block, (N * 6) - 1)), ((store_room, N), 0), 0) :- puzzle_number(N).
holds(1, in((block, (N * 6) - 0)), ((store_room, N), 0), 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 2)), nothing, 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 1)), nothing, 0) :- puzzle_number(N).
holds(1, on((block, (N * 6) - 0)), nothing, 0) :- puzzle_number(N).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete_puzzle(TABLE), true, true) :- insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, complete_tower(COLOUR, TABLE)) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, unordered_tower(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE, TABLE)) :- insta_of(AL, block, BASE), insta_of(AL, table, TABLE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete_puzzle(TABLE), true, true) :- insta_of(AL, table, TABLE), al(AL).
final_goal(AL, complete_tower(COLOUR, TABLE), true, true) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), al(AL).
final_goal(1, on((block, (N * 6) - 3)), (((puzzle_room, N), table), left), true) :- puzzle_number(N).
final_goal(1, on((block, (N * 6) - 0)), (((puzzle_room, N), table), right), true) :- puzzle_number(N).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

goal_order(AL, complete_puzzle(TABLE), true, true, N) :- insta_of(AL, table, TABLE), TABLE = ((_, N), _), al(AL).
% goal_order(AL, complete_tower(COLOUR, TABLE), true, true, N) :- insta_of(AL, colour, COLOUR), insta_of(AL, table, TABLE), TABLE = ((_, N), _), al(AL).

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_arm, manipulator_arm_2).

entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_limb, manipulator_limb_2).

entity(manipulator_end, manipulator_end_1).
entity(manipulator_end, manipulator_end_2).

puzzle_number(1..N) :- total_puzzles(N).
tower_number(1..N) :- towers_per_puzzle(N).

%% Define blocks
block_number(1..B_N) :- B_N = P_N * T_P * B_T, total_puzzles(P_N), towers_per_puzzle(T_P), blocks_per_tower(B_T).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, (starting_room, 1)).
entity(room, (store_room, N)) :- puzzle_number(N).
entity(room, (puzzle_room, N)) :- puzzle_number(N).
entity(room, (hallway, N)) :- puzzle_number(N).

%% All the rooms have two cells except the hallway which has three
declare_room_size(starting_room, 2).
declare_room_size(store_room, 2).
declare_room_size(hallway, 3).
declare_room_size(puzzle_room, 2).
entity(cell, (ROOM, 0..MAX)) :- entity(room, ROOM), ROOM = (TYPE, N), declare_room_size(TYPE, MAX), puzzle_number(N).

%% The is one door for each room except the starting room
entity(door, (ROOM, door)) :- entity(room, ROOM), ROOM != (starting_room, 1).

%% Each door has two handles
declare_handle(inner;outer).
entity(handle, (D, handle(H))) :- entity(door, D), declare_handle(H).

%% There is one table in each puzzle room
entity(table, (ROOM, table)) :- entity(room, ROOM), ROOM = (TYPE, N), TYPE = puzzle_room, puzzle_number(N).

%% The table has three sides
declare_table_side(left;middle;right).
entity(side, (TABLE, SIDE)) :- declare_table_side(SIDE), entity(table, TABLE).

%% Create available block colours and assign each colour to exactly one tower number
declare_colour(red;blue) :- towers_per_puzzle(2).
declare_colour(red;blue;yellow) :- towers_per_puzzle(3).
entity(colour, C) :- declare_colour(C).
% { tower_colour(T_N, C) } :- tower_number(T_N), declare_colour(C).
% :- not { tower_colour(T_N, C) : declare_colour(C) } = 1, tower_number(T_N).
% :- not { tower_colour(T_N, C) : tower_number(T_N) } <= 1, declare_colour(C).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, CELL)) :- entity(cell, (ROOM, CELL)), entity(room, ROOM).

%% Relations between the puzzle room door and its handles
ancestry_relation(DOOR, (DOOR, HANDLE)) :- entity(handle, (DOOR, HANDLE)), entity(door, DOOR).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(TABLE, (TABLE, SIDE)) :- entity(side, (TABLE, SIDE)), entity(table, TABLE).%% At first, it might seem effective to provide a tasking model, formed by abstracting away the robot's manipulator arms.
%% This means the robot no longer needs to reason about grasping objects, which simplifies the manipulation problem.
%% However, the abstract plan lengths are not reduced hugely by this abstraction.
%% In particular, the transportation problem is still quite complex because each block must still be collected individually.
%% We also still have to consider how many objects the robot could actually hold at any given time.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 5.

%% Abstraction types
#const tasking_2 = 5.
#const tasking_1 = 4.
#const reduc = 3. % Refine both
#const conde = 2. % Refine both
#const groun = 1. % Refine both
model_type(5, tasking).
model_type(4, tasking).
model_type(3, reduced).
model_type(2, condensed).
model_type(1, ground).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(5, robot).
class(5, armed_robot).
class(5, location).
class(5, room).
class(5, object).
class(5, grounded).
class(5, graspable).
class(5, placeable).
class(5, block).
class(5, surface).
class(5, table).
class(5, colour).

%% Classes deleted by tasking
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted by refinement
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               AL_1 < tasking_1, AL_2 < tasking_1,
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%% In the redefined model robots can be transporting objects
fluent(AL_1, inertial, transporting(ROBO, OBJ), B) :- insta_of(AL_2, armed_robot, ROBO),
                                                      insta_of(AL_1, graspable, OBJ), OBJ != nothing,
                                                      AL_1 >= tasking_1,
                                                      sl(AL_2), sl(AL_1),
                                                      AL_2 >= AL_1,
                                                      boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                   insta_of(AL, table, TABLE),
                                                   sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 insta_of(AL, table, TABLE),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE, TABLE), B) :- insta_of(AL, block, BASE),
                                                        insta_of(AL, table, TABLE),
                                                        sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete_tower(COLOUR, TABLE), B) :- insta_of(AL, colour, COLOUR),
                                                         insta_of(AL, table, TABLE),
                                                         sl(AL), boolean(B).

%% A puzzle table is complete if it has a complete tower of each available colour on it
fluent(AL, defined, complete_puzzle(TABLE), B) :- insta_of(AL, table, TABLE),
                                                  sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                AL < tasking_1, sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  AL < tasking_1, sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < tasking_1, AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       AL < tasking_1, sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               AL < tasking_1, sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < tasking_1, AL < reduc, sl(AL).

%% In the redefined model robots can collect objects
action(AL, concurrent, manipulation, ROBO, collect(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                            AL = tasking_1, sl(AL).

%% In the redefined model robots can deposit objects
action(AL, concurrent, manipulation, ROBO, deposit(OBJ)) :- insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                            AL = tasking_1, sl(AL).

%% In the redefined model robots can pick up and put down objects with a single action
action(AL, concurrent, manipulation, ROBO, place_upon(OBJ, SURFACE)) :- insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        AL >= tasking_1, sl(AL).

action(AL, concurrent, transportation, ROBO, transport_object_to(OBJ, L)) :- insta_of(AL, armed_robot, ROBO),
                                                                             insta_of(AL, graspable, OBJ),
                                                                             OBJ != nothing,
                                                                             insta_of(AL, location, L),
                                                                             AL = tasking_2, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% effect(AL, ROBO, transport_object_to(OBJ, L), in(ROBO), L) :- action(AL, _, _, ROBO, transport_object_to(OBJ, L)),
%                                                               fluent(AL, inertial, in(ROBO), L),
%                                                               insta_of(AL, robot, ROBO),
%                                                               insta_of(AL, graspable, OBJ),
%                                                               insta_of(AL, location, L),
%                                                               AL = tasking_2, pl(AL).

effect(AL, ROBO, transport_object_to(OBJ, L), in(OBJ), L) :- action(AL, _, _, ROBO, transport_object_to(OBJ, L)),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             insta_of(AL, robot, ROBO),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             AL = tasking_2, pl(AL).

precond(AL, ROBO, transport_object_to(OBJ, L_1), in(OBJ), L_2, true, t) :- holds(AL, in(ROBO), L_2, t - 1),
                                                                           action(AL, _, _, ROBO, transport_object_to(OBJ, L_1)),
                                                                           fluent(AL, inertial, in(ROBO), L_2),
                                                                           fluent(AL, inertial, in(OBJ), L_2),
                                                                           insta_of(AL, robot, ROBO),
                                                                           insta_of(AL, graspable, OBJ),
                                                                           insta_of(AL, location, L_1),
                                                                           insta_of(AL, location, L_2),
                                                                           AL = tasking_2, pl(AL).

precond(AL, ROBO, transport_object_to(OBJ, L_1), in(ROBO), L_2, true, t) :- holds(AL, in(OBJ), L_2, t - 1),
                                                                            action(AL, _, _, ROBO, transport_object_to(OBJ, L_1)),
                                                                            fluent(AL, inertial, in(ROBO), L_2),
                                                                            fluent(AL, inertial, in(OBJ), L_2),
                                                                            insta_of(AL, robot, ROBO),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            insta_of(AL, location, L_1),
                                                                            insta_of(AL, location, L_2),
                                                                            AL = tasking_2, pl(AL).

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%% In the redefined model, when a robot collects an object it is transporting that object
effect(AL, ROBO, collect(OBJ), transporting(ROBO, OBJ), true) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                                 fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, graspable, OBJ),
                                                                 AL = tasking_1, pl(AL).

%% In the redefined model, when a robot collects an object the object is on nothing
effect(AL, ROBO, collect(OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, collect(OBJ)),
                                                    fluent(AL, inertial, on(OBJ), nothing),
                                                    insta_of(AL, armed_robot, ROBO),
                                                    insta_of(AL, graspable, OBJ),
                                                    AL = tasking_1, pl(AL).

%% In the redefined model, when a robot deposits an object it is no longer transporting that object
effect(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, deposit(OBJ)),
                                                                  fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                  insta_of(RL, armed_robot, ROBO),
                                                                  insta_of(RL, graspable, OBJ),
                                                                  AL = tasking_1, pl(AL).

%% In the redefined model, when a robot places an object upon a surface the object is on that surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                fluent(AL, inertial, on(OBJ), SURFACE),
                                                                OBJ != SURFACE, SURFACE != nothing,
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, placeable, OBJ),
                                                                insta_of(AL, surface, SURFACE),
                                                                AL >= tasking_1, pl(AL).

%% In the redefined model, when a robot places an object upon a surface
effect(AL, ROBO, place_upon(OBJ, SURFACE), transporting(ROBO, OBJ), false) :- action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                              fluent(AL, inertial, transporting(ROBO, OBJ), false),
                                                                              OBJ != SURFACE, SURFACE != nothing,
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, placeable, OBJ),
                                                                              insta_of(AL, surface, SURFACE),
                                                                              AL >= tasking_1, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
#program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%% An armed robot can only collect an object when it is in the same location as that object
precond(AL, ROBO, collect(OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                        action(AL, _, _, ROBO, collect(OBJ)),
                                                        fluent(AL, inertial, in(ROBO), L),
                                                        fluent(AL, inertial, in(OBJ), L),
                                                        insta_of(AL, armed_robot, ROBO),
                                                        insta_of(AL, graspable, OBJ),
                                                        insta_of(AL, location, L),
                                                        AL = tasking_1, pl(AL).

precond(AL, ROBO, collect(OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                         action(AL, _, _, ROBO, collect(OBJ)),
                                                         fluent(AL, inertial, in(ROBO), L),
                                                         fluent(AL, inertial, in(OBJ), L),
                                                         insta_of(AL, armed_robot, ROBO),
                                                         insta_of(AL, graspable, OBJ),
                                                         insta_of(AL, location, L),
                                                         AL = tasking_1, pl(AL).

%% An armed robot cannot collect an object that has another object on top of it
precond(AL, ROBO, collect(OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                              action(AL, _, _, ROBO, collect(OBJ_1)),
                                                              fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                              insta_of(AL, armed_robot, ROBO),
                                                              insta_of(AL, placeable, OBJ_1),
                                                              insta_of(AL, surface, OBJ_1),
                                                              insta_of(AL, surface, SURFACE),
                                                              insta_of(AL, placeable, OBJ_2),
                                                              AL = tasking_1, pl(AL).

%% An armed robot can only deposit an object when it is transporting that object
precond(AL, ROBO, deposit(OBJ), transporting(ROBO, OBJ), true, true) :- OBJ != nothing,
                                                                        action(AL, _, _, ROBO, deposit(OBJ)),
                                                                        fluent(AL, inertial, transporting(ROBO, OBJ), true),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, graspable, OBJ),
                                                                        AL = tasking_1, pl(AL).

%% An armed robot can only place an object upon a surface when it is in the same location as both the object and the surface
precond(AL, ROBO, place_upon(OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                        holds(AL, in(OBJ), L, t - 1),
                                                                        action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                        fluent(AL, inertial, in(SURFACE), L),
                                                                        fluent(AL, inertial, in(ROBO), L),
                                                                        fluent(AL, inertial, in(OBJ), L),
                                                                        insta_of(AL, armed_robot, ROBO),
                                                                        insta_of(AL, placeable, OBJ),
                                                                        insta_of(AL, surface, SURFACE),
                                                                        insta_of(AL, location, L),
                                                                        AL >= tasking_1, pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                    holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    fluent(AL, inertial, in(OBJ), L),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    AL >= tasking_1, pl(AL).

precond(AL, ROBO, place_upon(OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                     holds(AL, in(OBJ), L, t - 1),
                                                                     action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                     fluent(AL, inertial, in(SURFACE), L),
                                                                     fluent(AL, inertial, in(ROBO), L),
                                                                     fluent(AL, inertial, in(OBJ), L),
                                                                     insta_of(AL, armed_robot, ROBO),
                                                                     insta_of(AL, placeable, OBJ),
                                                                     insta_of(AL, surface, SURFACE),
                                                                     insta_of(AL, location, L),
                                                                     AL >= tasking_1, pl(AL).

%% An armed robot cannot place an object upon a surface if there is another object on top of it
precond(AL, ROBO, place_upon(OBJ_1, SURFACE), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ_1, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, surface, OBJ_1),
                                                                          insta_of(AL, surface, SURFACE),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          AL >= tasking_1, pl(AL).

%% An armed robot cannot place an object upon another object that is on nothing
precond(AL, ROBO, place_upon(OBJ_1, OBJ_2), on(OBJ_2), nothing, false) :- OBJ_1 != OBJ_2,
                                                                          action(AL, _, _, ROBO, place_upon(OBJ, SURFACE)),
                                                                          fluent(AL, inertial, on(OBJ_2), nothing),
                                                                          insta_of(AL, armed_robot, ROBO),
                                                                          insta_of(AL, placeable, OBJ_1),
                                                                          insta_of(AL, placeable, OBJ_2),
                                                                          insta_of(AL, surface, OBJ_2),
                                                                          AL >= tasking_1, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%% A robot cannot transport more objects than it has manipulator arms
:- N = #count { OBJ : holds(AL_1, transporting(ROBO, OBJ), true, t),
                      fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                      insta_of(AL_1, graspable, OBJ) },
   M = #count { ARM : desce_of(AL_2, ROBO, ARM),
                      insta_of(AL_2, manipulator_arm, ARM),
                      al(AL_2), AL_1 >= AL_2 },
   N > M, block_number(N), block_number(M),
   insta_of(AL_1, robot, ROBO),
   AL_1 >= tasking_1, sl(AL_1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either;
%%      - On a table,
%%      - On a descenant surface of a table.
holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                               fluent(AL, defined, tower_base(BASE, TABLE), true),
                                               fluent(AL, inertial, on(BASE), TABLE),
                                               insta_of(AL, block, BASE),
                                               insta_of(AL, table, TABLE),
                                               sl(AL).

holds(AL, tower_base(BASE, TABLE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                               fluent(AL, defined, tower_base(BASE, TABLE), true),
                                               fluent(AL, inertial, on(BASE), SURFACE),
                                               desce_of(AL, TABLE, SURFACE),
                                               insta_of(AL, block, BASE),
                                               insta_of(AL, table, TABLE),
                                               insta_of(AL, surface, SURFACE),
                                               sl(AL).

%% A block is in a tower if it is either;
%%      - The base of the tower,
%%      - On a block that is in the tower.
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE, TABLE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE, TABLE), true),
                                            insta_of(AL, block, BASE),
                                            insta_of(AL, table, TABLE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE, TABLE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                                    holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                                    holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                                    holds(AL, tower_base(BASE, TABLE), true, t),
                                                    fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                                    fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                                    fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                    fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
                                                    BLOCK_1 = (block, N_1), block_number(N_1),
                                                    BLOCK_2 = (block, N_2), block_number(N_2),
                                                    BLOCK_1 != BLOCK_2, N_1 > N_2,
                                                    insta_of(AL, block, BLOCK_1),
                                                    insta_of(AL, block, BLOCK_2),
                                                    insta_of(AL, block, BASE),
                                                    insta_of(AL, table, TABLE),
                                                    sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete_tower(COLOUR, TABLE), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                                          is(AL, colour_of(BLOCK, COLOUR)),
                                                                          fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                                          static(AL, colour_of(BLOCK, COLOUR)),
                                                                          insta_of(AL, block, BLOCK) },
                                                     blocks_per_tower(N),
                                                     holds(AL, unordered_tower(BASE, TABLE), false, t),
                                                     holds(AL, tower_base(BASE, TABLE), true, t),
                                                     fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                     fluent(AL, defined, unordered_tower(BASE, TABLE), true),
                                                     fluent(AL, defined, tower_base(BASE, TABLE), true),
                                                     is(AL, colour_of(BASE, COLOUR)),
                                                     static(AL, colour_of(BASE, COLOUR)),
                                                     insta_of(AL, colour, COLOUR),
                                                     insta_of(AL, block, BASE),
                                                     insta_of(AL, table, TABLE),
                                                     sl(AL).

holds(AL, complete_puzzle(TABLE), true, t) :- N = #count { COLOUR : holds(AL, complete_tower(COLOUR, TABLE), true, t),
                                                                    fluent(AL, defined, complete_tower(COLOUR, TABLE), true),
                                                                    insta_of(AL, colour, COLOUR) },
                                              towers_per_puzzle(N),
                                              fluent(AL, defined, complete_puzzle(TABLE), true),
                                              insta_of(AL, table, TABLE),
                                              sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
#program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.

%% If a robot is transporting an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, transporting(ROBO, OBJ), true, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, transporting(ROBO, OBJ), true),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ),
                              insta_of(AL_4, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3.

%% If a robot is grasping an object with any of its graspers than it is transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), true, t) :- holds(AL_2, grasping(COMP), OBJ, t),
                                                 fluent(AL_1, inertial, transporting(ROBO, OBJ), true),
                                                 fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                 desce_of(AL_2, ROBO, COMP),
                                                 insta_of(AL_1, graspable, OBJ),
                                                 insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                 insta_of(AL_3, grasper, COMP),
                                                 insta_of(AL_4, robot, ROBO),
                                                 AL_1 >= tasking_1,
                                                 sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                 sl(AL_3), AL_3 >= AL_2,
                                                 sl(AL_4), AL_4 >= AL_1.

%% If a robot is not grasping an object with any of its manipulator arms then it is not transporting that object at the current and higher abstractions
holds(AL_1, transporting(ROBO, OBJ), false, t) :- 0 = #count { COMP : holds(AL_2, grasping(COMP), OBJ, t),
                                                                      fluent(AL_2, inertial, grasping(COMP), OBJ),
                                                                      desce_of(AL_2, ROBO, COMP),
                                                                      insta_of(AL_3, grasper, COMP),
                                                                      sl(AL_3), AL_3 >= AL_2 },
                                                  fluent(AL_1, inertial, transporting(ROBO, OBJ), false),
                                                  has_desce(AL_2, ROBO, grasper),
                                                  insta_of(AL_1, graspable, OBJ),
                                                  insta_of(AL_2, graspable, OBJ), OBJ != nothing,
                                                  insta_of(AL_4, robot, ROBO),
                                                  AL_1 >= tasking_1,
                                                  sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                                  sl(AL_4), AL_4 >= AL_1.

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[18-01-2022_21-52-49] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, order_fgoals, preempt_pos_fgoals, preempt_neg_fgoals, preempt_mode).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); minimise_actions = true. [1@2,ROBOT,A,step]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M); order_fgoals = true. [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); order_fgoals = true.
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = heuristic. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = heuristic. [10@0,false]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,true); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_pos_fgoals = true; preempt_mode = optimise. [-1@0,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); final_goal(AL,F,V,false); fluent(AL,inertial,F,V); pl(AL); step > start; preempt_neg_fgoals = true; preempt_mode = optimise. [1@-1,AL,ROBOT,A,F,V,step]
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- step > minimum_search_length_bound; incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program static_state.
total_puzzles(2).
towers_per_puzzle(2).
blocks_per_tower(3).
is(1,connected(((starting_room,1),1),((hallway,1),1))).
is(1,connected(((store_room,N),1),((hallway,N),0))) :- puzzle_number(N).
is(1,connected(((hallway,N),2),((puzzle_room,N),0))) :- puzzle_number(N).
is(1,connected(((hallway,N),1),((hallway,(N+1)),1))) :- puzzle_number(N).
is(1,connected_by_door(((store_room,N),door),((store_room,N),1),((hallway,N),0))) :- puzzle_number(N).
is(1,connected_by_door(((puzzle_room,N),door),((hallway,N),2),((puzzle_room,N),0))) :- puzzle_number(N).
is(1,in((((store_room,N),door),handle(inner)),((store_room,N),1))) :- puzzle_number(N).
is(1,in((((store_room,N),door),handle(outer)),((hallway,N),0))) :- puzzle_number(N).
is(1,in((((puzzle_room,N),door),handle(inner)),((puzzle_room,N),0))) :- puzzle_number(N).
is(1,in((((puzzle_room,N),door),handle(outer)),((hallway,N),2))) :- puzzle_number(N).
is(AL,colour_of((block,1),red)) :- al(AL).
is(AL,colour_of((block,2),red)) :- al(AL).
is(AL,colour_of((block,3),red)) :- al(AL).
is(AL,colour_of((block,7),red)) :- al(AL).
is(AL,colour_of((block,8),red)) :- al(AL).
is(AL,colour_of((block,9),red)) :- al(AL).
is(AL,colour_of((block,4),blue)) :- al(AL).
is(AL,colour_of((block,5),blue)) :- al(AL).
is(AL,colour_of((block,6),blue)) :- al(AL).
is(AL,colour_of((block,10),blue)) :- al(AL).
is(AL,colour_of((block,11),blue)) :- al(AL).
is(AL,colour_of((block,12),blue)) :- al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),((starting_room,1),0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(((puzzle_room,N),table)),((puzzle_room,N),1),0) :- puzzle_number(N).
holds(1,on((block,((N*6)-5))),(((puzzle_room,N),table),left),0) :- puzzle_number(N).
holds(1,on((block,((N*6)-4))),(((puzzle_room,N),table),right),0) :- puzzle_number(N).
holds(1,on((block,((N*6)-3))),(block,((N*6)-5)),0) :- puzzle_number(N).
holds(1,in((block,((N*6)-2))),((store_room,N),0),0) :- puzzle_number(N).
holds(1,in((block,((N*6)-1))),((store_room,N),0),0) :- puzzle_number(N).
holds(1,in((block,((N*6)-0))),((store_room,N),0),0) :- puzzle_number(N).
holds(1,on((block,((N*6)-2))),nothing,0) :- puzzle_number(N).
holds(1,on((block,((N*6)-1))),nothing,0) :- puzzle_number(N).
holds(1,on((block,((N*6)-0))),nothing,0) :- puzzle_number(N).
#program goal_state.
goal_fluent(AL,complete_puzzle(TABLE),true,true) :- insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,complete_tower(COLOUR,TABLE)) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,unordered_tower(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE,TABLE)) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete_puzzle(TABLE),true,true) :- insta_of(AL,table,TABLE); al(AL).
final_goal(AL,complete_tower(COLOUR,TABLE),true,true) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); al(AL).
final_goal(1,on((block,((N*6)-3))),(((puzzle_room,N),table),left),true) :- puzzle_number(N).
final_goal(1,on((block,((N*6)-0))),(((puzzle_room,N),table),right),true) :- puzzle_number(N).
#program entities.
goal_order(AL,complete_puzzle(TABLE),true,true,N) :- insta_of(AL,table,TABLE); TABLE = ((_,N),_); al(AL).
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_end,manipulator_end_2).
puzzle_number((1..N)) :- total_puzzles(N).
tower_number((1..N)) :- towers_per_puzzle(N).
block_number((1..B_N)) :- B_N = ((P_N*T_P)*B_T); total_puzzles(P_N); towers_per_puzzle(T_P); blocks_per_tower(B_T).
entity(block,(block,N)) :- block_number(N).
entity(room,(starting_room,1)).
entity(room,(store_room,N)) :- puzzle_number(N).
entity(room,(puzzle_room,N)) :- puzzle_number(N).
entity(room,(hallway,N)) :- puzzle_number(N).
declare_room_size(starting_room,2).
declare_room_size(store_room,2).
declare_room_size(hallway,3).
declare_room_size(puzzle_room,2).
entity(cell,(ROOM,(0..MAX))) :- entity(room,ROOM); ROOM = (TYPE,N); declare_room_size(TYPE,MAX); puzzle_number(N).
entity(door,(ROOM,door)) :- entity(room,ROOM); ROOM != (starting_room,1).
declare_handle(inner;outer).
entity(handle,(D,handle(H))) :- entity(door,D); declare_handle(H).
entity(table,(ROOM,table)) :- entity(room,ROOM); ROOM = (TYPE,N); TYPE = puzzle_room; puzzle_number(N).
declare_table_side(left;middle;right).
entity(side,(TABLE,SIDE)) :- declare_table_side(SIDE); entity(table,TABLE).
declare_colour(red;blue) :- towers_per_puzzle(2).
declare_colour(red;blue;yellow) :- towers_per_puzzle(3).
entity(colour,C) :- declare_colour(C).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,CELL)) :- entity(cell,(ROOM,CELL)); entity(room,ROOM).
ancestry_relation(DOOR,(DOOR,HANDLE)) :- entity(handle,(DOOR,HANDLE)); entity(door,DOOR).
ancestry_relation(TABLE,(TABLE,SIDE)) :- entity(side,(TABLE,SIDE)); entity(table,TABLE).
#program domain_sorts.
#const abstraction_max = 5.
#const tasking_2 = 5.
#const tasking_1 = 4.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
model_type(5,tasking).
model_type(4,tasking).
model_type(3,reduced).
model_type(2,condensed).
model_type(1,ground).
class(5,robot).
class(5,armed_robot).
class(5,location).
class(5,room).
class(5,object).
class(5,grounded).
class(5,graspable).
class(5,placeable).
class(5,block).
class(5,surface).
class(5,table).
class(5,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); AL_1 < tasking_1; AL_2 < tasking_1; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,transporting(ROBO,OBJ),B) :- insta_of(AL_2,armed_robot,ROBO); insta_of(AL_1,graspable,OBJ); OBJ != nothing; AL_1 >= tasking_1; sl(AL_2); sl(AL_1); AL_2 >= AL_1; boolean(B).
fluent(AL,defined,tower_base(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE,TABLE),B) :- insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,complete_tower(COLOUR,TABLE),B) :- insta_of(AL,colour,COLOUR); insta_of(AL,table,TABLE); sl(AL); boolean(B).
fluent(AL,defined,complete_puzzle(TABLE),B) :- insta_of(AL,table,TABLE); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < tasking_1; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; AL < tasking_1; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < tasking_1; AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL < tasking_1; sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); AL < tasking_1; sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < tasking_1; AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,collect(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL = tasking_1; sl(AL).
action(AL,concurrent,manipulation,ROBO,deposit(OBJ)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; AL = tasking_1; sl(AL).
action(AL,concurrent,manipulation,ROBO,place_upon(OBJ,SURFACE)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= tasking_1; sl(AL).
action(AL,concurrent,transportation,ROBO,transport_object_to(OBJ,L)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); AL = tasking_2; sl(AL).
#program action_effects(t).
effect(AL,ROBO,transport_object_to(OBJ,L),in(OBJ),L) :- action(AL,_,_,ROBO,transport_object_to(OBJ,L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL = tasking_2; pl(AL).
precond(AL,ROBO,transport_object_to(OBJ,L_1),in(OBJ),L_2,true,t) :- holds(AL,in(ROBO),L_2,(t-1)); action(AL,_,_,ROBO,transport_object_to(OBJ,L_1)); fluent(AL,inertial,in(ROBO),L_2); fluent(AL,inertial,in(OBJ),L_2); insta_of(AL,robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL = tasking_2; pl(AL).
precond(AL,ROBO,transport_object_to(OBJ,L_1),in(ROBO),L_2,true,t) :- holds(AL,in(OBJ),L_2,(t-1)); action(AL,_,_,ROBO,transport_object_to(OBJ,L_1)); fluent(AL,inertial,in(ROBO),L_2); fluent(AL,inertial,in(OBJ),L_2); insta_of(AL,robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL = tasking_2; pl(AL).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
effect(AL,ROBO,collect(OBJ),transporting(ROBO,OBJ),true) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL = tasking_1; pl(AL).
effect(AL,ROBO,collect(OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,on(OBJ),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL = tasking_1; pl(AL).
effect(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),false); insta_of(RL,armed_robot,ROBO); insta_of(RL,graspable,OBJ); AL = tasking_1; pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= tasking_1; pl(AL).
effect(AL,ROBO,place_upon(OBJ,SURFACE),transporting(ROBO,OBJ),false) :- action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,transporting(ROBO,OBJ),false); OBJ != SURFACE; SURFACE != nothing; insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); AL >= tasking_1; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO,collect(OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL = tasking_1; pl(AL).
precond(AL,ROBO,collect(OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,collect(OBJ)); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); AL = tasking_1; pl(AL).
precond(AL,ROBO,collect(OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,collect(OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL = tasking_1; pl(AL).
precond(AL,ROBO,deposit(OBJ),transporting(ROBO,OBJ),true,true) :- OBJ != nothing; action(AL,_,_,ROBO,deposit(OBJ)); fluent(AL,inertial,transporting(ROBO,OBJ),true); insta_of(AL,armed_robot,ROBO); insta_of(AL,graspable,OBJ); AL = tasking_1; pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= tasking_1; pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= tasking_1; pl(AL).
precond(AL,ROBO,place_upon(OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); holds(AL,in(OBJ),L,(t-1)); action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); AL >= tasking_1; pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,SURFACE),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),OBJ_1); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,surface,SURFACE); insta_of(AL,placeable,OBJ_2); AL >= tasking_1; pl(AL).
precond(AL,ROBO,place_upon(OBJ_1,OBJ_2),on(OBJ_2),nothing,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,place_upon(OBJ,SURFACE)); fluent(AL,inertial,on(OBJ_2),nothing); insta_of(AL,armed_robot,ROBO); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,surface,OBJ_2); AL >= tasking_1; pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
#false :- N = #count { OBJ: holds(AL_1,transporting(ROBO,OBJ),true,t), fluent(AL_1,inertial,transporting(ROBO,OBJ),true), insta_of(AL_1,graspable,OBJ) }; M = #count { ARM: desce_of(AL_2,ROBO,ARM), insta_of(AL_2,manipulator_arm,ARM), al(AL_2), AL_1 >= AL_2 }; N > M; block_number(N); block_number(M); insta_of(AL_1,robot,ROBO); AL_1 >= tasking_1; sl(AL_1).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE,TABLE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); insta_of(AL,surface,SURFACE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE,TABLE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE,TABLE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,complete_tower(COLOUR,TABLE),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; blocks_per_tower(N); holds(AL,unordered_tower(BASE,TABLE),false,t); holds(AL,tower_base(BASE,TABLE),true,t); fluent(AL,defined,complete_tower(COLOUR,TABLE),true); fluent(AL,defined,unordered_tower(BASE,TABLE),true); fluent(AL,defined,tower_base(BASE,TABLE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,complete_puzzle(TABLE),true,t) :- N = #count { COLOUR: holds(AL,complete_tower(COLOUR,TABLE),true,t), fluent(AL,defined,complete_tower(COLOUR,TABLE),true), insta_of(AL,colour,COLOUR) }; towers_per_puzzle(N); fluent(AL,defined,complete_puzzle(TABLE),true); insta_of(AL,table,TABLE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,transporting(ROBO,OBJ),true,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,transporting(ROBO,OBJ),true); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3.
holds(AL_1,transporting(ROBO,OBJ),true,t) :- holds(AL_2,grasping(COMP),OBJ,t); fluent(AL_1,inertial,transporting(ROBO,OBJ),true); fluent(AL_2,inertial,grasping(COMP),OBJ); desce_of(AL_2,ROBO,COMP); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_3,grasper,COMP); insta_of(AL_4,robot,ROBO); AL_1 >= tasking_1; sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,transporting(ROBO,OBJ),false,t) :- 0 = #count { COMP: holds(AL_2,grasping(COMP),OBJ,t), fluent(AL_2,inertial,grasping(COMP),OBJ), desce_of(AL_2,ROBO,COMP), insta_of(AL_3,grasper,COMP), sl(AL_3), AL_3 >= AL_2 }; fluent(AL_1,inertial,transporting(ROBO,OBJ),false); has_desce(AL_2,ROBO,grasper); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); OBJ != nothing; insta_of(AL_4,robot,ROBO); AL_1 >= tasking_1; sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_4); AL_4 >= AL_1., ASH #1)

[18-01-2022_21-52-49] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[18-01-2022_21-52-49] INFO :: ASH Planner Main #1 >> Generating initial states...

[18-01-2022_21-52-49] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[18-01-2022_21-52-49] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 391 rules

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0035490000000000244s

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[18-01-2022_21-52-49] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[18-01-2022_21-52-49] WARNING :: Logic Program Main #1 || Generate Initial States #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.623120s.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.197568s with result Satisfiable.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.623120s, Solving = 0.197568s, Total = 0.820689s, Memory = (RSS = 160.808594Mb, VMS = 149.167969Mb)
Final Model :: Total atoms = 13639, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-01-2022_21-52-50] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.623120s, Solving = 0.197568s, Total = 0.820689s, Memory = (RSS = 160.808594Mb, VMS = 149.167969Mb)
Final Model :: Total atoms = 13639, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-01-2022_21-52-50] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 5            
      ================================================      

holds(5, complete_puzzle(((puzzle_room,1),table)), false, 0)
holds(5, complete_puzzle(((puzzle_room,2),table)), false, 0)
holds(5, complete_tower(blue,((puzzle_room,1),table)), false, 0)
holds(5, complete_tower(blue,((puzzle_room,2),table)), false, 0)
holds(5, complete_tower(red,((puzzle_room,1),table)), false, 0)
holds(5, complete_tower(red,((puzzle_room,2),table)), false, 0)
holds(5, in(((puzzle_room,1),table)), (puzzle_room,1), 0)
holds(5, in(((puzzle_room,2),table)), (puzzle_room,2), 0)
holds(5, in((block,1)), (puzzle_room,1), 0)
holds(5, in((block,10)), (store_room,2), 0)
holds(5, in((block,11)), (store_room,2), 0)
holds(5, in((block,12)), (store_room,2), 0)
holds(5, in((block,2)), (puzzle_room,1), 0)
holds(5, in((block,3)), (puzzle_room,1), 0)
holds(5, in((block,4)), (store_room,1), 0)
holds(5, in((block,5)), (store_room,1), 0)
holds(5, in((block,6)), (store_room,1), 0)
holds(5, in((block,7)), (puzzle_room,2), 0)
holds(5, in((block,8)), (puzzle_room,2), 0)
holds(5, in((block,9)), (puzzle_room,2), 0)
holds(5, in(talos), (starting_room,1), 0)
holds(5, in_tower((block,1),(block,1)), true, 0)
holds(5, in_tower((block,1),(block,10)), false, 0)
holds(5, in_tower((block,1),(block,11)), false, 0)
holds(5, in_tower((block,1),(block,12)), false, 0)
holds(5, in_tower((block,1),(block,2)), false, 0)
holds(5, in_tower((block,1),(block,3)), true, 0)
holds(5, in_tower((block,1),(block,4)), false, 0)
holds(5, in_tower((block,1),(block,5)), false, 0)
holds(5, in_tower((block,1),(block,6)), false, 0)
holds(5, in_tower((block,1),(block,7)), false, 0)
holds(5, in_tower((block,1),(block,8)), false, 0)
holds(5, in_tower((block,1),(block,9)), false, 0)
holds(5, in_tower((block,10),(block,1)), false, 0)
holds(5, in_tower((block,10),(block,10)), false, 0)
holds(5, in_tower((block,10),(block,11)), false, 0)
holds(5, in_tower((block,10),(block,12)), false, 0)
holds(5, in_tower((block,10),(block,2)), false, 0)
holds(5, in_tower((block,10),(block,3)), false, 0)
holds(5, in_tower((block,10),(block,4)), false, 0)
holds(5, in_tower((block,10),(block,5)), false, 0)
holds(5, in_tower((block,10),(block,6)), false, 0)
holds(5, in_tower((block,10),(block,7)), false, 0)
holds(5, in_tower((block,10),(block,8)), false, 0)
holds(5, in_tower((block,10),(block,9)), false, 0)
holds(5, in_tower((block,11),(block,1)), false, 0)
holds(5, in_tower((block,11),(block,10)), false, 0)
holds(5, in_tower((block,11),(block,11)), false, 0)
holds(5, in_tower((block,11),(block,12)), false, 0)
holds(5, in_tower((block,11),(block,2)), false, 0)
holds(5, in_tower((block,11),(block,3)), false, 0)
holds(5, in_tower((block,11),(block,4)), false, 0)
holds(5, in_tower((block,11),(block,5)), false, 0)
holds(5, in_tower((block,11),(block,6)), false, 0)
holds(5, in_tower((block,11),(block,7)), false, 0)
holds(5, in_tower((block,11),(block,8)), false, 0)
holds(5, in_tower((block,11),(block,9)), false, 0)
holds(5, in_tower((block,12),(block,1)), false, 0)
holds(5, in_tower((block,12),(block,10)), false, 0)
holds(5, in_tower((block,12),(block,11)), false, 0)
holds(5, in_tower((block,12),(block,12)), false, 0)
holds(5, in_tower((block,12),(block,2)), false, 0)
holds(5, in_tower((block,12),(block,3)), false, 0)
holds(5, in_tower((block,12),(block,4)), false, 0)
holds(5, in_tower((block,12),(block,5)), false, 0)
holds(5, in_tower((block,12),(block,6)), false, 0)
holds(5, in_tower((block,12),(block,7)), false, 0)
holds(5, in_tower((block,12),(block,8)), false, 0)
holds(5, in_tower((block,12),(block,9)), false, 0)
holds(5, in_tower((block,2),(block,1)), false, 0)
holds(5, in_tower((block,2),(block,10)), false, 0)
holds(5, in_tower((block,2),(block,11)), false, 0)
holds(5, in_tower((block,2),(block,12)), false, 0)
holds(5, in_tower((block,2),(block,2)), true, 0)
holds(5, in_tower((block,2),(block,3)), false, 0)
holds(5, in_tower((block,2),(block,4)), false, 0)
holds(5, in_tower((block,2),(block,5)), false, 0)
holds(5, in_tower((block,2),(block,6)), false, 0)
holds(5, in_tower((block,2),(block,7)), false, 0)
holds(5, in_tower((block,2),(block,8)), false, 0)
holds(5, in_tower((block,2),(block,9)), false, 0)
holds(5, in_tower((block,3),(block,1)), false, 0)
holds(5, in_tower((block,3),(block,10)), false, 0)
holds(5, in_tower((block,3),(block,11)), false, 0)
holds(5, in_tower((block,3),(block,12)), false, 0)
holds(5, in_tower((block,3),(block,2)), false, 0)
holds(5, in_tower((block,3),(block,3)), false, 0)
holds(5, in_tower((block,3),(block,4)), false, 0)
holds(5, in_tower((block,3),(block,5)), false, 0)
holds(5, in_tower((block,3),(block,6)), false, 0)
holds(5, in_tower((block,3),(block,7)), false, 0)
holds(5, in_tower((block,3),(block,8)), false, 0)
holds(5, in_tower((block,3),(block,9)), false, 0)
holds(5, in_tower((block,4),(block,1)), false, 0)
holds(5, in_tower((block,4),(block,10)), false, 0)
holds(5, in_tower((block,4),(block,11)), false, 0)
holds(5, in_tower((block,4),(block,12)), false, 0)
holds(5, in_tower((block,4),(block,2)), false, 0)
holds(5, in_tower((block,4),(block,3)), false, 0)
holds(5, in_tower((block,4),(block,4)), false, 0)
holds(5, in_tower((block,4),(block,5)), false, 0)
holds(5, in_tower((block,4),(block,6)), false, 0)
holds(5, in_tower((block,4),(block,7)), false, 0)
holds(5, in_tower((block,4),(block,8)), false, 0)
holds(5, in_tower((block,4),(block,9)), false, 0)
holds(5, in_tower((block,5),(block,1)), false, 0)
holds(5, in_tower((block,5),(block,10)), false, 0)
holds(5, in_tower((block,5),(block,11)), false, 0)
holds(5, in_tower((block,5),(block,12)), false, 0)
holds(5, in_tower((block,5),(block,2)), false, 0)
holds(5, in_tower((block,5),(block,3)), false, 0)
holds(5, in_tower((block,5),(block,4)), false, 0)
holds(5, in_tower((block,5),(block,5)), false, 0)
holds(5, in_tower((block,5),(block,6)), false, 0)
holds(5, in_tower((block,5),(block,7)), false, 0)
holds(5, in_tower((block,5),(block,8)), false, 0)
holds(5, in_tower((block,5),(block,9)), false, 0)
holds(5, in_tower((block,6),(block,1)), false, 0)
holds(5, in_tower((block,6),(block,10)), false, 0)
holds(5, in_tower((block,6),(block,11)), false, 0)
holds(5, in_tower((block,6),(block,12)), false, 0)
holds(5, in_tower((block,6),(block,2)), false, 0)
holds(5, in_tower((block,6),(block,3)), false, 0)
holds(5, in_tower((block,6),(block,4)), false, 0)
holds(5, in_tower((block,6),(block,5)), false, 0)
holds(5, in_tower((block,6),(block,6)), false, 0)
holds(5, in_tower((block,6),(block,7)), false, 0)
holds(5, in_tower((block,6),(block,8)), false, 0)
holds(5, in_tower((block,6),(block,9)), false, 0)
holds(5, in_tower((block,7),(block,1)), false, 0)
holds(5, in_tower((block,7),(block,10)), false, 0)
holds(5, in_tower((block,7),(block,11)), false, 0)
holds(5, in_tower((block,7),(block,12)), false, 0)
holds(5, in_tower((block,7),(block,2)), false, 0)
holds(5, in_tower((block,7),(block,3)), false, 0)
holds(5, in_tower((block,7),(block,4)), false, 0)
holds(5, in_tower((block,7),(block,5)), false, 0)
holds(5, in_tower((block,7),(block,6)), false, 0)
holds(5, in_tower((block,7),(block,7)), true, 0)
holds(5, in_tower((block,7),(block,8)), false, 0)
holds(5, in_tower((block,7),(block,9)), true, 0)
holds(5, in_tower((block,8),(block,1)), false, 0)
holds(5, in_tower((block,8),(block,10)), false, 0)
holds(5, in_tower((block,8),(block,11)), false, 0)
holds(5, in_tower((block,8),(block,12)), false, 0)
holds(5, in_tower((block,8),(block,2)), false, 0)
holds(5, in_tower((block,8),(block,3)), false, 0)
holds(5, in_tower((block,8),(block,4)), false, 0)
holds(5, in_tower((block,8),(block,5)), false, 0)
holds(5, in_tower((block,8),(block,6)), false, 0)
holds(5, in_tower((block,8),(block,7)), false, 0)
holds(5, in_tower((block,8),(block,8)), true, 0)
holds(5, in_tower((block,8),(block,9)), false, 0)
holds(5, in_tower((block,9),(block,1)), false, 0)
holds(5, in_tower((block,9),(block,10)), false, 0)
holds(5, in_tower((block,9),(block,11)), false, 0)
holds(5, in_tower((block,9),(block,12)), false, 0)
holds(5, in_tower((block,9),(block,2)), false, 0)
holds(5, in_tower((block,9),(block,3)), false, 0)
holds(5, in_tower((block,9),(block,4)), false, 0)
holds(5, in_tower((block,9),(block,5)), false, 0)
holds(5, in_tower((block,9),(block,6)), false, 0)
holds(5, in_tower((block,9),(block,7)), false, 0)
holds(5, in_tower((block,9),(block,8)), false, 0)
holds(5, in_tower((block,9),(block,9)), false, 0)
holds(5, on((block,1)), ((puzzle_room,1),table), 0)
holds(5, on((block,10)), nothing, 0)
holds(5, on((block,11)), nothing, 0)
holds(5, on((block,12)), nothing, 0)
holds(5, on((block,2)), ((puzzle_room,1),table), 0)
holds(5, on((block,3)), (block,1), 0)
holds(5, on((block,4)), nothing, 0)
holds(5, on((block,5)), nothing, 0)
holds(5, on((block,6)), nothing, 0)
holds(5, on((block,7)), ((puzzle_room,2),table), 0)
holds(5, on((block,8)), ((puzzle_room,2),table), 0)
holds(5, on((block,9)), (block,7), 0)
holds(5, tower_base((block,1),((puzzle_room,1),table)), true, 0)
holds(5, tower_base((block,1),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,10),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,10),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,11),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,11),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,12),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,12),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,2),((puzzle_room,1),table)), true, 0)
holds(5, tower_base((block,2),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,3),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,3),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,4),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,4),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,5),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,5),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,6),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,6),((puzzle_room,2),table)), false, 0)
holds(5, tower_base((block,7),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,7),((puzzle_room,2),table)), true, 0)
holds(5, tower_base((block,8),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,8),((puzzle_room,2),table)), true, 0)
holds(5, tower_base((block,9),((puzzle_room,1),table)), false, 0)
holds(5, tower_base((block,9),((puzzle_room,2),table)), false, 0)
holds(5, transporting(talos,(block,1)), false, 0)
holds(5, transporting(talos,(block,10)), false, 0)
holds(5, transporting(talos,(block,11)), false, 0)
holds(5, transporting(talos,(block,12)), false, 0)
holds(5, transporting(talos,(block,2)), false, 0)
holds(5, transporting(talos,(block,3)), false, 0)
holds(5, transporting(talos,(block,4)), false, 0)
holds(5, transporting(talos,(block,5)), false, 0)
holds(5, transporting(talos,(block,6)), false, 0)
holds(5, transporting(talos,(block,7)), false, 0)
holds(5, transporting(talos,(block,8)), false, 0)
holds(5, transporting(talos,(block,9)), false, 0)
holds(5, unordered_tower((block,1),((puzzle_room,1),table)), true, 0)
holds(5, unordered_tower((block,1),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,10),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,10),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,11),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,11),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,12),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,12),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,2),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,2),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,3),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,3),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,4),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,4),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,5),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,5),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,6),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,6),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,7),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,7),((puzzle_room,2),table)), true, 0)
holds(5, unordered_tower((block,8),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,8),((puzzle_room,2),table)), false, 0)
holds(5, unordered_tower((block,9),((puzzle_room,1),table)), false, 0)
holds(5, unordered_tower((block,9),((puzzle_room,2),table)), false, 0)

[18-01-2022_21-52-50] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 4            
      ================================================      

holds(4, complete_puzzle(((puzzle_room,1),table)), false, 0)
holds(4, complete_puzzle(((puzzle_room,2),table)), false, 0)
holds(4, complete_tower(blue,((puzzle_room,1),table)), false, 0)
holds(4, complete_tower(blue,((puzzle_room,2),table)), false, 0)
holds(4, complete_tower(red,((puzzle_room,1),table)), false, 0)
holds(4, complete_tower(red,((puzzle_room,2),table)), false, 0)
holds(4, in(((puzzle_room,1),table)), (puzzle_room,1), 0)
holds(4, in(((puzzle_room,2),table)), (puzzle_room,2), 0)
holds(4, in((block,1)), (puzzle_room,1), 0)
holds(4, in((block,10)), (store_room,2), 0)
holds(4, in((block,11)), (store_room,2), 0)
holds(4, in((block,12)), (store_room,2), 0)
holds(4, in((block,2)), (puzzle_room,1), 0)
holds(4, in((block,3)), (puzzle_room,1), 0)
holds(4, in((block,4)), (store_room,1), 0)
holds(4, in((block,5)), (store_room,1), 0)
holds(4, in((block,6)), (store_room,1), 0)
holds(4, in((block,7)), (puzzle_room,2), 0)
holds(4, in((block,8)), (puzzle_room,2), 0)
holds(4, in((block,9)), (puzzle_room,2), 0)
holds(4, in(talos), (starting_room,1), 0)
holds(4, in_tower((block,1),(block,1)), true, 0)
holds(4, in_tower((block,1),(block,10)), false, 0)
holds(4, in_tower((block,1),(block,11)), false, 0)
holds(4, in_tower((block,1),(block,12)), false, 0)
holds(4, in_tower((block,1),(block,2)), false, 0)
holds(4, in_tower((block,1),(block,3)), true, 0)
holds(4, in_tower((block,1),(block,4)), false, 0)
holds(4, in_tower((block,1),(block,5)), false, 0)
holds(4, in_tower((block,1),(block,6)), false, 0)
holds(4, in_tower((block,1),(block,7)), false, 0)
holds(4, in_tower((block,1),(block,8)), false, 0)
holds(4, in_tower((block,1),(block,9)), false, 0)
holds(4, in_tower((block,10),(block,1)), false, 0)
holds(4, in_tower((block,10),(block,10)), false, 0)
holds(4, in_tower((block,10),(block,11)), false, 0)
holds(4, in_tower((block,10),(block,12)), false, 0)
holds(4, in_tower((block,10),(block,2)), false, 0)
holds(4, in_tower((block,10),(block,3)), false, 0)
holds(4, in_tower((block,10),(block,4)), false, 0)
holds(4, in_tower((block,10),(block,5)), false, 0)
holds(4, in_tower((block,10),(block,6)), false, 0)
holds(4, in_tower((block,10),(block,7)), false, 0)
holds(4, in_tower((block,10),(block,8)), false, 0)
holds(4, in_tower((block,10),(block,9)), false, 0)
holds(4, in_tower((block,11),(block,1)), false, 0)
holds(4, in_tower((block,11),(block,10)), false, 0)
holds(4, in_tower((block,11),(block,11)), false, 0)
holds(4, in_tower((block,11),(block,12)), false, 0)
holds(4, in_tower((block,11),(block,2)), false, 0)
holds(4, in_tower((block,11),(block,3)), false, 0)
holds(4, in_tower((block,11),(block,4)), false, 0)
holds(4, in_tower((block,11),(block,5)), false, 0)
holds(4, in_tower((block,11),(block,6)), false, 0)
holds(4, in_tower((block,11),(block,7)), false, 0)
holds(4, in_tower((block,11),(block,8)), false, 0)
holds(4, in_tower((block,11),(block,9)), false, 0)
holds(4, in_tower((block,12),(block,1)), false, 0)
holds(4, in_tower((block,12),(block,10)), false, 0)
holds(4, in_tower((block,12),(block,11)), false, 0)
holds(4, in_tower((block,12),(block,12)), false, 0)
holds(4, in_tower((block,12),(block,2)), false, 0)
holds(4, in_tower((block,12),(block,3)), false, 0)
holds(4, in_tower((block,12),(block,4)), false, 0)
holds(4, in_tower((block,12),(block,5)), false, 0)
holds(4, in_tower((block,12),(block,6)), false, 0)
holds(4, in_tower((block,12),(block,7)), false, 0)
holds(4, in_tower((block,12),(block,8)), false, 0)
holds(4, in_tower((block,12),(block,9)), false, 0)
holds(4, in_tower((block,2),(block,1)), false, 0)
holds(4, in_tower((block,2),(block,10)), false, 0)
holds(4, in_tower((block,2),(block,11)), false, 0)
holds(4, in_tower((block,2),(block,12)), false, 0)
holds(4, in_tower((block,2),(block,2)), true, 0)
holds(4, in_tower((block,2),(block,3)), false, 0)
holds(4, in_tower((block,2),(block,4)), false, 0)
holds(4, in_tower((block,2),(block,5)), false, 0)
holds(4, in_tower((block,2),(block,6)), false, 0)
holds(4, in_tower((block,2),(block,7)), false, 0)
holds(4, in_tower((block,2),(block,8)), false, 0)
holds(4, in_tower((block,2),(block,9)), false, 0)
holds(4, in_tower((block,3),(block,1)), false, 0)
holds(4, in_tower((block,3),(block,10)), false, 0)
holds(4, in_tower((block,3),(block,11)), false, 0)
holds(4, in_tower((block,3),(block,12)), false, 0)
holds(4, in_tower((block,3),(block,2)), false, 0)
holds(4, in_tower((block,3),(block,3)), false, 0)
holds(4, in_tower((block,3),(block,4)), false, 0)
holds(4, in_tower((block,3),(block,5)), false, 0)
holds(4, in_tower((block,3),(block,6)), false, 0)
holds(4, in_tower((block,3),(block,7)), false, 0)
holds(4, in_tower((block,3),(block,8)), false, 0)
holds(4, in_tower((block,3),(block,9)), false, 0)
holds(4, in_tower((block,4),(block,1)), false, 0)
holds(4, in_tower((block,4),(block,10)), false, 0)
holds(4, in_tower((block,4),(block,11)), false, 0)
holds(4, in_tower((block,4),(block,12)), false, 0)
holds(4, in_tower((block,4),(block,2)), false, 0)
holds(4, in_tower((block,4),(block,3)), false, 0)
holds(4, in_tower((block,4),(block,4)), false, 0)
holds(4, in_tower((block,4),(block,5)), false, 0)
holds(4, in_tower((block,4),(block,6)), false, 0)
holds(4, in_tower((block,4),(block,7)), false, 0)
holds(4, in_tower((block,4),(block,8)), false, 0)
holds(4, in_tower((block,4),(block,9)), false, 0)
holds(4, in_tower((block,5),(block,1)), false, 0)
holds(4, in_tower((block,5),(block,10)), false, 0)
holds(4, in_tower((block,5),(block,11)), false, 0)
holds(4, in_tower((block,5),(block,12)), false, 0)
holds(4, in_tower((block,5),(block,2)), false, 0)
holds(4, in_tower((block,5),(block,3)), false, 0)
holds(4, in_tower((block,5),(block,4)), false, 0)
holds(4, in_tower((block,5),(block,5)), false, 0)
holds(4, in_tower((block,5),(block,6)), false, 0)
holds(4, in_tower((block,5),(block,7)), false, 0)
holds(4, in_tower((block,5),(block,8)), false, 0)
holds(4, in_tower((block,5),(block,9)), false, 0)
holds(4, in_tower((block,6),(block,1)), false, 0)
holds(4, in_tower((block,6),(block,10)), false, 0)
holds(4, in_tower((block,6),(block,11)), false, 0)
holds(4, in_tower((block,6),(block,12)), false, 0)
holds(4, in_tower((block,6),(block,2)), false, 0)
holds(4, in_tower((block,6),(block,3)), false, 0)
holds(4, in_tower((block,6),(block,4)), false, 0)
holds(4, in_tower((block,6),(block,5)), false, 0)
holds(4, in_tower((block,6),(block,6)), false, 0)
holds(4, in_tower((block,6),(block,7)), false, 0)
holds(4, in_tower((block,6),(block,8)), false, 0)
holds(4, in_tower((block,6),(block,9)), false, 0)
holds(4, in_tower((block,7),(block,1)), false, 0)
holds(4, in_tower((block,7),(block,10)), false, 0)
holds(4, in_tower((block,7),(block,11)), false, 0)
holds(4, in_tower((block,7),(block,12)), false, 0)
holds(4, in_tower((block,7),(block,2)), false, 0)
holds(4, in_tower((block,7),(block,3)), false, 0)
holds(4, in_tower((block,7),(block,4)), false, 0)
holds(4, in_tower((block,7),(block,5)), false, 0)
holds(4, in_tower((block,7),(block,6)), false, 0)
holds(4, in_tower((block,7),(block,7)), true, 0)
holds(4, in_tower((block,7),(block,8)), false, 0)
holds(4, in_tower((block,7),(block,9)), true, 0)
holds(4, in_tower((block,8),(block,1)), false, 0)
holds(4, in_tower((block,8),(block,10)), false, 0)
holds(4, in_tower((block,8),(block,11)), false, 0)
holds(4, in_tower((block,8),(block,12)), false, 0)
holds(4, in_tower((block,8),(block,2)), false, 0)
holds(4, in_tower((block,8),(block,3)), false, 0)
holds(4, in_tower((block,8),(block,4)), false, 0)
holds(4, in_tower((block,8),(block,5)), false, 0)
holds(4, in_tower((block,8),(block,6)), false, 0)
holds(4, in_tower((block,8),(block,7)), false, 0)
holds(4, in_tower((block,8),(block,8)), true, 0)
holds(4, in_tower((block,8),(block,9)), false, 0)
holds(4, in_tower((block,9),(block,1)), false, 0)
holds(4, in_tower((block,9),(block,10)), false, 0)
holds(4, in_tower((block,9),(block,11)), false, 0)
holds(4, in_tower((block,9),(block,12)), false, 0)
holds(4, in_tower((block,9),(block,2)), false, 0)
holds(4, in_tower((block,9),(block,3)), false, 0)
holds(4, in_tower((block,9),(block,4)), false, 0)
holds(4, in_tower((block,9),(block,5)), false, 0)
holds(4, in_tower((block,9),(block,6)), false, 0)
holds(4, in_tower((block,9),(block,7)), false, 0)
holds(4, in_tower((block,9),(block,8)), false, 0)
holds(4, in_tower((block,9),(block,9)), false, 0)
holds(4, on((block,1)), ((puzzle_room,1),table), 0)
holds(4, on((block,10)), nothing, 0)
holds(4, on((block,11)), nothing, 0)
holds(4, on((block,12)), nothing, 0)
holds(4, on((block,2)), ((puzzle_room,1),table), 0)
holds(4, on((block,3)), (block,1), 0)
holds(4, on((block,4)), nothing, 0)
holds(4, on((block,5)), nothing, 0)
holds(4, on((block,6)), nothing, 0)
holds(4, on((block,7)), ((puzzle_room,2),table), 0)
holds(4, on((block,8)), ((puzzle_room,2),table), 0)
holds(4, on((block,9)), (block,7), 0)
holds(4, tower_base((block,1),((puzzle_room,1),table)), true, 0)
holds(4, tower_base((block,1),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,10),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,10),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,11),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,11),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,12),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,12),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,2),((puzzle_room,1),table)), true, 0)
holds(4, tower_base((block,2),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,3),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,3),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,4),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,4),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,5),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,5),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,6),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,6),((puzzle_room,2),table)), false, 0)
holds(4, tower_base((block,7),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,7),((puzzle_room,2),table)), true, 0)
holds(4, tower_base((block,8),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,8),((puzzle_room,2),table)), true, 0)
holds(4, tower_base((block,9),((puzzle_room,1),table)), false, 0)
holds(4, tower_base((block,9),((puzzle_room,2),table)), false, 0)
holds(4, transporting(talos,(block,1)), false, 0)
holds(4, transporting(talos,(block,10)), false, 0)
holds(4, transporting(talos,(block,11)), false, 0)
holds(4, transporting(talos,(block,12)), false, 0)
holds(4, transporting(talos,(block,2)), false, 0)
holds(4, transporting(talos,(block,3)), false, 0)
holds(4, transporting(talos,(block,4)), false, 0)
holds(4, transporting(talos,(block,5)), false, 0)
holds(4, transporting(talos,(block,6)), false, 0)
holds(4, transporting(talos,(block,7)), false, 0)
holds(4, transporting(talos,(block,8)), false, 0)
holds(4, transporting(talos,(block,9)), false, 0)
holds(4, unordered_tower((block,1),((puzzle_room,1),table)), true, 0)
holds(4, unordered_tower((block,1),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,10),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,10),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,11),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,11),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,12),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,12),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,2),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,2),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,3),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,3),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,4),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,4),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,5),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,5),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,6),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,6),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,7),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,7),((puzzle_room,2),table)), true, 0)
holds(4, unordered_tower((block,8),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,8),((puzzle_room,2),table)), false, 0)
holds(4, unordered_tower((block,9),((puzzle_room,1),table)), false, 0)
holds(4, unordered_tower((block,9),((puzzle_room,2),table)), false, 0)

[18-01-2022_21-52-50] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete_puzzle(((puzzle_room,1),table)), false, 0)
holds(3, complete_puzzle(((puzzle_room,2),table)), false, 0)
holds(3, complete_tower(blue,((puzzle_room,1),table)), false, 0)
holds(3, complete_tower(blue,((puzzle_room,2),table)), false, 0)
holds(3, complete_tower(red,((puzzle_room,1),table)), false, 0)
holds(3, complete_tower(red,((puzzle_room,2),table)), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in(((puzzle_room,1),table)), (puzzle_room,1), 0)
holds(3, in(((puzzle_room,2),table)), (puzzle_room,2), 0)
holds(3, in((block,1)), (puzzle_room,1), 0)
holds(3, in((block,10)), (store_room,2), 0)
holds(3, in((block,11)), (store_room,2), 0)
holds(3, in((block,12)), (store_room,2), 0)
holds(3, in((block,2)), (puzzle_room,1), 0)
holds(3, in((block,3)), (puzzle_room,1), 0)
holds(3, in((block,4)), (store_room,1), 0)
holds(3, in((block,5)), (store_room,1), 0)
holds(3, in((block,6)), (store_room,1), 0)
holds(3, in((block,7)), (puzzle_room,2), 0)
holds(3, in((block,8)), (puzzle_room,2), 0)
holds(3, in((block,9)), (puzzle_room,2), 0)
holds(3, in(manipulator_arm_1), (starting_room,1), 0)
holds(3, in(manipulator_arm_2), (starting_room,1), 0)
holds(3, in(talos), (starting_room,1), 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,10)), false, 0)
holds(3, in_tower((block,1),(block,11)), false, 0)
holds(3, in_tower((block,1),(block,12)), false, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,1),(block,7)), false, 0)
holds(3, in_tower((block,1),(block,8)), false, 0)
holds(3, in_tower((block,1),(block,9)), false, 0)
holds(3, in_tower((block,10),(block,1)), false, 0)
holds(3, in_tower((block,10),(block,10)), false, 0)
holds(3, in_tower((block,10),(block,11)), false, 0)
holds(3, in_tower((block,10),(block,12)), false, 0)
holds(3, in_tower((block,10),(block,2)), false, 0)
holds(3, in_tower((block,10),(block,3)), false, 0)
holds(3, in_tower((block,10),(block,4)), false, 0)
holds(3, in_tower((block,10),(block,5)), false, 0)
holds(3, in_tower((block,10),(block,6)), false, 0)
holds(3, in_tower((block,10),(block,7)), false, 0)
holds(3, in_tower((block,10),(block,8)), false, 0)
holds(3, in_tower((block,10),(block,9)), false, 0)
holds(3, in_tower((block,11),(block,1)), false, 0)
holds(3, in_tower((block,11),(block,10)), false, 0)
holds(3, in_tower((block,11),(block,11)), false, 0)
holds(3, in_tower((block,11),(block,12)), false, 0)
holds(3, in_tower((block,11),(block,2)), false, 0)
holds(3, in_tower((block,11),(block,3)), false, 0)
holds(3, in_tower((block,11),(block,4)), false, 0)
holds(3, in_tower((block,11),(block,5)), false, 0)
holds(3, in_tower((block,11),(block,6)), false, 0)
holds(3, in_tower((block,11),(block,7)), false, 0)
holds(3, in_tower((block,11),(block,8)), false, 0)
holds(3, in_tower((block,11),(block,9)), false, 0)
holds(3, in_tower((block,12),(block,1)), false, 0)
holds(3, in_tower((block,12),(block,10)), false, 0)
holds(3, in_tower((block,12),(block,11)), false, 0)
holds(3, in_tower((block,12),(block,12)), false, 0)
holds(3, in_tower((block,12),(block,2)), false, 0)
holds(3, in_tower((block,12),(block,3)), false, 0)
holds(3, in_tower((block,12),(block,4)), false, 0)
holds(3, in_tower((block,12),(block,5)), false, 0)
holds(3, in_tower((block,12),(block,6)), false, 0)
holds(3, in_tower((block,12),(block,7)), false, 0)
holds(3, in_tower((block,12),(block,8)), false, 0)
holds(3, in_tower((block,12),(block,9)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,10)), false, 0)
holds(3, in_tower((block,2),(block,11)), false, 0)
holds(3, in_tower((block,2),(block,12)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,7)), false, 0)
holds(3, in_tower((block,2),(block,8)), false, 0)
holds(3, in_tower((block,2),(block,9)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,10)), false, 0)
holds(3, in_tower((block,3),(block,11)), false, 0)
holds(3, in_tower((block,3),(block,12)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,7)), false, 0)
holds(3, in_tower((block,3),(block,8)), false, 0)
holds(3, in_tower((block,3),(block,9)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,10)), false, 0)
holds(3, in_tower((block,4),(block,11)), false, 0)
holds(3, in_tower((block,4),(block,12)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,7)), false, 0)
holds(3, in_tower((block,4),(block,8)), false, 0)
holds(3, in_tower((block,4),(block,9)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,10)), false, 0)
holds(3, in_tower((block,5),(block,11)), false, 0)
holds(3, in_tower((block,5),(block,12)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,7)), false, 0)
holds(3, in_tower((block,5),(block,8)), false, 0)
holds(3, in_tower((block,5),(block,9)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,10)), false, 0)
holds(3, in_tower((block,6),(block,11)), false, 0)
holds(3, in_tower((block,6),(block,12)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,7)), false, 0)
holds(3, in_tower((block,6),(block,8)), false, 0)
holds(3, in_tower((block,6),(block,9)), false, 0)
holds(3, in_tower((block,7),(block,1)), false, 0)
holds(3, in_tower((block,7),(block,10)), false, 0)
holds(3, in_tower((block,7),(block,11)), false, 0)
holds(3, in_tower((block,7),(block,12)), false, 0)
holds(3, in_tower((block,7),(block,2)), false, 0)
holds(3, in_tower((block,7),(block,3)), false, 0)
holds(3, in_tower((block,7),(block,4)), false, 0)
holds(3, in_tower((block,7),(block,5)), false, 0)
holds(3, in_tower((block,7),(block,6)), false, 0)
holds(3, in_tower((block,7),(block,7)), true, 0)
holds(3, in_tower((block,7),(block,8)), false, 0)
holds(3, in_tower((block,7),(block,9)), true, 0)
holds(3, in_tower((block,8),(block,1)), false, 0)
holds(3, in_tower((block,8),(block,10)), false, 0)
holds(3, in_tower((block,8),(block,11)), false, 0)
holds(3, in_tower((block,8),(block,12)), false, 0)
holds(3, in_tower((block,8),(block,2)), false, 0)
holds(3, in_tower((block,8),(block,3)), false, 0)
holds(3, in_tower((block,8),(block,4)), false, 0)
holds(3, in_tower((block,8),(block,5)), false, 0)
holds(3, in_tower((block,8),(block,6)), false, 0)
holds(3, in_tower((block,8),(block,7)), false, 0)
holds(3, in_tower((block,8),(block,8)), true, 0)
holds(3, in_tower((block,8),(block,9)), false, 0)
holds(3, in_tower((block,9),(block,1)), false, 0)
holds(3, in_tower((block,9),(block,10)), false, 0)
holds(3, in_tower((block,9),(block,11)), false, 0)
holds(3, in_tower((block,9),(block,12)), false, 0)
holds(3, in_tower((block,9),(block,2)), false, 0)
holds(3, in_tower((block,9),(block,3)), false, 0)
holds(3, in_tower((block,9),(block,4)), false, 0)
holds(3, in_tower((block,9),(block,5)), false, 0)
holds(3, in_tower((block,9),(block,6)), false, 0)
holds(3, in_tower((block,9),(block,7)), false, 0)
holds(3, in_tower((block,9),(block,8)), false, 0)
holds(3, in_tower((block,9),(block,9)), false, 0)
holds(3, on((block,1)), ((puzzle_room,1),table), 0)
holds(3, on((block,10)), nothing, 0)
holds(3, on((block,11)), nothing, 0)
holds(3, on((block,12)), nothing, 0)
holds(3, on((block,2)), ((puzzle_room,1),table), 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, on((block,7)), ((puzzle_room,2),table), 0)
holds(3, on((block,8)), ((puzzle_room,2),table), 0)
holds(3, on((block,9)), (block,7), 0)
holds(3, tower_base((block,1),((puzzle_room,1),table)), true, 0)
holds(3, tower_base((block,1),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,10),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,10),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,11),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,11),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,12),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,12),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,2),((puzzle_room,1),table)), true, 0)
holds(3, tower_base((block,2),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,3),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,3),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,4),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,4),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,5),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,5),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,6),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,6),((puzzle_room,2),table)), false, 0)
holds(3, tower_base((block,7),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,7),((puzzle_room,2),table)), true, 0)
holds(3, tower_base((block,8),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,8),((puzzle_room,2),table)), true, 0)
holds(3, tower_base((block,9),((puzzle_room,1),table)), false, 0)
holds(3, tower_base((block,9),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,1),((puzzle_room,1),table)), true, 0)
holds(3, unordered_tower((block,1),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,10),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,10),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,11),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,11),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,12),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,12),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,2),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,2),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,3),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,3),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,4),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,4),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,5),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,5),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,6),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,6),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,7),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,7),((puzzle_room,2),table)), true, 0)
holds(3, unordered_tower((block,8),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,8),((puzzle_room,2),table)), false, 0)
holds(3, unordered_tower((block,9),((puzzle_room,1),table)), false, 0)
holds(3, unordered_tower((block,9),((puzzle_room,2),table)), false, 0)

[18-01-2022_21-52-50] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete_puzzle(((puzzle_room,1),table)), false, 0)
holds(2, complete_puzzle(((puzzle_room,2),table)), false, 0)
holds(2, complete_tower(blue,((puzzle_room,1),table)), false, 0)
holds(2, complete_tower(blue,((puzzle_room,2),table)), false, 0)
holds(2, complete_tower(red,((puzzle_room,1),table)), false, 0)
holds(2, complete_tower(red,((puzzle_room,2),table)), false, 0)
holds(2, configuration(((hallway,1),door)), closed, 0)
holds(2, configuration(((hallway,2),door)), closed, 0)
holds(2, configuration(((puzzle_room,1),door)), closed, 0)
holds(2, configuration(((puzzle_room,2),door)), closed, 0)
holds(2, configuration(((store_room,1),door)), closed, 0)
holds(2, configuration(((store_room,2),door)), closed, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in(((puzzle_room,1),table)), (puzzle_room,1), 0)
holds(2, in(((puzzle_room,2),table)), (puzzle_room,2), 0)
holds(2, in((block,1)), (puzzle_room,1), 0)
holds(2, in((block,10)), (store_room,2), 0)
holds(2, in((block,11)), (store_room,2), 0)
holds(2, in((block,12)), (store_room,2), 0)
holds(2, in((block,2)), (puzzle_room,1), 0)
holds(2, in((block,3)), (puzzle_room,1), 0)
holds(2, in((block,4)), (store_room,1), 0)
holds(2, in((block,5)), (store_room,1), 0)
holds(2, in((block,6)), (store_room,1), 0)
holds(2, in((block,7)), (puzzle_room,2), 0)
holds(2, in((block,8)), (puzzle_room,2), 0)
holds(2, in((block,9)), (puzzle_room,2), 0)
holds(2, in(manipulator_arm_1), (starting_room,1), 0)
holds(2, in(manipulator_arm_2), (starting_room,1), 0)
holds(2, in(talos), (starting_room,1), 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,10)), false, 0)
holds(2, in_tower((block,1),(block,11)), false, 0)
holds(2, in_tower((block,1),(block,12)), false, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,1),(block,7)), false, 0)
holds(2, in_tower((block,1),(block,8)), false, 0)
holds(2, in_tower((block,1),(block,9)), false, 0)
holds(2, in_tower((block,10),(block,1)), false, 0)
holds(2, in_tower((block,10),(block,10)), false, 0)
holds(2, in_tower((block,10),(block,11)), false, 0)
holds(2, in_tower((block,10),(block,12)), false, 0)
holds(2, in_tower((block,10),(block,2)), false, 0)
holds(2, in_tower((block,10),(block,3)), false, 0)
holds(2, in_tower((block,10),(block,4)), false, 0)
holds(2, in_tower((block,10),(block,5)), false, 0)
holds(2, in_tower((block,10),(block,6)), false, 0)
holds(2, in_tower((block,10),(block,7)), false, 0)
holds(2, in_tower((block,10),(block,8)), false, 0)
holds(2, in_tower((block,10),(block,9)), false, 0)
holds(2, in_tower((block,11),(block,1)), false, 0)
holds(2, in_tower((block,11),(block,10)), false, 0)
holds(2, in_tower((block,11),(block,11)), false, 0)
holds(2, in_tower((block,11),(block,12)), false, 0)
holds(2, in_tower((block,11),(block,2)), false, 0)
holds(2, in_tower((block,11),(block,3)), false, 0)
holds(2, in_tower((block,11),(block,4)), false, 0)
holds(2, in_tower((block,11),(block,5)), false, 0)
holds(2, in_tower((block,11),(block,6)), false, 0)
holds(2, in_tower((block,11),(block,7)), false, 0)
holds(2, in_tower((block,11),(block,8)), false, 0)
holds(2, in_tower((block,11),(block,9)), false, 0)
holds(2, in_tower((block,12),(block,1)), false, 0)
holds(2, in_tower((block,12),(block,10)), false, 0)
holds(2, in_tower((block,12),(block,11)), false, 0)
holds(2, in_tower((block,12),(block,12)), false, 0)
holds(2, in_tower((block,12),(block,2)), false, 0)
holds(2, in_tower((block,12),(block,3)), false, 0)
holds(2, in_tower((block,12),(block,4)), false, 0)
holds(2, in_tower((block,12),(block,5)), false, 0)
holds(2, in_tower((block,12),(block,6)), false, 0)
holds(2, in_tower((block,12),(block,7)), false, 0)
holds(2, in_tower((block,12),(block,8)), false, 0)
holds(2, in_tower((block,12),(block,9)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,10)), false, 0)
holds(2, in_tower((block,2),(block,11)), false, 0)
holds(2, in_tower((block,2),(block,12)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,7)), false, 0)
holds(2, in_tower((block,2),(block,8)), false, 0)
holds(2, in_tower((block,2),(block,9)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,10)), false, 0)
holds(2, in_tower((block,3),(block,11)), false, 0)
holds(2, in_tower((block,3),(block,12)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,7)), false, 0)
holds(2, in_tower((block,3),(block,8)), false, 0)
holds(2, in_tower((block,3),(block,9)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,10)), false, 0)
holds(2, in_tower((block,4),(block,11)), false, 0)
holds(2, in_tower((block,4),(block,12)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,7)), false, 0)
holds(2, in_tower((block,4),(block,8)), false, 0)
holds(2, in_tower((block,4),(block,9)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,10)), false, 0)
holds(2, in_tower((block,5),(block,11)), false, 0)
holds(2, in_tower((block,5),(block,12)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,7)), false, 0)
holds(2, in_tower((block,5),(block,8)), false, 0)
holds(2, in_tower((block,5),(block,9)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,10)), false, 0)
holds(2, in_tower((block,6),(block,11)), false, 0)
holds(2, in_tower((block,6),(block,12)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,7)), false, 0)
holds(2, in_tower((block,6),(block,8)), false, 0)
holds(2, in_tower((block,6),(block,9)), false, 0)
holds(2, in_tower((block,7),(block,1)), false, 0)
holds(2, in_tower((block,7),(block,10)), false, 0)
holds(2, in_tower((block,7),(block,11)), false, 0)
holds(2, in_tower((block,7),(block,12)), false, 0)
holds(2, in_tower((block,7),(block,2)), false, 0)
holds(2, in_tower((block,7),(block,3)), false, 0)
holds(2, in_tower((block,7),(block,4)), false, 0)
holds(2, in_tower((block,7),(block,5)), false, 0)
holds(2, in_tower((block,7),(block,6)), false, 0)
holds(2, in_tower((block,7),(block,7)), true, 0)
holds(2, in_tower((block,7),(block,8)), false, 0)
holds(2, in_tower((block,7),(block,9)), true, 0)
holds(2, in_tower((block,8),(block,1)), false, 0)
holds(2, in_tower((block,8),(block,10)), false, 0)
holds(2, in_tower((block,8),(block,11)), false, 0)
holds(2, in_tower((block,8),(block,12)), false, 0)
holds(2, in_tower((block,8),(block,2)), false, 0)
holds(2, in_tower((block,8),(block,3)), false, 0)
holds(2, in_tower((block,8),(block,4)), false, 0)
holds(2, in_tower((block,8),(block,5)), false, 0)
holds(2, in_tower((block,8),(block,6)), false, 0)
holds(2, in_tower((block,8),(block,7)), false, 0)
holds(2, in_tower((block,8),(block,8)), true, 0)
holds(2, in_tower((block,8),(block,9)), false, 0)
holds(2, in_tower((block,9),(block,1)), false, 0)
holds(2, in_tower((block,9),(block,10)), false, 0)
holds(2, in_tower((block,9),(block,11)), false, 0)
holds(2, in_tower((block,9),(block,12)), false, 0)
holds(2, in_tower((block,9),(block,2)), false, 0)
holds(2, in_tower((block,9),(block,3)), false, 0)
holds(2, in_tower((block,9),(block,4)), false, 0)
holds(2, in_tower((block,9),(block,5)), false, 0)
holds(2, in_tower((block,9),(block,6)), false, 0)
holds(2, in_tower((block,9),(block,7)), false, 0)
holds(2, in_tower((block,9),(block,8)), false, 0)
holds(2, in_tower((block,9),(block,9)), false, 0)
holds(2, on((block,1)), ((puzzle_room,1),table), 0)
holds(2, on((block,10)), nothing, 0)
holds(2, on((block,11)), nothing, 0)
holds(2, on((block,12)), nothing, 0)
holds(2, on((block,2)), ((puzzle_room,1),table), 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, on((block,7)), ((puzzle_room,2),table), 0)
holds(2, on((block,8)), ((puzzle_room,2),table), 0)
holds(2, on((block,9)), (block,7), 0)
holds(2, tower_base((block,1),((puzzle_room,1),table)), true, 0)
holds(2, tower_base((block,1),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,10),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,10),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,11),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,11),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,12),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,12),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,2),((puzzle_room,1),table)), true, 0)
holds(2, tower_base((block,2),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,3),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,3),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,4),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,4),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,5),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,5),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,6),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,6),((puzzle_room,2),table)), false, 0)
holds(2, tower_base((block,7),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,7),((puzzle_room,2),table)), true, 0)
holds(2, tower_base((block,8),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,8),((puzzle_room,2),table)), true, 0)
holds(2, tower_base((block,9),((puzzle_room,1),table)), false, 0)
holds(2, tower_base((block,9),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,1),((puzzle_room,1),table)), true, 0)
holds(2, unordered_tower((block,1),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,10),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,10),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,11),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,11),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,12),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,12),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,2),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,2),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,3),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,3),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,4),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,4),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,5),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,5),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,6),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,6),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,7),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,7),((puzzle_room,2),table)), true, 0)
holds(2, unordered_tower((block,8),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,8),((puzzle_room,2),table)), false, 0)
holds(2, unordered_tower((block,9),((puzzle_room,1),table)), false, 0)
holds(2, unordered_tower((block,9),((puzzle_room,2),table)), false, 0)

[18-01-2022_21-52-50] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete_puzzle(((puzzle_room,1),table)), false, 0)
holds(1, complete_puzzle(((puzzle_room,2),table)), false, 0)
holds(1, complete_tower(blue,((puzzle_room,1),table)), false, 0)
holds(1, complete_tower(blue,((puzzle_room,2),table)), false, 0)
holds(1, complete_tower(red,((puzzle_room,1),table)), false, 0)
holds(1, complete_tower(red,((puzzle_room,2),table)), false, 0)
holds(1, configuration(((hallway,1),door)), closed, 0)
holds(1, configuration(((hallway,2),door)), closed, 0)
holds(1, configuration(((puzzle_room,1),door)), closed, 0)
holds(1, configuration(((puzzle_room,2),door)), closed, 0)
holds(1, configuration(((store_room,1),door)), closed, 0)
holds(1, configuration(((store_room,2),door)), closed, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((((puzzle_room,1),table),left)), ((puzzle_room,1),1), 0)
holds(1, in((((puzzle_room,1),table),middle)), ((puzzle_room,1),1), 0)
holds(1, in((((puzzle_room,1),table),right)), ((puzzle_room,1),1), 0)
holds(1, in((((puzzle_room,2),table),left)), ((puzzle_room,2),1), 0)
holds(1, in((((puzzle_room,2),table),middle)), ((puzzle_room,2),1), 0)
holds(1, in((((puzzle_room,2),table),right)), ((puzzle_room,2),1), 0)
holds(1, in(((puzzle_room,1),table)), ((puzzle_room,1),1), 0)
holds(1, in(((puzzle_room,2),table)), ((puzzle_room,2),1), 0)
holds(1, in((block,1)), ((puzzle_room,1),1), 0)
holds(1, in((block,10)), ((store_room,2),0), 0)
holds(1, in((block,11)), ((store_room,2),0), 0)
holds(1, in((block,12)), ((store_room,2),0), 0)
holds(1, in((block,2)), ((puzzle_room,1),1), 0)
holds(1, in((block,3)), ((puzzle_room,1),1), 0)
holds(1, in((block,4)), ((store_room,1),0), 0)
holds(1, in((block,5)), ((store_room,1),0), 0)
holds(1, in((block,6)), ((store_room,1),0), 0)
holds(1, in((block,7)), ((puzzle_room,2),1), 0)
holds(1, in((block,8)), ((puzzle_room,2),1), 0)
holds(1, in((block,9)), ((puzzle_room,2),1), 0)
holds(1, in(manipulator_arm_1), ((starting_room,1),0), 0)
holds(1, in(manipulator_arm_2), ((starting_room,1),0), 0)
holds(1, in(manipulator_end_1), ((starting_room,1),0), 0)
holds(1, in(manipulator_end_2), ((starting_room,1),0), 0)
holds(1, in(manipulator_limb_1), ((starting_room,1),0), 0)
holds(1, in(manipulator_limb_2), ((starting_room,1),0), 0)
holds(1, in(talos), ((starting_room,1),0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,10)), false, 0)
holds(1, in_tower((block,1),(block,11)), false, 0)
holds(1, in_tower((block,1),(block,12)), false, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,1),(block,7)), false, 0)
holds(1, in_tower((block,1),(block,8)), false, 0)
holds(1, in_tower((block,1),(block,9)), false, 0)
holds(1, in_tower((block,10),(block,1)), false, 0)
holds(1, in_tower((block,10),(block,10)), false, 0)
holds(1, in_tower((block,10),(block,11)), false, 0)
holds(1, in_tower((block,10),(block,12)), false, 0)
holds(1, in_tower((block,10),(block,2)), false, 0)
holds(1, in_tower((block,10),(block,3)), false, 0)
holds(1, in_tower((block,10),(block,4)), false, 0)
holds(1, in_tower((block,10),(block,5)), false, 0)
holds(1, in_tower((block,10),(block,6)), false, 0)
holds(1, in_tower((block,10),(block,7)), false, 0)
holds(1, in_tower((block,10),(block,8)), false, 0)
holds(1, in_tower((block,10),(block,9)), false, 0)
holds(1, in_tower((block,11),(block,1)), false, 0)
holds(1, in_tower((block,11),(block,10)), false, 0)
holds(1, in_tower((block,11),(block,11)), false, 0)
holds(1, in_tower((block,11),(block,12)), false, 0)
holds(1, in_tower((block,11),(block,2)), false, 0)
holds(1, in_tower((block,11),(block,3)), false, 0)
holds(1, in_tower((block,11),(block,4)), false, 0)
holds(1, in_tower((block,11),(block,5)), false, 0)
holds(1, in_tower((block,11),(block,6)), false, 0)
holds(1, in_tower((block,11),(block,7)), false, 0)
holds(1, in_tower((block,11),(block,8)), false, 0)
holds(1, in_tower((block,11),(block,9)), false, 0)
holds(1, in_tower((block,12),(block,1)), false, 0)
holds(1, in_tower((block,12),(block,10)), false, 0)
holds(1, in_tower((block,12),(block,11)), false, 0)
holds(1, in_tower((block,12),(block,12)), false, 0)
holds(1, in_tower((block,12),(block,2)), false, 0)
holds(1, in_tower((block,12),(block,3)), false, 0)
holds(1, in_tower((block,12),(block,4)), false, 0)
holds(1, in_tower((block,12),(block,5)), false, 0)
holds(1, in_tower((block,12),(block,6)), false, 0)
holds(1, in_tower((block,12),(block,7)), false, 0)
holds(1, in_tower((block,12),(block,8)), false, 0)
holds(1, in_tower((block,12),(block,9)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,10)), false, 0)
holds(1, in_tower((block,2),(block,11)), false, 0)
holds(1, in_tower((block,2),(block,12)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,7)), false, 0)
holds(1, in_tower((block,2),(block,8)), false, 0)
holds(1, in_tower((block,2),(block,9)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,10)), false, 0)
holds(1, in_tower((block,3),(block,11)), false, 0)
holds(1, in_tower((block,3),(block,12)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,7)), false, 0)
holds(1, in_tower((block,3),(block,8)), false, 0)
holds(1, in_tower((block,3),(block,9)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,10)), false, 0)
holds(1, in_tower((block,4),(block,11)), false, 0)
holds(1, in_tower((block,4),(block,12)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,7)), false, 0)
holds(1, in_tower((block,4),(block,8)), false, 0)
holds(1, in_tower((block,4),(block,9)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,10)), false, 0)
holds(1, in_tower((block,5),(block,11)), false, 0)
holds(1, in_tower((block,5),(block,12)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,7)), false, 0)
holds(1, in_tower((block,5),(block,8)), false, 0)
holds(1, in_tower((block,5),(block,9)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,10)), false, 0)
holds(1, in_tower((block,6),(block,11)), false, 0)
holds(1, in_tower((block,6),(block,12)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,7)), false, 0)
holds(1, in_tower((block,6),(block,8)), false, 0)
holds(1, in_tower((block,6),(block,9)), false, 0)
holds(1, in_tower((block,7),(block,1)), false, 0)
holds(1, in_tower((block,7),(block,10)), false, 0)
holds(1, in_tower((block,7),(block,11)), false, 0)
holds(1, in_tower((block,7),(block,12)), false, 0)
holds(1, in_tower((block,7),(block,2)), false, 0)
holds(1, in_tower((block,7),(block,3)), false, 0)
holds(1, in_tower((block,7),(block,4)), false, 0)
holds(1, in_tower((block,7),(block,5)), false, 0)
holds(1, in_tower((block,7),(block,6)), false, 0)
holds(1, in_tower((block,7),(block,7)), true, 0)
holds(1, in_tower((block,7),(block,8)), false, 0)
holds(1, in_tower((block,7),(block,9)), true, 0)
holds(1, in_tower((block,8),(block,1)), false, 0)
holds(1, in_tower((block,8),(block,10)), false, 0)
holds(1, in_tower((block,8),(block,11)), false, 0)
holds(1, in_tower((block,8),(block,12)), false, 0)
holds(1, in_tower((block,8),(block,2)), false, 0)
holds(1, in_tower((block,8),(block,3)), false, 0)
holds(1, in_tower((block,8),(block,4)), false, 0)
holds(1, in_tower((block,8),(block,5)), false, 0)
holds(1, in_tower((block,8),(block,6)), false, 0)
holds(1, in_tower((block,8),(block,7)), false, 0)
holds(1, in_tower((block,8),(block,8)), true, 0)
holds(1, in_tower((block,8),(block,9)), false, 0)
holds(1, in_tower((block,9),(block,1)), false, 0)
holds(1, in_tower((block,9),(block,10)), false, 0)
holds(1, in_tower((block,9),(block,11)), false, 0)
holds(1, in_tower((block,9),(block,12)), false, 0)
holds(1, in_tower((block,9),(block,2)), false, 0)
holds(1, in_tower((block,9),(block,3)), false, 0)
holds(1, in_tower((block,9),(block,4)), false, 0)
holds(1, in_tower((block,9),(block,5)), false, 0)
holds(1, in_tower((block,9),(block,6)), false, 0)
holds(1, in_tower((block,9),(block,7)), false, 0)
holds(1, in_tower((block,9),(block,8)), false, 0)
holds(1, in_tower((block,9),(block,9)), false, 0)
holds(1, on((block,1)), (((puzzle_room,1),table),left), 0)
holds(1, on((block,10)), nothing, 0)
holds(1, on((block,11)), nothing, 0)
holds(1, on((block,12)), nothing, 0)
holds(1, on((block,2)), (((puzzle_room,1),table),right), 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, on((block,7)), (((puzzle_room,2),table),left), 0)
holds(1, on((block,8)), (((puzzle_room,2),table),right), 0)
holds(1, on((block,9)), (block,7), 0)
holds(1, tower_base((block,1),((puzzle_room,1),table)), true, 0)
holds(1, tower_base((block,1),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,10),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,10),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,11),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,11),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,12),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,12),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,2),((puzzle_room,1),table)), true, 0)
holds(1, tower_base((block,2),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,3),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,3),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,4),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,4),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,5),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,5),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,6),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,6),((puzzle_room,2),table)), false, 0)
holds(1, tower_base((block,7),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,7),((puzzle_room,2),table)), true, 0)
holds(1, tower_base((block,8),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,8),((puzzle_room,2),table)), true, 0)
holds(1, tower_base((block,9),((puzzle_room,1),table)), false, 0)
holds(1, tower_base((block,9),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,1),((puzzle_room,1),table)), true, 0)
holds(1, unordered_tower((block,1),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,10),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,10),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,11),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,11),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,12),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,12),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,2),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,2),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,3),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,3),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,4),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,4),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,5),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,5),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,6),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,6),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,7),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,7),((puzzle_room,2),table)), true, 0)
holds(1, unordered_tower((block,8),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,8),((puzzle_room,2),table)), false, 0)
holds(1, unordered_tower((block,9),((puzzle_room,1),table)), false, 0)
holds(1, unordered_tower((block,9),((puzzle_room,2),table)), false, 0)

[18-01-2022_21-52-50] INFO :: ASH Planner Main #1 >> Generating final-goals...

[18-01-2022_21-52-50] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[18-01-2022_21-52-50] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 391 rules

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.003007799999999783s

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[18-01-2022_21-52-50] WARNING :: Logic Program Main #1 || Generate Final Goals #1 >> Clingo warning MessageCode.AtomUndefined: <string>:466:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.317625s.

[18-01-2022_21-52-50] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.406044s with result Satisfiable.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.317625s, Solving = 0.406044s, Total = 0.723669s, Memory = (RSS = 160.339844Mb, VMS = 148.433594Mb)
Final Model :: Total atoms = 17430, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.317625s, Solving = 0.406044s, Total = 0.723669s, Memory = (RSS = 160.339844Mb, VMS = 148.433594Mb)
Final Model :: Total atoms = 17430, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_puzzle(((puzzle_room,1),table)), true, true)
final_goal(5, complete_puzzle(((puzzle_room,2),table)), true, true)
final_goal(5, complete_tower(blue,((puzzle_room,1),table)), true, true)
final_goal(5, complete_tower(blue,((puzzle_room,2),table)), true, true)
final_goal(5, complete_tower(red,((puzzle_room,1),table)), true, true)
final_goal(5, complete_tower(red,((puzzle_room,2),table)), true, true)
final_goal(5, in_tower((block,1),(block,1)), false, true)
final_goal(5, in_tower((block,1),(block,10)), false, true)
final_goal(5, in_tower((block,1),(block,11)), false, true)
final_goal(5, in_tower((block,1),(block,12)), false, true)
final_goal(5, in_tower((block,1),(block,2)), false, true)
final_goal(5, in_tower((block,1),(block,3)), false, true)
final_goal(5, in_tower((block,1),(block,4)), false, true)
final_goal(5, in_tower((block,1),(block,5)), false, true)
final_goal(5, in_tower((block,1),(block,6)), false, true)
final_goal(5, in_tower((block,1),(block,7)), false, true)
final_goal(5, in_tower((block,1),(block,8)), false, true)
final_goal(5, in_tower((block,1),(block,9)), false, true)
final_goal(5, in_tower((block,10),(block,1)), false, true)
final_goal(5, in_tower((block,10),(block,10)), false, true)
final_goal(5, in_tower((block,10),(block,11)), false, true)
final_goal(5, in_tower((block,10),(block,12)), false, true)
final_goal(5, in_tower((block,10),(block,2)), false, true)
final_goal(5, in_tower((block,10),(block,3)), false, true)
final_goal(5, in_tower((block,10),(block,4)), false, true)
final_goal(5, in_tower((block,10),(block,5)), false, true)
final_goal(5, in_tower((block,10),(block,6)), false, true)
final_goal(5, in_tower((block,10),(block,7)), false, true)
final_goal(5, in_tower((block,10),(block,8)), false, true)
final_goal(5, in_tower((block,10),(block,9)), false, true)
final_goal(5, in_tower((block,11),(block,1)), false, true)
final_goal(5, in_tower((block,11),(block,10)), false, true)
final_goal(5, in_tower((block,11),(block,11)), false, true)
final_goal(5, in_tower((block,11),(block,12)), false, true)
final_goal(5, in_tower((block,11),(block,2)), false, true)
final_goal(5, in_tower((block,11),(block,3)), false, true)
final_goal(5, in_tower((block,11),(block,4)), false, true)
final_goal(5, in_tower((block,11),(block,5)), false, true)
final_goal(5, in_tower((block,11),(block,6)), false, true)
final_goal(5, in_tower((block,11),(block,7)), false, true)
final_goal(5, in_tower((block,11),(block,8)), false, true)
final_goal(5, in_tower((block,11),(block,9)), false, true)
final_goal(5, in_tower((block,12),(block,1)), false, true)
final_goal(5, in_tower((block,12),(block,10)), true, true)
final_goal(5, in_tower((block,12),(block,11)), true, true)
final_goal(5, in_tower((block,12),(block,12)), true, true)
final_goal(5, in_tower((block,12),(block,2)), false, true)
final_goal(5, in_tower((block,12),(block,3)), false, true)
final_goal(5, in_tower((block,12),(block,4)), false, true)
final_goal(5, in_tower((block,12),(block,5)), false, true)
final_goal(5, in_tower((block,12),(block,6)), false, true)
final_goal(5, in_tower((block,12),(block,7)), false, true)
final_goal(5, in_tower((block,12),(block,8)), false, true)
final_goal(5, in_tower((block,12),(block,9)), false, true)
final_goal(5, in_tower((block,2),(block,1)), false, true)
final_goal(5, in_tower((block,2),(block,10)), false, true)
final_goal(5, in_tower((block,2),(block,11)), false, true)
final_goal(5, in_tower((block,2),(block,12)), false, true)
final_goal(5, in_tower((block,2),(block,2)), false, true)
final_goal(5, in_tower((block,2),(block,3)), false, true)
final_goal(5, in_tower((block,2),(block,4)), false, true)
final_goal(5, in_tower((block,2),(block,5)), false, true)
final_goal(5, in_tower((block,2),(block,6)), false, true)
final_goal(5, in_tower((block,2),(block,7)), false, true)
final_goal(5, in_tower((block,2),(block,8)), false, true)
final_goal(5, in_tower((block,2),(block,9)), false, true)
final_goal(5, in_tower((block,3),(block,1)), true, true)
final_goal(5, in_tower((block,3),(block,10)), false, true)
final_goal(5, in_tower((block,3),(block,11)), false, true)
final_goal(5, in_tower((block,3),(block,12)), false, true)
final_goal(5, in_tower((block,3),(block,2)), true, true)
final_goal(5, in_tower((block,3),(block,3)), true, true)
final_goal(5, in_tower((block,3),(block,4)), false, true)
final_goal(5, in_tower((block,3),(block,5)), false, true)
final_goal(5, in_tower((block,3),(block,6)), false, true)
final_goal(5, in_tower((block,3),(block,7)), false, true)
final_goal(5, in_tower((block,3),(block,8)), false, true)
final_goal(5, in_tower((block,3),(block,9)), false, true)
final_goal(5, in_tower((block,4),(block,1)), false, true)
final_goal(5, in_tower((block,4),(block,10)), false, true)
final_goal(5, in_tower((block,4),(block,11)), false, true)
final_goal(5, in_tower((block,4),(block,12)), false, true)
final_goal(5, in_tower((block,4),(block,2)), false, true)
final_goal(5, in_tower((block,4),(block,3)), false, true)
final_goal(5, in_tower((block,4),(block,4)), false, true)
final_goal(5, in_tower((block,4),(block,5)), false, true)
final_goal(5, in_tower((block,4),(block,6)), false, true)
final_goal(5, in_tower((block,4),(block,7)), false, true)
final_goal(5, in_tower((block,4),(block,8)), false, true)
final_goal(5, in_tower((block,4),(block,9)), false, true)
final_goal(5, in_tower((block,5),(block,1)), false, true)
final_goal(5, in_tower((block,5),(block,10)), false, true)
final_goal(5, in_tower((block,5),(block,11)), false, true)
final_goal(5, in_tower((block,5),(block,12)), false, true)
final_goal(5, in_tower((block,5),(block,2)), false, true)
final_goal(5, in_tower((block,5),(block,3)), false, true)
final_goal(5, in_tower((block,5),(block,4)), false, true)
final_goal(5, in_tower((block,5),(block,5)), false, true)
final_goal(5, in_tower((block,5),(block,6)), false, true)
final_goal(5, in_tower((block,5),(block,7)), false, true)
final_goal(5, in_tower((block,5),(block,8)), false, true)
final_goal(5, in_tower((block,5),(block,9)), false, true)
final_goal(5, in_tower((block,6),(block,1)), false, true)
final_goal(5, in_tower((block,6),(block,10)), false, true)
final_goal(5, in_tower((block,6),(block,11)), false, true)
final_goal(5, in_tower((block,6),(block,12)), false, true)
final_goal(5, in_tower((block,6),(block,2)), false, true)
final_goal(5, in_tower((block,6),(block,3)), false, true)
final_goal(5, in_tower((block,6),(block,4)), true, true)
final_goal(5, in_tower((block,6),(block,5)), true, true)
final_goal(5, in_tower((block,6),(block,6)), true, true)
final_goal(5, in_tower((block,6),(block,7)), false, true)
final_goal(5, in_tower((block,6),(block,8)), false, true)
final_goal(5, in_tower((block,6),(block,9)), false, true)
final_goal(5, in_tower((block,7),(block,1)), false, true)
final_goal(5, in_tower((block,7),(block,10)), false, true)
final_goal(5, in_tower((block,7),(block,11)), false, true)
final_goal(5, in_tower((block,7),(block,12)), false, true)
final_goal(5, in_tower((block,7),(block,2)), false, true)
final_goal(5, in_tower((block,7),(block,3)), false, true)
final_goal(5, in_tower((block,7),(block,4)), false, true)
final_goal(5, in_tower((block,7),(block,5)), false, true)
final_goal(5, in_tower((block,7),(block,6)), false, true)
final_goal(5, in_tower((block,7),(block,7)), false, true)
final_goal(5, in_tower((block,7),(block,8)), false, true)
final_goal(5, in_tower((block,7),(block,9)), false, true)
final_goal(5, in_tower((block,8),(block,1)), false, true)
final_goal(5, in_tower((block,8),(block,10)), false, true)
final_goal(5, in_tower((block,8),(block,11)), false, true)
final_goal(5, in_tower((block,8),(block,12)), false, true)
final_goal(5, in_tower((block,8),(block,2)), false, true)
final_goal(5, in_tower((block,8),(block,3)), false, true)
final_goal(5, in_tower((block,8),(block,4)), false, true)
final_goal(5, in_tower((block,8),(block,5)), false, true)
final_goal(5, in_tower((block,8),(block,6)), false, true)
final_goal(5, in_tower((block,8),(block,7)), false, true)
final_goal(5, in_tower((block,8),(block,8)), false, true)
final_goal(5, in_tower((block,8),(block,9)), false, true)
final_goal(5, in_tower((block,9),(block,1)), false, true)
final_goal(5, in_tower((block,9),(block,10)), false, true)
final_goal(5, in_tower((block,9),(block,11)), false, true)
final_goal(5, in_tower((block,9),(block,12)), false, true)
final_goal(5, in_tower((block,9),(block,2)), false, true)
final_goal(5, in_tower((block,9),(block,3)), false, true)
final_goal(5, in_tower((block,9),(block,4)), false, true)
final_goal(5, in_tower((block,9),(block,5)), false, true)
final_goal(5, in_tower((block,9),(block,6)), false, true)
final_goal(5, in_tower((block,9),(block,7)), true, true)
final_goal(5, in_tower((block,9),(block,8)), true, true)
final_goal(5, in_tower((block,9),(block,9)), true, true)
final_goal(5, on((block,1)), (block,2), true)
final_goal(5, on((block,10)), (block,11), true)
final_goal(5, on((block,11)), (block,12), true)
final_goal(5, on((block,12)), ((puzzle_room,2),table), true)
final_goal(5, on((block,2)), (block,3), true)
final_goal(5, on((block,3)), ((puzzle_room,1),table), true)
final_goal(5, on((block,4)), (block,5), true)
final_goal(5, on((block,5)), (block,6), true)
final_goal(5, on((block,6)), ((puzzle_room,1),table), true)
final_goal(5, on((block,7)), (block,8), true)
final_goal(5, on((block,8)), (block,9), true)
final_goal(5, on((block,9)), ((puzzle_room,2),table), true)
final_goal(5, tower_base((block,1),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,1),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,10),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,10),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,11),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,11),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,12),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,12),((puzzle_room,2),table)), true, true)
final_goal(5, tower_base((block,2),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,2),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,3),((puzzle_room,1),table)), true, true)
final_goal(5, tower_base((block,3),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,4),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,4),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,5),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,5),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,6),((puzzle_room,1),table)), true, true)
final_goal(5, tower_base((block,6),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,7),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,7),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,8),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,8),((puzzle_room,2),table)), false, true)
final_goal(5, tower_base((block,9),((puzzle_room,1),table)), false, true)
final_goal(5, tower_base((block,9),((puzzle_room,2),table)), true, true)
final_goal(5, unordered_tower((block,1),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,1),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,10),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,10),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,11),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,11),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,12),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,12),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,2),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,2),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,3),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,3),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,4),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,4),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,5),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,5),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,6),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,6),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,7),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,7),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,8),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,8),((puzzle_room,2),table)), false, true)
final_goal(5, unordered_tower((block,9),((puzzle_room,1),table)), false, true)
final_goal(5, unordered_tower((block,9),((puzzle_room,2),table)), false, true)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 5         
      ================================================      

final_goal(5, complete_tower(blue,((puzzle_room,1),table)), false, false)
final_goal(5, complete_tower(blue,((puzzle_room,2),table)), false, false)
final_goal(5, complete_tower(red,((puzzle_room,1),table)), false, false)
final_goal(5, complete_tower(red,((puzzle_room,2),table)), false, false)
final_goal(5, in_tower((block,1),(block,1)), true, false)
final_goal(5, in_tower((block,1),(block,10)), true, false)
final_goal(5, in_tower((block,1),(block,11)), true, false)
final_goal(5, in_tower((block,1),(block,12)), true, false)
final_goal(5, in_tower((block,1),(block,2)), true, false)
final_goal(5, in_tower((block,1),(block,3)), true, false)
final_goal(5, in_tower((block,1),(block,4)), true, false)
final_goal(5, in_tower((block,1),(block,5)), true, false)
final_goal(5, in_tower((block,1),(block,6)), true, false)
final_goal(5, in_tower((block,1),(block,7)), true, false)
final_goal(5, in_tower((block,1),(block,8)), true, false)
final_goal(5, in_tower((block,1),(block,9)), true, false)
final_goal(5, in_tower((block,10),(block,1)), true, false)
final_goal(5, in_tower((block,10),(block,10)), true, false)
final_goal(5, in_tower((block,10),(block,11)), true, false)
final_goal(5, in_tower((block,10),(block,12)), true, false)
final_goal(5, in_tower((block,10),(block,2)), true, false)
final_goal(5, in_tower((block,10),(block,3)), true, false)
final_goal(5, in_tower((block,10),(block,4)), true, false)
final_goal(5, in_tower((block,10),(block,5)), true, false)
final_goal(5, in_tower((block,10),(block,6)), true, false)
final_goal(5, in_tower((block,10),(block,7)), true, false)
final_goal(5, in_tower((block,10),(block,8)), true, false)
final_goal(5, in_tower((block,10),(block,9)), true, false)
final_goal(5, in_tower((block,11),(block,1)), true, false)
final_goal(5, in_tower((block,11),(block,10)), true, false)
final_goal(5, in_tower((block,11),(block,11)), true, false)
final_goal(5, in_tower((block,11),(block,12)), true, false)
final_goal(5, in_tower((block,11),(block,2)), true, false)
final_goal(5, in_tower((block,11),(block,3)), true, false)
final_goal(5, in_tower((block,11),(block,4)), true, false)
final_goal(5, in_tower((block,11),(block,5)), true, false)
final_goal(5, in_tower((block,11),(block,6)), true, false)
final_goal(5, in_tower((block,11),(block,7)), true, false)
final_goal(5, in_tower((block,11),(block,8)), true, false)
final_goal(5, in_tower((block,11),(block,9)), true, false)
final_goal(5, in_tower((block,12),(block,1)), true, false)
final_goal(5, in_tower((block,12),(block,10)), false, false)
final_goal(5, in_tower((block,12),(block,11)), false, false)
final_goal(5, in_tower((block,12),(block,12)), false, false)
final_goal(5, in_tower((block,12),(block,2)), true, false)
final_goal(5, in_tower((block,12),(block,3)), true, false)
final_goal(5, in_tower((block,12),(block,4)), true, false)
final_goal(5, in_tower((block,12),(block,5)), true, false)
final_goal(5, in_tower((block,12),(block,6)), true, false)
final_goal(5, in_tower((block,12),(block,7)), true, false)
final_goal(5, in_tower((block,12),(block,8)), true, false)
final_goal(5, in_tower((block,12),(block,9)), true, false)
final_goal(5, in_tower((block,2),(block,1)), true, false)
final_goal(5, in_tower((block,2),(block,10)), true, false)
final_goal(5, in_tower((block,2),(block,11)), true, false)
final_goal(5, in_tower((block,2),(block,12)), true, false)
final_goal(5, in_tower((block,2),(block,2)), true, false)
final_goal(5, in_tower((block,2),(block,3)), true, false)
final_goal(5, in_tower((block,2),(block,4)), true, false)
final_goal(5, in_tower((block,2),(block,5)), true, false)
final_goal(5, in_tower((block,2),(block,6)), true, false)
final_goal(5, in_tower((block,2),(block,7)), true, false)
final_goal(5, in_tower((block,2),(block,8)), true, false)
final_goal(5, in_tower((block,2),(block,9)), true, false)
final_goal(5, in_tower((block,3),(block,1)), false, false)
final_goal(5, in_tower((block,3),(block,10)), true, false)
final_goal(5, in_tower((block,3),(block,11)), true, false)
final_goal(5, in_tower((block,3),(block,12)), true, false)
final_goal(5, in_tower((block,3),(block,2)), false, false)
final_goal(5, in_tower((block,3),(block,3)), false, false)
final_goal(5, in_tower((block,3),(block,4)), true, false)
final_goal(5, in_tower((block,3),(block,5)), true, false)
final_goal(5, in_tower((block,3),(block,6)), true, false)
final_goal(5, in_tower((block,3),(block,7)), true, false)
final_goal(5, in_tower((block,3),(block,8)), true, false)
final_goal(5, in_tower((block,3),(block,9)), true, false)
final_goal(5, in_tower((block,4),(block,1)), true, false)
final_goal(5, in_tower((block,4),(block,10)), true, false)
final_goal(5, in_tower((block,4),(block,11)), true, false)
final_goal(5, in_tower((block,4),(block,12)), true, false)
final_goal(5, in_tower((block,4),(block,2)), true, false)
final_goal(5, in_tower((block,4),(block,3)), true, false)
final_goal(5, in_tower((block,4),(block,4)), true, false)
final_goal(5, in_tower((block,4),(block,5)), true, false)
final_goal(5, in_tower((block,4),(block,6)), true, false)
final_goal(5, in_tower((block,4),(block,7)), true, false)
final_goal(5, in_tower((block,4),(block,8)), true, false)
final_goal(5, in_tower((block,4),(block,9)), true, false)
final_goal(5, in_tower((block,5),(block,1)), true, false)
final_goal(5, in_tower((block,5),(block,10)), true, false)
final_goal(5, in_tower((block,5),(block,11)), true, false)
final_goal(5, in_tower((block,5),(block,12)), true, false)
final_goal(5, in_tower((block,5),(block,2)), true, false)
final_goal(5, in_tower((block,5),(block,3)), true, false)
final_goal(5, in_tower((block,5),(block,4)), true, false)
final_goal(5, in_tower((block,5),(block,5)), true, false)
final_goal(5, in_tower((block,5),(block,6)), true, false)
final_goal(5, in_tower((block,5),(block,7)), true, false)
final_goal(5, in_tower((block,5),(block,8)), true, false)
final_goal(5, in_tower((block,5),(block,9)), true, false)
final_goal(5, in_tower((block,6),(block,1)), true, false)
final_goal(5, in_tower((block,6),(block,10)), true, false)
final_goal(5, in_tower((block,6),(block,11)), true, false)
final_goal(5, in_tower((block,6),(block,12)), true, false)
final_goal(5, in_tower((block,6),(block,2)), true, false)
final_goal(5, in_tower((block,6),(block,3)), true, false)
final_goal(5, in_tower((block,6),(block,4)), false, false)
final_goal(5, in_tower((block,6),(block,5)), false, false)
final_goal(5, in_tower((block,6),(block,6)), false, false)
final_goal(5, in_tower((block,6),(block,7)), true, false)
final_goal(5, in_tower((block,6),(block,8)), true, false)
final_goal(5, in_tower((block,6),(block,9)), true, false)
final_goal(5, in_tower((block,7),(block,1)), true, false)
final_goal(5, in_tower((block,7),(block,10)), true, false)
final_goal(5, in_tower((block,7),(block,11)), true, false)
final_goal(5, in_tower((block,7),(block,12)), true, false)
final_goal(5, in_tower((block,7),(block,2)), true, false)
final_goal(5, in_tower((block,7),(block,3)), true, false)
final_goal(5, in_tower((block,7),(block,4)), true, false)
final_goal(5, in_tower((block,7),(block,5)), true, false)
final_goal(5, in_tower((block,7),(block,6)), true, false)
final_goal(5, in_tower((block,7),(block,7)), true, false)
final_goal(5, in_tower((block,7),(block,8)), true, false)
final_goal(5, in_tower((block,7),(block,9)), true, false)
final_goal(5, in_tower((block,8),(block,1)), true, false)
final_goal(5, in_tower((block,8),(block,10)), true, false)
final_goal(5, in_tower((block,8),(block,11)), true, false)
final_goal(5, in_tower((block,8),(block,12)), true, false)
final_goal(5, in_tower((block,8),(block,2)), true, false)
final_goal(5, in_tower((block,8),(block,3)), true, false)
final_goal(5, in_tower((block,8),(block,4)), true, false)
final_goal(5, in_tower((block,8),(block,5)), true, false)
final_goal(5, in_tower((block,8),(block,6)), true, false)
final_goal(5, in_tower((block,8),(block,7)), true, false)
final_goal(5, in_tower((block,8),(block,8)), true, false)
final_goal(5, in_tower((block,8),(block,9)), true, false)
final_goal(5, in_tower((block,9),(block,1)), true, false)
final_goal(5, in_tower((block,9),(block,10)), true, false)
final_goal(5, in_tower((block,9),(block,11)), true, false)
final_goal(5, in_tower((block,9),(block,12)), true, false)
final_goal(5, in_tower((block,9),(block,2)), true, false)
final_goal(5, in_tower((block,9),(block,3)), true, false)
final_goal(5, in_tower((block,9),(block,4)), true, false)
final_goal(5, in_tower((block,9),(block,5)), true, false)
final_goal(5, in_tower((block,9),(block,6)), true, false)
final_goal(5, in_tower((block,9),(block,7)), false, false)
final_goal(5, in_tower((block,9),(block,8)), false, false)
final_goal(5, in_tower((block,9),(block,9)), false, false)
final_goal(5, on((block,1)), ((puzzle_room,1),table), false)
final_goal(5, on((block,1)), ((puzzle_room,2),table), false)
final_goal(5, on((block,1)), (block,10), false)
final_goal(5, on((block,1)), (block,11), false)
final_goal(5, on((block,1)), (block,12), false)
final_goal(5, on((block,1)), (block,3), false)
final_goal(5, on((block,1)), (block,4), false)
final_goal(5, on((block,1)), (block,5), false)
final_goal(5, on((block,1)), (block,6), false)
final_goal(5, on((block,1)), (block,7), false)
final_goal(5, on((block,1)), (block,8), false)
final_goal(5, on((block,1)), (block,9), false)
final_goal(5, on((block,1)), nothing, false)
final_goal(5, on((block,10)), ((puzzle_room,1),table), false)
final_goal(5, on((block,10)), ((puzzle_room,2),table), false)
final_goal(5, on((block,10)), (block,1), false)
final_goal(5, on((block,10)), (block,12), false)
final_goal(5, on((block,10)), (block,2), false)
final_goal(5, on((block,10)), (block,3), false)
final_goal(5, on((block,10)), (block,4), false)
final_goal(5, on((block,10)), (block,5), false)
final_goal(5, on((block,10)), (block,6), false)
final_goal(5, on((block,10)), (block,7), false)
final_goal(5, on((block,10)), (block,8), false)
final_goal(5, on((block,10)), (block,9), false)
final_goal(5, on((block,10)), nothing, false)
final_goal(5, on((block,11)), ((puzzle_room,1),table), false)
final_goal(5, on((block,11)), ((puzzle_room,2),table), false)
final_goal(5, on((block,11)), (block,1), false)
final_goal(5, on((block,11)), (block,10), false)
final_goal(5, on((block,11)), (block,2), false)
final_goal(5, on((block,11)), (block,3), false)
final_goal(5, on((block,11)), (block,4), false)
final_goal(5, on((block,11)), (block,5), false)
final_goal(5, on((block,11)), (block,6), false)
final_goal(5, on((block,11)), (block,7), false)
final_goal(5, on((block,11)), (block,8), false)
final_goal(5, on((block,11)), (block,9), false)
final_goal(5, on((block,11)), nothing, false)
final_goal(5, on((block,12)), ((puzzle_room,1),table), false)
final_goal(5, on((block,12)), (block,1), false)
final_goal(5, on((block,12)), (block,10), false)
final_goal(5, on((block,12)), (block,11), false)
final_goal(5, on((block,12)), (block,2), false)
final_goal(5, on((block,12)), (block,3), false)
final_goal(5, on((block,12)), (block,4), false)
final_goal(5, on((block,12)), (block,5), false)
final_goal(5, on((block,12)), (block,6), false)
final_goal(5, on((block,12)), (block,7), false)
final_goal(5, on((block,12)), (block,8), false)
final_goal(5, on((block,12)), (block,9), false)
final_goal(5, on((block,12)), nothing, false)
final_goal(5, on((block,2)), ((puzzle_room,1),table), false)
final_goal(5, on((block,2)), ((puzzle_room,2),table), false)
final_goal(5, on((block,2)), (block,1), false)
final_goal(5, on((block,2)), (block,10), false)
final_goal(5, on((block,2)), (block,11), false)
final_goal(5, on((block,2)), (block,12), false)
final_goal(5, on((block,2)), (block,4), false)
final_goal(5, on((block,2)), (block,5), false)
final_goal(5, on((block,2)), (block,6), false)
final_goal(5, on((block,2)), (block,7), false)
final_goal(5, on((block,2)), (block,8), false)
final_goal(5, on((block,2)), (block,9), false)
final_goal(5, on((block,2)), nothing, false)
final_goal(5, on((block,3)), ((puzzle_room,2),table), false)
final_goal(5, on((block,3)), (block,1), false)
final_goal(5, on((block,3)), (block,10), false)
final_goal(5, on((block,3)), (block,11), false)
final_goal(5, on((block,3)), (block,12), false)
final_goal(5, on((block,3)), (block,2), false)
final_goal(5, on((block,3)), (block,4), false)
final_goal(5, on((block,3)), (block,5), false)
final_goal(5, on((block,3)), (block,6), false)
final_goal(5, on((block,3)), (block,7), false)
final_goal(5, on((block,3)), (block,8), false)
final_goal(5, on((block,3)), (block,9), false)
final_goal(5, on((block,3)), nothing, false)
final_goal(5, on((block,4)), ((puzzle_room,1),table), false)
final_goal(5, on((block,4)), ((puzzle_room,2),table), false)
final_goal(5, on((block,4)), (block,1), false)
final_goal(5, on((block,4)), (block,10), false)
final_goal(5, on((block,4)), (block,11), false)
final_goal(5, on((block,4)), (block,12), false)
final_goal(5, on((block,4)), (block,2), false)
final_goal(5, on((block,4)), (block,3), false)
final_goal(5, on((block,4)), (block,6), false)
final_goal(5, on((block,4)), (block,7), false)
final_goal(5, on((block,4)), (block,8), false)
final_goal(5, on((block,4)), (block,9), false)
final_goal(5, on((block,4)), nothing, false)
final_goal(5, on((block,5)), ((puzzle_room,1),table), false)
final_goal(5, on((block,5)), ((puzzle_room,2),table), false)
final_goal(5, on((block,5)), (block,1), false)
final_goal(5, on((block,5)), (block,10), false)
final_goal(5, on((block,5)), (block,11), false)
final_goal(5, on((block,5)), (block,12), false)
final_goal(5, on((block,5)), (block,2), false)
final_goal(5, on((block,5)), (block,3), false)
final_goal(5, on((block,5)), (block,4), false)
final_goal(5, on((block,5)), (block,7), false)
final_goal(5, on((block,5)), (block,8), false)
final_goal(5, on((block,5)), (block,9), false)
final_goal(5, on((block,5)), nothing, false)
final_goal(5, on((block,6)), ((puzzle_room,2),table), false)
final_goal(5, on((block,6)), (block,1), false)
final_goal(5, on((block,6)), (block,10), false)
final_goal(5, on((block,6)), (block,11), false)
final_goal(5, on((block,6)), (block,12), false)
final_goal(5, on((block,6)), (block,2), false)
final_goal(5, on((block,6)), (block,3), false)
final_goal(5, on((block,6)), (block,4), false)
final_goal(5, on((block,6)), (block,5), false)
final_goal(5, on((block,6)), (block,7), false)
final_goal(5, on((block,6)), (block,8), false)
final_goal(5, on((block,6)), (block,9), false)
final_goal(5, on((block,6)), nothing, false)
final_goal(5, on((block,7)), ((puzzle_room,1),table), false)
final_goal(5, on((block,7)), ((puzzle_room,2),table), false)
final_goal(5, on((block,7)), (block,1), false)
final_goal(5, on((block,7)), (block,10), false)
final_goal(5, on((block,7)), (block,11), false)
final_goal(5, on((block,7)), (block,12), false)
final_goal(5, on((block,7)), (block,2), false)
final_goal(5, on((block,7)), (block,3), false)
final_goal(5, on((block,7)), (block,4), false)
final_goal(5, on((block,7)), (block,5), false)
final_goal(5, on((block,7)), (block,6), false)
final_goal(5, on((block,7)), (block,9), false)
final_goal(5, on((block,7)), nothing, false)
final_goal(5, on((block,8)), ((puzzle_room,1),table), false)
final_goal(5, on((block,8)), ((puzzle_room,2),table), false)
final_goal(5, on((block,8)), (block,1), false)
final_goal(5, on((block,8)), (block,10), false)
final_goal(5, on((block,8)), (block,11), false)
final_goal(5, on((block,8)), (block,12), false)
final_goal(5, on((block,8)), (block,2), false)
final_goal(5, on((block,8)), (block,3), false)
final_goal(5, on((block,8)), (block,4), false)
final_goal(5, on((block,8)), (block,5), false)
final_goal(5, on((block,8)), (block,6), false)
final_goal(5, on((block,8)), (block,7), false)
final_goal(5, on((block,8)), nothing, false)
final_goal(5, on((block,9)), ((puzzle_room,1),table), false)
final_goal(5, on((block,9)), (block,1), false)
final_goal(5, on((block,9)), (block,10), false)
final_goal(5, on((block,9)), (block,11), false)
final_goal(5, on((block,9)), (block,12), false)
final_goal(5, on((block,9)), (block,2), false)
final_goal(5, on((block,9)), (block,3), false)
final_goal(5, on((block,9)), (block,4), false)
final_goal(5, on((block,9)), (block,5), false)
final_goal(5, on((block,9)), (block,6), false)
final_goal(5, on((block,9)), (block,7), false)
final_goal(5, on((block,9)), (block,8), false)
final_goal(5, on((block,9)), nothing, false)
final_goal(5, tower_base((block,1),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,1),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,10),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,10),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,11),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,11),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,12),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,12),((puzzle_room,2),table)), false, false)
final_goal(5, tower_base((block,2),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,2),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,3),((puzzle_room,1),table)), false, false)
final_goal(5, tower_base((block,3),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,4),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,4),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,5),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,5),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,6),((puzzle_room,1),table)), false, false)
final_goal(5, tower_base((block,6),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,7),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,7),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,8),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,8),((puzzle_room,2),table)), true, false)
final_goal(5, tower_base((block,9),((puzzle_room,1),table)), true, false)
final_goal(5, tower_base((block,9),((puzzle_room,2),table)), false, false)
final_goal(5, unordered_tower((block,1),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,1),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,10),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,10),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,11),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,11),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,12),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,12),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,2),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,2),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,3),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,3),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,4),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,4),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,5),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,5),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,6),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,6),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,7),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,7),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,8),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,8),((puzzle_room,2),table)), true, false)
final_goal(5, unordered_tower((block,9),((puzzle_room,1),table)), true, false)
final_goal(5, unordered_tower((block,9),((puzzle_room,2),table)), true, false)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_puzzle(((puzzle_room,1),table)), true, true)
final_goal(4, complete_puzzle(((puzzle_room,2),table)), true, true)
final_goal(4, complete_tower(blue,((puzzle_room,1),table)), true, true)
final_goal(4, complete_tower(blue,((puzzle_room,2),table)), true, true)
final_goal(4, complete_tower(red,((puzzle_room,1),table)), true, true)
final_goal(4, complete_tower(red,((puzzle_room,2),table)), true, true)
final_goal(4, in_tower((block,1),(block,1)), false, true)
final_goal(4, in_tower((block,1),(block,10)), false, true)
final_goal(4, in_tower((block,1),(block,11)), false, true)
final_goal(4, in_tower((block,1),(block,12)), false, true)
final_goal(4, in_tower((block,1),(block,2)), false, true)
final_goal(4, in_tower((block,1),(block,3)), false, true)
final_goal(4, in_tower((block,1),(block,4)), false, true)
final_goal(4, in_tower((block,1),(block,5)), false, true)
final_goal(4, in_tower((block,1),(block,6)), false, true)
final_goal(4, in_tower((block,1),(block,7)), false, true)
final_goal(4, in_tower((block,1),(block,8)), false, true)
final_goal(4, in_tower((block,1),(block,9)), false, true)
final_goal(4, in_tower((block,10),(block,1)), false, true)
final_goal(4, in_tower((block,10),(block,10)), false, true)
final_goal(4, in_tower((block,10),(block,11)), false, true)
final_goal(4, in_tower((block,10),(block,12)), false, true)
final_goal(4, in_tower((block,10),(block,2)), false, true)
final_goal(4, in_tower((block,10),(block,3)), false, true)
final_goal(4, in_tower((block,10),(block,4)), false, true)
final_goal(4, in_tower((block,10),(block,5)), false, true)
final_goal(4, in_tower((block,10),(block,6)), false, true)
final_goal(4, in_tower((block,10),(block,7)), false, true)
final_goal(4, in_tower((block,10),(block,8)), false, true)
final_goal(4, in_tower((block,10),(block,9)), false, true)
final_goal(4, in_tower((block,11),(block,1)), false, true)
final_goal(4, in_tower((block,11),(block,10)), false, true)
final_goal(4, in_tower((block,11),(block,11)), false, true)
final_goal(4, in_tower((block,11),(block,12)), false, true)
final_goal(4, in_tower((block,11),(block,2)), false, true)
final_goal(4, in_tower((block,11),(block,3)), false, true)
final_goal(4, in_tower((block,11),(block,4)), false, true)
final_goal(4, in_tower((block,11),(block,5)), false, true)
final_goal(4, in_tower((block,11),(block,6)), false, true)
final_goal(4, in_tower((block,11),(block,7)), false, true)
final_goal(4, in_tower((block,11),(block,8)), false, true)
final_goal(4, in_tower((block,11),(block,9)), false, true)
final_goal(4, in_tower((block,12),(block,1)), false, true)
final_goal(4, in_tower((block,12),(block,10)), true, true)
final_goal(4, in_tower((block,12),(block,11)), true, true)
final_goal(4, in_tower((block,12),(block,12)), true, true)
final_goal(4, in_tower((block,12),(block,2)), false, true)
final_goal(4, in_tower((block,12),(block,3)), false, true)
final_goal(4, in_tower((block,12),(block,4)), false, true)
final_goal(4, in_tower((block,12),(block,5)), false, true)
final_goal(4, in_tower((block,12),(block,6)), false, true)
final_goal(4, in_tower((block,12),(block,7)), false, true)
final_goal(4, in_tower((block,12),(block,8)), false, true)
final_goal(4, in_tower((block,12),(block,9)), false, true)
final_goal(4, in_tower((block,2),(block,1)), false, true)
final_goal(4, in_tower((block,2),(block,10)), false, true)
final_goal(4, in_tower((block,2),(block,11)), false, true)
final_goal(4, in_tower((block,2),(block,12)), false, true)
final_goal(4, in_tower((block,2),(block,2)), false, true)
final_goal(4, in_tower((block,2),(block,3)), false, true)
final_goal(4, in_tower((block,2),(block,4)), false, true)
final_goal(4, in_tower((block,2),(block,5)), false, true)
final_goal(4, in_tower((block,2),(block,6)), false, true)
final_goal(4, in_tower((block,2),(block,7)), false, true)
final_goal(4, in_tower((block,2),(block,8)), false, true)
final_goal(4, in_tower((block,2),(block,9)), false, true)
final_goal(4, in_tower((block,3),(block,1)), true, true)
final_goal(4, in_tower((block,3),(block,10)), false, true)
final_goal(4, in_tower((block,3),(block,11)), false, true)
final_goal(4, in_tower((block,3),(block,12)), false, true)
final_goal(4, in_tower((block,3),(block,2)), true, true)
final_goal(4, in_tower((block,3),(block,3)), true, true)
final_goal(4, in_tower((block,3),(block,4)), false, true)
final_goal(4, in_tower((block,3),(block,5)), false, true)
final_goal(4, in_tower((block,3),(block,6)), false, true)
final_goal(4, in_tower((block,3),(block,7)), false, true)
final_goal(4, in_tower((block,3),(block,8)), false, true)
final_goal(4, in_tower((block,3),(block,9)), false, true)
final_goal(4, in_tower((block,4),(block,1)), false, true)
final_goal(4, in_tower((block,4),(block,10)), false, true)
final_goal(4, in_tower((block,4),(block,11)), false, true)
final_goal(4, in_tower((block,4),(block,12)), false, true)
final_goal(4, in_tower((block,4),(block,2)), false, true)
final_goal(4, in_tower((block,4),(block,3)), false, true)
final_goal(4, in_tower((block,4),(block,4)), false, true)
final_goal(4, in_tower((block,4),(block,5)), false, true)
final_goal(4, in_tower((block,4),(block,6)), false, true)
final_goal(4, in_tower((block,4),(block,7)), false, true)
final_goal(4, in_tower((block,4),(block,8)), false, true)
final_goal(4, in_tower((block,4),(block,9)), false, true)
final_goal(4, in_tower((block,5),(block,1)), false, true)
final_goal(4, in_tower((block,5),(block,10)), false, true)
final_goal(4, in_tower((block,5),(block,11)), false, true)
final_goal(4, in_tower((block,5),(block,12)), false, true)
final_goal(4, in_tower((block,5),(block,2)), false, true)
final_goal(4, in_tower((block,5),(block,3)), false, true)
final_goal(4, in_tower((block,5),(block,4)), false, true)
final_goal(4, in_tower((block,5),(block,5)), false, true)
final_goal(4, in_tower((block,5),(block,6)), false, true)
final_goal(4, in_tower((block,5),(block,7)), false, true)
final_goal(4, in_tower((block,5),(block,8)), false, true)
final_goal(4, in_tower((block,5),(block,9)), false, true)
final_goal(4, in_tower((block,6),(block,1)), false, true)
final_goal(4, in_tower((block,6),(block,10)), false, true)
final_goal(4, in_tower((block,6),(block,11)), false, true)
final_goal(4, in_tower((block,6),(block,12)), false, true)
final_goal(4, in_tower((block,6),(block,2)), false, true)
final_goal(4, in_tower((block,6),(block,3)), false, true)
final_goal(4, in_tower((block,6),(block,4)), true, true)
final_goal(4, in_tower((block,6),(block,5)), true, true)
final_goal(4, in_tower((block,6),(block,6)), true, true)
final_goal(4, in_tower((block,6),(block,7)), false, true)
final_goal(4, in_tower((block,6),(block,8)), false, true)
final_goal(4, in_tower((block,6),(block,9)), false, true)
final_goal(4, in_tower((block,7),(block,1)), false, true)
final_goal(4, in_tower((block,7),(block,10)), false, true)
final_goal(4, in_tower((block,7),(block,11)), false, true)
final_goal(4, in_tower((block,7),(block,12)), false, true)
final_goal(4, in_tower((block,7),(block,2)), false, true)
final_goal(4, in_tower((block,7),(block,3)), false, true)
final_goal(4, in_tower((block,7),(block,4)), false, true)
final_goal(4, in_tower((block,7),(block,5)), false, true)
final_goal(4, in_tower((block,7),(block,6)), false, true)
final_goal(4, in_tower((block,7),(block,7)), false, true)
final_goal(4, in_tower((block,7),(block,8)), false, true)
final_goal(4, in_tower((block,7),(block,9)), false, true)
final_goal(4, in_tower((block,8),(block,1)), false, true)
final_goal(4, in_tower((block,8),(block,10)), false, true)
final_goal(4, in_tower((block,8),(block,11)), false, true)
final_goal(4, in_tower((block,8),(block,12)), false, true)
final_goal(4, in_tower((block,8),(block,2)), false, true)
final_goal(4, in_tower((block,8),(block,3)), false, true)
final_goal(4, in_tower((block,8),(block,4)), false, true)
final_goal(4, in_tower((block,8),(block,5)), false, true)
final_goal(4, in_tower((block,8),(block,6)), false, true)
final_goal(4, in_tower((block,8),(block,7)), false, true)
final_goal(4, in_tower((block,8),(block,8)), false, true)
final_goal(4, in_tower((block,8),(block,9)), false, true)
final_goal(4, in_tower((block,9),(block,1)), false, true)
final_goal(4, in_tower((block,9),(block,10)), false, true)
final_goal(4, in_tower((block,9),(block,11)), false, true)
final_goal(4, in_tower((block,9),(block,12)), false, true)
final_goal(4, in_tower((block,9),(block,2)), false, true)
final_goal(4, in_tower((block,9),(block,3)), false, true)
final_goal(4, in_tower((block,9),(block,4)), false, true)
final_goal(4, in_tower((block,9),(block,5)), false, true)
final_goal(4, in_tower((block,9),(block,6)), false, true)
final_goal(4, in_tower((block,9),(block,7)), true, true)
final_goal(4, in_tower((block,9),(block,8)), true, true)
final_goal(4, in_tower((block,9),(block,9)), true, true)
final_goal(4, on((block,1)), (block,2), true)
final_goal(4, on((block,10)), (block,11), true)
final_goal(4, on((block,11)), (block,12), true)
final_goal(4, on((block,12)), ((puzzle_room,2),table), true)
final_goal(4, on((block,2)), (block,3), true)
final_goal(4, on((block,3)), ((puzzle_room,1),table), true)
final_goal(4, on((block,4)), (block,5), true)
final_goal(4, on((block,5)), (block,6), true)
final_goal(4, on((block,6)), ((puzzle_room,1),table), true)
final_goal(4, on((block,7)), (block,8), true)
final_goal(4, on((block,8)), (block,9), true)
final_goal(4, on((block,9)), ((puzzle_room,2),table), true)
final_goal(4, tower_base((block,1),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,1),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,10),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,10),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,11),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,11),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,12),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,12),((puzzle_room,2),table)), true, true)
final_goal(4, tower_base((block,2),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,2),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,3),((puzzle_room,1),table)), true, true)
final_goal(4, tower_base((block,3),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,4),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,4),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,5),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,5),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,6),((puzzle_room,1),table)), true, true)
final_goal(4, tower_base((block,6),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,7),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,7),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,8),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,8),((puzzle_room,2),table)), false, true)
final_goal(4, tower_base((block,9),((puzzle_room,1),table)), false, true)
final_goal(4, tower_base((block,9),((puzzle_room,2),table)), true, true)
final_goal(4, unordered_tower((block,1),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,1),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,10),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,10),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,11),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,11),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,12),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,12),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,2),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,2),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,3),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,3),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,4),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,4),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,5),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,5),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,6),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,6),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,7),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,7),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,8),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,8),((puzzle_room,2),table)), false, true)
final_goal(4, unordered_tower((block,9),((puzzle_room,1),table)), false, true)
final_goal(4, unordered_tower((block,9),((puzzle_room,2),table)), false, true)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 4         
      ================================================      

final_goal(4, complete_tower(blue,((puzzle_room,1),table)), false, false)
final_goal(4, complete_tower(blue,((puzzle_room,2),table)), false, false)
final_goal(4, complete_tower(red,((puzzle_room,1),table)), false, false)
final_goal(4, complete_tower(red,((puzzle_room,2),table)), false, false)
final_goal(4, in_tower((block,1),(block,1)), true, false)
final_goal(4, in_tower((block,1),(block,10)), true, false)
final_goal(4, in_tower((block,1),(block,11)), true, false)
final_goal(4, in_tower((block,1),(block,12)), true, false)
final_goal(4, in_tower((block,1),(block,2)), true, false)
final_goal(4, in_tower((block,1),(block,3)), true, false)
final_goal(4, in_tower((block,1),(block,4)), true, false)
final_goal(4, in_tower((block,1),(block,5)), true, false)
final_goal(4, in_tower((block,1),(block,6)), true, false)
final_goal(4, in_tower((block,1),(block,7)), true, false)
final_goal(4, in_tower((block,1),(block,8)), true, false)
final_goal(4, in_tower((block,1),(block,9)), true, false)
final_goal(4, in_tower((block,10),(block,1)), true, false)
final_goal(4, in_tower((block,10),(block,10)), true, false)
final_goal(4, in_tower((block,10),(block,11)), true, false)
final_goal(4, in_tower((block,10),(block,12)), true, false)
final_goal(4, in_tower((block,10),(block,2)), true, false)
final_goal(4, in_tower((block,10),(block,3)), true, false)
final_goal(4, in_tower((block,10),(block,4)), true, false)
final_goal(4, in_tower((block,10),(block,5)), true, false)
final_goal(4, in_tower((block,10),(block,6)), true, false)
final_goal(4, in_tower((block,10),(block,7)), true, false)
final_goal(4, in_tower((block,10),(block,8)), true, false)
final_goal(4, in_tower((block,10),(block,9)), true, false)
final_goal(4, in_tower((block,11),(block,1)), true, false)
final_goal(4, in_tower((block,11),(block,10)), true, false)
final_goal(4, in_tower((block,11),(block,11)), true, false)
final_goal(4, in_tower((block,11),(block,12)), true, false)
final_goal(4, in_tower((block,11),(block,2)), true, false)
final_goal(4, in_tower((block,11),(block,3)), true, false)
final_goal(4, in_tower((block,11),(block,4)), true, false)
final_goal(4, in_tower((block,11),(block,5)), true, false)
final_goal(4, in_tower((block,11),(block,6)), true, false)
final_goal(4, in_tower((block,11),(block,7)), true, false)
final_goal(4, in_tower((block,11),(block,8)), true, false)
final_goal(4, in_tower((block,11),(block,9)), true, false)
final_goal(4, in_tower((block,12),(block,1)), true, false)
final_goal(4, in_tower((block,12),(block,10)), false, false)
final_goal(4, in_tower((block,12),(block,11)), false, false)
final_goal(4, in_tower((block,12),(block,12)), false, false)
final_goal(4, in_tower((block,12),(block,2)), true, false)
final_goal(4, in_tower((block,12),(block,3)), true, false)
final_goal(4, in_tower((block,12),(block,4)), true, false)
final_goal(4, in_tower((block,12),(block,5)), true, false)
final_goal(4, in_tower((block,12),(block,6)), true, false)
final_goal(4, in_tower((block,12),(block,7)), true, false)
final_goal(4, in_tower((block,12),(block,8)), true, false)
final_goal(4, in_tower((block,12),(block,9)), true, false)
final_goal(4, in_tower((block,2),(block,1)), true, false)
final_goal(4, in_tower((block,2),(block,10)), true, false)
final_goal(4, in_tower((block,2),(block,11)), true, false)
final_goal(4, in_tower((block,2),(block,12)), true, false)
final_goal(4, in_tower((block,2),(block,2)), true, false)
final_goal(4, in_tower((block,2),(block,3)), true, false)
final_goal(4, in_tower((block,2),(block,4)), true, false)
final_goal(4, in_tower((block,2),(block,5)), true, false)
final_goal(4, in_tower((block,2),(block,6)), true, false)
final_goal(4, in_tower((block,2),(block,7)), true, false)
final_goal(4, in_tower((block,2),(block,8)), true, false)
final_goal(4, in_tower((block,2),(block,9)), true, false)
final_goal(4, in_tower((block,3),(block,1)), false, false)
final_goal(4, in_tower((block,3),(block,10)), true, false)
final_goal(4, in_tower((block,3),(block,11)), true, false)
final_goal(4, in_tower((block,3),(block,12)), true, false)
final_goal(4, in_tower((block,3),(block,2)), false, false)
final_goal(4, in_tower((block,3),(block,3)), false, false)
final_goal(4, in_tower((block,3),(block,4)), true, false)
final_goal(4, in_tower((block,3),(block,5)), true, false)
final_goal(4, in_tower((block,3),(block,6)), true, false)
final_goal(4, in_tower((block,3),(block,7)), true, false)
final_goal(4, in_tower((block,3),(block,8)), true, false)
final_goal(4, in_tower((block,3),(block,9)), true, false)
final_goal(4, in_tower((block,4),(block,1)), true, false)
final_goal(4, in_tower((block,4),(block,10)), true, false)
final_goal(4, in_tower((block,4),(block,11)), true, false)
final_goal(4, in_tower((block,4),(block,12)), true, false)
final_goal(4, in_tower((block,4),(block,2)), true, false)
final_goal(4, in_tower((block,4),(block,3)), true, false)
final_goal(4, in_tower((block,4),(block,4)), true, false)
final_goal(4, in_tower((block,4),(block,5)), true, false)
final_goal(4, in_tower((block,4),(block,6)), true, false)
final_goal(4, in_tower((block,4),(block,7)), true, false)
final_goal(4, in_tower((block,4),(block,8)), true, false)
final_goal(4, in_tower((block,4),(block,9)), true, false)
final_goal(4, in_tower((block,5),(block,1)), true, false)
final_goal(4, in_tower((block,5),(block,10)), true, false)
final_goal(4, in_tower((block,5),(block,11)), true, false)
final_goal(4, in_tower((block,5),(block,12)), true, false)
final_goal(4, in_tower((block,5),(block,2)), true, false)
final_goal(4, in_tower((block,5),(block,3)), true, false)
final_goal(4, in_tower((block,5),(block,4)), true, false)
final_goal(4, in_tower((block,5),(block,5)), true, false)
final_goal(4, in_tower((block,5),(block,6)), true, false)
final_goal(4, in_tower((block,5),(block,7)), true, false)
final_goal(4, in_tower((block,5),(block,8)), true, false)
final_goal(4, in_tower((block,5),(block,9)), true, false)
final_goal(4, in_tower((block,6),(block,1)), true, false)
final_goal(4, in_tower((block,6),(block,10)), true, false)
final_goal(4, in_tower((block,6),(block,11)), true, false)
final_goal(4, in_tower((block,6),(block,12)), true, false)
final_goal(4, in_tower((block,6),(block,2)), true, false)
final_goal(4, in_tower((block,6),(block,3)), true, false)
final_goal(4, in_tower((block,6),(block,4)), false, false)
final_goal(4, in_tower((block,6),(block,5)), false, false)
final_goal(4, in_tower((block,6),(block,6)), false, false)
final_goal(4, in_tower((block,6),(block,7)), true, false)
final_goal(4, in_tower((block,6),(block,8)), true, false)
final_goal(4, in_tower((block,6),(block,9)), true, false)
final_goal(4, in_tower((block,7),(block,1)), true, false)
final_goal(4, in_tower((block,7),(block,10)), true, false)
final_goal(4, in_tower((block,7),(block,11)), true, false)
final_goal(4, in_tower((block,7),(block,12)), true, false)
final_goal(4, in_tower((block,7),(block,2)), true, false)
final_goal(4, in_tower((block,7),(block,3)), true, false)
final_goal(4, in_tower((block,7),(block,4)), true, false)
final_goal(4, in_tower((block,7),(block,5)), true, false)
final_goal(4, in_tower((block,7),(block,6)), true, false)
final_goal(4, in_tower((block,7),(block,7)), true, false)
final_goal(4, in_tower((block,7),(block,8)), true, false)
final_goal(4, in_tower((block,7),(block,9)), true, false)
final_goal(4, in_tower((block,8),(block,1)), true, false)
final_goal(4, in_tower((block,8),(block,10)), true, false)
final_goal(4, in_tower((block,8),(block,11)), true, false)
final_goal(4, in_tower((block,8),(block,12)), true, false)
final_goal(4, in_tower((block,8),(block,2)), true, false)
final_goal(4, in_tower((block,8),(block,3)), true, false)
final_goal(4, in_tower((block,8),(block,4)), true, false)
final_goal(4, in_tower((block,8),(block,5)), true, false)
final_goal(4, in_tower((block,8),(block,6)), true, false)
final_goal(4, in_tower((block,8),(block,7)), true, false)
final_goal(4, in_tower((block,8),(block,8)), true, false)
final_goal(4, in_tower((block,8),(block,9)), true, false)
final_goal(4, in_tower((block,9),(block,1)), true, false)
final_goal(4, in_tower((block,9),(block,10)), true, false)
final_goal(4, in_tower((block,9),(block,11)), true, false)
final_goal(4, in_tower((block,9),(block,12)), true, false)
final_goal(4, in_tower((block,9),(block,2)), true, false)
final_goal(4, in_tower((block,9),(block,3)), true, false)
final_goal(4, in_tower((block,9),(block,4)), true, false)
final_goal(4, in_tower((block,9),(block,5)), true, false)
final_goal(4, in_tower((block,9),(block,6)), true, false)
final_goal(4, in_tower((block,9),(block,7)), false, false)
final_goal(4, in_tower((block,9),(block,8)), false, false)
final_goal(4, in_tower((block,9),(block,9)), false, false)
final_goal(4, on((block,1)), ((puzzle_room,1),table), false)
final_goal(4, on((block,1)), ((puzzle_room,2),table), false)
final_goal(4, on((block,1)), (block,10), false)
final_goal(4, on((block,1)), (block,11), false)
final_goal(4, on((block,1)), (block,12), false)
final_goal(4, on((block,1)), (block,3), false)
final_goal(4, on((block,1)), (block,4), false)
final_goal(4, on((block,1)), (block,5), false)
final_goal(4, on((block,1)), (block,6), false)
final_goal(4, on((block,1)), (block,7), false)
final_goal(4, on((block,1)), (block,8), false)
final_goal(4, on((block,1)), (block,9), false)
final_goal(4, on((block,1)), nothing, false)
final_goal(4, on((block,10)), ((puzzle_room,1),table), false)
final_goal(4, on((block,10)), ((puzzle_room,2),table), false)
final_goal(4, on((block,10)), (block,1), false)
final_goal(4, on((block,10)), (block,12), false)
final_goal(4, on((block,10)), (block,2), false)
final_goal(4, on((block,10)), (block,3), false)
final_goal(4, on((block,10)), (block,4), false)
final_goal(4, on((block,10)), (block,5), false)
final_goal(4, on((block,10)), (block,6), false)
final_goal(4, on((block,10)), (block,7), false)
final_goal(4, on((block,10)), (block,8), false)
final_goal(4, on((block,10)), (block,9), false)
final_goal(4, on((block,10)), nothing, false)
final_goal(4, on((block,11)), ((puzzle_room,1),table), false)
final_goal(4, on((block,11)), ((puzzle_room,2),table), false)
final_goal(4, on((block,11)), (block,1), false)
final_goal(4, on((block,11)), (block,10), false)
final_goal(4, on((block,11)), (block,2), false)
final_goal(4, on((block,11)), (block,3), false)
final_goal(4, on((block,11)), (block,4), false)
final_goal(4, on((block,11)), (block,5), false)
final_goal(4, on((block,11)), (block,6), false)
final_goal(4, on((block,11)), (block,7), false)
final_goal(4, on((block,11)), (block,8), false)
final_goal(4, on((block,11)), (block,9), false)
final_goal(4, on((block,11)), nothing, false)
final_goal(4, on((block,12)), ((puzzle_room,1),table), false)
final_goal(4, on((block,12)), (block,1), false)
final_goal(4, on((block,12)), (block,10), false)
final_goal(4, on((block,12)), (block,11), false)
final_goal(4, on((block,12)), (block,2), false)
final_goal(4, on((block,12)), (block,3), false)
final_goal(4, on((block,12)), (block,4), false)
final_goal(4, on((block,12)), (block,5), false)
final_goal(4, on((block,12)), (block,6), false)
final_goal(4, on((block,12)), (block,7), false)
final_goal(4, on((block,12)), (block,8), false)
final_goal(4, on((block,12)), (block,9), false)
final_goal(4, on((block,12)), nothing, false)
final_goal(4, on((block,2)), ((puzzle_room,1),table), false)
final_goal(4, on((block,2)), ((puzzle_room,2),table), false)
final_goal(4, on((block,2)), (block,1), false)
final_goal(4, on((block,2)), (block,10), false)
final_goal(4, on((block,2)), (block,11), false)
final_goal(4, on((block,2)), (block,12), false)
final_goal(4, on((block,2)), (block,4), false)
final_goal(4, on((block,2)), (block,5), false)
final_goal(4, on((block,2)), (block,6), false)
final_goal(4, on((block,2)), (block,7), false)
final_goal(4, on((block,2)), (block,8), false)
final_goal(4, on((block,2)), (block,9), false)
final_goal(4, on((block,2)), nothing, false)
final_goal(4, on((block,3)), ((puzzle_room,2),table), false)
final_goal(4, on((block,3)), (block,1), false)
final_goal(4, on((block,3)), (block,10), false)
final_goal(4, on((block,3)), (block,11), false)
final_goal(4, on((block,3)), (block,12), false)
final_goal(4, on((block,3)), (block,2), false)
final_goal(4, on((block,3)), (block,4), false)
final_goal(4, on((block,3)), (block,5), false)
final_goal(4, on((block,3)), (block,6), false)
final_goal(4, on((block,3)), (block,7), false)
final_goal(4, on((block,3)), (block,8), false)
final_goal(4, on((block,3)), (block,9), false)
final_goal(4, on((block,3)), nothing, false)
final_goal(4, on((block,4)), ((puzzle_room,1),table), false)
final_goal(4, on((block,4)), ((puzzle_room,2),table), false)
final_goal(4, on((block,4)), (block,1), false)
final_goal(4, on((block,4)), (block,10), false)
final_goal(4, on((block,4)), (block,11), false)
final_goal(4, on((block,4)), (block,12), false)
final_goal(4, on((block,4)), (block,2), false)
final_goal(4, on((block,4)), (block,3), false)
final_goal(4, on((block,4)), (block,6), false)
final_goal(4, on((block,4)), (block,7), false)
final_goal(4, on((block,4)), (block,8), false)
final_goal(4, on((block,4)), (block,9), false)
final_goal(4, on((block,4)), nothing, false)
final_goal(4, on((block,5)), ((puzzle_room,1),table), false)
final_goal(4, on((block,5)), ((puzzle_room,2),table), false)
final_goal(4, on((block,5)), (block,1), false)
final_goal(4, on((block,5)), (block,10), false)
final_goal(4, on((block,5)), (block,11), false)
final_goal(4, on((block,5)), (block,12), false)
final_goal(4, on((block,5)), (block,2), false)
final_goal(4, on((block,5)), (block,3), false)
final_goal(4, on((block,5)), (block,4), false)
final_goal(4, on((block,5)), (block,7), false)
final_goal(4, on((block,5)), (block,8), false)
final_goal(4, on((block,5)), (block,9), false)
final_goal(4, on((block,5)), nothing, false)
final_goal(4, on((block,6)), ((puzzle_room,2),table), false)
final_goal(4, on((block,6)), (block,1), false)
final_goal(4, on((block,6)), (block,10), false)
final_goal(4, on((block,6)), (block,11), false)
final_goal(4, on((block,6)), (block,12), false)
final_goal(4, on((block,6)), (block,2), false)
final_goal(4, on((block,6)), (block,3), false)
final_goal(4, on((block,6)), (block,4), false)
final_goal(4, on((block,6)), (block,5), false)
final_goal(4, on((block,6)), (block,7), false)
final_goal(4, on((block,6)), (block,8), false)
final_goal(4, on((block,6)), (block,9), false)
final_goal(4, on((block,6)), nothing, false)
final_goal(4, on((block,7)), ((puzzle_room,1),table), false)
final_goal(4, on((block,7)), ((puzzle_room,2),table), false)
final_goal(4, on((block,7)), (block,1), false)
final_goal(4, on((block,7)), (block,10), false)
final_goal(4, on((block,7)), (block,11), false)
final_goal(4, on((block,7)), (block,12), false)
final_goal(4, on((block,7)), (block,2), false)
final_goal(4, on((block,7)), (block,3), false)
final_goal(4, on((block,7)), (block,4), false)
final_goal(4, on((block,7)), (block,5), false)
final_goal(4, on((block,7)), (block,6), false)
final_goal(4, on((block,7)), (block,9), false)
final_goal(4, on((block,7)), nothing, false)
final_goal(4, on((block,8)), ((puzzle_room,1),table), false)
final_goal(4, on((block,8)), ((puzzle_room,2),table), false)
final_goal(4, on((block,8)), (block,1), false)
final_goal(4, on((block,8)), (block,10), false)
final_goal(4, on((block,8)), (block,11), false)
final_goal(4, on((block,8)), (block,12), false)
final_goal(4, on((block,8)), (block,2), false)
final_goal(4, on((block,8)), (block,3), false)
final_goal(4, on((block,8)), (block,4), false)
final_goal(4, on((block,8)), (block,5), false)
final_goal(4, on((block,8)), (block,6), false)
final_goal(4, on((block,8)), (block,7), false)
final_goal(4, on((block,8)), nothing, false)
final_goal(4, on((block,9)), ((puzzle_room,1),table), false)
final_goal(4, on((block,9)), (block,1), false)
final_goal(4, on((block,9)), (block,10), false)
final_goal(4, on((block,9)), (block,11), false)
final_goal(4, on((block,9)), (block,12), false)
final_goal(4, on((block,9)), (block,2), false)
final_goal(4, on((block,9)), (block,3), false)
final_goal(4, on((block,9)), (block,4), false)
final_goal(4, on((block,9)), (block,5), false)
final_goal(4, on((block,9)), (block,6), false)
final_goal(4, on((block,9)), (block,7), false)
final_goal(4, on((block,9)), (block,8), false)
final_goal(4, on((block,9)), nothing, false)
final_goal(4, tower_base((block,1),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,1),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,10),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,10),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,11),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,11),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,12),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,12),((puzzle_room,2),table)), false, false)
final_goal(4, tower_base((block,2),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,2),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,3),((puzzle_room,1),table)), false, false)
final_goal(4, tower_base((block,3),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,4),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,4),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,5),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,5),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,6),((puzzle_room,1),table)), false, false)
final_goal(4, tower_base((block,6),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,7),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,7),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,8),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,8),((puzzle_room,2),table)), true, false)
final_goal(4, tower_base((block,9),((puzzle_room,1),table)), true, false)
final_goal(4, tower_base((block,9),((puzzle_room,2),table)), false, false)
final_goal(4, unordered_tower((block,1),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,1),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,10),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,10),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,11),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,11),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,12),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,12),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,2),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,2),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,3),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,3),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,4),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,4),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,5),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,5),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,6),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,6),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,7),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,7),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,8),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,8),((puzzle_room,2),table)), true, false)
final_goal(4, unordered_tower((block,9),((puzzle_room,1),table)), true, false)
final_goal(4, unordered_tower((block,9),((puzzle_room,2),table)), true, false)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_puzzle(((puzzle_room,1),table)), true, true)
final_goal(3, complete_puzzle(((puzzle_room,2),table)), true, true)
final_goal(3, complete_tower(blue,((puzzle_room,1),table)), true, true)
final_goal(3, complete_tower(blue,((puzzle_room,2),table)), true, true)
final_goal(3, complete_tower(red,((puzzle_room,1),table)), true, true)
final_goal(3, complete_tower(red,((puzzle_room,2),table)), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,10)), false, true)
final_goal(3, in_tower((block,1),(block,11)), false, true)
final_goal(3, in_tower((block,1),(block,12)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,1),(block,7)), false, true)
final_goal(3, in_tower((block,1),(block,8)), false, true)
final_goal(3, in_tower((block,1),(block,9)), false, true)
final_goal(3, in_tower((block,10),(block,1)), false, true)
final_goal(3, in_tower((block,10),(block,10)), false, true)
final_goal(3, in_tower((block,10),(block,11)), false, true)
final_goal(3, in_tower((block,10),(block,12)), false, true)
final_goal(3, in_tower((block,10),(block,2)), false, true)
final_goal(3, in_tower((block,10),(block,3)), false, true)
final_goal(3, in_tower((block,10),(block,4)), false, true)
final_goal(3, in_tower((block,10),(block,5)), false, true)
final_goal(3, in_tower((block,10),(block,6)), false, true)
final_goal(3, in_tower((block,10),(block,7)), false, true)
final_goal(3, in_tower((block,10),(block,8)), false, true)
final_goal(3, in_tower((block,10),(block,9)), false, true)
final_goal(3, in_tower((block,11),(block,1)), false, true)
final_goal(3, in_tower((block,11),(block,10)), false, true)
final_goal(3, in_tower((block,11),(block,11)), false, true)
final_goal(3, in_tower((block,11),(block,12)), false, true)
final_goal(3, in_tower((block,11),(block,2)), false, true)
final_goal(3, in_tower((block,11),(block,3)), false, true)
final_goal(3, in_tower((block,11),(block,4)), false, true)
final_goal(3, in_tower((block,11),(block,5)), false, true)
final_goal(3, in_tower((block,11),(block,6)), false, true)
final_goal(3, in_tower((block,11),(block,7)), false, true)
final_goal(3, in_tower((block,11),(block,8)), false, true)
final_goal(3, in_tower((block,11),(block,9)), false, true)
final_goal(3, in_tower((block,12),(block,1)), false, true)
final_goal(3, in_tower((block,12),(block,10)), true, true)
final_goal(3, in_tower((block,12),(block,11)), true, true)
final_goal(3, in_tower((block,12),(block,12)), true, true)
final_goal(3, in_tower((block,12),(block,2)), false, true)
final_goal(3, in_tower((block,12),(block,3)), false, true)
final_goal(3, in_tower((block,12),(block,4)), false, true)
final_goal(3, in_tower((block,12),(block,5)), false, true)
final_goal(3, in_tower((block,12),(block,6)), false, true)
final_goal(3, in_tower((block,12),(block,7)), false, true)
final_goal(3, in_tower((block,12),(block,8)), false, true)
final_goal(3, in_tower((block,12),(block,9)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,10)), false, true)
final_goal(3, in_tower((block,2),(block,11)), false, true)
final_goal(3, in_tower((block,2),(block,12)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,7)), false, true)
final_goal(3, in_tower((block,2),(block,8)), false, true)
final_goal(3, in_tower((block,2),(block,9)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,10)), false, true)
final_goal(3, in_tower((block,3),(block,11)), false, true)
final_goal(3, in_tower((block,3),(block,12)), false, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,7)), false, true)
final_goal(3, in_tower((block,3),(block,8)), false, true)
final_goal(3, in_tower((block,3),(block,9)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,10)), false, true)
final_goal(3, in_tower((block,4),(block,11)), false, true)
final_goal(3, in_tower((block,4),(block,12)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,7)), false, true)
final_goal(3, in_tower((block,4),(block,8)), false, true)
final_goal(3, in_tower((block,4),(block,9)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,10)), false, true)
final_goal(3, in_tower((block,5),(block,11)), false, true)
final_goal(3, in_tower((block,5),(block,12)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,7)), false, true)
final_goal(3, in_tower((block,5),(block,8)), false, true)
final_goal(3, in_tower((block,5),(block,9)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,10)), false, true)
final_goal(3, in_tower((block,6),(block,11)), false, true)
final_goal(3, in_tower((block,6),(block,12)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, in_tower((block,6),(block,7)), false, true)
final_goal(3, in_tower((block,6),(block,8)), false, true)
final_goal(3, in_tower((block,6),(block,9)), false, true)
final_goal(3, in_tower((block,7),(block,1)), false, true)
final_goal(3, in_tower((block,7),(block,10)), false, true)
final_goal(3, in_tower((block,7),(block,11)), false, true)
final_goal(3, in_tower((block,7),(block,12)), false, true)
final_goal(3, in_tower((block,7),(block,2)), false, true)
final_goal(3, in_tower((block,7),(block,3)), false, true)
final_goal(3, in_tower((block,7),(block,4)), false, true)
final_goal(3, in_tower((block,7),(block,5)), false, true)
final_goal(3, in_tower((block,7),(block,6)), false, true)
final_goal(3, in_tower((block,7),(block,7)), false, true)
final_goal(3, in_tower((block,7),(block,8)), false, true)
final_goal(3, in_tower((block,7),(block,9)), false, true)
final_goal(3, in_tower((block,8),(block,1)), false, true)
final_goal(3, in_tower((block,8),(block,10)), false, true)
final_goal(3, in_tower((block,8),(block,11)), false, true)
final_goal(3, in_tower((block,8),(block,12)), false, true)
final_goal(3, in_tower((block,8),(block,2)), false, true)
final_goal(3, in_tower((block,8),(block,3)), false, true)
final_goal(3, in_tower((block,8),(block,4)), false, true)
final_goal(3, in_tower((block,8),(block,5)), false, true)
final_goal(3, in_tower((block,8),(block,6)), false, true)
final_goal(3, in_tower((block,8),(block,7)), false, true)
final_goal(3, in_tower((block,8),(block,8)), false, true)
final_goal(3, in_tower((block,8),(block,9)), false, true)
final_goal(3, in_tower((block,9),(block,1)), false, true)
final_goal(3, in_tower((block,9),(block,10)), false, true)
final_goal(3, in_tower((block,9),(block,11)), false, true)
final_goal(3, in_tower((block,9),(block,12)), false, true)
final_goal(3, in_tower((block,9),(block,2)), false, true)
final_goal(3, in_tower((block,9),(block,3)), false, true)
final_goal(3, in_tower((block,9),(block,4)), false, true)
final_goal(3, in_tower((block,9),(block,5)), false, true)
final_goal(3, in_tower((block,9),(block,6)), false, true)
final_goal(3, in_tower((block,9),(block,7)), true, true)
final_goal(3, in_tower((block,9),(block,8)), true, true)
final_goal(3, in_tower((block,9),(block,9)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,10)), (block,11), true)
final_goal(3, on((block,11)), (block,12), true)
final_goal(3, on((block,12)), ((puzzle_room,2),table), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), ((puzzle_room,1),table), true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), ((puzzle_room,1),table), true)
final_goal(3, on((block,7)), (block,8), true)
final_goal(3, on((block,8)), (block,9), true)
final_goal(3, on((block,9)), ((puzzle_room,2),table), true)
final_goal(3, tower_base((block,1),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,1),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,10),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,10),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,11),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,11),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,12),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,12),((puzzle_room,2),table)), true, true)
final_goal(3, tower_base((block,2),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,2),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,3),((puzzle_room,1),table)), true, true)
final_goal(3, tower_base((block,3),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,4),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,4),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,5),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,5),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,6),((puzzle_room,1),table)), true, true)
final_goal(3, tower_base((block,6),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,7),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,7),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,8),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,8),((puzzle_room,2),table)), false, true)
final_goal(3, tower_base((block,9),((puzzle_room,1),table)), false, true)
final_goal(3, tower_base((block,9),((puzzle_room,2),table)), true, true)
final_goal(3, unordered_tower((block,1),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,1),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,10),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,10),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,11),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,11),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,12),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,12),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,2),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,2),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,3),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,3),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,4),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,4),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,5),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,5),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,6),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,6),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,7),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,7),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,8),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,8),((puzzle_room,2),table)), false, true)
final_goal(3, unordered_tower((block,9),((puzzle_room,1),table)), false, true)
final_goal(3, unordered_tower((block,9),((puzzle_room,2),table)), false, true)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 3         
      ================================================      

final_goal(3, complete_tower(blue,((puzzle_room,1),table)), false, false)
final_goal(3, complete_tower(blue,((puzzle_room,2),table)), false, false)
final_goal(3, complete_tower(red,((puzzle_room,1),table)), false, false)
final_goal(3, complete_tower(red,((puzzle_room,2),table)), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,10)), true, false)
final_goal(3, in_tower((block,1),(block,11)), true, false)
final_goal(3, in_tower((block,1),(block,12)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,1),(block,7)), true, false)
final_goal(3, in_tower((block,1),(block,8)), true, false)
final_goal(3, in_tower((block,1),(block,9)), true, false)
final_goal(3, in_tower((block,10),(block,1)), true, false)
final_goal(3, in_tower((block,10),(block,10)), true, false)
final_goal(3, in_tower((block,10),(block,11)), true, false)
final_goal(3, in_tower((block,10),(block,12)), true, false)
final_goal(3, in_tower((block,10),(block,2)), true, false)
final_goal(3, in_tower((block,10),(block,3)), true, false)
final_goal(3, in_tower((block,10),(block,4)), true, false)
final_goal(3, in_tower((block,10),(block,5)), true, false)
final_goal(3, in_tower((block,10),(block,6)), true, false)
final_goal(3, in_tower((block,10),(block,7)), true, false)
final_goal(3, in_tower((block,10),(block,8)), true, false)
final_goal(3, in_tower((block,10),(block,9)), true, false)
final_goal(3, in_tower((block,11),(block,1)), true, false)
final_goal(3, in_tower((block,11),(block,10)), true, false)
final_goal(3, in_tower((block,11),(block,11)), true, false)
final_goal(3, in_tower((block,11),(block,12)), true, false)
final_goal(3, in_tower((block,11),(block,2)), true, false)
final_goal(3, in_tower((block,11),(block,3)), true, false)
final_goal(3, in_tower((block,11),(block,4)), true, false)
final_goal(3, in_tower((block,11),(block,5)), true, false)
final_goal(3, in_tower((block,11),(block,6)), true, false)
final_goal(3, in_tower((block,11),(block,7)), true, false)
final_goal(3, in_tower((block,11),(block,8)), true, false)
final_goal(3, in_tower((block,11),(block,9)), true, false)
final_goal(3, in_tower((block,12),(block,1)), true, false)
final_goal(3, in_tower((block,12),(block,10)), false, false)
final_goal(3, in_tower((block,12),(block,11)), false, false)
final_goal(3, in_tower((block,12),(block,12)), false, false)
final_goal(3, in_tower((block,12),(block,2)), true, false)
final_goal(3, in_tower((block,12),(block,3)), true, false)
final_goal(3, in_tower((block,12),(block,4)), true, false)
final_goal(3, in_tower((block,12),(block,5)), true, false)
final_goal(3, in_tower((block,12),(block,6)), true, false)
final_goal(3, in_tower((block,12),(block,7)), true, false)
final_goal(3, in_tower((block,12),(block,8)), true, false)
final_goal(3, in_tower((block,12),(block,9)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,10)), true, false)
final_goal(3, in_tower((block,2),(block,11)), true, false)
final_goal(3, in_tower((block,2),(block,12)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,7)), true, false)
final_goal(3, in_tower((block,2),(block,8)), true, false)
final_goal(3, in_tower((block,2),(block,9)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,10)), true, false)
final_goal(3, in_tower((block,3),(block,11)), true, false)
final_goal(3, in_tower((block,3),(block,12)), true, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,7)), true, false)
final_goal(3, in_tower((block,3),(block,8)), true, false)
final_goal(3, in_tower((block,3),(block,9)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,10)), true, false)
final_goal(3, in_tower((block,4),(block,11)), true, false)
final_goal(3, in_tower((block,4),(block,12)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,7)), true, false)
final_goal(3, in_tower((block,4),(block,8)), true, false)
final_goal(3, in_tower((block,4),(block,9)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,10)), true, false)
final_goal(3, in_tower((block,5),(block,11)), true, false)
final_goal(3, in_tower((block,5),(block,12)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,7)), true, false)
final_goal(3, in_tower((block,5),(block,8)), true, false)
final_goal(3, in_tower((block,5),(block,9)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,10)), true, false)
final_goal(3, in_tower((block,6),(block,11)), true, false)
final_goal(3, in_tower((block,6),(block,12)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, in_tower((block,6),(block,7)), true, false)
final_goal(3, in_tower((block,6),(block,8)), true, false)
final_goal(3, in_tower((block,6),(block,9)), true, false)
final_goal(3, in_tower((block,7),(block,1)), true, false)
final_goal(3, in_tower((block,7),(block,10)), true, false)
final_goal(3, in_tower((block,7),(block,11)), true, false)
final_goal(3, in_tower((block,7),(block,12)), true, false)
final_goal(3, in_tower((block,7),(block,2)), true, false)
final_goal(3, in_tower((block,7),(block,3)), true, false)
final_goal(3, in_tower((block,7),(block,4)), true, false)
final_goal(3, in_tower((block,7),(block,5)), true, false)
final_goal(3, in_tower((block,7),(block,6)), true, false)
final_goal(3, in_tower((block,7),(block,7)), true, false)
final_goal(3, in_tower((block,7),(block,8)), true, false)
final_goal(3, in_tower((block,7),(block,9)), true, false)
final_goal(3, in_tower((block,8),(block,1)), true, false)
final_goal(3, in_tower((block,8),(block,10)), true, false)
final_goal(3, in_tower((block,8),(block,11)), true, false)
final_goal(3, in_tower((block,8),(block,12)), true, false)
final_goal(3, in_tower((block,8),(block,2)), true, false)
final_goal(3, in_tower((block,8),(block,3)), true, false)
final_goal(3, in_tower((block,8),(block,4)), true, false)
final_goal(3, in_tower((block,8),(block,5)), true, false)
final_goal(3, in_tower((block,8),(block,6)), true, false)
final_goal(3, in_tower((block,8),(block,7)), true, false)
final_goal(3, in_tower((block,8),(block,8)), true, false)
final_goal(3, in_tower((block,8),(block,9)), true, false)
final_goal(3, in_tower((block,9),(block,1)), true, false)
final_goal(3, in_tower((block,9),(block,10)), true, false)
final_goal(3, in_tower((block,9),(block,11)), true, false)
final_goal(3, in_tower((block,9),(block,12)), true, false)
final_goal(3, in_tower((block,9),(block,2)), true, false)
final_goal(3, in_tower((block,9),(block,3)), true, false)
final_goal(3, in_tower((block,9),(block,4)), true, false)
final_goal(3, in_tower((block,9),(block,5)), true, false)
final_goal(3, in_tower((block,9),(block,6)), true, false)
final_goal(3, in_tower((block,9),(block,7)), false, false)
final_goal(3, in_tower((block,9),(block,8)), false, false)
final_goal(3, in_tower((block,9),(block,9)), false, false)
final_goal(3, on((block,1)), ((puzzle_room,1),table), false)
final_goal(3, on((block,1)), ((puzzle_room,2),table), false)
final_goal(3, on((block,1)), (block,10), false)
final_goal(3, on((block,1)), (block,11), false)
final_goal(3, on((block,1)), (block,12), false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), (block,7), false)
final_goal(3, on((block,1)), (block,8), false)
final_goal(3, on((block,1)), (block,9), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,10)), ((puzzle_room,1),table), false)
final_goal(3, on((block,10)), ((puzzle_room,2),table), false)
final_goal(3, on((block,10)), (block,1), false)
final_goal(3, on((block,10)), (block,12), false)
final_goal(3, on((block,10)), (block,2), false)
final_goal(3, on((block,10)), (block,3), false)
final_goal(3, on((block,10)), (block,4), false)
final_goal(3, on((block,10)), (block,5), false)
final_goal(3, on((block,10)), (block,6), false)
final_goal(3, on((block,10)), (block,7), false)
final_goal(3, on((block,10)), (block,8), false)
final_goal(3, on((block,10)), (block,9), false)
final_goal(3, on((block,10)), nothing, false)
final_goal(3, on((block,11)), ((puzzle_room,1),table), false)
final_goal(3, on((block,11)), ((puzzle_room,2),table), false)
final_goal(3, on((block,11)), (block,1), false)
final_goal(3, on((block,11)), (block,10), false)
final_goal(3, on((block,11)), (block,2), false)
final_goal(3, on((block,11)), (block,3), false)
final_goal(3, on((block,11)), (block,4), false)
final_goal(3, on((block,11)), (block,5), false)
final_goal(3, on((block,11)), (block,6), false)
final_goal(3, on((block,11)), (block,7), false)
final_goal(3, on((block,11)), (block,8), false)
final_goal(3, on((block,11)), (block,9), false)
final_goal(3, on((block,11)), nothing, false)
final_goal(3, on((block,12)), ((puzzle_room,1),table), false)
final_goal(3, on((block,12)), (block,1), false)
final_goal(3, on((block,12)), (block,10), false)
final_goal(3, on((block,12)), (block,11), false)
final_goal(3, on((block,12)), (block,2), false)
final_goal(3, on((block,12)), (block,3), false)
final_goal(3, on((block,12)), (block,4), false)
final_goal(3, on((block,12)), (block,5), false)
final_goal(3, on((block,12)), (block,6), false)
final_goal(3, on((block,12)), (block,7), false)
final_goal(3, on((block,12)), (block,8), false)
final_goal(3, on((block,12)), (block,9), false)
final_goal(3, on((block,12)), nothing, false)
final_goal(3, on((block,2)), ((puzzle_room,1),table), false)
final_goal(3, on((block,2)), ((puzzle_room,2),table), false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,10), false)
final_goal(3, on((block,2)), (block,11), false)
final_goal(3, on((block,2)), (block,12), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), (block,7), false)
final_goal(3, on((block,2)), (block,8), false)
final_goal(3, on((block,2)), (block,9), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,3)), ((puzzle_room,2),table), false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,10), false)
final_goal(3, on((block,3)), (block,11), false)
final_goal(3, on((block,3)), (block,12), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), (block,7), false)
final_goal(3, on((block,3)), (block,8), false)
final_goal(3, on((block,3)), (block,9), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), ((puzzle_room,1),table), false)
final_goal(3, on((block,4)), ((puzzle_room,2),table), false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,10), false)
final_goal(3, on((block,4)), (block,11), false)
final_goal(3, on((block,4)), (block,12), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), (block,7), false)
final_goal(3, on((block,4)), (block,8), false)
final_goal(3, on((block,4)), (block,9), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,5)), ((puzzle_room,1),table), false)
final_goal(3, on((block,5)), ((puzzle_room,2),table), false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,10), false)
final_goal(3, on((block,5)), (block,11), false)
final_goal(3, on((block,5)), (block,12), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), (block,7), false)
final_goal(3, on((block,5)), (block,8), false)
final_goal(3, on((block,5)), (block,9), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,6)), ((puzzle_room,2),table), false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,10), false)
final_goal(3, on((block,6)), (block,11), false)
final_goal(3, on((block,6)), (block,12), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), (block,7), false)
final_goal(3, on((block,6)), (block,8), false)
final_goal(3, on((block,6)), (block,9), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, on((block,7)), ((puzzle_room,1),table), false)
final_goal(3, on((block,7)), ((puzzle_room,2),table), false)
final_goal(3, on((block,7)), (block,1), false)
final_goal(3, on((block,7)), (block,10), false)
final_goal(3, on((block,7)), (block,11), false)
final_goal(3, on((block,7)), (block,12), false)
final_goal(3, on((block,7)), (block,2), false)
final_goal(3, on((block,7)), (block,3), false)
final_goal(3, on((block,7)), (block,4), false)
final_goal(3, on((block,7)), (block,5), false)
final_goal(3, on((block,7)), (block,6), false)
final_goal(3, on((block,7)), (block,9), false)
final_goal(3, on((block,7)), nothing, false)
final_goal(3, on((block,8)), ((puzzle_room,1),table), false)
final_goal(3, on((block,8)), ((puzzle_room,2),table), false)
final_goal(3, on((block,8)), (block,1), false)
final_goal(3, on((block,8)), (block,10), false)
final_goal(3, on((block,8)), (block,11), false)
final_goal(3, on((block,8)), (block,12), false)
final_goal(3, on((block,8)), (block,2), false)
final_goal(3, on((block,8)), (block,3), false)
final_goal(3, on((block,8)), (block,4), false)
final_goal(3, on((block,8)), (block,5), false)
final_goal(3, on((block,8)), (block,6), false)
final_goal(3, on((block,8)), (block,7), false)
final_goal(3, on((block,8)), nothing, false)
final_goal(3, on((block,9)), ((puzzle_room,1),table), false)
final_goal(3, on((block,9)), (block,1), false)
final_goal(3, on((block,9)), (block,10), false)
final_goal(3, on((block,9)), (block,11), false)
final_goal(3, on((block,9)), (block,12), false)
final_goal(3, on((block,9)), (block,2), false)
final_goal(3, on((block,9)), (block,3), false)
final_goal(3, on((block,9)), (block,4), false)
final_goal(3, on((block,9)), (block,5), false)
final_goal(3, on((block,9)), (block,6), false)
final_goal(3, on((block,9)), (block,7), false)
final_goal(3, on((block,9)), (block,8), false)
final_goal(3, on((block,9)), nothing, false)
final_goal(3, tower_base((block,1),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,1),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,10),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,10),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,11),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,11),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,12),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,12),((puzzle_room,2),table)), false, false)
final_goal(3, tower_base((block,2),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,2),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,3),((puzzle_room,1),table)), false, false)
final_goal(3, tower_base((block,3),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,4),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,4),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,5),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,5),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,6),((puzzle_room,1),table)), false, false)
final_goal(3, tower_base((block,6),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,7),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,7),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,8),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,8),((puzzle_room,2),table)), true, false)
final_goal(3, tower_base((block,9),((puzzle_room,1),table)), true, false)
final_goal(3, tower_base((block,9),((puzzle_room,2),table)), false, false)
final_goal(3, unordered_tower((block,1),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,1),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,10),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,10),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,11),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,11),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,12),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,12),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,2),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,2),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,3),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,3),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,4),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,4),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,5),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,5),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,6),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,6),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,7),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,7),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,8),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,8),((puzzle_room,2),table)), true, false)
final_goal(3, unordered_tower((block,9),((puzzle_room,1),table)), true, false)
final_goal(3, unordered_tower((block,9),((puzzle_room,2),table)), true, false)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_puzzle(((puzzle_room,1),table)), true, true)
final_goal(2, complete_puzzle(((puzzle_room,2),table)), true, true)
final_goal(2, complete_tower(blue,((puzzle_room,1),table)), true, true)
final_goal(2, complete_tower(blue,((puzzle_room,2),table)), true, true)
final_goal(2, complete_tower(red,((puzzle_room,1),table)), true, true)
final_goal(2, complete_tower(red,((puzzle_room,2),table)), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,10)), false, true)
final_goal(2, in_tower((block,1),(block,11)), false, true)
final_goal(2, in_tower((block,1),(block,12)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,7)), false, true)
final_goal(2, in_tower((block,1),(block,8)), false, true)
final_goal(2, in_tower((block,1),(block,9)), false, true)
final_goal(2, in_tower((block,10),(block,1)), false, true)
final_goal(2, in_tower((block,10),(block,10)), false, true)
final_goal(2, in_tower((block,10),(block,11)), false, true)
final_goal(2, in_tower((block,10),(block,12)), false, true)
final_goal(2, in_tower((block,10),(block,2)), false, true)
final_goal(2, in_tower((block,10),(block,3)), false, true)
final_goal(2, in_tower((block,10),(block,4)), false, true)
final_goal(2, in_tower((block,10),(block,5)), false, true)
final_goal(2, in_tower((block,10),(block,6)), false, true)
final_goal(2, in_tower((block,10),(block,7)), false, true)
final_goal(2, in_tower((block,10),(block,8)), false, true)
final_goal(2, in_tower((block,10),(block,9)), false, true)
final_goal(2, in_tower((block,11),(block,1)), false, true)
final_goal(2, in_tower((block,11),(block,10)), false, true)
final_goal(2, in_tower((block,11),(block,11)), false, true)
final_goal(2, in_tower((block,11),(block,12)), false, true)
final_goal(2, in_tower((block,11),(block,2)), false, true)
final_goal(2, in_tower((block,11),(block,3)), false, true)
final_goal(2, in_tower((block,11),(block,4)), false, true)
final_goal(2, in_tower((block,11),(block,5)), false, true)
final_goal(2, in_tower((block,11),(block,6)), false, true)
final_goal(2, in_tower((block,11),(block,7)), false, true)
final_goal(2, in_tower((block,11),(block,8)), false, true)
final_goal(2, in_tower((block,11),(block,9)), false, true)
final_goal(2, in_tower((block,12),(block,1)), false, true)
final_goal(2, in_tower((block,12),(block,10)), true, true)
final_goal(2, in_tower((block,12),(block,11)), true, true)
final_goal(2, in_tower((block,12),(block,12)), true, true)
final_goal(2, in_tower((block,12),(block,2)), false, true)
final_goal(2, in_tower((block,12),(block,3)), false, true)
final_goal(2, in_tower((block,12),(block,4)), false, true)
final_goal(2, in_tower((block,12),(block,5)), false, true)
final_goal(2, in_tower((block,12),(block,6)), false, true)
final_goal(2, in_tower((block,12),(block,7)), false, true)
final_goal(2, in_tower((block,12),(block,8)), false, true)
final_goal(2, in_tower((block,12),(block,9)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,10)), false, true)
final_goal(2, in_tower((block,2),(block,11)), false, true)
final_goal(2, in_tower((block,2),(block,12)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,7)), false, true)
final_goal(2, in_tower((block,2),(block,8)), false, true)
final_goal(2, in_tower((block,2),(block,9)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,10)), false, true)
final_goal(2, in_tower((block,3),(block,11)), false, true)
final_goal(2, in_tower((block,3),(block,12)), false, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,7)), false, true)
final_goal(2, in_tower((block,3),(block,8)), false, true)
final_goal(2, in_tower((block,3),(block,9)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,10)), false, true)
final_goal(2, in_tower((block,4),(block,11)), false, true)
final_goal(2, in_tower((block,4),(block,12)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,7)), false, true)
final_goal(2, in_tower((block,4),(block,8)), false, true)
final_goal(2, in_tower((block,4),(block,9)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,10)), false, true)
final_goal(2, in_tower((block,5),(block,11)), false, true)
final_goal(2, in_tower((block,5),(block,12)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,7)), false, true)
final_goal(2, in_tower((block,5),(block,8)), false, true)
final_goal(2, in_tower((block,5),(block,9)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,10)), false, true)
final_goal(2, in_tower((block,6),(block,11)), false, true)
final_goal(2, in_tower((block,6),(block,12)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, in_tower((block,6),(block,7)), false, true)
final_goal(2, in_tower((block,6),(block,8)), false, true)
final_goal(2, in_tower((block,6),(block,9)), false, true)
final_goal(2, in_tower((block,7),(block,1)), false, true)
final_goal(2, in_tower((block,7),(block,10)), false, true)
final_goal(2, in_tower((block,7),(block,11)), false, true)
final_goal(2, in_tower((block,7),(block,12)), false, true)
final_goal(2, in_tower((block,7),(block,2)), false, true)
final_goal(2, in_tower((block,7),(block,3)), false, true)
final_goal(2, in_tower((block,7),(block,4)), false, true)
final_goal(2, in_tower((block,7),(block,5)), false, true)
final_goal(2, in_tower((block,7),(block,6)), false, true)
final_goal(2, in_tower((block,7),(block,7)), false, true)
final_goal(2, in_tower((block,7),(block,8)), false, true)
final_goal(2, in_tower((block,7),(block,9)), false, true)
final_goal(2, in_tower((block,8),(block,1)), false, true)
final_goal(2, in_tower((block,8),(block,10)), false, true)
final_goal(2, in_tower((block,8),(block,11)), false, true)
final_goal(2, in_tower((block,8),(block,12)), false, true)
final_goal(2, in_tower((block,8),(block,2)), false, true)
final_goal(2, in_tower((block,8),(block,3)), false, true)
final_goal(2, in_tower((block,8),(block,4)), false, true)
final_goal(2, in_tower((block,8),(block,5)), false, true)
final_goal(2, in_tower((block,8),(block,6)), false, true)
final_goal(2, in_tower((block,8),(block,7)), false, true)
final_goal(2, in_tower((block,8),(block,8)), false, true)
final_goal(2, in_tower((block,8),(block,9)), false, true)
final_goal(2, in_tower((block,9),(block,1)), false, true)
final_goal(2, in_tower((block,9),(block,10)), false, true)
final_goal(2, in_tower((block,9),(block,11)), false, true)
final_goal(2, in_tower((block,9),(block,12)), false, true)
final_goal(2, in_tower((block,9),(block,2)), false, true)
final_goal(2, in_tower((block,9),(block,3)), false, true)
final_goal(2, in_tower((block,9),(block,4)), false, true)
final_goal(2, in_tower((block,9),(block,5)), false, true)
final_goal(2, in_tower((block,9),(block,6)), false, true)
final_goal(2, in_tower((block,9),(block,7)), true, true)
final_goal(2, in_tower((block,9),(block,8)), true, true)
final_goal(2, in_tower((block,9),(block,9)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,10)), (block,11), true)
final_goal(2, on((block,11)), (block,12), true)
final_goal(2, on((block,12)), ((puzzle_room,2),table), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), ((puzzle_room,1),table), true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), ((puzzle_room,1),table), true)
final_goal(2, on((block,7)), (block,8), true)
final_goal(2, on((block,8)), (block,9), true)
final_goal(2, on((block,9)), ((puzzle_room,2),table), true)
final_goal(2, tower_base((block,1),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,1),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,10),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,10),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,11),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,11),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,12),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,12),((puzzle_room,2),table)), true, true)
final_goal(2, tower_base((block,2),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,2),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,3),((puzzle_room,1),table)), true, true)
final_goal(2, tower_base((block,3),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,4),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,4),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,5),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,5),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,6),((puzzle_room,1),table)), true, true)
final_goal(2, tower_base((block,6),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,7),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,7),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,8),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,8),((puzzle_room,2),table)), false, true)
final_goal(2, tower_base((block,9),((puzzle_room,1),table)), false, true)
final_goal(2, tower_base((block,9),((puzzle_room,2),table)), true, true)
final_goal(2, unordered_tower((block,1),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,1),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,10),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,10),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,11),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,11),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,12),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,12),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,2),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,2),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,3),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,3),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,4),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,4),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,5),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,5),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,6),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,6),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,7),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,7),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,8),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,8),((puzzle_room,2),table)), false, true)
final_goal(2, unordered_tower((block,9),((puzzle_room,1),table)), false, true)
final_goal(2, unordered_tower((block,9),((puzzle_room,2),table)), false, true)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 2         
      ================================================      

final_goal(2, complete_tower(blue,((puzzle_room,1),table)), false, false)
final_goal(2, complete_tower(blue,((puzzle_room,2),table)), false, false)
final_goal(2, complete_tower(red,((puzzle_room,1),table)), false, false)
final_goal(2, complete_tower(red,((puzzle_room,2),table)), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,10)), true, false)
final_goal(2, in_tower((block,1),(block,11)), true, false)
final_goal(2, in_tower((block,1),(block,12)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,1),(block,7)), true, false)
final_goal(2, in_tower((block,1),(block,8)), true, false)
final_goal(2, in_tower((block,1),(block,9)), true, false)
final_goal(2, in_tower((block,10),(block,1)), true, false)
final_goal(2, in_tower((block,10),(block,10)), true, false)
final_goal(2, in_tower((block,10),(block,11)), true, false)
final_goal(2, in_tower((block,10),(block,12)), true, false)
final_goal(2, in_tower((block,10),(block,2)), true, false)
final_goal(2, in_tower((block,10),(block,3)), true, false)
final_goal(2, in_tower((block,10),(block,4)), true, false)
final_goal(2, in_tower((block,10),(block,5)), true, false)
final_goal(2, in_tower((block,10),(block,6)), true, false)
final_goal(2, in_tower((block,10),(block,7)), true, false)
final_goal(2, in_tower((block,10),(block,8)), true, false)
final_goal(2, in_tower((block,10),(block,9)), true, false)
final_goal(2, in_tower((block,11),(block,1)), true, false)
final_goal(2, in_tower((block,11),(block,10)), true, false)
final_goal(2, in_tower((block,11),(block,11)), true, false)
final_goal(2, in_tower((block,11),(block,12)), true, false)
final_goal(2, in_tower((block,11),(block,2)), true, false)
final_goal(2, in_tower((block,11),(block,3)), true, false)
final_goal(2, in_tower((block,11),(block,4)), true, false)
final_goal(2, in_tower((block,11),(block,5)), true, false)
final_goal(2, in_tower((block,11),(block,6)), true, false)
final_goal(2, in_tower((block,11),(block,7)), true, false)
final_goal(2, in_tower((block,11),(block,8)), true, false)
final_goal(2, in_tower((block,11),(block,9)), true, false)
final_goal(2, in_tower((block,12),(block,1)), true, false)
final_goal(2, in_tower((block,12),(block,10)), false, false)
final_goal(2, in_tower((block,12),(block,11)), false, false)
final_goal(2, in_tower((block,12),(block,12)), false, false)
final_goal(2, in_tower((block,12),(block,2)), true, false)
final_goal(2, in_tower((block,12),(block,3)), true, false)
final_goal(2, in_tower((block,12),(block,4)), true, false)
final_goal(2, in_tower((block,12),(block,5)), true, false)
final_goal(2, in_tower((block,12),(block,6)), true, false)
final_goal(2, in_tower((block,12),(block,7)), true, false)
final_goal(2, in_tower((block,12),(block,8)), true, false)
final_goal(2, in_tower((block,12),(block,9)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,10)), true, false)
final_goal(2, in_tower((block,2),(block,11)), true, false)
final_goal(2, in_tower((block,2),(block,12)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,7)), true, false)
final_goal(2, in_tower((block,2),(block,8)), true, false)
final_goal(2, in_tower((block,2),(block,9)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,10)), true, false)
final_goal(2, in_tower((block,3),(block,11)), true, false)
final_goal(2, in_tower((block,3),(block,12)), true, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,7)), true, false)
final_goal(2, in_tower((block,3),(block,8)), true, false)
final_goal(2, in_tower((block,3),(block,9)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,10)), true, false)
final_goal(2, in_tower((block,4),(block,11)), true, false)
final_goal(2, in_tower((block,4),(block,12)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,7)), true, false)
final_goal(2, in_tower((block,4),(block,8)), true, false)
final_goal(2, in_tower((block,4),(block,9)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,10)), true, false)
final_goal(2, in_tower((block,5),(block,11)), true, false)
final_goal(2, in_tower((block,5),(block,12)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,7)), true, false)
final_goal(2, in_tower((block,5),(block,8)), true, false)
final_goal(2, in_tower((block,5),(block,9)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,10)), true, false)
final_goal(2, in_tower((block,6),(block,11)), true, false)
final_goal(2, in_tower((block,6),(block,12)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,7)), true, false)
final_goal(2, in_tower((block,6),(block,8)), true, false)
final_goal(2, in_tower((block,6),(block,9)), true, false)
final_goal(2, in_tower((block,7),(block,1)), true, false)
final_goal(2, in_tower((block,7),(block,10)), true, false)
final_goal(2, in_tower((block,7),(block,11)), true, false)
final_goal(2, in_tower((block,7),(block,12)), true, false)
final_goal(2, in_tower((block,7),(block,2)), true, false)
final_goal(2, in_tower((block,7),(block,3)), true, false)
final_goal(2, in_tower((block,7),(block,4)), true, false)
final_goal(2, in_tower((block,7),(block,5)), true, false)
final_goal(2, in_tower((block,7),(block,6)), true, false)
final_goal(2, in_tower((block,7),(block,7)), true, false)
final_goal(2, in_tower((block,7),(block,8)), true, false)
final_goal(2, in_tower((block,7),(block,9)), true, false)
final_goal(2, in_tower((block,8),(block,1)), true, false)
final_goal(2, in_tower((block,8),(block,10)), true, false)
final_goal(2, in_tower((block,8),(block,11)), true, false)
final_goal(2, in_tower((block,8),(block,12)), true, false)
final_goal(2, in_tower((block,8),(block,2)), true, false)
final_goal(2, in_tower((block,8),(block,3)), true, false)
final_goal(2, in_tower((block,8),(block,4)), true, false)
final_goal(2, in_tower((block,8),(block,5)), true, false)
final_goal(2, in_tower((block,8),(block,6)), true, false)
final_goal(2, in_tower((block,8),(block,7)), true, false)
final_goal(2, in_tower((block,8),(block,8)), true, false)
final_goal(2, in_tower((block,8),(block,9)), true, false)
final_goal(2, in_tower((block,9),(block,1)), true, false)
final_goal(2, in_tower((block,9),(block,10)), true, false)
final_goal(2, in_tower((block,9),(block,11)), true, false)
final_goal(2, in_tower((block,9),(block,12)), true, false)
final_goal(2, in_tower((block,9),(block,2)), true, false)
final_goal(2, in_tower((block,9),(block,3)), true, false)
final_goal(2, in_tower((block,9),(block,4)), true, false)
final_goal(2, in_tower((block,9),(block,5)), true, false)
final_goal(2, in_tower((block,9),(block,6)), true, false)
final_goal(2, in_tower((block,9),(block,7)), false, false)
final_goal(2, in_tower((block,9),(block,8)), false, false)
final_goal(2, in_tower((block,9),(block,9)), false, false)
final_goal(2, on((block,1)), ((puzzle_room,1),table), false)
final_goal(2, on((block,1)), ((puzzle_room,2),table), false)
final_goal(2, on((block,1)), (block,10), false)
final_goal(2, on((block,1)), (block,11), false)
final_goal(2, on((block,1)), (block,12), false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), (block,7), false)
final_goal(2, on((block,1)), (block,8), false)
final_goal(2, on((block,1)), (block,9), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,10)), ((puzzle_room,1),table), false)
final_goal(2, on((block,10)), ((puzzle_room,2),table), false)
final_goal(2, on((block,10)), (block,1), false)
final_goal(2, on((block,10)), (block,12), false)
final_goal(2, on((block,10)), (block,2), false)
final_goal(2, on((block,10)), (block,3), false)
final_goal(2, on((block,10)), (block,4), false)
final_goal(2, on((block,10)), (block,5), false)
final_goal(2, on((block,10)), (block,6), false)
final_goal(2, on((block,10)), (block,7), false)
final_goal(2, on((block,10)), (block,8), false)
final_goal(2, on((block,10)), (block,9), false)
final_goal(2, on((block,10)), nothing, false)
final_goal(2, on((block,11)), ((puzzle_room,1),table), false)
final_goal(2, on((block,11)), ((puzzle_room,2),table), false)
final_goal(2, on((block,11)), (block,1), false)
final_goal(2, on((block,11)), (block,10), false)
final_goal(2, on((block,11)), (block,2), false)
final_goal(2, on((block,11)), (block,3), false)
final_goal(2, on((block,11)), (block,4), false)
final_goal(2, on((block,11)), (block,5), false)
final_goal(2, on((block,11)), (block,6), false)
final_goal(2, on((block,11)), (block,7), false)
final_goal(2, on((block,11)), (block,8), false)
final_goal(2, on((block,11)), (block,9), false)
final_goal(2, on((block,11)), nothing, false)
final_goal(2, on((block,12)), ((puzzle_room,1),table), false)
final_goal(2, on((block,12)), (block,1), false)
final_goal(2, on((block,12)), (block,10), false)
final_goal(2, on((block,12)), (block,11), false)
final_goal(2, on((block,12)), (block,2), false)
final_goal(2, on((block,12)), (block,3), false)
final_goal(2, on((block,12)), (block,4), false)
final_goal(2, on((block,12)), (block,5), false)
final_goal(2, on((block,12)), (block,6), false)
final_goal(2, on((block,12)), (block,7), false)
final_goal(2, on((block,12)), (block,8), false)
final_goal(2, on((block,12)), (block,9), false)
final_goal(2, on((block,12)), nothing, false)
final_goal(2, on((block,2)), ((puzzle_room,1),table), false)
final_goal(2, on((block,2)), ((puzzle_room,2),table), false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,10), false)
final_goal(2, on((block,2)), (block,11), false)
final_goal(2, on((block,2)), (block,12), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), (block,7), false)
final_goal(2, on((block,2)), (block,8), false)
final_goal(2, on((block,2)), (block,9), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,3)), ((puzzle_room,2),table), false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,10), false)
final_goal(2, on((block,3)), (block,11), false)
final_goal(2, on((block,3)), (block,12), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), (block,7), false)
final_goal(2, on((block,3)), (block,8), false)
final_goal(2, on((block,3)), (block,9), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), ((puzzle_room,1),table), false)
final_goal(2, on((block,4)), ((puzzle_room,2),table), false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,10), false)
final_goal(2, on((block,4)), (block,11), false)
final_goal(2, on((block,4)), (block,12), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), (block,7), false)
final_goal(2, on((block,4)), (block,8), false)
final_goal(2, on((block,4)), (block,9), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,5)), ((puzzle_room,1),table), false)
final_goal(2, on((block,5)), ((puzzle_room,2),table), false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,10), false)
final_goal(2, on((block,5)), (block,11), false)
final_goal(2, on((block,5)), (block,12), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,7), false)
final_goal(2, on((block,5)), (block,8), false)
final_goal(2, on((block,5)), (block,9), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,6)), ((puzzle_room,2),table), false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,10), false)
final_goal(2, on((block,6)), (block,11), false)
final_goal(2, on((block,6)), (block,12), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), (block,7), false)
final_goal(2, on((block,6)), (block,8), false)
final_goal(2, on((block,6)), (block,9), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,7)), ((puzzle_room,1),table), false)
final_goal(2, on((block,7)), ((puzzle_room,2),table), false)
final_goal(2, on((block,7)), (block,1), false)
final_goal(2, on((block,7)), (block,10), false)
final_goal(2, on((block,7)), (block,11), false)
final_goal(2, on((block,7)), (block,12), false)
final_goal(2, on((block,7)), (block,2), false)
final_goal(2, on((block,7)), (block,3), false)
final_goal(2, on((block,7)), (block,4), false)
final_goal(2, on((block,7)), (block,5), false)
final_goal(2, on((block,7)), (block,6), false)
final_goal(2, on((block,7)), (block,9), false)
final_goal(2, on((block,7)), nothing, false)
final_goal(2, on((block,8)), ((puzzle_room,1),table), false)
final_goal(2, on((block,8)), ((puzzle_room,2),table), false)
final_goal(2, on((block,8)), (block,1), false)
final_goal(2, on((block,8)), (block,10), false)
final_goal(2, on((block,8)), (block,11), false)
final_goal(2, on((block,8)), (block,12), false)
final_goal(2, on((block,8)), (block,2), false)
final_goal(2, on((block,8)), (block,3), false)
final_goal(2, on((block,8)), (block,4), false)
final_goal(2, on((block,8)), (block,5), false)
final_goal(2, on((block,8)), (block,6), false)
final_goal(2, on((block,8)), (block,7), false)
final_goal(2, on((block,8)), nothing, false)
final_goal(2, on((block,9)), ((puzzle_room,1),table), false)
final_goal(2, on((block,9)), (block,1), false)
final_goal(2, on((block,9)), (block,10), false)
final_goal(2, on((block,9)), (block,11), false)
final_goal(2, on((block,9)), (block,12), false)
final_goal(2, on((block,9)), (block,2), false)
final_goal(2, on((block,9)), (block,3), false)
final_goal(2, on((block,9)), (block,4), false)
final_goal(2, on((block,9)), (block,5), false)
final_goal(2, on((block,9)), (block,6), false)
final_goal(2, on((block,9)), (block,7), false)
final_goal(2, on((block,9)), (block,8), false)
final_goal(2, on((block,9)), nothing, false)
final_goal(2, tower_base((block,1),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,1),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,10),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,10),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,11),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,11),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,12),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,12),((puzzle_room,2),table)), false, false)
final_goal(2, tower_base((block,2),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,2),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,3),((puzzle_room,1),table)), false, false)
final_goal(2, tower_base((block,3),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,4),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,4),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,5),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,5),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,6),((puzzle_room,1),table)), false, false)
final_goal(2, tower_base((block,6),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,7),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,7),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,8),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,8),((puzzle_room,2),table)), true, false)
final_goal(2, tower_base((block,9),((puzzle_room,1),table)), true, false)
final_goal(2, tower_base((block,9),((puzzle_room,2),table)), false, false)
final_goal(2, unordered_tower((block,1),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,1),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,10),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,10),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,11),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,11),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,12),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,12),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,2),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,2),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,3),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,3),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,4),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,4),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,5),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,5),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,6),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,6),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,7),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,7),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,8),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,8),((puzzle_room,2),table)), true, false)
final_goal(2, unordered_tower((block,9),((puzzle_room,1),table)), true, false)
final_goal(2, unordered_tower((block,9),((puzzle_room,2),table)), true, false)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_puzzle(((puzzle_room,1),table)), true, true)
final_goal(1, complete_puzzle(((puzzle_room,2),table)), true, true)
final_goal(1, complete_tower(blue,((puzzle_room,1),table)), true, true)
final_goal(1, complete_tower(blue,((puzzle_room,2),table)), true, true)
final_goal(1, complete_tower(red,((puzzle_room,1),table)), true, true)
final_goal(1, complete_tower(red,((puzzle_room,2),table)), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,10)), false, true)
final_goal(1, in_tower((block,1),(block,11)), false, true)
final_goal(1, in_tower((block,1),(block,12)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,7)), false, true)
final_goal(1, in_tower((block,1),(block,8)), false, true)
final_goal(1, in_tower((block,1),(block,9)), false, true)
final_goal(1, in_tower((block,10),(block,1)), false, true)
final_goal(1, in_tower((block,10),(block,10)), false, true)
final_goal(1, in_tower((block,10),(block,11)), false, true)
final_goal(1, in_tower((block,10),(block,12)), false, true)
final_goal(1, in_tower((block,10),(block,2)), false, true)
final_goal(1, in_tower((block,10),(block,3)), false, true)
final_goal(1, in_tower((block,10),(block,4)), false, true)
final_goal(1, in_tower((block,10),(block,5)), false, true)
final_goal(1, in_tower((block,10),(block,6)), false, true)
final_goal(1, in_tower((block,10),(block,7)), false, true)
final_goal(1, in_tower((block,10),(block,8)), false, true)
final_goal(1, in_tower((block,10),(block,9)), false, true)
final_goal(1, in_tower((block,11),(block,1)), false, true)
final_goal(1, in_tower((block,11),(block,10)), false, true)
final_goal(1, in_tower((block,11),(block,11)), false, true)
final_goal(1, in_tower((block,11),(block,12)), false, true)
final_goal(1, in_tower((block,11),(block,2)), false, true)
final_goal(1, in_tower((block,11),(block,3)), false, true)
final_goal(1, in_tower((block,11),(block,4)), false, true)
final_goal(1, in_tower((block,11),(block,5)), false, true)
final_goal(1, in_tower((block,11),(block,6)), false, true)
final_goal(1, in_tower((block,11),(block,7)), false, true)
final_goal(1, in_tower((block,11),(block,8)), false, true)
final_goal(1, in_tower((block,11),(block,9)), false, true)
final_goal(1, in_tower((block,12),(block,1)), false, true)
final_goal(1, in_tower((block,12),(block,10)), true, true)
final_goal(1, in_tower((block,12),(block,11)), true, true)
final_goal(1, in_tower((block,12),(block,12)), true, true)
final_goal(1, in_tower((block,12),(block,2)), false, true)
final_goal(1, in_tower((block,12),(block,3)), false, true)
final_goal(1, in_tower((block,12),(block,4)), false, true)
final_goal(1, in_tower((block,12),(block,5)), false, true)
final_goal(1, in_tower((block,12),(block,6)), false, true)
final_goal(1, in_tower((block,12),(block,7)), false, true)
final_goal(1, in_tower((block,12),(block,8)), false, true)
final_goal(1, in_tower((block,12),(block,9)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,10)), false, true)
final_goal(1, in_tower((block,2),(block,11)), false, true)
final_goal(1, in_tower((block,2),(block,12)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,7)), false, true)
final_goal(1, in_tower((block,2),(block,8)), false, true)
final_goal(1, in_tower((block,2),(block,9)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,10)), false, true)
final_goal(1, in_tower((block,3),(block,11)), false, true)
final_goal(1, in_tower((block,3),(block,12)), false, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,7)), false, true)
final_goal(1, in_tower((block,3),(block,8)), false, true)
final_goal(1, in_tower((block,3),(block,9)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,10)), false, true)
final_goal(1, in_tower((block,4),(block,11)), false, true)
final_goal(1, in_tower((block,4),(block,12)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,7)), false, true)
final_goal(1, in_tower((block,4),(block,8)), false, true)
final_goal(1, in_tower((block,4),(block,9)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,10)), false, true)
final_goal(1, in_tower((block,5),(block,11)), false, true)
final_goal(1, in_tower((block,5),(block,12)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,7)), false, true)
final_goal(1, in_tower((block,5),(block,8)), false, true)
final_goal(1, in_tower((block,5),(block,9)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,10)), false, true)
final_goal(1, in_tower((block,6),(block,11)), false, true)
final_goal(1, in_tower((block,6),(block,12)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, in_tower((block,6),(block,7)), false, true)
final_goal(1, in_tower((block,6),(block,8)), false, true)
final_goal(1, in_tower((block,6),(block,9)), false, true)
final_goal(1, in_tower((block,7),(block,1)), false, true)
final_goal(1, in_tower((block,7),(block,10)), false, true)
final_goal(1, in_tower((block,7),(block,11)), false, true)
final_goal(1, in_tower((block,7),(block,12)), false, true)
final_goal(1, in_tower((block,7),(block,2)), false, true)
final_goal(1, in_tower((block,7),(block,3)), false, true)
final_goal(1, in_tower((block,7),(block,4)), false, true)
final_goal(1, in_tower((block,7),(block,5)), false, true)
final_goal(1, in_tower((block,7),(block,6)), false, true)
final_goal(1, in_tower((block,7),(block,7)), false, true)
final_goal(1, in_tower((block,7),(block,8)), false, true)
final_goal(1, in_tower((block,7),(block,9)), false, true)
final_goal(1, in_tower((block,8),(block,1)), false, true)
final_goal(1, in_tower((block,8),(block,10)), false, true)
final_goal(1, in_tower((block,8),(block,11)), false, true)
final_goal(1, in_tower((block,8),(block,12)), false, true)
final_goal(1, in_tower((block,8),(block,2)), false, true)
final_goal(1, in_tower((block,8),(block,3)), false, true)
final_goal(1, in_tower((block,8),(block,4)), false, true)
final_goal(1, in_tower((block,8),(block,5)), false, true)
final_goal(1, in_tower((block,8),(block,6)), false, true)
final_goal(1, in_tower((block,8),(block,7)), false, true)
final_goal(1, in_tower((block,8),(block,8)), false, true)
final_goal(1, in_tower((block,8),(block,9)), false, true)
final_goal(1, in_tower((block,9),(block,1)), false, true)
final_goal(1, in_tower((block,9),(block,10)), false, true)
final_goal(1, in_tower((block,9),(block,11)), false, true)
final_goal(1, in_tower((block,9),(block,12)), false, true)
final_goal(1, in_tower((block,9),(block,2)), false, true)
final_goal(1, in_tower((block,9),(block,3)), false, true)
final_goal(1, in_tower((block,9),(block,4)), false, true)
final_goal(1, in_tower((block,9),(block,5)), false, true)
final_goal(1, in_tower((block,9),(block,6)), false, true)
final_goal(1, in_tower((block,9),(block,7)), true, true)
final_goal(1, in_tower((block,9),(block,8)), true, true)
final_goal(1, in_tower((block,9),(block,9)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,10)), (block,11), true)
final_goal(1, on((block,11)), (block,12), true)
final_goal(1, on((block,12)), (((puzzle_room,2),table),right), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), (((puzzle_room,1),table),left), true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), (((puzzle_room,1),table),right), true)
final_goal(1, on((block,7)), (block,8), true)
final_goal(1, on((block,8)), (block,9), true)
final_goal(1, on((block,9)), (((puzzle_room,2),table),left), true)
final_goal(1, tower_base((block,1),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,1),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,10),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,10),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,11),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,11),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,12),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,12),((puzzle_room,2),table)), true, true)
final_goal(1, tower_base((block,2),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,2),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,3),((puzzle_room,1),table)), true, true)
final_goal(1, tower_base((block,3),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,4),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,4),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,5),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,5),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,6),((puzzle_room,1),table)), true, true)
final_goal(1, tower_base((block,6),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,7),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,7),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,8),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,8),((puzzle_room,2),table)), false, true)
final_goal(1, tower_base((block,9),((puzzle_room,1),table)), false, true)
final_goal(1, tower_base((block,9),((puzzle_room,2),table)), true, true)
final_goal(1, unordered_tower((block,1),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,1),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,10),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,10),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,11),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,11),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,12),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,12),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,2),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,2),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,3),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,3),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,4),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,4),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,5),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,5),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,6),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,6),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,7),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,7),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,8),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,8),((puzzle_room,2),table)), false, true)
final_goal(1, unordered_tower((block,9),((puzzle_room,1),table)), false, true)
final_goal(1, unordered_tower((block,9),((puzzle_room,2),table)), false, true)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative Final-goals at abstraction level 1         
      ================================================      

final_goal(1, complete_tower(blue,((puzzle_room,1),table)), false, false)
final_goal(1, complete_tower(blue,((puzzle_room,2),table)), false, false)
final_goal(1, complete_tower(red,((puzzle_room,1),table)), false, false)
final_goal(1, complete_tower(red,((puzzle_room,2),table)), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,10)), true, false)
final_goal(1, in_tower((block,1),(block,11)), true, false)
final_goal(1, in_tower((block,1),(block,12)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,1),(block,7)), true, false)
final_goal(1, in_tower((block,1),(block,8)), true, false)
final_goal(1, in_tower((block,1),(block,9)), true, false)
final_goal(1, in_tower((block,10),(block,1)), true, false)
final_goal(1, in_tower((block,10),(block,10)), true, false)
final_goal(1, in_tower((block,10),(block,11)), true, false)
final_goal(1, in_tower((block,10),(block,12)), true, false)
final_goal(1, in_tower((block,10),(block,2)), true, false)
final_goal(1, in_tower((block,10),(block,3)), true, false)
final_goal(1, in_tower((block,10),(block,4)), true, false)
final_goal(1, in_tower((block,10),(block,5)), true, false)
final_goal(1, in_tower((block,10),(block,6)), true, false)
final_goal(1, in_tower((block,10),(block,7)), true, false)
final_goal(1, in_tower((block,10),(block,8)), true, false)
final_goal(1, in_tower((block,10),(block,9)), true, false)
final_goal(1, in_tower((block,11),(block,1)), true, false)
final_goal(1, in_tower((block,11),(block,10)), true, false)
final_goal(1, in_tower((block,11),(block,11)), true, false)
final_goal(1, in_tower((block,11),(block,12)), true, false)
final_goal(1, in_tower((block,11),(block,2)), true, false)
final_goal(1, in_tower((block,11),(block,3)), true, false)
final_goal(1, in_tower((block,11),(block,4)), true, false)
final_goal(1, in_tower((block,11),(block,5)), true, false)
final_goal(1, in_tower((block,11),(block,6)), true, false)
final_goal(1, in_tower((block,11),(block,7)), true, false)
final_goal(1, in_tower((block,11),(block,8)), true, false)
final_goal(1, in_tower((block,11),(block,9)), true, false)
final_goal(1, in_tower((block,12),(block,1)), true, false)
final_goal(1, in_tower((block,12),(block,10)), false, false)
final_goal(1, in_tower((block,12),(block,11)), false, false)
final_goal(1, in_tower((block,12),(block,12)), false, false)
final_goal(1, in_tower((block,12),(block,2)), true, false)
final_goal(1, in_tower((block,12),(block,3)), true, false)
final_goal(1, in_tower((block,12),(block,4)), true, false)
final_goal(1, in_tower((block,12),(block,5)), true, false)
final_goal(1, in_tower((block,12),(block,6)), true, false)
final_goal(1, in_tower((block,12),(block,7)), true, false)
final_goal(1, in_tower((block,12),(block,8)), true, false)
final_goal(1, in_tower((block,12),(block,9)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,10)), true, false)
final_goal(1, in_tower((block,2),(block,11)), true, false)
final_goal(1, in_tower((block,2),(block,12)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,7)), true, false)
final_goal(1, in_tower((block,2),(block,8)), true, false)
final_goal(1, in_tower((block,2),(block,9)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,10)), true, false)
final_goal(1, in_tower((block,3),(block,11)), true, false)
final_goal(1, in_tower((block,3),(block,12)), true, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,7)), true, false)
final_goal(1, in_tower((block,3),(block,8)), true, false)
final_goal(1, in_tower((block,3),(block,9)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,10)), true, false)
final_goal(1, in_tower((block,4),(block,11)), true, false)
final_goal(1, in_tower((block,4),(block,12)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,7)), true, false)
final_goal(1, in_tower((block,4),(block,8)), true, false)
final_goal(1, in_tower((block,4),(block,9)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,10)), true, false)
final_goal(1, in_tower((block,5),(block,11)), true, false)
final_goal(1, in_tower((block,5),(block,12)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,7)), true, false)
final_goal(1, in_tower((block,5),(block,8)), true, false)
final_goal(1, in_tower((block,5),(block,9)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,10)), true, false)
final_goal(1, in_tower((block,6),(block,11)), true, false)
final_goal(1, in_tower((block,6),(block,12)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,7)), true, false)
final_goal(1, in_tower((block,6),(block,8)), true, false)
final_goal(1, in_tower((block,6),(block,9)), true, false)
final_goal(1, in_tower((block,7),(block,1)), true, false)
final_goal(1, in_tower((block,7),(block,10)), true, false)
final_goal(1, in_tower((block,7),(block,11)), true, false)
final_goal(1, in_tower((block,7),(block,12)), true, false)
final_goal(1, in_tower((block,7),(block,2)), true, false)
final_goal(1, in_tower((block,7),(block,3)), true, false)
final_goal(1, in_tower((block,7),(block,4)), true, false)
final_goal(1, in_tower((block,7),(block,5)), true, false)
final_goal(1, in_tower((block,7),(block,6)), true, false)
final_goal(1, in_tower((block,7),(block,7)), true, false)
final_goal(1, in_tower((block,7),(block,8)), true, false)
final_goal(1, in_tower((block,7),(block,9)), true, false)
final_goal(1, in_tower((block,8),(block,1)), true, false)
final_goal(1, in_tower((block,8),(block,10)), true, false)
final_goal(1, in_tower((block,8),(block,11)), true, false)
final_goal(1, in_tower((block,8),(block,12)), true, false)
final_goal(1, in_tower((block,8),(block,2)), true, false)
final_goal(1, in_tower((block,8),(block,3)), true, false)
final_goal(1, in_tower((block,8),(block,4)), true, false)
final_goal(1, in_tower((block,8),(block,5)), true, false)
final_goal(1, in_tower((block,8),(block,6)), true, false)
final_goal(1, in_tower((block,8),(block,7)), true, false)
final_goal(1, in_tower((block,8),(block,8)), true, false)
final_goal(1, in_tower((block,8),(block,9)), true, false)
final_goal(1, in_tower((block,9),(block,1)), true, false)
final_goal(1, in_tower((block,9),(block,10)), true, false)
final_goal(1, in_tower((block,9),(block,11)), true, false)
final_goal(1, in_tower((block,9),(block,12)), true, false)
final_goal(1, in_tower((block,9),(block,2)), true, false)
final_goal(1, in_tower((block,9),(block,3)), true, false)
final_goal(1, in_tower((block,9),(block,4)), true, false)
final_goal(1, in_tower((block,9),(block,5)), true, false)
final_goal(1, in_tower((block,9),(block,6)), true, false)
final_goal(1, in_tower((block,9),(block,7)), false, false)
final_goal(1, in_tower((block,9),(block,8)), false, false)
final_goal(1, in_tower((block,9),(block,9)), false, false)
final_goal(1, on((block,1)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,1)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,1)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,1)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,1)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,1)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,1)), (block,10), false)
final_goal(1, on((block,1)), (block,11), false)
final_goal(1, on((block,1)), (block,12), false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), (block,7), false)
final_goal(1, on((block,1)), (block,8), false)
final_goal(1, on((block,1)), (block,9), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,10)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,10)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,10)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,10)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,10)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,10)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,10)), (block,1), false)
final_goal(1, on((block,10)), (block,12), false)
final_goal(1, on((block,10)), (block,2), false)
final_goal(1, on((block,10)), (block,3), false)
final_goal(1, on((block,10)), (block,4), false)
final_goal(1, on((block,10)), (block,5), false)
final_goal(1, on((block,10)), (block,6), false)
final_goal(1, on((block,10)), (block,7), false)
final_goal(1, on((block,10)), (block,8), false)
final_goal(1, on((block,10)), (block,9), false)
final_goal(1, on((block,10)), nothing, false)
final_goal(1, on((block,11)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,11)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,11)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,11)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,11)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,11)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,11)), (block,1), false)
final_goal(1, on((block,11)), (block,10), false)
final_goal(1, on((block,11)), (block,2), false)
final_goal(1, on((block,11)), (block,3), false)
final_goal(1, on((block,11)), (block,4), false)
final_goal(1, on((block,11)), (block,5), false)
final_goal(1, on((block,11)), (block,6), false)
final_goal(1, on((block,11)), (block,7), false)
final_goal(1, on((block,11)), (block,8), false)
final_goal(1, on((block,11)), (block,9), false)
final_goal(1, on((block,11)), nothing, false)
final_goal(1, on((block,12)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,12)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,12)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,12)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,12)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,12)), (block,1), false)
final_goal(1, on((block,12)), (block,10), false)
final_goal(1, on((block,12)), (block,11), false)
final_goal(1, on((block,12)), (block,2), false)
final_goal(1, on((block,12)), (block,3), false)
final_goal(1, on((block,12)), (block,4), false)
final_goal(1, on((block,12)), (block,5), false)
final_goal(1, on((block,12)), (block,6), false)
final_goal(1, on((block,12)), (block,7), false)
final_goal(1, on((block,12)), (block,8), false)
final_goal(1, on((block,12)), (block,9), false)
final_goal(1, on((block,12)), nothing, false)
final_goal(1, on((block,2)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,2)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,2)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,2)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,2)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,2)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,10), false)
final_goal(1, on((block,2)), (block,11), false)
final_goal(1, on((block,2)), (block,12), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), (block,7), false)
final_goal(1, on((block,2)), (block,8), false)
final_goal(1, on((block,2)), (block,9), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,3)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,3)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,3)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,3)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,3)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,10), false)
final_goal(1, on((block,3)), (block,11), false)
final_goal(1, on((block,3)), (block,12), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), (block,7), false)
final_goal(1, on((block,3)), (block,8), false)
final_goal(1, on((block,3)), (block,9), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,4)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,4)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,4)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,4)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,4)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,4)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,10), false)
final_goal(1, on((block,4)), (block,11), false)
final_goal(1, on((block,4)), (block,12), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), (block,7), false)
final_goal(1, on((block,4)), (block,8), false)
final_goal(1, on((block,4)), (block,9), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,5)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,5)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,5)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,5)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,5)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,5)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,10), false)
final_goal(1, on((block,5)), (block,11), false)
final_goal(1, on((block,5)), (block,12), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,7), false)
final_goal(1, on((block,5)), (block,8), false)
final_goal(1, on((block,5)), (block,9), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,6)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,6)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,6)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,6)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,6)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,10), false)
final_goal(1, on((block,6)), (block,11), false)
final_goal(1, on((block,6)), (block,12), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), (block,7), false)
final_goal(1, on((block,6)), (block,8), false)
final_goal(1, on((block,6)), (block,9), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,7)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,7)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,7)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,7)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,7)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,7)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,7)), (block,1), false)
final_goal(1, on((block,7)), (block,10), false)
final_goal(1, on((block,7)), (block,11), false)
final_goal(1, on((block,7)), (block,12), false)
final_goal(1, on((block,7)), (block,2), false)
final_goal(1, on((block,7)), (block,3), false)
final_goal(1, on((block,7)), (block,4), false)
final_goal(1, on((block,7)), (block,5), false)
final_goal(1, on((block,7)), (block,6), false)
final_goal(1, on((block,7)), (block,9), false)
final_goal(1, on((block,7)), nothing, false)
final_goal(1, on((block,8)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,8)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,8)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,8)), (((puzzle_room,2),table),left), false)
final_goal(1, on((block,8)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,8)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,8)), (block,1), false)
final_goal(1, on((block,8)), (block,10), false)
final_goal(1, on((block,8)), (block,11), false)
final_goal(1, on((block,8)), (block,12), false)
final_goal(1, on((block,8)), (block,2), false)
final_goal(1, on((block,8)), (block,3), false)
final_goal(1, on((block,8)), (block,4), false)
final_goal(1, on((block,8)), (block,5), false)
final_goal(1, on((block,8)), (block,6), false)
final_goal(1, on((block,8)), (block,7), false)
final_goal(1, on((block,8)), nothing, false)
final_goal(1, on((block,9)), (((puzzle_room,1),table),left), false)
final_goal(1, on((block,9)), (((puzzle_room,1),table),middle), false)
final_goal(1, on((block,9)), (((puzzle_room,1),table),right), false)
final_goal(1, on((block,9)), (((puzzle_room,2),table),middle), false)
final_goal(1, on((block,9)), (((puzzle_room,2),table),right), false)
final_goal(1, on((block,9)), (block,1), false)
final_goal(1, on((block,9)), (block,10), false)
final_goal(1, on((block,9)), (block,11), false)
final_goal(1, on((block,9)), (block,12), false)
final_goal(1, on((block,9)), (block,2), false)
final_goal(1, on((block,9)), (block,3), false)
final_goal(1, on((block,9)), (block,4), false)
final_goal(1, on((block,9)), (block,5), false)
final_goal(1, on((block,9)), (block,6), false)
final_goal(1, on((block,9)), (block,7), false)
final_goal(1, on((block,9)), (block,8), false)
final_goal(1, on((block,9)), nothing, false)
final_goal(1, tower_base((block,1),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,1),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,10),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,10),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,11),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,11),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,12),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,12),((puzzle_room,2),table)), false, false)
final_goal(1, tower_base((block,2),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,2),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,3),((puzzle_room,1),table)), false, false)
final_goal(1, tower_base((block,3),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,4),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,4),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,5),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,5),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,6),((puzzle_room,1),table)), false, false)
final_goal(1, tower_base((block,6),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,7),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,7),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,8),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,8),((puzzle_room,2),table)), true, false)
final_goal(1, tower_base((block,9),((puzzle_room,1),table)), true, false)
final_goal(1, tower_base((block,9),((puzzle_room,2),table)), false, false)
final_goal(1, unordered_tower((block,1),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,1),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,10),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,10),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,11),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,11),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,12),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,12),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,2),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,2),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,3),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,3),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,4),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,4),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,5),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,5),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,6),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,6),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,7),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,7),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,8),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,8),((puzzle_room,2),table)), true, false)
final_goal(1, unordered_tower((block,9),((puzzle_room,1),table)), true, false)
final_goal(1, unordered_tower((block,9),((puzzle_room,2),table)), true, false)

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 4)
	('top_level', 4)
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', None)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', False)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_problem_multi_puzzle_general.lp', '.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_system_laws_tasking_complete.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [4-4] : OFFLINE MODE

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Starting hierarchical planning at level 4 which is not the top-level and no sub-goals exist at previous level.

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 4 : Solved problems = 0 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = False

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 4, Highest = 4.

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Chosen level range for online planning increment 1 by method ground-first is [4-4].

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 4

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', None)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', None)
	('level', 4)
	('self', HierarchicalPlanner(PlanningDomain(['.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_problem_multi_puzzle_general.lp', '.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_system_laws_tasking_complete.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 4] classical : Concurrency disabled : Minimum search length bound disabled with value 0

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 4
concurrency = False
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[18-01-2022_21-52-51] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[18-01-2022_21-52-51] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 4, 'F': 'complete_puzzle(((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_puzzle(((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(blue,((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'complete_tower(red,((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in(((puzzle_room,1),table))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in(((puzzle_room,2),table))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,10))', 'V': '(store_room,2)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,11))', 'V': '(store_room,2)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,12))', 'V': '(store_room,2)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,4))', 'V': '(store_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,5))', 'V': '(store_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,6))', 'V': '(store_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,7))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,8))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 4, 'F': 'in((block,9))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 4, 'F': 'in(talos)', 'V': '(starting_room,1)', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,1))', 'V': '((puzzle_room,1),table)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,10))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,11))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,12))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,2))', 'V': '((puzzle_room,1),table)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,7))', 'V': '((puzzle_room,2),table)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,8))', 'V': '((puzzle_room,2),table)', 'S': 0})
Fluent({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),((puzzle_room,1),table))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,1),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,10),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,11),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,12),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),((puzzle_room,1),table))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,2),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,3),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,4),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,5),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,6),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,7),((puzzle_room,2),table))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,8),((puzzle_room,2),table))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'tower_base((block,9),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),((puzzle_room,1),table))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,1),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,10),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,11),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,12),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,2),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,3),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,4),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,5),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,6),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,7),((puzzle_room,2),table))', 'V': 'true', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,8),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 4, 'F': 'unordered_tower((block,9),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_puzzle(((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_puzzle(((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(blue,((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'complete_tower(red,((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in(((puzzle_room,1),table))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in(((puzzle_room,2),table))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,10))', 'V': '(store_room,2)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,11))', 'V': '(store_room,2)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,12))', 'V': '(store_room,2)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,4))', 'V': '(store_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,5))', 'V': '(store_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,6))', 'V': '(store_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,7))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,8))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 5, 'F': 'in((block,9))', 'V': '(puzzle_room,2)', 'S': 0})
Fluent({'L': 5, 'F': 'in(talos)', 'V': '(starting_room,1)', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,1))', 'V': '((puzzle_room,1),table)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,10))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,11))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,12))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,2))', 'V': '((puzzle_room,1),table)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,7))', 'V': '((puzzle_room,2),table)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,8))', 'V': '((puzzle_room,2),table)', 'S': 0})
Fluent({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),((puzzle_room,1),table))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,1),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,10),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,11),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,12),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),((puzzle_room,1),table))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,2),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,3),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,4),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,5),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,6),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,7),((puzzle_room,2),table))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,8),((puzzle_room,2),table))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'tower_base((block,9),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,10))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,11))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,12))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,7))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,8))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'transporting(talos,(block,9))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),((puzzle_room,1),table))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,1),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,10),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,11),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,12),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,2),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,3),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,4),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,5),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,6),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,7),((puzzle_room,2),table))', 'V': 'true', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,8),((puzzle_room,2),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),((puzzle_room,1),table))', 'V': 'false', 'S': 0})
Fluent({'L': 5, 'F': 'unordered_tower((block,9),((puzzle_room,2),table))', 'V': 'false', 'S': 0})

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 474 rules into program part ash_initial_state:

holds(4, complete_puzzle(((puzzle_room,1),table)), false, 0).
holds(4, complete_puzzle(((puzzle_room,2),table)), false, 0).
holds(4, complete_tower(blue,((puzzle_room,1),table)), false, 0).
holds(4, complete_tower(blue,((puzzle_room,2),table)), false, 0).
holds(4, complete_tower(red,((puzzle_room,1),table)), false, 0).
holds(4, complete_tower(red,((puzzle_room,2),table)), false, 0).
holds(4, in(((puzzle_room,1),table)), (puzzle_room,1), 0).
holds(4, in(((puzzle_room,2),table)), (puzzle_room,2), 0).
holds(4, in((block,1)), (puzzle_room,1), 0).
holds(4, in((block,10)), (store_room,2), 0).
holds(4, in((block,11)), (store_room,2), 0).
holds(4, in((block,12)), (store_room,2), 0).
holds(4, in((block,2)), (puzzle_room,1), 0).
holds(4, in((block,3)), (puzzle_room,1), 0).
holds(4, in((block,4)), (store_room,1), 0).
holds(4, in((block,5)), (store_room,1), 0).
holds(4, in((block,6)), (store_room,1), 0).
holds(4, in((block,7)), (puzzle_room,2), 0).
holds(4, in((block,8)), (puzzle_room,2), 0).
holds(4, in((block,9)), (puzzle_room,2), 0).
holds(4, in(talos), (starting_room,1), 0).
holds(4, in_tower((block,1),(block,1)), true, 0).
holds(4, in_tower((block,1),(block,10)), false, 0).
holds(4, in_tower((block,1),(block,11)), false, 0).
holds(4, in_tower((block,1),(block,12)), false, 0).
holds(4, in_tower((block,1),(block,2)), false, 0).
holds(4, in_tower((block,1),(block,3)), true, 0).
holds(4, in_tower((block,1),(block,4)), false, 0).
holds(4, in_tower((block,1),(block,5)), false, 0).
holds(4, in_tower((block,1),(block,6)), false, 0).
holds(4, in_tower((block,1),(block,7)), false, 0).
holds(4, in_tower((block,1),(block,8)), false, 0).
holds(4, in_tower((block,1),(block,9)), false, 0).
holds(4, in_tower((block,10),(block,1)), false, 0).
holds(4, in_tower((block,10),(block,10)), false, 0).
holds(4, in_tower((block,10),(block,11)), false, 0).
holds(4, in_tower((block,10),(block,12)), false, 0).
holds(4, in_tower((block,10),(block,2)), false, 0).
holds(4, in_tower((block,10),(block,3)), false, 0).
holds(4, in_tower((block,10),(block,4)), false, 0).
holds(4, in_tower((block,10),(block,5)), false, 0).
holds(4, in_tower((block,10),(block,6)), false, 0).
holds(4, in_tower((block,10),(block,7)), false, 0).
holds(4, in_tower((block,10),(block,8)), false, 0).
holds(4, in_tower((block,10),(block,9)), false, 0).
holds(4, in_tower((block,11),(block,1)), false, 0).
holds(4, in_tower((block,11),(block,10)), false, 0).
holds(4, in_tower((block,11),(block,11)), false, 0).
holds(4, in_tower((block,11),(block,12)), false, 0).
holds(4, in_tower((block,11),(block,2)), false, 0).
holds(4, in_tower((block,11),(block,3)), false, 0).
holds(4, in_tower((block,11),(block,4)), false, 0).
holds(4, in_tower((block,11),(block,5)), false, 0).
holds(4, in_tower((block,11),(block,6)), false, 0).
holds(4, in_tower((block,11),(block,7)), false, 0).
holds(4, in_tower((block,11),(block,8)), false, 0).
holds(4, in_tower((block,11),(block,9)), false, 0).
holds(4, in_tower((block,12),(block,1)), false, 0).
holds(4, in_tower((block,12),(block,10)), false, 0).
holds(4, in_tower((block,12),(block,11)), false, 0).
holds(4, in_tower((block,12),(block,12)), false, 0).
holds(4, in_tower((block,12),(block,2)), false, 0).
holds(4, in_tower((block,12),(block,3)), false, 0).
holds(4, in_tower((block,12),(block,4)), false, 0).
holds(4, in_tower((block,12),(block,5)), false, 0).
holds(4, in_tower((block,12),(block,6)), false, 0).
holds(4, in_tower((block,12),(block,7)), false, 0).
holds(4, in_tower((block,12),(block,8)), false, 0).
holds(4, in_tower((block,12),(block,9)), false, 0).
holds(4, in_tower((block,2),(block,1)), false, 0).
holds(4, in_tower((block,2),(block,10)), false, 0).
holds(4, in_tower((block,2),(block,11)), false, 0).
holds(4, in_tower((block,2),(block,12)), false, 0).
holds(4, in_tower((block,2),(block,2)), true, 0).
holds(4, in_tower((block,2),(block,3)), false, 0).
holds(4, in_tower((block,2),(block,4)), false, 0).
holds(4, in_tower((block,2),(block,5)), false, 0).
holds(4, in_tower((block,2),(block,6)), false, 0).
holds(4, in_tower((block,2),(block,7)), false, 0).
holds(4, in_tower((block,2),(block,8)), false, 0).
holds(4, in_tower((block,2),(block,9)), false, 0).
holds(4, in_tower((block,3),(block,1)), false, 0).
holds(4, in_tower((block,3),(block,10)), false, 0).
holds(4, in_tower((block,3),(block,11)), false, 0).
holds(4, in_tower((block,3),(block,12)), false, 0).
holds(4, in_tower((block,3),(block,2)), false, 0).
holds(4, in_tower((block,3),(block,3)), false, 0).
holds(4, in_tower((block,3),(block,4)), false, 0).
holds(4, in_tower((block,3),(block,5)), false, 0).
holds(4, in_tower((block,3),(block,6)), false, 0).
holds(4, in_tower((block,3),(block,7)), false, 0).
holds(4, in_tower((block,3),(block,8)), false, 0).
holds(4, in_tower((block,3),(block,9)), false, 0).
holds(4, in_tower((block,4),(block,1)), false, 0).
holds(4, in_tower((block,4),(block,10)), false, 0).
holds(4, in_tower((block,4),(block,11)), false, 0).
holds(4, in_tower((block,4),(block,12)), false, 0).
holds(4, in_tower((block,4),(block,2)), false, 0).
holds(4, in_tower((block,4),(block,3)), false, 0).
holds(4, in_tower((block,4),(block,4)), false, 0).
holds(4, in_tower((block,4),(block,5)), false, 0).
holds(4, in_tower((block,4),(block,6)), false, 0).
holds(4, in_tower((block,4),(block,7)), false, 0).
holds(4, in_tower((block,4),(block,8)), false, 0).
holds(4, in_tower((block,4),(block,9)), false, 0).
holds(4, in_tower((block,5),(block,1)), false, 0).
holds(4, in_tower((block,5),(block,10)), false, 0).
holds(4, in_tower((block,5),(block,11)), false, 0).
holds(4, in_tower((block,5),(block,12)), false, 0).
holds(4, in_tower((block,5),(block,2)), false, 0).
holds(4, in_tower((block,5),(block,3)), false, 0).
holds(4, in_tower((block,5),(block,4)), false, 0).
holds(4, in_tower((block,5),(block,5)), false, 0).
holds(4, in_tower((block,5),(block,6)), false, 0).
holds(4, in_tower((block,5),(block,7)), false, 0).
holds(4, in_tower((block,5),(block,8)), false, 0).
holds(4, in_tower((block,5),(block,9)), false, 0).
holds(4, in_tower((block,6),(block,1)), false, 0).
holds(4, in_tower((block,6),(block,10)), false, 0).
holds(4, in_tower((block,6),(block,11)), false, 0).
holds(4, in_tower((block,6),(block,12)), false, 0).
holds(4, in_tower((block,6),(block,2)), false, 0).
holds(4, in_tower((block,6),(block,3)), false, 0).
holds(4, in_tower((block,6),(block,4)), false, 0).
holds(4, in_tower((block,6),(block,5)), false, 0).
holds(4, in_tower((block,6),(block,6)), false, 0).
holds(4, in_tower((block,6),(block,7)), false, 0).
holds(4, in_tower((block,6),(block,8)), false, 0).
holds(4, in_tower((block,6),(block,9)), false, 0).
holds(4, in_tower((block,7),(block,1)), false, 0).
holds(4, in_tower((block,7),(block,10)), false, 0).
holds(4, in_tower((block,7),(block,11)), false, 0).
holds(4, in_tower((block,7),(block,12)), false, 0).
holds(4, in_tower((block,7),(block,2)), false, 0).
holds(4, in_tower((block,7),(block,3)), false, 0).
holds(4, in_tower((block,7),(block,4)), false, 0).
holds(4, in_tower((block,7),(block,5)), false, 0).
holds(4, in_tower((block,7),(block,6)), false, 0).
holds(4, in_tower((block,7),(block,7)), true, 0).
holds(4, in_tower((block,7),(block,8)), false, 0).
holds(4, in_tower((block,7),(block,9)), true, 0).
holds(4, in_tower((block,8),(block,1)), false, 0).
holds(4, in_tower((block,8),(block,10)), false, 0).
holds(4, in_tower((block,8),(block,11)), false, 0).
holds(4, in_tower((block,8),(block,12)), false, 0).
holds(4, in_tower((block,8),(block,2)), false, 0).
holds(4, in_tower((block,8),(block,3)), false, 0).
holds(4, in_tower((block,8),(block,4)), false, 0).
holds(4, in_tower((block,8),(block,5)), false, 0).
holds(4, in_tower((block,8),(block,6)), false, 0).
holds(4, in_tower((block,8),(block,7)), false, 0).
holds(4, in_tower((block,8),(block,8)), true, 0).
holds(4, in_tower((block,8),(block,9)), false, 0).
holds(4, in_tower((block,9),(block,1)), false, 0).
holds(4, in_tower((block,9),(block,10)), false, 0).
holds(4, in_tower((block,9),(block,11)), false, 0).
holds(4, in_tower((block,9),(block,12)), false, 0).
holds(4, in_tower((block,9),(block,2)), false, 0).
holds(4, in_tower((block,9),(block,3)), false, 0).
holds(4, in_tower((block,9),(block,4)), false, 0).
holds(4, in_tower((block,9),(block,5)), false, 0).
holds(4, in_tower((block,9),(block,6)), false, 0).
holds(4, in_tower((block,9),(block,7)), false, 0).
holds(4, in_tower((block,9),(block,8)), false, 0).
holds(4, in_tower((block,9),(block,9)), false, 0).
holds(4, on((block,1)), ((puzzle_room,1),table), 0).
holds(4, on((block,10)), nothing, 0).
holds(4, on((block,11)), nothing, 0).
holds(4, on((block,12)), nothing, 0).
holds(4, on((block,2)), ((puzzle_room,1),table), 0).
holds(4, on((block,3)), (block,1), 0).
holds(4, on((block,4)), nothing, 0).
holds(4, on((block,5)), nothing, 0).
holds(4, on((block,6)), nothing, 0).
holds(4, on((block,7)), ((puzzle_room,2),table), 0).
holds(4, on((block,8)), ((puzzle_room,2),table), 0).
holds(4, on((block,9)), (block,7), 0).
holds(4, tower_base((block,1),((puzzle_room,1),table)), true, 0).
holds(4, tower_base((block,1),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,10),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,10),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,11),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,11),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,12),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,12),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,2),((puzzle_room,1),table)), true, 0).
holds(4, tower_base((block,2),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,3),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,3),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,4),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,4),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,5),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,5),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,6),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,6),((puzzle_room,2),table)), false, 0).
holds(4, tower_base((block,7),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,7),((puzzle_room,2),table)), true, 0).
holds(4, tower_base((block,8),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,8),((puzzle_room,2),table)), true, 0).
holds(4, tower_base((block,9),((puzzle_room,1),table)), false, 0).
holds(4, tower_base((block,9),((puzzle_room,2),table)), false, 0).
holds(4, transporting(talos,(block,1)), false, 0).
holds(4, transporting(talos,(block,10)), false, 0).
holds(4, transporting(talos,(block,11)), false, 0).
holds(4, transporting(talos,(block,12)), false, 0).
holds(4, transporting(talos,(block,2)), false, 0).
holds(4, transporting(talos,(block,3)), false, 0).
holds(4, transporting(talos,(block,4)), false, 0).
holds(4, transporting(talos,(block,5)), false, 0).
holds(4, transporting(talos,(block,6)), false, 0).
holds(4, transporting(talos,(block,7)), false, 0).
holds(4, transporting(talos,(block,8)), false, 0).
holds(4, transporting(talos,(block,9)), false, 0).
holds(4, unordered_tower((block,1),((puzzle_room,1),table)), true, 0).
holds(4, unordered_tower((block,1),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,10),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,10),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,11),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,11),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,12),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,12),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,2),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,2),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,3),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,3),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,4),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,4),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,5),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,5),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,6),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,6),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,7),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,7),((puzzle_room,2),table)), true, 0).
holds(4, unordered_tower((block,8),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,8),((puzzle_room,2),table)), false, 0).
holds(4, unordered_tower((block,9),((puzzle_room,1),table)), false, 0).
holds(4, unordered_tower((block,9),((puzzle_room,2),table)), false, 0).
holds(5, complete_puzzle(((puzzle_room,1),table)), false, 0).
holds(5, complete_puzzle(((puzzle_room,2),table)), false, 0).
holds(5, complete_tower(blue,((puzzle_room,1),table)), false, 0).
holds(5, complete_tower(blue,((puzzle_room,2),table)), false, 0).
holds(5, complete_tower(red,((puzzle_room,1),table)), false, 0).
holds(5, complete_tower(red,((puzzle_room,2),table)), false, 0).
holds(5, in(((puzzle_room,1),table)), (puzzle_room,1), 0).
holds(5, in(((puzzle_room,2),table)), (puzzle_room,2), 0).
holds(5, in((block,1)), (puzzle_room,1), 0).
holds(5, in((block,10)), (store_room,2), 0).
holds(5, in((block,11)), (store_room,2), 0).
holds(5, in((block,12)), (store_room,2), 0).
holds(5, in((block,2)), (puzzle_room,1), 0).
holds(5, in((block,3)), (puzzle_room,1), 0).
holds(5, in((block,4)), (store_room,1), 0).
holds(5, in((block,5)), (store_room,1), 0).
holds(5, in((block,6)), (store_room,1), 0).
holds(5, in((block,7)), (puzzle_room,2), 0).
holds(5, in((block,8)), (puzzle_room,2), 0).
holds(5, in((block,9)), (puzzle_room,2), 0).
holds(5, in(talos), (starting_room,1), 0).
holds(5, in_tower((block,1),(block,1)), true, 0).
holds(5, in_tower((block,1),(block,10)), false, 0).
holds(5, in_tower((block,1),(block,11)), false, 0).
holds(5, in_tower((block,1),(block,12)), false, 0).
holds(5, in_tower((block,1),(block,2)), false, 0).
holds(5, in_tower((block,1),(block,3)), true, 0).
holds(5, in_tower((block,1),(block,4)), false, 0).
holds(5, in_tower((block,1),(block,5)), false, 0).
holds(5, in_tower((block,1),(block,6)), false, 0).
holds(5, in_tower((block,1),(block,7)), false, 0).
holds(5, in_tower((block,1),(block,8)), false, 0).
holds(5, in_tower((block,1),(block,9)), false, 0).
holds(5, in_tower((block,10),(block,1)), false, 0).
holds(5, in_tower((block,10),(block,10)), false, 0).
holds(5, in_tower((block,10),(block,11)), false, 0).
holds(5, in_tower((block,10),(block,12)), false, 0).
holds(5, in_tower((block,10),(block,2)), false, 0).
holds(5, in_tower((block,10),(block,3)), false, 0).
holds(5, in_tower((block,10),(block,4)), false, 0).
holds(5, in_tower((block,10),(block,5)), false, 0).
holds(5, in_tower((block,10),(block,6)), false, 0).
holds(5, in_tower((block,10),(block,7)), false, 0).
holds(5, in_tower((block,10),(block,8)), false, 0).
holds(5, in_tower((block,10),(block,9)), false, 0).
holds(5, in_tower((block,11),(block,1)), false, 0).
holds(5, in_tower((block,11),(block,10)), false, 0).
holds(5, in_tower((block,11),(block,11)), false, 0).
holds(5, in_tower((block,11),(block,12)), false, 0).
holds(5, in_tower((block,11),(block,2)), false, 0).
holds(5, in_tower((block,11),(block,3)), false, 0).
holds(5, in_tower((block,11),(block,4)), false, 0).
holds(5, in_tower((block,11),(block,5)), false, 0).
holds(5, in_tower((block,11),(block,6)), false, 0).
holds(5, in_tower((block,11),(block,7)), false, 0).
holds(5, in_tower((block,11),(block,8)), false, 0).
holds(5, in_tower((block,11),(block,9)), false, 0).
holds(5, in_tower((block,12),(block,1)), false, 0).
holds(5, in_tower((block,12),(block,10)), false, 0).
holds(5, in_tower((block,12),(block,11)), false, 0).
holds(5, in_tower((block,12),(block,12)), false, 0).
holds(5, in_tower((block,12),(block,2)), false, 0).
holds(5, in_tower((block,12),(block,3)), false, 0).
holds(5, in_tower((block,12),(block,4)), false, 0).
holds(5, in_tower((block,12),(block,5)), false, 0).
holds(5, in_tower((block,12),(block,6)), false, 0).
holds(5, in_tower((block,12),(block,7)), false, 0).
holds(5, in_tower((block,12),(block,8)), false, 0).
holds(5, in_tower((block,12),(block,9)), false, 0).
holds(5, in_tower((block,2),(block,1)), false, 0).
holds(5, in_tower((block,2),(block,10)), false, 0).
holds(5, in_tower((block,2),(block,11)), false, 0).
holds(5, in_tower((block,2),(block,12)), false, 0).
holds(5, in_tower((block,2),(block,2)), true, 0).
holds(5, in_tower((block,2),(block,3)), false, 0).
holds(5, in_tower((block,2),(block,4)), false, 0).
holds(5, in_tower((block,2),(block,5)), false, 0).
holds(5, in_tower((block,2),(block,6)), false, 0).
holds(5, in_tower((block,2),(block,7)), false, 0).
holds(5, in_tower((block,2),(block,8)), false, 0).
holds(5, in_tower((block,2),(block,9)), false, 0).
holds(5, in_tower((block,3),(block,1)), false, 0).
holds(5, in_tower((block,3),(block,10)), false, 0).
holds(5, in_tower((block,3),(block,11)), false, 0).
holds(5, in_tower((block,3),(block,12)), false, 0).
holds(5, in_tower((block,3),(block,2)), false, 0).
holds(5, in_tower((block,3),(block,3)), false, 0).
holds(5, in_tower((block,3),(block,4)), false, 0).
holds(5, in_tower((block,3),(block,5)), false, 0).
holds(5, in_tower((block,3),(block,6)), false, 0).
holds(5, in_tower((block,3),(block,7)), false, 0).
holds(5, in_tower((block,3),(block,8)), false, 0).
holds(5, in_tower((block,3),(block,9)), false, 0).
holds(5, in_tower((block,4),(block,1)), false, 0).
holds(5, in_tower((block,4),(block,10)), false, 0).
holds(5, in_tower((block,4),(block,11)), false, 0).
holds(5, in_tower((block,4),(block,12)), false, 0).
holds(5, in_tower((block,4),(block,2)), false, 0).
holds(5, in_tower((block,4),(block,3)), false, 0).
holds(5, in_tower((block,4),(block,4)), false, 0).
holds(5, in_tower((block,4),(block,5)), false, 0).
holds(5, in_tower((block,4),(block,6)), false, 0).
holds(5, in_tower((block,4),(block,7)), false, 0).
holds(5, in_tower((block,4),(block,8)), false, 0).
holds(5, in_tower((block,4),(block,9)), false, 0).
holds(5, in_tower((block,5),(block,1)), false, 0).
holds(5, in_tower((block,5),(block,10)), false, 0).
holds(5, in_tower((block,5),(block,11)), false, 0).
holds(5, in_tower((block,5),(block,12)), false, 0).
holds(5, in_tower((block,5),(block,2)), false, 0).
holds(5, in_tower((block,5),(block,3)), false, 0).
holds(5, in_tower((block,5),(block,4)), false, 0).
holds(5, in_tower((block,5),(block,5)), false, 0).
holds(5, in_tower((block,5),(block,6)), false, 0).
holds(5, in_tower((block,5),(block,7)), false, 0).
holds(5, in_tower((block,5),(block,8)), false, 0).
holds(5, in_tower((block,5),(block,9)), false, 0).
holds(5, in_tower((block,6),(block,1)), false, 0).
holds(5, in_tower((block,6),(block,10)), false, 0).
holds(5, in_tower((block,6),(block,11)), false, 0).
holds(5, in_tower((block,6),(block,12)), false, 0).
holds(5, in_tower((block,6),(block,2)), false, 0).
holds(5, in_tower((block,6),(block,3)), false, 0).
holds(5, in_tower((block,6),(block,4)), false, 0).
holds(5, in_tower((block,6),(block,5)), false, 0).
holds(5, in_tower((block,6),(block,6)), false, 0).
holds(5, in_tower((block,6),(block,7)), false, 0).
holds(5, in_tower((block,6),(block,8)), false, 0).
holds(5, in_tower((block,6),(block,9)), false, 0).
holds(5, in_tower((block,7),(block,1)), false, 0).
holds(5, in_tower((block,7),(block,10)), false, 0).
holds(5, in_tower((block,7),(block,11)), false, 0).
holds(5, in_tower((block,7),(block,12)), false, 0).
holds(5, in_tower((block,7),(block,2)), false, 0).
holds(5, in_tower((block,7),(block,3)), false, 0).
holds(5, in_tower((block,7),(block,4)), false, 0).
holds(5, in_tower((block,7),(block,5)), false, 0).
holds(5, in_tower((block,7),(block,6)), false, 0).
holds(5, in_tower((block,7),(block,7)), true, 0).
holds(5, in_tower((block,7),(block,8)), false, 0).
holds(5, in_tower((block,7),(block,9)), true, 0).
holds(5, in_tower((block,8),(block,1)), false, 0).
holds(5, in_tower((block,8),(block,10)), false, 0).
holds(5, in_tower((block,8),(block,11)), false, 0).
holds(5, in_tower((block,8),(block,12)), false, 0).
holds(5, in_tower((block,8),(block,2)), false, 0).
holds(5, in_tower((block,8),(block,3)), false, 0).
holds(5, in_tower((block,8),(block,4)), false, 0).
holds(5, in_tower((block,8),(block,5)), false, 0).
holds(5, in_tower((block,8),(block,6)), false, 0).
holds(5, in_tower((block,8),(block,7)), false, 0).
holds(5, in_tower((block,8),(block,8)), true, 0).
holds(5, in_tower((block,8),(block,9)), false, 0).
holds(5, in_tower((block,9),(block,1)), false, 0).
holds(5, in_tower((block,9),(block,10)), false, 0).
holds(5, in_tower((block,9),(block,11)), false, 0).
holds(5, in_tower((block,9),(block,12)), false, 0).
holds(5, in_tower((block,9),(block,2)), false, 0).
holds(5, in_tower((block,9),(block,3)), false, 0).
holds(5, in_tower((block,9),(block,4)), false, 0).
holds(5, in_tower((block,9),(block,5)), false, 0).
holds(5, in_tower((block,9),(block,6)), false, 0).
holds(5, in_tower((block,9),(block,7)), false, 0).
holds(5, in_tower((block,9),(block,8)), false, 0).
holds(5, in_tower((block,9),(block,9)), false, 0).
holds(5, on((block,1)), ((puzzle_room,1),table), 0).
holds(5, on((block,10)), nothing, 0).
holds(5, on((block,11)), nothing, 0).
holds(5, on((block,12)), nothing, 0).
holds(5, on((block,2)), ((puzzle_room,1),table), 0).
holds(5, on((block,3)), (block,1), 0).
holds(5, on((block,4)), nothing, 0).
holds(5, on((block,5)), nothing, 0).
holds(5, on((block,6)), nothing, 0).
holds(5, on((block,7)), ((puzzle_room,2),table), 0).
holds(5, on((block,8)), ((puzzle_room,2),table), 0).
holds(5, on((block,9)), (block,7), 0).
holds(5, tower_base((block,1),((puzzle_room,1),table)), true, 0).
holds(5, tower_base((block,1),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,10),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,10),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,11),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,11),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,12),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,12),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,2),((puzzle_room,1),table)), true, 0).
holds(5, tower_base((block,2),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,3),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,3),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,4),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,4),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,5),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,5),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,6),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,6),((puzzle_room,2),table)), false, 0).
holds(5, tower_base((block,7),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,7),((puzzle_room,2),table)), true, 0).
holds(5, tower_base((block,8),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,8),((puzzle_room,2),table)), true, 0).
holds(5, tower_base((block,9),((puzzle_room,1),table)), false, 0).
holds(5, tower_base((block,9),((puzzle_room,2),table)), false, 0).
holds(5, transporting(talos,(block,1)), false, 0).
holds(5, transporting(talos,(block,10)), false, 0).
holds(5, transporting(talos,(block,11)), false, 0).
holds(5, transporting(talos,(block,12)), false, 0).
holds(5, transporting(talos,(block,2)), false, 0).
holds(5, transporting(talos,(block,3)), false, 0).
holds(5, transporting(talos,(block,4)), false, 0).
holds(5, transporting(talos,(block,5)), false, 0).
holds(5, transporting(talos,(block,6)), false, 0).
holds(5, transporting(talos,(block,7)), false, 0).
holds(5, transporting(talos,(block,8)), false, 0).
holds(5, transporting(talos,(block,9)), false, 0).
holds(5, unordered_tower((block,1),((puzzle_room,1),table)), true, 0).
holds(5, unordered_tower((block,1),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,10),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,10),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,11),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,11),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,12),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,12),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,2),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,2),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,3),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,3),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,4),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,4),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,5),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,5),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,6),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,6),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,7),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,7),((puzzle_room,2),table)), true, 0).
holds(5, unordered_tower((block,8),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,8),((puzzle_room,2),table)), false, 0).
holds(5, unordered_tower((block,9),((puzzle_room,1),table)), false, 0).
holds(5, unordered_tower((block,9),((puzzle_room,2),table)), false, 0).

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 4, 'F': 'complete_puzzle(((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_puzzle(((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(blue,((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'complete_tower(red,((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '((puzzle_room,2),table)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '((puzzle_room,1),table)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '((puzzle_room,1),table)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '((puzzle_room,2),table)', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,1),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,10),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,11),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,12),((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,2),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,3),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,4),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,5),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,6),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,7),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,8),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'tower_base((block,9),((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,1),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,10),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,11),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,12),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,2),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,3),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,4),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,5),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,6),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,7),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,8),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 4, 'F': 'unordered_tower((block,9),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_puzzle(((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_puzzle(((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(blue,((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'complete_tower(red,((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,1),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,10),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,11),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,10))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,11))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,12))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,12),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,2),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,3),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,4),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,5),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,6),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,7),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,7))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,8))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,8),(block,9))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,10))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,11))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,12))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,7))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,8))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'in_tower((block,9),(block,9))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,11)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,10))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,12)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,11))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '((puzzle_room,2),table)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,12))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '((puzzle_room,1),table)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '((puzzle_room,1),table)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,8)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': '(block,9)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,7))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '((puzzle_room,2),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': '(block,9)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,8))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '((puzzle_room,1),table)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '((puzzle_room,2),table)', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,10)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,11)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,12)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,7)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': '(block,8)', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'on((block,9))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,1),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,10),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,11),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,12),((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,2),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,3),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,4),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,5),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),((puzzle_room,1),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),((puzzle_room,1),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,6),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,7),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,8),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),((puzzle_room,2),table))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'tower_base((block,9),((puzzle_room,2),table))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,1),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,10),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,11),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,12),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,2),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,3),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,4),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,5),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,6),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,7),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,8),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),((puzzle_room,1),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),((puzzle_room,1),table))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),((puzzle_room,2),table))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 5, 'F': 'unordered_tower((block,9),((puzzle_room,2),table))', 'V': 'true', 'T': 'false'})

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1124 rules into program part ash_goal_state:

final_goal(4, complete_puzzle(((puzzle_room,1),table)), true, true).
final_goal(4, complete_puzzle(((puzzle_room,2),table)), true, true).
final_goal(4, complete_tower(blue,((puzzle_room,1),table)), false, false).
final_goal(4, complete_tower(blue,((puzzle_room,1),table)), true, true).
final_goal(4, complete_tower(blue,((puzzle_room,2),table)), false, false).
final_goal(4, complete_tower(blue,((puzzle_room,2),table)), true, true).
final_goal(4, complete_tower(red,((puzzle_room,1),table)), false, false).
final_goal(4, complete_tower(red,((puzzle_room,1),table)), true, true).
final_goal(4, complete_tower(red,((puzzle_room,2),table)), false, false).
final_goal(4, complete_tower(red,((puzzle_room,2),table)), true, true).
final_goal(4, in_tower((block,1),(block,1)), false, true).
final_goal(4, in_tower((block,1),(block,1)), true, false).
final_goal(4, in_tower((block,1),(block,10)), false, true).
final_goal(4, in_tower((block,1),(block,10)), true, false).
final_goal(4, in_tower((block,1),(block,11)), false, true).
final_goal(4, in_tower((block,1),(block,11)), true, false).
final_goal(4, in_tower((block,1),(block,12)), false, true).
final_goal(4, in_tower((block,1),(block,12)), true, false).
final_goal(4, in_tower((block,1),(block,2)), false, true).
final_goal(4, in_tower((block,1),(block,2)), true, false).
final_goal(4, in_tower((block,1),(block,3)), false, true).
final_goal(4, in_tower((block,1),(block,3)), true, false).
final_goal(4, in_tower((block,1),(block,4)), false, true).
final_goal(4, in_tower((block,1),(block,4)), true, false).
final_goal(4, in_tower((block,1),(block,5)), false, true).
final_goal(4, in_tower((block,1),(block,5)), true, false).
final_goal(4, in_tower((block,1),(block,6)), false, true).
final_goal(4, in_tower((block,1),(block,6)), true, false).
final_goal(4, in_tower((block,1),(block,7)), false, true).
final_goal(4, in_tower((block,1),(block,7)), true, false).
final_goal(4, in_tower((block,1),(block,8)), false, true).
final_goal(4, in_tower((block,1),(block,8)), true, false).
final_goal(4, in_tower((block,1),(block,9)), false, true).
final_goal(4, in_tower((block,1),(block,9)), true, false).
final_goal(4, in_tower((block,10),(block,1)), false, true).
final_goal(4, in_tower((block,10),(block,1)), true, false).
final_goal(4, in_tower((block,10),(block,10)), false, true).
final_goal(4, in_tower((block,10),(block,10)), true, false).
final_goal(4, in_tower((block,10),(block,11)), false, true).
final_goal(4, in_tower((block,10),(block,11)), true, false).
final_goal(4, in_tower((block,10),(block,12)), false, true).
final_goal(4, in_tower((block,10),(block,12)), true, false).
final_goal(4, in_tower((block,10),(block,2)), false, true).
final_goal(4, in_tower((block,10),(block,2)), true, false).
final_goal(4, in_tower((block,10),(block,3)), false, true).
final_goal(4, in_tower((block,10),(block,3)), true, false).
final_goal(4, in_tower((block,10),(block,4)), false, true).
final_goal(4, in_tower((block,10),(block,4)), true, false).
final_goal(4, in_tower((block,10),(block,5)), false, true).
final_goal(4, in_tower((block,10),(block,5)), true, false).
final_goal(4, in_tower((block,10),(block,6)), false, true).
final_goal(4, in_tower((block,10),(block,6)), true, false).
final_goal(4, in_tower((block,10),(block,7)), false, true).
final_goal(4, in_tower((block,10),(block,7)), true, false).
final_goal(4, in_tower((block,10),(block,8)), false, true).
final_goal(4, in_tower((block,10),(block,8)), true, false).
final_goal(4, in_tower((block,10),(block,9)), false, true).
final_goal(4, in_tower((block,10),(block,9)), true, false).
final_goal(4, in_tower((block,11),(block,1)), false, true).
final_goal(4, in_tower((block,11),(block,1)), true, false).
final_goal(4, in_tower((block,11),(block,10)), false, true).
final_goal(4, in_tower((block,11),(block,10)), true, false).
final_goal(4, in_tower((block,11),(block,11)), false, true).
final_goal(4, in_tower((block,11),(block,11)), true, false).
final_goal(4, in_tower((block,11),(block,12)), false, true).
final_goal(4, in_tower((block,11),(block,12)), true, false).
final_goal(4, in_tower((block,11),(block,2)), false, true).
final_goal(4, in_tower((block,11),(block,2)), true, false).
final_goal(4, in_tower((block,11),(block,3)), false, true).
final_goal(4, in_tower((block,11),(block,3)), true, false).
final_goal(4, in_tower((block,11),(block,4)), false, true).
final_goal(4, in_tower((block,11),(block,4)), true, false).
final_goal(4, in_tower((block,11),(block,5)), false, true).
final_goal(4, in_tower((block,11),(block,5)), true, false).
final_goal(4, in_tower((block,11),(block,6)), false, true).
final_goal(4, in_tower((block,11),(block,6)), true, false).
final_goal(4, in_tower((block,11),(block,7)), false, true).
final_goal(4, in_tower((block,11),(block,7)), true, false).
final_goal(4, in_tower((block,11),(block,8)), false, true).
final_goal(4, in_tower((block,11),(block,8)), true, false).
final_goal(4, in_tower((block,11),(block,9)), false, true).
final_goal(4, in_tower((block,11),(block,9)), true, false).
final_goal(4, in_tower((block,12),(block,1)), false, true).
final_goal(4, in_tower((block,12),(block,1)), true, false).
final_goal(4, in_tower((block,12),(block,10)), false, false).
final_goal(4, in_tower((block,12),(block,10)), true, true).
final_goal(4, in_tower((block,12),(block,11)), false, false).
final_goal(4, in_tower((block,12),(block,11)), true, true).
final_goal(4, in_tower((block,12),(block,12)), false, false).
final_goal(4, in_tower((block,12),(block,12)), true, true).
final_goal(4, in_tower((block,12),(block,2)), false, true).
final_goal(4, in_tower((block,12),(block,2)), true, false).
final_goal(4, in_tower((block,12),(block,3)), false, true).
final_goal(4, in_tower((block,12),(block,3)), true, false).
final_goal(4, in_tower((block,12),(block,4)), false, true).
final_goal(4, in_tower((block,12),(block,4)), true, false).
final_goal(4, in_tower((block,12),(block,5)), false, true).
final_goal(4, in_tower((block,12),(block,5)), true, false).
final_goal(4, in_tower((block,12),(block,6)), false, true).
final_goal(4, in_tower((block,12),(block,6)), true, false).
final_goal(4, in_tower((block,12),(block,7)), false, true).
final_goal(4, in_tower((block,12),(block,7)), true, false).
final_goal(4, in_tower((block,12),(block,8)), false, true).
final_goal(4, in_tower((block,12),(block,8)), true, false).
final_goal(4, in_tower((block,12),(block,9)), false, true).
final_goal(4, in_tower((block,12),(block,9)), true, false).
final_goal(4, in_tower((block,2),(block,1)), false, true).
final_goal(4, in_tower((block,2),(block,1)), true, false).
final_goal(4, in_tower((block,2),(block,10)), false, true).
final_goal(4, in_tower((block,2),(block,10)), true, false).
final_goal(4, in_tower((block,2),(block,11)), false, true).
final_goal(4, in_tower((block,2),(block,11)), true, false).
final_goal(4, in_tower((block,2),(block,12)), false, true).
final_goal(4, in_tower((block,2),(block,12)), true, false).
final_goal(4, in_tower((block,2),(block,2)), false, true).
final_goal(4, in_tower((block,2),(block,2)), true, false).
final_goal(4, in_tower((block,2),(block,3)), false, true).
final_goal(4, in_tower((block,2),(block,3)), true, false).
final_goal(4, in_tower((block,2),(block,4)), false, true).
final_goal(4, in_tower((block,2),(block,4)), true, false).
final_goal(4, in_tower((block,2),(block,5)), false, true).
final_goal(4, in_tower((block,2),(block,5)), true, false).
final_goal(4, in_tower((block,2),(block,6)), false, true).
final_goal(4, in_tower((block,2),(block,6)), true, false).
final_goal(4, in_tower((block,2),(block,7)), false, true).
final_goal(4, in_tower((block,2),(block,7)), true, false).
final_goal(4, in_tower((block,2),(block,8)), false, true).
final_goal(4, in_tower((block,2),(block,8)), true, false).
final_goal(4, in_tower((block,2),(block,9)), false, true).
final_goal(4, in_tower((block,2),(block,9)), true, false).
final_goal(4, in_tower((block,3),(block,1)), false, false).
final_goal(4, in_tower((block,3),(block,1)), true, true).
final_goal(4, in_tower((block,3),(block,10)), false, true).
final_goal(4, in_tower((block,3),(block,10)), true, false).
final_goal(4, in_tower((block,3),(block,11)), false, true).
final_goal(4, in_tower((block,3),(block,11)), true, false).
final_goal(4, in_tower((block,3),(block,12)), false, true).
final_goal(4, in_tower((block,3),(block,12)), true, false).
final_goal(4, in_tower((block,3),(block,2)), false, false).
final_goal(4, in_tower((block,3),(block,2)), true, true).
final_goal(4, in_tower((block,3),(block,3)), false, false).
final_goal(4, in_tower((block,3),(block,3)), true, true).
final_goal(4, in_tower((block,3),(block,4)), false, true).
final_goal(4, in_tower((block,3),(block,4)), true, false).
final_goal(4, in_tower((block,3),(block,5)), false, true).
final_goal(4, in_tower((block,3),(block,5)), true, false).
final_goal(4, in_tower((block,3),(block,6)), false, true).
final_goal(4, in_tower((block,3),(block,6)), true, false).
final_goal(4, in_tower((block,3),(block,7)), false, true).
final_goal(4, in_tower((block,3),(block,7)), true, false).
final_goal(4, in_tower((block,3),(block,8)), false, true).
final_goal(4, in_tower((block,3),(block,8)), true, false).
final_goal(4, in_tower((block,3),(block,9)), false, true).
final_goal(4, in_tower((block,3),(block,9)), true, false).
final_goal(4, in_tower((block,4),(block,1)), false, true).
final_goal(4, in_tower((block,4),(block,1)), true, false).
final_goal(4, in_tower((block,4),(block,10)), false, true).
final_goal(4, in_tower((block,4),(block,10)), true, false).
final_goal(4, in_tower((block,4),(block,11)), false, true).
final_goal(4, in_tower((block,4),(block,11)), true, false).
final_goal(4, in_tower((block,4),(block,12)), false, true).
final_goal(4, in_tower((block,4),(block,12)), true, false).
final_goal(4, in_tower((block,4),(block,2)), false, true).
final_goal(4, in_tower((block,4),(block,2)), true, false).
final_goal(4, in_tower((block,4),(block,3)), false, true).
final_goal(4, in_tower((block,4),(block,3)), true, false).
final_goal(4, in_tower((block,4),(block,4)), false, true).
final_goal(4, in_tower((block,4),(block,4)), true, false).
final_goal(4, in_tower((block,4),(block,5)), false, true).
final_goal(4, in_tower((block,4),(block,5)), true, false).
final_goal(4, in_tower((block,4),(block,6)), false, true).
final_goal(4, in_tower((block,4),(block,6)), true, false).
final_goal(4, in_tower((block,4),(block,7)), false, true).
final_goal(4, in_tower((block,4),(block,7)), true, false).
final_goal(4, in_tower((block,4),(block,8)), false, true).
final_goal(4, in_tower((block,4),(block,8)), true, false).
final_goal(4, in_tower((block,4),(block,9)), false, true).
final_goal(4, in_tower((block,4),(block,9)), true, false).
final_goal(4, in_tower((block,5),(block,1)), false, true).
final_goal(4, in_tower((block,5),(block,1)), true, false).
final_goal(4, in_tower((block,5),(block,10)), false, true).
final_goal(4, in_tower((block,5),(block,10)), true, false).
final_goal(4, in_tower((block,5),(block,11)), false, true).
final_goal(4, in_tower((block,5),(block,11)), true, false).
final_goal(4, in_tower((block,5),(block,12)), false, true).
final_goal(4, in_tower((block,5),(block,12)), true, false).
final_goal(4, in_tower((block,5),(block,2)), false, true).
final_goal(4, in_tower((block,5),(block,2)), true, false).
final_goal(4, in_tower((block,5),(block,3)), false, true).
final_goal(4, in_tower((block,5),(block,3)), true, false).
final_goal(4, in_tower((block,5),(block,4)), false, true).
final_goal(4, in_tower((block,5),(block,4)), true, false).
final_goal(4, in_tower((block,5),(block,5)), false, true).
final_goal(4, in_tower((block,5),(block,5)), true, false).
final_goal(4, in_tower((block,5),(block,6)), false, true).
final_goal(4, in_tower((block,5),(block,6)), true, false).
final_goal(4, in_tower((block,5),(block,7)), false, true).
final_goal(4, in_tower((block,5),(block,7)), true, false).
final_goal(4, in_tower((block,5),(block,8)), false, true).
final_goal(4, in_tower((block,5),(block,8)), true, false).
final_goal(4, in_tower((block,5),(block,9)), false, true).
final_goal(4, in_tower((block,5),(block,9)), true, false).
final_goal(4, in_tower((block,6),(block,1)), false, true).
final_goal(4, in_tower((block,6),(block,1)), true, false).
final_goal(4, in_tower((block,6),(block,10)), false, true).
final_goal(4, in_tower((block,6),(block,10)), true, false).
final_goal(4, in_tower((block,6),(block,11)), false, true).
final_goal(4, in_tower((block,6),(block,11)), true, false).
final_goal(4, in_tower((block,6),(block,12)), false, true).
final_goal(4, in_tower((block,6),(block,12)), true, false).
final_goal(4, in_tower((block,6),(block,2)), false, true).
final_goal(4, in_tower((block,6),(block,2)), true, false).
final_goal(4, in_tower((block,6),(block,3)), false, true).
final_goal(4, in_tower((block,6),(block,3)), true, false).
final_goal(4, in_tower((block,6),(block,4)), false, false).
final_goal(4, in_tower((block,6),(block,4)), true, true).
final_goal(4, in_tower((block,6),(block,5)), false, false).
final_goal(4, in_tower((block,6),(block,5)), true, true).
final_goal(4, in_tower((block,6),(block,6)), false, false).
final_goal(4, in_tower((block,6),(block,6)), true, true).
final_goal(4, in_tower((block,6),(block,7)), false, true).
final_goal(4, in_tower((block,6),(block,7)), true, false).
final_goal(4, in_tower((block,6),(block,8)), false, true).
final_goal(4, in_tower((block,6),(block,8)), true, false).
final_goal(4, in_tower((block,6),(block,9)), false, true).
final_goal(4, in_tower((block,6),(block,9)), true, false).
final_goal(4, in_tower((block,7),(block,1)), false, true).
final_goal(4, in_tower((block,7),(block,1)), true, false).
final_goal(4, in_tower((block,7),(block,10)), false, true).
final_goal(4, in_tower((block,7),(block,10)), true, false).
final_goal(4, in_tower((block,7),(block,11)), false, true).
final_goal(4, in_tower((block,7),(block,11)), true, false).
final_goal(4, in_tower((block,7),(block,12)), false, true).
final_goal(4, in_tower((block,7),(block,12)), true, false).
final_goal(4, in_tower((block,7),(block,2)), false, true).
final_goal(4, in_tower((block,7),(block,2)), true, false).
final_goal(4, in_tower((block,7),(block,3)), false, true).
final_goal(4, in_tower((block,7),(block,3)), true, false).
final_goal(4, in_tower((block,7),(block,4)), false, true).
final_goal(4, in_tower((block,7),(block,4)), true, false).
final_goal(4, in_tower((block,7),(block,5)), false, true).
final_goal(4, in_tower((block,7),(block,5)), true, false).
final_goal(4, in_tower((block,7),(block,6)), false, true).
final_goal(4, in_tower((block,7),(block,6)), true, false).
final_goal(4, in_tower((block,7),(block,7)), false, true).
final_goal(4, in_tower((block,7),(block,7)), true, false).
final_goal(4, in_tower((block,7),(block,8)), false, true).
final_goal(4, in_tower((block,7),(block,8)), true, false).
final_goal(4, in_tower((block,7),(block,9)), false, true).
final_goal(4, in_tower((block,7),(block,9)), true, false).
final_goal(4, in_tower((block,8),(block,1)), false, true).
final_goal(4, in_tower((block,8),(block,1)), true, false).
final_goal(4, in_tower((block,8),(block,10)), false, true).
final_goal(4, in_tower((block,8),(block,10)), true, false).
final_goal(4, in_tower((block,8),(block,11)), false, true).
final_goal(4, in_tower((block,8),(block,11)), true, false).
final_goal(4, in_tower((block,8),(block,12)), false, true).
final_goal(4, in_tower((block,8),(block,12)), true, false).
final_goal(4, in_tower((block,8),(block,2)), false, true).
final_goal(4, in_tower((block,8),(block,2)), true, false).
final_goal(4, in_tower((block,8),(block,3)), false, true).
final_goal(4, in_tower((block,8),(block,3)), true, false).
final_goal(4, in_tower((block,8),(block,4)), false, true).
final_goal(4, in_tower((block,8),(block,4)), true, false).
final_goal(4, in_tower((block,8),(block,5)), false, true).
final_goal(4, in_tower((block,8),(block,5)), true, false).
final_goal(4, in_tower((block,8),(block,6)), false, true).
final_goal(4, in_tower((block,8),(block,6)), true, false).
final_goal(4, in_tower((block,8),(block,7)), false, true).
final_goal(4, in_tower((block,8),(block,7)), true, false).
final_goal(4, in_tower((block,8),(block,8)), false, true).
final_goal(4, in_tower((block,8),(block,8)), true, false).
final_goal(4, in_tower((block,8),(block,9)), false, true).
final_goal(4, in_tower((block,8),(block,9)), true, false).
final_goal(4, in_tower((block,9),(block,1)), false, true).
final_goal(4, in_tower((block,9),(block,1)), true, false).
final_goal(4, in_tower((block,9),(block,10)), false, true).
final_goal(4, in_tower((block,9),(block,10)), true, false).
final_goal(4, in_tower((block,9),(block,11)), false, true).
final_goal(4, in_tower((block,9),(block,11)), true, false).
final_goal(4, in_tower((block,9),(block,12)), false, true).
final_goal(4, in_tower((block,9),(block,12)), true, false).
final_goal(4, in_tower((block,9),(block,2)), false, true).
final_goal(4, in_tower((block,9),(block,2)), true, false).
final_goal(4, in_tower((block,9),(block,3)), false, true).
final_goal(4, in_tower((block,9),(block,3)), true, false).
final_goal(4, in_tower((block,9),(block,4)), false, true).
final_goal(4, in_tower((block,9),(block,4)), true, false).
final_goal(4, in_tower((block,9),(block,5)), false, true).
final_goal(4, in_tower((block,9),(block,5)), true, false).
final_goal(4, in_tower((block,9),(block,6)), false, true).
final_goal(4, in_tower((block,9),(block,6)), true, false).
final_goal(4, in_tower((block,9),(block,7)), false, false).
final_goal(4, in_tower((block,9),(block,7)), true, true).
final_goal(4, in_tower((block,9),(block,8)), false, false).
final_goal(4, in_tower((block,9),(block,8)), true, true).
final_goal(4, in_tower((block,9),(block,9)), false, false).
final_goal(4, in_tower((block,9),(block,9)), true, true).
final_goal(4, on((block,1)), ((puzzle_room,1),table), false).
final_goal(4, on((block,1)), ((puzzle_room,2),table), false).
final_goal(4, on((block,1)), (block,10), false).
final_goal(4, on((block,1)), (block,11), false).
final_goal(4, on((block,1)), (block,12), false).
final_goal(4, on((block,1)), (block,2), true).
final_goal(4, on((block,1)), (block,3), false).
final_goal(4, on((block,1)), (block,4), false).
final_goal(4, on((block,1)), (block,5), false).
final_goal(4, on((block,1)), (block,6), false).
final_goal(4, on((block,1)), (block,7), false).
final_goal(4, on((block,1)), (block,8), false).
final_goal(4, on((block,1)), (block,9), false).
final_goal(4, on((block,1)), nothing, false).
final_goal(4, on((block,10)), ((puzzle_room,1),table), false).
final_goal(4, on((block,10)), ((puzzle_room,2),table), false).
final_goal(4, on((block,10)), (block,1), false).
final_goal(4, on((block,10)), (block,11), true).
final_goal(4, on((block,10)), (block,12), false).
final_goal(4, on((block,10)), (block,2), false).
final_goal(4, on((block,10)), (block,3), false).
final_goal(4, on((block,10)), (block,4), false).
final_goal(4, on((block,10)), (block,5), false).
final_goal(4, on((block,10)), (block,6), false).
final_goal(4, on((block,10)), (block,7), false).
final_goal(4, on((block,10)), (block,8), false).
final_goal(4, on((block,10)), (block,9), false).
final_goal(4, on((block,10)), nothing, false).
final_goal(4, on((block,11)), ((puzzle_room,1),table), false).
final_goal(4, on((block,11)), ((puzzle_room,2),table), false).
final_goal(4, on((block,11)), (block,1), false).
final_goal(4, on((block,11)), (block,10), false).
final_goal(4, on((block,11)), (block,12), true).
final_goal(4, on((block,11)), (block,2), false).
final_goal(4, on((block,11)), (block,3), false).
final_goal(4, on((block,11)), (block,4), false).
final_goal(4, on((block,11)), (block,5), false).
final_goal(4, on((block,11)), (block,6), false).
final_goal(4, on((block,11)), (block,7), false).
final_goal(4, on((block,11)), (block,8), false).
final_goal(4, on((block,11)), (block,9), false).
final_goal(4, on((block,11)), nothing, false).
final_goal(4, on((block,12)), ((puzzle_room,1),table), false).
final_goal(4, on((block,12)), ((puzzle_room,2),table), true).
final_goal(4, on((block,12)), (block,1), false).
final_goal(4, on((block,12)), (block,10), false).
final_goal(4, on((block,12)), (block,11), false).
final_goal(4, on((block,12)), (block,2), false).
final_goal(4, on((block,12)), (block,3), false).
final_goal(4, on((block,12)), (block,4), false).
final_goal(4, on((block,12)), (block,5), false).
final_goal(4, on((block,12)), (block,6), false).
final_goal(4, on((block,12)), (block,7), false).
final_goal(4, on((block,12)), (block,8), false).
final_goal(4, on((block,12)), (block,9), false).
final_goal(4, on((block,12)), nothing, false).
final_goal(4, on((block,2)), ((puzzle_room,1),table), false).
final_goal(4, on((block,2)), ((puzzle_room,2),table), false).
final_goal(4, on((block,2)), (block,1), false).
final_goal(4, on((block,2)), (block,10), false).
final_goal(4, on((block,2)), (block,11), false).
final_goal(4, on((block,2)), (block,12), false).
final_goal(4, on((block,2)), (block,3), true).
final_goal(4, on((block,2)), (block,4), false).
final_goal(4, on((block,2)), (block,5), false).
final_goal(4, on((block,2)), (block,6), false).
final_goal(4, on((block,2)), (block,7), false).
final_goal(4, on((block,2)), (block,8), false).
final_goal(4, on((block,2)), (block,9), false).
final_goal(4, on((block,2)), nothing, false).
final_goal(4, on((block,3)), ((puzzle_room,1),table), true).
final_goal(4, on((block,3)), ((puzzle_room,2),table), false).
final_goal(4, on((block,3)), (block,1), false).
final_goal(4, on((block,3)), (block,10), false).
final_goal(4, on((block,3)), (block,11), false).
final_goal(4, on((block,3)), (block,12), false).
final_goal(4, on((block,3)), (block,2), false).
final_goal(4, on((block,3)), (block,4), false).
final_goal(4, on((block,3)), (block,5), false).
final_goal(4, on((block,3)), (block,6), false).
final_goal(4, on((block,3)), (block,7), false).
final_goal(4, on((block,3)), (block,8), false).
final_goal(4, on((block,3)), (block,9), false).
final_goal(4, on((block,3)), nothing, false).
final_goal(4, on((block,4)), ((puzzle_room,1),table), false).
final_goal(4, on((block,4)), ((puzzle_room,2),table), false).
final_goal(4, on((block,4)), (block,1), false).
final_goal(4, on((block,4)), (block,10), false).
final_goal(4, on((block,4)), (block,11), false).
final_goal(4, on((block,4)), (block,12), false).
final_goal(4, on((block,4)), (block,2), false).
final_goal(4, on((block,4)), (block,3), false).
final_goal(4, on((block,4)), (block,5), true).
final_goal(4, on((block,4)), (block,6), false).
final_goal(4, on((block,4)), (block,7), false).
final_goal(4, on((block,4)), (block,8), false).
final_goal(4, on((block,4)), (block,9), false).
final_goal(4, on((block,4)), nothing, false).
final_goal(4, on((block,5)), ((puzzle_room,1),table), false).
final_goal(4, on((block,5)), ((puzzle_room,2),table), false).
final_goal(4, on((block,5)), (block,1), false).
final_goal(4, on((block,5)), (block,10), false).
final_goal(4, on((block,5)), (block,11), false).
final_goal(4, on((block,5)), (block,12), false).
final_goal(4, on((block,5)), (block,2), false).
final_goal(4, on((block,5)), (block,3), false).
final_goal(4, on((block,5)), (block,4), false).
final_goal(4, on((block,5)), (block,6), true).
final_goal(4, on((block,5)), (block,7), false).
final_goal(4, on((block,5)), (block,8), false).
final_goal(4, on((block,5)), (block,9), false).
final_goal(4, on((block,5)), nothing, false).
final_goal(4, on((block,6)), ((puzzle_room,1),table), true).
final_goal(4, on((block,6)), ((puzzle_room,2),table), false).
final_goal(4, on((block,6)), (block,1), false).
final_goal(4, on((block,6)), (block,10), false).
final_goal(4, on((block,6)), (block,11), false).
final_goal(4, on((block,6)), (block,12), false).
final_goal(4, on((block,6)), (block,2), false).
final_goal(4, on((block,6)), (block,3), false).
final_goal(4, on((block,6)), (block,4), false).
final_goal(4, on((block,6)), (block,5), false).
final_goal(4, on((block,6)), (block,7), false).
final_goal(4, on((block,6)), (block,8), false).
final_goal(4, on((block,6)), (block,9), false).
final_goal(4, on((block,6)), nothing, false).
final_goal(4, on((block,7)), ((puzzle_room,1),table), false).
final_goal(4, on((block,7)), ((puzzle_room,2),table), false).
final_goal(4, on((block,7)), (block,1), false).
final_goal(4, on((block,7)), (block,10), false).
final_goal(4, on((block,7)), (block,11), false).
final_goal(4, on((block,7)), (block,12), false).
final_goal(4, on((block,7)), (block,2), false).
final_goal(4, on((block,7)), (block,3), false).
final_goal(4, on((block,7)), (block,4), false).
final_goal(4, on((block,7)), (block,5), false).
final_goal(4, on((block,7)), (block,6), false).
final_goal(4, on((block,7)), (block,8), true).
final_goal(4, on((block,7)), (block,9), false).
final_goal(4, on((block,7)), nothing, false).
final_goal(4, on((block,8)), ((puzzle_room,1),table), false).
final_goal(4, on((block,8)), ((puzzle_room,2),table), false).
final_goal(4, on((block,8)), (block,1), false).
final_goal(4, on((block,8)), (block,10), false).
final_goal(4, on((block,8)), (block,11), false).
final_goal(4, on((block,8)), (block,12), false).
final_goal(4, on((block,8)), (block,2), false).
final_goal(4, on((block,8)), (block,3), false).
final_goal(4, on((block,8)), (block,4), false).
final_goal(4, on((block,8)), (block,5), false).
final_goal(4, on((block,8)), (block,6), false).
final_goal(4, on((block,8)), (block,7), false).
final_goal(4, on((block,8)), (block,9), true).
final_goal(4, on((block,8)), nothing, false).
final_goal(4, on((block,9)), ((puzzle_room,1),table), false).
final_goal(4, on((block,9)), ((puzzle_room,2),table), true).
final_goal(4, on((block,9)), (block,1), false).
final_goal(4, on((block,9)), (block,10), false).
final_goal(4, on((block,9)), (block,11), false).
final_goal(4, on((block,9)), (block,12), false).
final_goal(4, on((block,9)), (block,2), false).
final_goal(4, on((block,9)), (block,3), false).
final_goal(4, on((block,9)), (block,4), false).
final_goal(4, on((block,9)), (block,5), false).
final_goal(4, on((block,9)), (block,6), false).
final_goal(4, on((block,9)), (block,7), false).
final_goal(4, on((block,9)), (block,8), false).
final_goal(4, on((block,9)), nothing, false).
final_goal(4, tower_base((block,1),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,1),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,1),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,1),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,10),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,10),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,10),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,10),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,11),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,11),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,11),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,11),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,12),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,12),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,12),((puzzle_room,2),table)), false, false).
final_goal(4, tower_base((block,12),((puzzle_room,2),table)), true, true).
final_goal(4, tower_base((block,2),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,2),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,2),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,2),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,3),((puzzle_room,1),table)), false, false).
final_goal(4, tower_base((block,3),((puzzle_room,1),table)), true, true).
final_goal(4, tower_base((block,3),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,3),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,4),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,4),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,4),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,4),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,5),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,5),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,5),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,5),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,6),((puzzle_room,1),table)), false, false).
final_goal(4, tower_base((block,6),((puzzle_room,1),table)), true, true).
final_goal(4, tower_base((block,6),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,6),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,7),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,7),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,7),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,7),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,8),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,8),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,8),((puzzle_room,2),table)), false, true).
final_goal(4, tower_base((block,8),((puzzle_room,2),table)), true, false).
final_goal(4, tower_base((block,9),((puzzle_room,1),table)), false, true).
final_goal(4, tower_base((block,9),((puzzle_room,1),table)), true, false).
final_goal(4, tower_base((block,9),((puzzle_room,2),table)), false, false).
final_goal(4, tower_base((block,9),((puzzle_room,2),table)), true, true).
final_goal(4, unordered_tower((block,1),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,1),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,1),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,1),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,10),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,10),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,10),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,10),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,11),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,11),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,11),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,11),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,12),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,12),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,12),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,12),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,2),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,2),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,2),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,2),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,3),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,3),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,3),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,3),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,4),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,4),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,4),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,4),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,5),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,5),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,5),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,5),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,6),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,6),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,6),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,6),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,7),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,7),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,7),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,7),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,8),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,8),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,8),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,8),((puzzle_room,2),table)), true, false).
final_goal(4, unordered_tower((block,9),((puzzle_room,1),table)), false, true).
final_goal(4, unordered_tower((block,9),((puzzle_room,1),table)), true, false).
final_goal(4, unordered_tower((block,9),((puzzle_room,2),table)), false, true).
final_goal(4, unordered_tower((block,9),((puzzle_room,2),table)), true, false).
final_goal(5, complete_puzzle(((puzzle_room,1),table)), true, true).
final_goal(5, complete_puzzle(((puzzle_room,2),table)), true, true).
final_goal(5, complete_tower(blue,((puzzle_room,1),table)), false, false).
final_goal(5, complete_tower(blue,((puzzle_room,1),table)), true, true).
final_goal(5, complete_tower(blue,((puzzle_room,2),table)), false, false).
final_goal(5, complete_tower(blue,((puzzle_room,2),table)), true, true).
final_goal(5, complete_tower(red,((puzzle_room,1),table)), false, false).
final_goal(5, complete_tower(red,((puzzle_room,1),table)), true, true).
final_goal(5, complete_tower(red,((puzzle_room,2),table)), false, false).
final_goal(5, complete_tower(red,((puzzle_room,2),table)), true, true).
final_goal(5, in_tower((block,1),(block,1)), false, true).
final_goal(5, in_tower((block,1),(block,1)), true, false).
final_goal(5, in_tower((block,1),(block,10)), false, true).
final_goal(5, in_tower((block,1),(block,10)), true, false).
final_goal(5, in_tower((block,1),(block,11)), false, true).
final_goal(5, in_tower((block,1),(block,11)), true, false).
final_goal(5, in_tower((block,1),(block,12)), false, true).
final_goal(5, in_tower((block,1),(block,12)), true, false).
final_goal(5, in_tower((block,1),(block,2)), false, true).
final_goal(5, in_tower((block,1),(block,2)), true, false).
final_goal(5, in_tower((block,1),(block,3)), false, true).
final_goal(5, in_tower((block,1),(block,3)), true, false).
final_goal(5, in_tower((block,1),(block,4)), false, true).
final_goal(5, in_tower((block,1),(block,4)), true, false).
final_goal(5, in_tower((block,1),(block,5)), false, true).
final_goal(5, in_tower((block,1),(block,5)), true, false).
final_goal(5, in_tower((block,1),(block,6)), false, true).
final_goal(5, in_tower((block,1),(block,6)), true, false).
final_goal(5, in_tower((block,1),(block,7)), false, true).
final_goal(5, in_tower((block,1),(block,7)), true, false).
final_goal(5, in_tower((block,1),(block,8)), false, true).
final_goal(5, in_tower((block,1),(block,8)), true, false).
final_goal(5, in_tower((block,1),(block,9)), false, true).
final_goal(5, in_tower((block,1),(block,9)), true, false).
final_goal(5, in_tower((block,10),(block,1)), false, true).
final_goal(5, in_tower((block,10),(block,1)), true, false).
final_goal(5, in_tower((block,10),(block,10)), false, true).
final_goal(5, in_tower((block,10),(block,10)), true, false).
final_goal(5, in_tower((block,10),(block,11)), false, true).
final_goal(5, in_tower((block,10),(block,11)), true, false).
final_goal(5, in_tower((block,10),(block,12)), false, true).
final_goal(5, in_tower((block,10),(block,12)), true, false).
final_goal(5, in_tower((block,10),(block,2)), false, true).
final_goal(5, in_tower((block,10),(block,2)), true, false).
final_goal(5, in_tower((block,10),(block,3)), false, true).
final_goal(5, in_tower((block,10),(block,3)), true, false).
final_goal(5, in_tower((block,10),(block,4)), false, true).
final_goal(5, in_tower((block,10),(block,4)), true, false).
final_goal(5, in_tower((block,10),(block,5)), false, true).
final_goal(5, in_tower((block,10),(block,5)), true, false).
final_goal(5, in_tower((block,10),(block,6)), false, true).
final_goal(5, in_tower((block,10),(block,6)), true, false).
final_goal(5, in_tower((block,10),(block,7)), false, true).
final_goal(5, in_tower((block,10),(block,7)), true, false).
final_goal(5, in_tower((block,10),(block,8)), false, true).
final_goal(5, in_tower((block,10),(block,8)), true, false).
final_goal(5, in_tower((block,10),(block,9)), false, true).
final_goal(5, in_tower((block,10),(block,9)), true, false).
final_goal(5, in_tower((block,11),(block,1)), false, true).
final_goal(5, in_tower((block,11),(block,1)), true, false).
final_goal(5, in_tower((block,11),(block,10)), false, true).
final_goal(5, in_tower((block,11),(block,10)), true, false).
final_goal(5, in_tower((block,11),(block,11)), false, true).
final_goal(5, in_tower((block,11),(block,11)), true, false).
final_goal(5, in_tower((block,11),(block,12)), false, true).
final_goal(5, in_tower((block,11),(block,12)), true, false).
final_goal(5, in_tower((block,11),(block,2)), false, true).
final_goal(5, in_tower((block,11),(block,2)), true, false).
final_goal(5, in_tower((block,11),(block,3)), false, true).
final_goal(5, in_tower((block,11),(block,3)), true, false).
final_goal(5, in_tower((block,11),(block,4)), false, true).
final_goal(5, in_tower((block,11),(block,4)), true, false).
final_goal(5, in_tower((block,11),(block,5)), false, true).
final_goal(5, in_tower((block,11),(block,5)), true, false).
final_goal(5, in_tower((block,11),(block,6)), false, true).
final_goal(5, in_tower((block,11),(block,6)), true, false).
final_goal(5, in_tower((block,11),(block,7)), false, true).
final_goal(5, in_tower((block,11),(block,7)), true, false).
final_goal(5, in_tower((block,11),(block,8)), false, true).
final_goal(5, in_tower((block,11),(block,8)), true, false).
final_goal(5, in_tower((block,11),(block,9)), false, true).
final_goal(5, in_tower((block,11),(block,9)), true, false).
final_goal(5, in_tower((block,12),(block,1)), false, true).
final_goal(5, in_tower((block,12),(block,1)), true, false).
final_goal(5, in_tower((block,12),(block,10)), false, false).
final_goal(5, in_tower((block,12),(block,10)), true, true).
final_goal(5, in_tower((block,12),(block,11)), false, false).
final_goal(5, in_tower((block,12),(block,11)), true, true).
final_goal(5, in_tower((block,12),(block,12)), false, false).
final_goal(5, in_tower((block,12),(block,12)), true, true).
final_goal(5, in_tower((block,12),(block,2)), false, true).
final_goal(5, in_tower((block,12),(block,2)), true, false).
final_goal(5, in_tower((block,12),(block,3)), false, true).
final_goal(5, in_tower((block,12),(block,3)), true, false).
final_goal(5, in_tower((block,12),(block,4)), false, true).
final_goal(5, in_tower((block,12),(block,4)), true, false).
final_goal(5, in_tower((block,12),(block,5)), false, true).
final_goal(5, in_tower((block,12),(block,5)), true, false).
final_goal(5, in_tower((block,12),(block,6)), false, true).
final_goal(5, in_tower((block,12),(block,6)), true, false).
final_goal(5, in_tower((block,12),(block,7)), false, true).
final_goal(5, in_tower((block,12),(block,7)), true, false).
final_goal(5, in_tower((block,12),(block,8)), false, true).
final_goal(5, in_tower((block,12),(block,8)), true, false).
final_goal(5, in_tower((block,12),(block,9)), false, true).
final_goal(5, in_tower((block,12),(block,9)), true, false).
final_goal(5, in_tower((block,2),(block,1)), false, true).
final_goal(5, in_tower((block,2),(block,1)), true, false).
final_goal(5, in_tower((block,2),(block,10)), false, true).
final_goal(5, in_tower((block,2),(block,10)), true, false).
final_goal(5, in_tower((block,2),(block,11)), false, true).
final_goal(5, in_tower((block,2),(block,11)), true, false).
final_goal(5, in_tower((block,2),(block,12)), false, true).
final_goal(5, in_tower((block,2),(block,12)), true, false).
final_goal(5, in_tower((block,2),(block,2)), false, true).
final_goal(5, in_tower((block,2),(block,2)), true, false).
final_goal(5, in_tower((block,2),(block,3)), false, true).
final_goal(5, in_tower((block,2),(block,3)), true, false).
final_goal(5, in_tower((block,2),(block,4)), false, true).
final_goal(5, in_tower((block,2),(block,4)), true, false).
final_goal(5, in_tower((block,2),(block,5)), false, true).
final_goal(5, in_tower((block,2),(block,5)), true, false).
final_goal(5, in_tower((block,2),(block,6)), false, true).
final_goal(5, in_tower((block,2),(block,6)), true, false).
final_goal(5, in_tower((block,2),(block,7)), false, true).
final_goal(5, in_tower((block,2),(block,7)), true, false).
final_goal(5, in_tower((block,2),(block,8)), false, true).
final_goal(5, in_tower((block,2),(block,8)), true, false).
final_goal(5, in_tower((block,2),(block,9)), false, true).
final_goal(5, in_tower((block,2),(block,9)), true, false).
final_goal(5, in_tower((block,3),(block,1)), false, false).
final_goal(5, in_tower((block,3),(block,1)), true, true).
final_goal(5, in_tower((block,3),(block,10)), false, true).
final_goal(5, in_tower((block,3),(block,10)), true, false).
final_goal(5, in_tower((block,3),(block,11)), false, true).
final_goal(5, in_tower((block,3),(block,11)), true, false).
final_goal(5, in_tower((block,3),(block,12)), false, true).
final_goal(5, in_tower((block,3),(block,12)), true, false).
final_goal(5, in_tower((block,3),(block,2)), false, false).
final_goal(5, in_tower((block,3),(block,2)), true, true).
final_goal(5, in_tower((block,3),(block,3)), false, false).
final_goal(5, in_tower((block,3),(block,3)), true, true).
final_goal(5, in_tower((block,3),(block,4)), false, true).
final_goal(5, in_tower((block,3),(block,4)), true, false).
final_goal(5, in_tower((block,3),(block,5)), false, true).
final_goal(5, in_tower((block,3),(block,5)), true, false).
final_goal(5, in_tower((block,3),(block,6)), false, true).
final_goal(5, in_tower((block,3),(block,6)), true, false).
final_goal(5, in_tower((block,3),(block,7)), false, true).
final_goal(5, in_tower((block,3),(block,7)), true, false).
final_goal(5, in_tower((block,3),(block,8)), false, true).
final_goal(5, in_tower((block,3),(block,8)), true, false).
final_goal(5, in_tower((block,3),(block,9)), false, true).
final_goal(5, in_tower((block,3),(block,9)), true, false).
final_goal(5, in_tower((block,4),(block,1)), false, true).
final_goal(5, in_tower((block,4),(block,1)), true, false).
final_goal(5, in_tower((block,4),(block,10)), false, true).
final_goal(5, in_tower((block,4),(block,10)), true, false).
final_goal(5, in_tower((block,4),(block,11)), false, true).
final_goal(5, in_tower((block,4),(block,11)), true, false).
final_goal(5, in_tower((block,4),(block,12)), false, true).
final_goal(5, in_tower((block,4),(block,12)), true, false).
final_goal(5, in_tower((block,4),(block,2)), false, true).
final_goal(5, in_tower((block,4),(block,2)), true, false).
final_goal(5, in_tower((block,4),(block,3)), false, true).
final_goal(5, in_tower((block,4),(block,3)), true, false).
final_goal(5, in_tower((block,4),(block,4)), false, true).
final_goal(5, in_tower((block,4),(block,4)), true, false).
final_goal(5, in_tower((block,4),(block,5)), false, true).
final_goal(5, in_tower((block,4),(block,5)), true, false).
final_goal(5, in_tower((block,4),(block,6)), false, true).
final_goal(5, in_tower((block,4),(block,6)), true, false).
final_goal(5, in_tower((block,4),(block,7)), false, true).
final_goal(5, in_tower((block,4),(block,7)), true, false).
final_goal(5, in_tower((block,4),(block,8)), false, true).
final_goal(5, in_tower((block,4),(block,8)), true, false).
final_goal(5, in_tower((block,4),(block,9)), false, true).
final_goal(5, in_tower((block,4),(block,9)), true, false).
final_goal(5, in_tower((block,5),(block,1)), false, true).
final_goal(5, in_tower((block,5),(block,1)), true, false).
final_goal(5, in_tower((block,5),(block,10)), false, true).
final_goal(5, in_tower((block,5),(block,10)), true, false).
final_goal(5, in_tower((block,5),(block,11)), false, true).
final_goal(5, in_tower((block,5),(block,11)), true, false).
final_goal(5, in_tower((block,5),(block,12)), false, true).
final_goal(5, in_tower((block,5),(block,12)), true, false).
final_goal(5, in_tower((block,5),(block,2)), false, true).
final_goal(5, in_tower((block,5),(block,2)), true, false).
final_goal(5, in_tower((block,5),(block,3)), false, true).
final_goal(5, in_tower((block,5),(block,3)), true, false).
final_goal(5, in_tower((block,5),(block,4)), false, true).
final_goal(5, in_tower((block,5),(block,4)), true, false).
final_goal(5, in_tower((block,5),(block,5)), false, true).
final_goal(5, in_tower((block,5),(block,5)), true, false).
final_goal(5, in_tower((block,5),(block,6)), false, true).
final_goal(5, in_tower((block,5),(block,6)), true, false).
final_goal(5, in_tower((block,5),(block,7)), false, true).
final_goal(5, in_tower((block,5),(block,7)), true, false).
final_goal(5, in_tower((block,5),(block,8)), false, true).
final_goal(5, in_tower((block,5),(block,8)), true, false).
final_goal(5, in_tower((block,5),(block,9)), false, true).
final_goal(5, in_tower((block,5),(block,9)), true, false).
final_goal(5, in_tower((block,6),(block,1)), false, true).
final_goal(5, in_tower((block,6),(block,1)), true, false).
final_goal(5, in_tower((block,6),(block,10)), false, true).
final_goal(5, in_tower((block,6),(block,10)), true, false).
final_goal(5, in_tower((block,6),(block,11)), false, true).
final_goal(5, in_tower((block,6),(block,11)), true, false).
final_goal(5, in_tower((block,6),(block,12)), false, true).
final_goal(5, in_tower((block,6),(block,12)), true, false).
final_goal(5, in_tower((block,6),(block,2)), false, true).
final_goal(5, in_tower((block,6),(block,2)), true, false).
final_goal(5, in_tower((block,6),(block,3)), false, true).
final_goal(5, in_tower((block,6),(block,3)), true, false).
final_goal(5, in_tower((block,6),(block,4)), false, false).
final_goal(5, in_tower((block,6),(block,4)), true, true).
final_goal(5, in_tower((block,6),(block,5)), false, false).
final_goal(5, in_tower((block,6),(block,5)), true, true).
final_goal(5, in_tower((block,6),(block,6)), false, false).
final_goal(5, in_tower((block,6),(block,6)), true, true).
final_goal(5, in_tower((block,6),(block,7)), false, true).
final_goal(5, in_tower((block,6),(block,7)), true, false).
final_goal(5, in_tower((block,6),(block,8)), false, true).
final_goal(5, in_tower((block,6),(block,8)), true, false).
final_goal(5, in_tower((block,6),(block,9)), false, true).
final_goal(5, in_tower((block,6),(block,9)), true, false).
final_goal(5, in_tower((block,7),(block,1)), false, true).
final_goal(5, in_tower((block,7),(block,1)), true, false).
final_goal(5, in_tower((block,7),(block,10)), false, true).
final_goal(5, in_tower((block,7),(block,10)), true, false).
final_goal(5, in_tower((block,7),(block,11)), false, true).
final_goal(5, in_tower((block,7),(block,11)), true, false).
final_goal(5, in_tower((block,7),(block,12)), false, true).
final_goal(5, in_tower((block,7),(block,12)), true, false).
final_goal(5, in_tower((block,7),(block,2)), false, true).
final_goal(5, in_tower((block,7),(block,2)), true, false).
final_goal(5, in_tower((block,7),(block,3)), false, true).
final_goal(5, in_tower((block,7),(block,3)), true, false).
final_goal(5, in_tower((block,7),(block,4)), false, true).
final_goal(5, in_tower((block,7),(block,4)), true, false).
final_goal(5, in_tower((block,7),(block,5)), false, true).
final_goal(5, in_tower((block,7),(block,5)), true, false).
final_goal(5, in_tower((block,7),(block,6)), false, true).
final_goal(5, in_tower((block,7),(block,6)), true, false).
final_goal(5, in_tower((block,7),(block,7)), false, true).
final_goal(5, in_tower((block,7),(block,7)), true, false).
final_goal(5, in_tower((block,7),(block,8)), false, true).
final_goal(5, in_tower((block,7),(block,8)), true, false).
final_goal(5, in_tower((block,7),(block,9)), false, true).
final_goal(5, in_tower((block,7),(block,9)), true, false).
final_goal(5, in_tower((block,8),(block,1)), false, true).
final_goal(5, in_tower((block,8),(block,1)), true, false).
final_goal(5, in_tower((block,8),(block,10)), false, true).
final_goal(5, in_tower((block,8),(block,10)), true, false).
final_goal(5, in_tower((block,8),(block,11)), false, true).
final_goal(5, in_tower((block,8),(block,11)), true, false).
final_goal(5, in_tower((block,8),(block,12)), false, true).
final_goal(5, in_tower((block,8),(block,12)), true, false).
final_goal(5, in_tower((block,8),(block,2)), false, true).
final_goal(5, in_tower((block,8),(block,2)), true, false).
final_goal(5, in_tower((block,8),(block,3)), false, true).
final_goal(5, in_tower((block,8),(block,3)), true, false).
final_goal(5, in_tower((block,8),(block,4)), false, true).
final_goal(5, in_tower((block,8),(block,4)), true, false).
final_goal(5, in_tower((block,8),(block,5)), false, true).
final_goal(5, in_tower((block,8),(block,5)), true, false).
final_goal(5, in_tower((block,8),(block,6)), false, true).
final_goal(5, in_tower((block,8),(block,6)), true, false).
final_goal(5, in_tower((block,8),(block,7)), false, true).
final_goal(5, in_tower((block,8),(block,7)), true, false).
final_goal(5, in_tower((block,8),(block,8)), false, true).
final_goal(5, in_tower((block,8),(block,8)), true, false).
final_goal(5, in_tower((block,8),(block,9)), false, true).
final_goal(5, in_tower((block,8),(block,9)), true, false).
final_goal(5, in_tower((block,9),(block,1)), false, true).
final_goal(5, in_tower((block,9),(block,1)), true, false).
final_goal(5, in_tower((block,9),(block,10)), false, true).
final_goal(5, in_tower((block,9),(block,10)), true, false).
final_goal(5, in_tower((block,9),(block,11)), false, true).
final_goal(5, in_tower((block,9),(block,11)), true, false).
final_goal(5, in_tower((block,9),(block,12)), false, true).
final_goal(5, in_tower((block,9),(block,12)), true, false).
final_goal(5, in_tower((block,9),(block,2)), false, true).
final_goal(5, in_tower((block,9),(block,2)), true, false).
final_goal(5, in_tower((block,9),(block,3)), false, true).
final_goal(5, in_tower((block,9),(block,3)), true, false).
final_goal(5, in_tower((block,9),(block,4)), false, true).
final_goal(5, in_tower((block,9),(block,4)), true, false).
final_goal(5, in_tower((block,9),(block,5)), false, true).
final_goal(5, in_tower((block,9),(block,5)), true, false).
final_goal(5, in_tower((block,9),(block,6)), false, true).
final_goal(5, in_tower((block,9),(block,6)), true, false).
final_goal(5, in_tower((block,9),(block,7)), false, false).
final_goal(5, in_tower((block,9),(block,7)), true, true).
final_goal(5, in_tower((block,9),(block,8)), false, false).
final_goal(5, in_tower((block,9),(block,8)), true, true).
final_goal(5, in_tower((block,9),(block,9)), false, false).
final_goal(5, in_tower((block,9),(block,9)), true, true).
final_goal(5, on((block,1)), ((puzzle_room,1),table), false).
final_goal(5, on((block,1)), ((puzzle_room,2),table), false).
final_goal(5, on((block,1)), (block,10), false).
final_goal(5, on((block,1)), (block,11), false).
final_goal(5, on((block,1)), (block,12), false).
final_goal(5, on((block,1)), (block,2), true).
final_goal(5, on((block,1)), (block,3), false).
final_goal(5, on((block,1)), (block,4), false).
final_goal(5, on((block,1)), (block,5), false).
final_goal(5, on((block,1)), (block,6), false).
final_goal(5, on((block,1)), (block,7), false).
final_goal(5, on((block,1)), (block,8), false).
final_goal(5, on((block,1)), (block,9), false).
final_goal(5, on((block,1)), nothing, false).
final_goal(5, on((block,10)), ((puzzle_room,1),table), false).
final_goal(5, on((block,10)), ((puzzle_room,2),table), false).
final_goal(5, on((block,10)), (block,1), false).
final_goal(5, on((block,10)), (block,11), true).
final_goal(5, on((block,10)), (block,12), false).
final_goal(5, on((block,10)), (block,2), false).
final_goal(5, on((block,10)), (block,3), false).
final_goal(5, on((block,10)), (block,4), false).
final_goal(5, on((block,10)), (block,5), false).
final_goal(5, on((block,10)), (block,6), false).
final_goal(5, on((block,10)), (block,7), false).
final_goal(5, on((block,10)), (block,8), false).
final_goal(5, on((block,10)), (block,9), false).
final_goal(5, on((block,10)), nothing, false).
final_goal(5, on((block,11)), ((puzzle_room,1),table), false).
final_goal(5, on((block,11)), ((puzzle_room,2),table), false).
final_goal(5, on((block,11)), (block,1), false).
final_goal(5, on((block,11)), (block,10), false).
final_goal(5, on((block,11)), (block,12), true).
final_goal(5, on((block,11)), (block,2), false).
final_goal(5, on((block,11)), (block,3), false).
final_goal(5, on((block,11)), (block,4), false).
final_goal(5, on((block,11)), (block,5), false).
final_goal(5, on((block,11)), (block,6), false).
final_goal(5, on((block,11)), (block,7), false).
final_goal(5, on((block,11)), (block,8), false).
final_goal(5, on((block,11)), (block,9), false).
final_goal(5, on((block,11)), nothing, false).
final_goal(5, on((block,12)), ((puzzle_room,1),table), false).
final_goal(5, on((block,12)), ((puzzle_room,2),table), true).
final_goal(5, on((block,12)), (block,1), false).
final_goal(5, on((block,12)), (block,10), false).
final_goal(5, on((block,12)), (block,11), false).
final_goal(5, on((block,12)), (block,2), false).
final_goal(5, on((block,12)), (block,3), false).
final_goal(5, on((block,12)), (block,4), false).
final_goal(5, on((block,12)), (block,5), false).
final_goal(5, on((block,12)), (block,6), false).
final_goal(5, on((block,12)), (block,7), false).
final_goal(5, on((block,12)), (block,8), false).
final_goal(5, on((block,12)), (block,9), false).
final_goal(5, on((block,12)), nothing, false).
final_goal(5, on((block,2)), ((puzzle_room,1),table), false).
final_goal(5, on((block,2)), ((puzzle_room,2),table), false).
final_goal(5, on((block,2)), (block,1), false).
final_goal(5, on((block,2)), (block,10), false).
final_goal(5, on((block,2)), (block,11), false).
final_goal(5, on((block,2)), (block,12), false).
final_goal(5, on((block,2)), (block,3), true).
final_goal(5, on((block,2)), (block,4), false).
final_goal(5, on((block,2)), (block,5), false).
final_goal(5, on((block,2)), (block,6), false).
final_goal(5, on((block,2)), (block,7), false).
final_goal(5, on((block,2)), (block,8), false).
final_goal(5, on((block,2)), (block,9), false).
final_goal(5, on((block,2)), nothing, false).
final_goal(5, on((block,3)), ((puzzle_room,1),table), true).
final_goal(5, on((block,3)), ((puzzle_room,2),table), false).
final_goal(5, on((block,3)), (block,1), false).
final_goal(5, on((block,3)), (block,10), false).
final_goal(5, on((block,3)), (block,11), false).
final_goal(5, on((block,3)), (block,12), false).
final_goal(5, on((block,3)), (block,2), false).
final_goal(5, on((block,3)), (block,4), false).
final_goal(5, on((block,3)), (block,5), false).
final_goal(5, on((block,3)), (block,6), false).
final_goal(5, on((block,3)), (block,7), false).
final_goal(5, on((block,3)), (block,8), false).
final_goal(5, on((block,3)), (block,9), false).
final_goal(5, on((block,3)), nothing, false).
final_goal(5, on((block,4)), ((puzzle_room,1),table), false).
final_goal(5, on((block,4)), ((puzzle_room,2),table), false).
final_goal(5, on((block,4)), (block,1), false).
final_goal(5, on((block,4)), (block,10), false).
final_goal(5, on((block,4)), (block,11), false).
final_goal(5, on((block,4)), (block,12), false).
final_goal(5, on((block,4)), (block,2), false).
final_goal(5, on((block,4)), (block,3), false).
final_goal(5, on((block,4)), (block,5), true).
final_goal(5, on((block,4)), (block,6), false).
final_goal(5, on((block,4)), (block,7), false).
final_goal(5, on((block,4)), (block,8), false).
final_goal(5, on((block,4)), (block,9), false).
final_goal(5, on((block,4)), nothing, false).
final_goal(5, on((block,5)), ((puzzle_room,1),table), false).
final_goal(5, on((block,5)), ((puzzle_room,2),table), false).
final_goal(5, on((block,5)), (block,1), false).
final_goal(5, on((block,5)), (block,10), false).
final_goal(5, on((block,5)), (block,11), false).
final_goal(5, on((block,5)), (block,12), false).
final_goal(5, on((block,5)), (block,2), false).
final_goal(5, on((block,5)), (block,3), false).
final_goal(5, on((block,5)), (block,4), false).
final_goal(5, on((block,5)), (block,6), true).
final_goal(5, on((block,5)), (block,7), false).
final_goal(5, on((block,5)), (block,8), false).
final_goal(5, on((block,5)), (block,9), false).
final_goal(5, on((block,5)), nothing, false).
final_goal(5, on((block,6)), ((puzzle_room,1),table), true).
final_goal(5, on((block,6)), ((puzzle_room,2),table), false).
final_goal(5, on((block,6)), (block,1), false).
final_goal(5, on((block,6)), (block,10), false).
final_goal(5, on((block,6)), (block,11), false).
final_goal(5, on((block,6)), (block,12), false).
final_goal(5, on((block,6)), (block,2), false).
final_goal(5, on((block,6)), (block,3), false).
final_goal(5, on((block,6)), (block,4), false).
final_goal(5, on((block,6)), (block,5), false).
final_goal(5, on((block,6)), (block,7), false).
final_goal(5, on((block,6)), (block,8), false).
final_goal(5, on((block,6)), (block,9), false).
final_goal(5, on((block,6)), nothing, false).
final_goal(5, on((block,7)), ((puzzle_room,1),table), false).
final_goal(5, on((block,7)), ((puzzle_room,2),table), false).
final_goal(5, on((block,7)), (block,1), false).
final_goal(5, on((block,7)), (block,10), false).
final_goal(5, on((block,7)), (block,11), false).
final_goal(5, on((block,7)), (block,12), false).
final_goal(5, on((block,7)), (block,2), false).
final_goal(5, on((block,7)), (block,3), false).
final_goal(5, on((block,7)), (block,4), false).
final_goal(5, on((block,7)), (block,5), false).
final_goal(5, on((block,7)), (block,6), false).
final_goal(5, on((block,7)), (block,8), true).
final_goal(5, on((block,7)), (block,9), false).
final_goal(5, on((block,7)), nothing, false).
final_goal(5, on((block,8)), ((puzzle_room,1),table), false).
final_goal(5, on((block,8)), ((puzzle_room,2),table), false).
final_goal(5, on((block,8)), (block,1), false).
final_goal(5, on((block,8)), (block,10), false).
final_goal(5, on((block,8)), (block,11), false).
final_goal(5, on((block,8)), (block,12), false).
final_goal(5, on((block,8)), (block,2), false).
final_goal(5, on((block,8)), (block,3), false).
final_goal(5, on((block,8)), (block,4), false).
final_goal(5, on((block,8)), (block,5), false).
final_goal(5, on((block,8)), (block,6), false).
final_goal(5, on((block,8)), (block,7), false).
final_goal(5, on((block,8)), (block,9), true).
final_goal(5, on((block,8)), nothing, false).
final_goal(5, on((block,9)), ((puzzle_room,1),table), false).
final_goal(5, on((block,9)), ((puzzle_room,2),table), true).
final_goal(5, on((block,9)), (block,1), false).
final_goal(5, on((block,9)), (block,10), false).
final_goal(5, on((block,9)), (block,11), false).
final_goal(5, on((block,9)), (block,12), false).
final_goal(5, on((block,9)), (block,2), false).
final_goal(5, on((block,9)), (block,3), false).
final_goal(5, on((block,9)), (block,4), false).
final_goal(5, on((block,9)), (block,5), false).
final_goal(5, on((block,9)), (block,6), false).
final_goal(5, on((block,9)), (block,7), false).
final_goal(5, on((block,9)), (block,8), false).
final_goal(5, on((block,9)), nothing, false).
final_goal(5, tower_base((block,1),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,1),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,1),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,1),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,10),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,10),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,10),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,10),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,11),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,11),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,11),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,11),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,12),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,12),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,12),((puzzle_room,2),table)), false, false).
final_goal(5, tower_base((block,12),((puzzle_room,2),table)), true, true).
final_goal(5, tower_base((block,2),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,2),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,2),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,2),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,3),((puzzle_room,1),table)), false, false).
final_goal(5, tower_base((block,3),((puzzle_room,1),table)), true, true).
final_goal(5, tower_base((block,3),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,3),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,4),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,4),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,4),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,4),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,5),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,5),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,5),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,5),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,6),((puzzle_room,1),table)), false, false).
final_goal(5, tower_base((block,6),((puzzle_room,1),table)), true, true).
final_goal(5, tower_base((block,6),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,6),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,7),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,7),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,7),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,7),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,8),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,8),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,8),((puzzle_room,2),table)), false, true).
final_goal(5, tower_base((block,8),((puzzle_room,2),table)), true, false).
final_goal(5, tower_base((block,9),((puzzle_room,1),table)), false, true).
final_goal(5, tower_base((block,9),((puzzle_room,1),table)), true, false).
final_goal(5, tower_base((block,9),((puzzle_room,2),table)), false, false).
final_goal(5, tower_base((block,9),((puzzle_room,2),table)), true, true).
final_goal(5, unordered_tower((block,1),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,1),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,1),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,1),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,10),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,10),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,10),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,10),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,11),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,11),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,11),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,11),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,12),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,12),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,12),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,12),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,2),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,2),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,2),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,2),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,3),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,3),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,3),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,3),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,4),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,4),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,4),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,4),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,5),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,5),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,5),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,5),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,6),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,6),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,6),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,6),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,7),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,7),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,7),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,7),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,8),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,8),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,8),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,8),((puzzle_room,2),table)), true, false).
final_goal(5, unordered_tower((block,9),((puzzle_room,1),table)), false, true).
final_goal(5, unordered_tower((block,9),((puzzle_room,1),table)), true, false).
final_goal(5, unordered_tower((block,9),((puzzle_room,2),table)), false, true).
final_goal(5, unordered_tower((block,9),((puzzle_room,2),table)), true, false).

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']

[18-01-2022_21-52-51] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000022B5750C1F0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=1, step_end_max=None, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 1993 rules

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.010219300000000153s

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(4, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(4), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.078456s.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.034162s with result Satisfiable.

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000022B585DBA40>

[18-01-2022_21-52-51] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_problem_multi_puzzle_general.lp', '.\\problems\\blocks_world_plus\\multi_puzzle\\BWP_system_laws_tasking_complete.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 4)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', None)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000022B585DBA40>)

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, true). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.179889s.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019573s with result Unsatisfiable.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19946170000000096, Incremental time limit = None
Running cumulative time = 0.19946170000000096, Cumulative time limit = 3600
Used memory = (RSS = 139.417969Mb, VMS = 128.003906Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123196s.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011421s with result Unsatisfiable.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1346173999999989, Incremental time limit = None
Running cumulative time = 0.33407909999999985, Cumulative time limit = 3600
Used memory = (RSS = 141.855469Mb, VMS = 130.964844Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141160s.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022458s with result Unsatisfiable.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16361829999999955, Incremental time limit = None
Running cumulative time = 0.4976973999999994, Cumulative time limit = 3600
Used memory = (RSS = 151.351562Mb, VMS = 139.214844Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.151335s.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026108s with result Unsatisfiable.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17744300000000024, Incremental time limit = None
Running cumulative time = 0.6751403999999996, Cumulative time limit = 3600
Used memory = (RSS = 162.890625Mb, VMS = 150.765625Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.160298s.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036199s with result Unsatisfiable.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19649740000000016, Incremental time limit = None
Running cumulative time = 0.8716377999999998, Cumulative time limit = 3600
Used memory = (RSS = 176.515625Mb, VMS = 165.246094Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164701s.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032121s with result Unsatisfiable.

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19682120000000047, Incremental time limit = None
Running cumulative time = 1.0684590000000003, Cumulative time limit = 3600
Used memory = (RSS = 189.851562Mb, VMS = 180.550781Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.187496s.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043247s with result Unsatisfiable.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2307435, Incremental time limit = None
Running cumulative time = 1.2992025000000003, Cumulative time limit = 3600
Used memory = (RSS = 200.574219Mb, VMS = 189.703125Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.179266s.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051522s with result Unsatisfiable.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.23078780000000076, Incremental time limit = None
Running cumulative time = 1.529990300000001, Cumulative time limit = 3600
Used memory = (RSS = 214.195312Mb, VMS = 209.320312Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.173969s.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054168s with result Unsatisfiable.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22813700000000026, Incremental time limit = None
Running cumulative time = 1.7581273000000013, Cumulative time limit = 3600
Used memory = (RSS = 224.937500Mb, VMS = 217.792969Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.193890s.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.083089s with result Unsatisfiable.

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2769793000000007, Incremental time limit = None
Running cumulative time = 2.035106600000002, Cumulative time limit = 3600
Used memory = (RSS = 233.777344Mb, VMS = 225.433594Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.196744s.

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103235s with result Unsatisfiable.

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.29997899999999955, Incremental time limit = None
Running cumulative time = 2.3350856000000015, Cumulative time limit = 3600
Used memory = (RSS = 249.078125Mb, VMS = 248.703125Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.191967s.

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.178194s with result Unsatisfiable.

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3701611000000007, Incremental time limit = None
Running cumulative time = 2.7052467000000022, Cumulative time limit = 3600
Used memory = (RSS = 259.175781Mb, VMS = 256.453125Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218472s.

[18-01-2022_21-52-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.285609s with result Unsatisfiable.

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5040811000000005, Incremental time limit = None
Running cumulative time = 3.2093278000000027, Cumulative time limit = 3600
Used memory = (RSS = 266.253906Mb, VMS = 261.632812Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199362s.

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.585903s with result Unsatisfiable.

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7852645999999996, Incremental time limit = None
Running cumulative time = 3.9945924000000024, Cumulative time limit = 3600
Used memory = (RSS = 277.339844Mb, VMS = 269.941406Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)])]

[18-01-2022_21-52-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.213688s.

[18-01-2022_21-52-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.921138s with result Unsatisfiable.

[18-01-2022_21-52-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.134826200000001, Incremental time limit = None
Running cumulative time = 5.129418600000003, Cumulative time limit = 3600
Used memory = (RSS = 294.363281Mb, VMS = 303.300781Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[18-01-2022_21-52-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.216417s.

[18-01-2022_21-52-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-52-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.814184s with result Unsatisfiable.

[18-01-2022_21-52-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.0306013000000007, Incremental time limit = None
Running cumulative time = 7.1600199000000035, Cumulative time limit = 3600
Used memory = (RSS = 307.484375Mb, VMS = 313.925781Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-52-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-52-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[18-01-2022_21-52-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.235476s.

[18-01-2022_21-52-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-53-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 3.196425s with result Unsatisfiable.

[18-01-2022_21-53-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.4319014999999986, Incremental time limit = None
Running cumulative time = 10.591921400000002, Cumulative time limit = 3600
Used memory = (RSS = 322.976562Mb, VMS = 327.441406Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-53-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-53-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)])]

[18-01-2022_21-53-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.224912s.

[18-01-2022_21-53-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 8.400597s with result Unsatisfiable.

[18-01-2022_21-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 8.625508599999998, Incremental time limit = None
Running cumulative time = 19.21743, Cumulative time limit = 3600
Used memory = (RSS = 340.746094Mb, VMS = 342.675781Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)])]

[18-01-2022_21-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245474s.

[18-01-2022_21-53-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 22.172235s with result Unsatisfiable.

[18-01-2022_21-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 22.417709000000002, Incremental time limit = None
Running cumulative time = 41.635139, Cumulative time limit = 3600
Used memory = (RSS = 360.328125Mb, VMS = 360.445312Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-53-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)])]

[18-01-2022_21-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267647s.

[18-01-2022_21-53-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[18-01-2022_21-54-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 55.579053s with result Unsatisfiable.

[18-01-2022_21-54-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 55.84670010000001, Incremental time limit = None
Running cumulative time = 97.48183910000002, Cumulative time limit = 3600
Used memory = (RSS = 381.925781Mb, VMS = 379.796875Mb), Total system virtual memory = 16324.18359375Mb

[18-01-2022_21-54-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =      1 : Maximum =   None

[18-01-2022_21-54-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)])]

[18-01-2022_21-54-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.254275s.

[18-01-2022_21-54-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

