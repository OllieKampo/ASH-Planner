[13-11-2021_23-39-11] DEBUG :: __main__ >> 
  ####################################################################################################################  
                                                                                                                        
                                                ░█████╗░░██████╗██╗░░██╗                                                
                                                ██╔══██╗██╔════╝██║░░██║                                                
                                                ███████║╚█████╗░███████║                                                
                                                ██╔══██║░╚═══██╗██╔══██║                                                
                                                ██║░░██║██████╔╝██║░░██║                                                
                                                ╚═╝░░╚═╝╚═════╝░╚═╝░░╚═╝                                                
                                                                                                                        
                        =======================================================================                         
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                        =======================================================================                         
                                                                                                                        
          This program comes with ABSOLUTELY NO WARRANTY; for details use `--warranty'. This is free software,          
            and you are welcome to redistribute it under certain conditions; use `--conditions' for details.            
                    For help and usage instructions use `--help' and `--instructions' respectively.                     
                                                                                                                        
  ####################################################################################################################  

[13-11-2021_23-39-11] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY                            
                         APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT                         
                       HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY                        
                        OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,                        
                         THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR                         
                       PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM                       
                        IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF                        
                                     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.                                     
                                                                                                                        
                    ================================================================================                    

[13-11-2021_23-39-11] DEBUG :: __main__ >> 
                    ================================================================================                    
                                                                                                                        
                            ASH - The ASP based Hierarchical Conformance Refinement Planner                             
                                      Copyright (C)  2021  Oliver Michael Kamperis                                      
                                             Email: o.m.kamperis@gmail.com                                              
                                                                                                                        
                          This program is free software: you can redistribute it and/or modify                          
                          it under the terms of the GNU General Public License as published by                          
                           the Free Software Foundation, either version 3 of the License, or                            
                                                   any later version.                                                   
                                                                                                                        
                            This program is distributed in the hope that it will be useful,                             
                             but WITHOUT ANY WARRANTY; without even the implied warranty of                             
                              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                              
                                      GNU General Public License for more details.                                      
                                                                                                                        
                           You should have received a copy of the GNU General Public License                            
                         along with this program. If not, see <https://www.gnu.org/licenses/>.                          
                                                                                                                        
                    ================================================================================                    

[13-11-2021_23-39-11] DEBUG :: __main__ >> Command line arguments:
'./test_problems/blocks_world_plus/BWP_system_laws.lp'
'./test_problems/blocks_world_plus/BWP_problem_small_3.lp'
'-conc'
'True'
'-ao'
'verbose'
'-strat'
'basic'
'-bound'
'2'
'-op'
'standard'
'-ir'
'0'
'-er'
'10'
'-ll'
'3=50'
'2=100'
'1=150'
'-save'
'True'
'-rblend'
'0.2'

[13-11-2021_23-39-11] DEBUG :: __main__ >> Parsed command line argumenys:
('files', ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'])
('display_loader', None)
('domain_rules', None)
('domain_structure', None)
('problem_specifics', None)
('load_schema', None)
('plan_file', './solutions/plans/ASH_Plan_2021-11-13_23-39-11.txt')
('log_file', './logs/ASH_Log_2021-11-13_23-39-11.log')
('excel_file', None)
('data_file', None)
('data_sep', ' ')
('data_end', '\n')
('save_schema', './solutions/schemas/ASH_Schema_2021-11-13_23-39-11.txt')
('schema_level', 1)
('warranty', False)
('conditions', False)
('instructions', False)
('ash_output', 'verbose')
('clingo_output', False)
('console_logging', 'INFO')
('disable_logging', False)
('disable_pause_on_start', False)
('display_graph', True)
('operation', 'standard')
('experimental_runs', 10)
('initial_runs', 0)
('pause_on_run_completion', False)
('threads', 8)
('planning_time_limit', 3600)
('search_length_limit', {3: 50, 2: 100, 1: 150})
('planning_mode', 'hcr')
('conformance_type', 'sequential')
('enable_concurrency', True)
('minimise_actions', None)
('sequential_yielding', True)
('detect_interleaving', False)
('minimum_search_length_bound', True)
('make_observable', False)
('problem_space', None)
('pause_on_level_change', False)
('pause_on_increment_change', False)
('top_level', None)
('bottom_level', 1)
('online_method', 'ground-first')
('division_strategy', 'basic')
('division_strategy_bounds', 2)
('bound_type', 'incremental')
('backwards_horizon', 0)
('preemptive_division', False)
('interrupting_division', False)
('moving_average', 1)
('left_blend_quantities', 0)
('right_blend_quantities', 0.2)
('avoid_refining_sgoals_marked_for_blending', False)
('treat_tasks_as_independent', True)
('save_grounding', True)
('positive_final_goal_preemptive_achievement_heuristic', None)
('negative_final_goal_preemptive_achievement_heuristic', None)
('final_goal_intermediate_achievement_ordering_preferences', None)
('detect_dependencies', False)

[13-11-2021_23-39-12] DEBUG :: core.Planner >> Instantiating new planning domain:
Name = None
Domain files = [./test_problems/blocks_world_plus/BWP_system_laws.lp
                ./test_problems/blocks_world_plus/BWP_problem_small_3.lp]

[13-11-2021_23-39-12] DEBUG :: core.Planner >> The domain files ['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'] were loaded successfully, contain all required program parts, and contain optional program parts: {'initial_state': True, 'static_state': True, 'goal_state': True, 'entities': True}.

[13-11-2021_23-39-12] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', None)
	('silent', True)
	('warnings', False)
	('message_limit', 20)
	('enable_tqdm', False)

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Logic program code parsed successfully.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Logic program instantiated successfully.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = ['--parallel-mode=1,compete']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Resetting output storing variables.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Output storing variables reset.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Program building started :: Processing 349 rules

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Program building completed in 0.0033351999999999826s

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[0, 'hierarchical']), BasePart(name='domain_sorts', args=())]

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Grounding program parts:
[('abstraction_levels', [Number(0), Function('hierarchical', [], True)]), ('domain_sorts', [])]

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:97:58-77: info: atom does not occur in any rule head:
  insta_of(#X0,#P1,#X2)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:600:50-78: info: atom does not occur in any rule head:
  insta_of(AL,graspable,OBJ)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:613:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:614:36-63: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:618:47-68: info: atom does not occur in any rule head:
  insta_of(AL,door,D)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:619:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_1)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:620:47-74: info: atom does not occur in any rule head:
  insta_of(AL,location,L_2)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:624:27-52: info: atom does not occur in any rule head:
  insta_of(AL,object,OBJ)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:625:27-54: info: atom does not occur in any rule head:
  insta_of(AL,grounded,OBJ)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:626:27-52: info: atom does not occur in any rule head:
  insta_of(AL,location,L)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:630:41-67: info: atom does not occur in any rule head:
  insta_of(AL,block,BLOCK)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:631:41-69: info: atom does not occur in any rule head:
  insta_of(AL,colour,COLOUR)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:643:39-66: info: atom does not occur in any rule head:
  insta_of(AL_1,location,L)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:644:39-66: info: atom does not occur in any rule head:
  insta_of(AL_2,object,OBJ)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:645:43-72: info: atom does not occur in any rule head:
  insta_of(AL_2,grounded,OBJ)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:651:45-77: info: atom does not occur in any rule head:
  insta_of(AL_1,surface,SURFACE)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:652:45-75: info: atom does not occur in any rule head:
  insta_of(AL_2,placeable,OBJ)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:657:48-78: info: atom does not occur in any rule head:
  insta_of(AL_1,graspable,OBJ)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Clingo warning MessageCode.AtomUndefined: <string>:658:48-77: info: atom does not occur in any rule head:
  insta_of(AL_2,grasper,DESC)


[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Grounding completed in 0.008903s.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Solving program.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Solving completed in 0.001153s with result Satisfiable.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Freeing held grounding...

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Input storing variables set.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Held grounding freed successfully.

[13-11-2021_23-39-12] DEBUG :: Logic Program Anonymous #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 1
Statistics :: Grounding = 0.008903s, Solving = 0.001153s, Total = 0.010056s, Memory = (RSS = 102.773438Mb, VMS = 89.937500Mb)
Final Model :: Total atoms = 67, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-39-12] DEBUG :: core.Planner >> Planning Domain Anon #1 :: Abstraction range = [1-3] instantiated successfully

[13-11-2021_23-39-12] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'ASH')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Parsing raw logic program code:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ASH - The ASP based Hierarchical Abstraction Planner for Robots       %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Abstraction levels module - Generate the available abstraction levels
%**% #program abstraction_levels(planning_level, mode).
%%%%
%%%% Parameters
%%%% ----------
%%%%    planning_level: int - The abstraction level at which to plan.
%%%%    mode: {classical | refinement | hierarchical} - The state representation mode named according to the type of planning they are used for, as described below.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define abstraction levels
al(1..abstraction_max).

%% Current planning level
pl(AL) :- AL = planning_level, al(AL).

%% Define abstraction levels at which the state should be represented at:
%%      - Classical planning: Represent the state at only the current planning level,
%%      - Refinement planning: The state is representated at the current planning level and previous adjacent level to allow reasoning about conformance,
%%      - Hierarchical representation: The state is represented at the current planning level and all higher levels to allow generation of the initial state and final-goals.
sl(AL) :- AL = planning_level, mode = classical, al(AL).
sl(AL) :- AL >= planning_level, AL <= planning_level + 1, mode = refinement, al(AL).
sl(AL) :- AL >= planning_level, AL <= abstraction_max, mode = hierarchical, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instance relations module - Generate the instance and ancestry relations from the domain specific sort declarations and entities
%**% #program instance_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entity instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Define boolean values
boolean(true;false).

%% All entities are instances of their own class at the same abstraction level
insta_of(AL, CLS, EN) :- entity(CLS, EN), class(AL, CLS), al(AL).

%% And are instances of all their super-classes at the same abstraction level
insta_of(AL_3, CLS_1, EN) :- insta_of(AL_2, CLS_2, EN), super_class(CLS_1, CLS_2),
                             entity(CLS_3, EN), class(AL_3, CLS_3), class(AL_1, CLS_1),
                             AL_1 >= AL_2, al(AL_1), al(AL_2), al(AL_3).

%% As well as the next lower abstraction level if its type is not overridden by one of its descendants of the same type
insta_of(AL - 1, CLS, EN) :- insta_of(AL, CLS, EN), not overridden(AL - 1, CLS, EN), class(_, CLS), al(AL), al(AL - 1).

%% The type of an entity is overriden at a given abstraction level if there is any entity that exists at that level that overrides that type
overridden(AL - 1, CLS, EN_1) :- overridden_by(AL - 1, CLS, EN_1, EN_2),
                                 insta_of(AL, CLS, EN_1), insta_of(AL - 1, CLS, EN_2),
                                 class(_, CLS), al(AL), al(AL - 1).

%% The class type CLS_3 of an entity EN_1 at abstraction level AL is overridden by an entity EN_2 of the same type that is discovered at abstraction level AL - 1 if:
%%      - There is a type override such that instances of class CLS_2 override the class type CLS_3 of instances of class CLS_1,
%%      - Entities EN_1 and EN_2 are instances of class CLS_1 and CLS_2 at abstraction levels AL and AL - 1 respectively,
%%      - Entities EN_1 and EN_2 are both instances of class CLS_3 at abstraction levels AL and AL - 1 respectively.
%%      - Entity EN_2 is a descendant of entity EN_1 at abstraction level AL - 1.
overridden_by(AL - 1, CLS_3, EN_1, EN_2) :- insta_of(AL, CLS_1, EN_1), insta_of(AL - 1, CLS_2, EN_2),
                                            insta_of(AL, CLS_3, EN_1), insta_of(AL - 1, CLS_3, EN_2),
                                            desce_of(AL - 1, EN_1, EN_2), override_class(CLS_1, CLS_2, CLS_3),
                                            class(_, CLS_1), class(_, CLS_2), class(_, CLS_3), al(AL), al(AL - 1).

%% All states are states of all entities of the same class type at the same abstraction level
state_of(AL, EN, S) :- state(AL, CLS, S), insta_of(AL, CLS, EN), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Ancestry relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% An entity is a child of another at a given abstraction level if there is a ancestry relation between them
child_of(AL, EN, DESCE) :- ancestry_relation(EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity is a descendant of another if either:
%%      - The entity is the child of the other entity,
%%      - By transitivity, if the entity is a descendant of some different entity which is itself a descendant of the other entity.
desce_of(AL, EN, DESCE) :- child_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).
desce_of(AL, EN, DESCE_1) :- desce_of(AL, DESCE_2, DESCE_1), desce_of(AL, EN, DESCE_2),
                             insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% An entity has descendants at a given abstraction level if any of its descendants exist at that abstraction level
has_desce(AL, EN) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, _, DESCE), al(AL).

%% An entity has descendants of a certain type at a given abstraction level if any of its descendants are an instance of that class type and exist at that abstraction level
has_desce(AL, EN, CLS) :- desce_of(AL, EN, DESCE), insta_of(AL, _, EN), insta_of(AL, CLS, DESCE), al(AL).

%% Entities are siblings if they are both a child of the same entity at a given abstraction level
siblings(AL, DESCE_1, DESCE_2) :- child_of(AL, EN, DESCE_1), child_of(AL, EN, DESCE_2), DESCE_1 != DESCE_2,
                                  insta_of(AL, _, EN), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%% Siblingship is reversible
siblings(AL, DESCE_2, DESCE_1) :- siblings(AL, DESCE_1, DESCE_2), insta_of(AL, _, DESCE_1), insta_of(AL, _, DESCE_2), al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Module - Ensure the state is valid and remains consistent through time
%**% #program state_module(step, start).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, step) } :- fluent(AL, inertial, F, V), sl(AL), step = start.

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, step) : fluent(AL, _, F, V) } = 1, fluent(AL, _, F, _), sl(AL).

%% Law of Inertia - Propagate the value of fluents through time unless there is reason to believe their value has been changed
holds(AL, F, V, step) :- holds(AL, F, V, step - 1), not not holds(AL, F, V, step), fluent(AL, inertial, F, V), sl(AL), step > start.

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, step) :- not holds(AL, F, true, step), fluent(AL, defined, F, B), boolean(B), sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Plan Module - Generate legal plans
%**% #program plan_module(step, start, concurrency, achieve_fgoals).
%%%%
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon (equivalent to the search length).
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    concurrency: bool - A Boolean, True to enable action concurrency (set of at least one action is planned per step), False to disable (exactly one action is planned per step).
%%%%    achieve_fgoals: bool - A Boolean, True to enforce achievement of the final-goal (used for final single-return problems), False otherwise.
%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for plan generation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Generator rule for actions at the current planning level whilst either;
%%      - at least one unsatisfied goal existed at the previous step,
%%      - the search space is being generated.
{ occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- pl(AL), step > start.
% { occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A) } :- gen_search_space_at(step), pl(AL), step > start.

%% Rules defining whether actions are taken on each step
occurs(AL, ROBOT, step) :- occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), pl(AL), step > start.
occurs(AL, step) :- occurs(AL, ROBOT, step), insta_of(AL, robot, ROBOT), pl(AL), step > start.

%% Activity constraint - Prevent the robots from being idle whilst the plan is incomplete
%%      - Plan exactly one action on each step in sequential planning,
%%      - Plan at least one action on each step in concurrent planning.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } = 1, pl(AL), step > start, concurrency = false.
:- not { occurs(AL, R, A, step) : action(AL, _, _, ROBOT, A) } >= 1, pl(AL), step > start, concurrency = true.

%% Actions planned at the current planning level have their effects applied at the current step
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
holds(AL, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                         action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the positive preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true, step), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, true), not holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%% If the negative preconditions of an action are not satisfied in a given state then the action is impossible
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false, step), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.
:- occurs(AL, ROBOT, A, step), precond(AL, ROBOT, A, F, V, false), holds(AL, F, V, step - 1),
   action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V), pl(AL), step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for action concurrency
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If concurrency is disabled then plan actions sequentially
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, _, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = false.

%% If a robot plans a sequentially restricted action then it cannot concurrently plan another action on the same step
:- occurs(AL, ROBOT, A_1, step), occurs(AL, ROBOT, A_2, step), A_1 != A_2,
   action(AL, sequential, _, ROBOT, A_1), action(AL, _, _, ROBOT, A_2), pl(AL), step > start, concurrency = true.

%% Concurrently planned actions should not effect the same fluent
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), effect(AL, ROBOT_2, A_2, F, V_2),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, ROBOT_1 != ROBOT_2, pl(AL), step > start, concurrency = true.

%% Concurrently planned actions must also be sequentially plannable in all possible permutations;
%%      - Do not plan an action whose effect would falsify the positive precondition of a concurrently planned action,
%%      - Do not plan an action whose effect would truify the negative precondition of a concurrently planned action.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1, step), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V, step), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V_1), precond(AL, ROBOT_2, A_2, F, V_2, true),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V_1), fluent(AL, inertial, F, V_2),
   A_1 != A_2, V_1 != V_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false, step),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.
:- occurs(AL, ROBOT_1, A_1, step), occurs(AL, ROBOT_2, A_2, step), effect(AL, ROBOT_1, A_1, F, V), precond(AL, ROBOT_2, A_2, F, V, false),
   action(AL, concurrent, _, ROBOT_1, A_1), action(AL, concurrent, _, ROBOT_2, A_2), fluent(AL, inertial, F, V),
   A_1 != A_2, pl(AL), step > start, concurrency = true.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for ensuring plans achieve all goals
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External defining when to enforce achieving the final-goal in sequential yield planning
#external seq_achieve_fgoals(step).

%% Rules defining whether to enforce achievement of the final-goal
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S, S <= step, seq_achieve_fgoals(S).

%% A goal is satisfied by the plan if there is step in which the associated fluent holds the current boolean truth value
goal_satisfied(AL, F, V, true, step) :- final_goal(AL, F, V, true), holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).
goal_satisfied(AL, F, V, false, step) :- final_goal(AL, F, V, false), not holds(AL, F, V, step), fluent(AL, _, F, V), pl(AL), enforce_achieve_fgoals(step).

%% The plan is incomplete at some step I if there is at least one goal that is not satisfied in the state at step I
incomplete_plan(step) :- final_goal(AL, F, V, B), not goal_satisfied(AL, F, V, B, step), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Rules for generating sub-goals from the current planning level
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Effects of actions planned at the current abstraction level are passed as sub-goals to the next level
%%      - Although the sub-goal producing action is encoded in the sub-goal itself,
%%        this is for transparency and ease of parsing the answer sets and is thus
%%        considered an implementation detail only, it is strictly not necessary in the theory.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V, step),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.
sub_goal(AL, ROBOT, A, F, V, step) :- occurs(AL, ROBOT, A, step), effect(AL, ROBOT, A, F, V),
                                      action(AL, _, _, ROBOT, A), fluent(AL, inertial, F, V),
                                      pl(AL), AL != 1, step > start.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Optimisation Module
%**% #program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
%%%% Parameters
%%%% ----------
%%%%    step: int - A natural number defining the current planning horizon.
%%%%    start: int - A natural number defining the step to begin planning from.
%%%%    minimise_actions: bool - A Boolean, True to enable minimisation of the total number of actions in a plan, False to disable.
%%%%    preemptive_pos_fgoals: bool - A Boolean, True to
%%%%    preemptive_neg_fgoals: bool - A Boolean, True to
%%%%    pref_order_fgoals: bool - A Boolean, True to
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Minimise quanity of actions (level 2):
%%      - Eliminate any unnecessary, redundant or superfluous actions from the plan by minimising the total number of actions in the minimal length plan.
:~ occurs(AL, ROBOT, A, step), action(AL, _, _, ROBOT, A), incomplete_plan(step - 1), pl(AL), step > start, minimise_actions = true. [1 @ 2, ROBOT, A, step]

%% Final goal preemptive achievement heuristics:
%%      - Heuristics are better when deciding on individual (arbitrary) choices (they only work for choice rules but are more efficient that optimisation statements and don't produce all answer sets),
%%      - Since they are essentially preferences and priority levels over deciding the truth of atoms in choice rules, such at the occurs predicate atoms.
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, true), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 1, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), final_goal(AL, F, V, false), pl(AL), step > start, preempt_neg_fgoals = true. [10 @ 0, false]

%% Final goal achievement ordering preferences:
%%      - The chosen ordering over the intermediate achievement of intermediate fgoals are then effectively encoded into the sgoals and maintained by the order over achievement of sgoals, resultantly it only makes sense to have an ordering preference over the achievement of fgoals at the top-level
:~ goal_satisfied(AL, F, V, B, step), goal_order(AL, F, V, B, ORDER), final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B), max_order(M). [(((M + 1) - ORDER) * (-step)) @ 4, AL, F, V, B]
max_order(M) :- M = #max { ORDER : goal_order(AL, F, V, B, ORDER) }, final_goal(AL, F, V, B), fluent(AL, _, F, V), pl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Solution checking module
%**% #program check(step).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% To generate a search space, the following must be done;
%%      - Maximise the number of achieved final-goal literals if the current problem is final, (Could remove this and simple search until we reach the maximum search length of the schema? We have already solved the schema so we know what the exact solution length is!)
%%          - This finds only a lower estimate of the search space, since the true search space would be larger, as you cannot just consider potential plans that achieve a final-goal, you must achieve all of them simultaneously at the end.
%%      - Minimise the number of current sub-goals maximises the amount of achieve sub-goals
%%      - Maximising the current sub-goal index maximises the progression through the goal sequence
% :~ gen_search_space_at(step), final_goal(AL, F, V, B), goal_satisfied(AL, F, V, B, step - 1), fluent(AL, _, F, V), pl(AL), boolean(B), enforce_achieve_fgoals(step - 1). [-1 @ 1, AL, F, V, B, step]
:~ gen_search_space_at(step), incomplete_plan(step - 1), enforce_achieve_fgoals(step - 1). [1 @ 1, step]
% :~ gen_search_space_at(step), current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1), sub_goal(AL + 1, ROBOT, A, F, V, I_SG), action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V), pl(AL). [1 @ 1, AL, ROBOT, A, F, V, I_SG, step]
% :~ gen_search_space_at(step), current_sub_goal_index(AL + 1, I, step - 1), sgoals_index(I), pl(AL). [-I @ 1, AL, I, step]

%% Keep incrementing until a complete plan is found
#external query(step).
#external gen_search_space_at(step). %% must only ever be true on the last step, so must be released after each step.
:- incomplete_plan(step), not gen_search_space_at(step), query(step).

%% Make the program unsatisfiable up to the minimum search length bound
#const minimum_search_length_bound = -1.
:- step <= minimum_search_length_bound, query(step).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Conformance Module - Ensure plans achieve all sub-goals from actions planned at the previous level in the correct order
%**% #program conformance_module(step, start, first, last, type, yield).
%%%%    achievement: {simultaneous, sequential} - A string defining the achievement type of subgoal stages.
%%%%    We are likely to see a greater restriction on the search space with simultaneous, but it is also not always possible to achieve subgoals in the same stage simultaneously, since the loss or generalisation of enabling constraints and
%%%%    state constraints (state constraints can be lost in tasking models) in the abstract model from which the sub-goals they were produced may mean that there is no original level state that maps to an abstract state in which all the abstract effects that form them hold simultaneously
%%%%    as the reintroduction or specialisation of those enabling and state constraints might make it no longer a reachable valid state pair.
%%%%    It thus may occur that no valid subgoal states that can achieve the effects of a set of concurrently planned actions.
%%%%    Sequential conformance is more flexible and relaxes this constraint significantly, and avoids this problem, at the cost of a weaker conformance constraint, and potentially less restriction on the search space.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% External atom defining the current last in sequence sub-goal stage being enforced by the conformance constraint and the step it was first commited at during sequential yield progression through the goal seuence
#external current_last_sgoals(I, step) : sgoals_index(I), yield = true.

%% Include sub-goal stages as such;
%%      - Up to the current last in sequence sub-goal stage index in sequential yield planning mode,
%%      - Include all sub-goal stages simultaneously in standard planning mode.
include_sgoals(I, step) :- I <= I_L, step >= S, current_last_sgoals(I_L, S), sgoals_index(I).
include_sgoals(I, step) :- sgoals_index(I), yield = false.

%% Define the available sub-goal stage index range;
%%      - The first index is always given (regardless of saved groundings),
%%      - The last is given explicitly and fixed iff this program grounding will not be saved,
%%      - The last is given by an external context function (allowing it to be modified) if this program grounding will be saved and resumed to continue its refinement goal progression.
sgoals_index(first..last) :- last != none.
sgoals_index(first..L) :- last = none, L = @get_total_last_sgoals(PL), pl(PL).

%% The current sub-goal stage is initially that with whose sequence index is equal to the first included index
current_sub_goal(AL + 1, ROBOT, A, F, V, first, start + 1) :- sub_goal(AL + 1, ROBOT, A, F, V, first), %% TODO
                                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                              pl(AL).

%% A current sub-goal is satisfied on the step its value holds
sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                          current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                                          holds(AL + 1, F, V, step),
                                                          action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                          pl(AL).

%% The current sub-goal stage is unachieved if any current sub-goal with that index is not satisfied
unachieved_sgoals(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                         sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                         pl(AL).

%% Sequential sub-goal stage achievement: A current sub-goal is propagated to the next time step if it has not yet been satisifed
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = sequential, pl(AL).

%% Simultaneous sub-goal stage achievement: A current sub-goal is propagated to the next time step if the current sub-goal stage is unachieved
current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                                        current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step - 1),
                                                        unachieved_sgoals(AL + 1, I_SG, step - 1),
                                                        action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                                        type = simultaneous, pl(AL).

%% If there are no current sub-goals from the index value that was current at the previous time step then the next sub-goals in the sequence become current
current_sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1, step) :- include_sgoals(I_SG + 1, step),
                                                                    sub_goal(AL + 1, ROBOT_1, A_1, F_1, V_1, I_SG + 1),
                                                                    current_sub_goal_index(AL + 1, I_SG, step - 1),
                                                                    not current_sub_goal_index(AL + 1, I_SG, step),
                                                                    action(AL + 1, _, _, ROBOT_1, A_1), fluent(AL + 1, inertial, F_1, V_1),
                                                                    pl(AL).

%% A sub-goal stage is achieved on the step after the last step upon which its sequence index is current;
%%      - This means that the sub-goal stage is current on all steps of the child state transitions that refine this stage,
%%      - and the sub-goal stage is achieved on the step of the end state of the matching child state transition.
sgoals_ach_at(AL + 1, I_SG, step) :- current_sub_goal_index(AL + 1, I_SG, step),
                                     not unachieved_sgoals(AL + 1, I_SG, step),
                                     pl(AL).

%% These don't get updated because we would have to go back a step in the incrementation;
%%      - Although the new modules are added with start step = start_step, they are only grounded first at step start_step + 1,
%%      - incrementing starts at step start + 1 since actions lead current sub-goals by one step,
%%      - but the first sub-goal must be current at step start (which is the achievement step of the last sub-goal stage of the previous partial problem),
%%      - So although we get current sub-goals add to a saved grouning, they neither;
%%          - Appear as a sub-goal index,
%%          - Or set the plan as incomplete.
current_sub_goal_index(AL + 1, FI, SS) :- restart_from(FI, SS), pl(AL).

%% The current sub-goal sequence index is equal to the index value of the current sub-goals
current_sub_goal_index(AL + 1, I_SG, step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                                              current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                                              action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                                              pl(AL).

%% The plan is incomplete at some step I if there is at least one sub-goal that is current at step I
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         not sub_goal_satisfied(AL + 1, ROBOT, A, F, V, I_SG, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).
incomplete_plan(step) :- sub_goal(AL + 1, ROBOT, A, F, V, I_SG),
                         current_sub_goal(AL + 1, ROBOT, A, F, V, I_SG, step),
                         include_sgoals(I_SG + 1, step),
                         action(AL + 1, _, _, ROBOT, A), fluent(AL + 1, inertial, F, V),
                         pl(AL).

#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]
#heuristic occurs(AL, ROBOT, A, step) : action(AL, _, _, ROBOT, A), effect(AL, ROBOT, A, F, V, step), fluent(AL, inertial, F, V), current_sub_goal(AL + 1, ROBOT, A, F, V, _, step - 1), pl(AL), step > start, preempt_pos_fgoals = true. [10 @ 2, true]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goal Abstraction Module - Generate a conforming final-goal over all levels in the abstraction hierarchy
%**% #program goal_abstraction_module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Initial final-goals are applied in the initial state
holds(AL, F, V, 0) :- final_goal(AL, F, V, true), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).
not holds(AL, F, V, 0) :- final_goal(AL, F, V, false), goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Defined final-goals must be satisfied in the initial state
:- holds(AL, F, false, 0), final_goal(AL, F, true, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, false, 0), final_goal(AL, F, false, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, false, true), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).
:- holds(AL, F, true, 0), final_goal(AL, F, true, false), goal_fluent(AL, F), fluent(AL, defined, F, _), al(AL).

%% Convert the initial state back to final-goal literals
final_goal(AL, F, V, true) :- holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).
final_goal(AL, F, V, false) :- not holds(AL, F, V, 0), goal_fluent(AL, F), fluent(AL, _, F, V), al(AL).

%% Law of Awareness - All inertial fluents can take any value from their range in the initial state
{ holds(AL, F, V, 0) } :- goal_fluent(AL, F), fluent(AL, inertial, F, V), al(AL).

%% Law of Continuity - All Fluents must have unique values to ensure the state is complete
:- not { holds(AL, F, V, 0) : fluent(AL, _, F, V) } = 1, goal_fluent(AL, F), fluent(AL, _, F, _), al(AL).

%% Closed world assumption for defined fluents with a boolean range - If there is no reason to believe a defined fluent is true then it must be false
holds(AL, F, false, 0) :- not holds(AL, F, true, 0), goal_fluent(AL, F), fluent(AL, defined, F, B), boolean(B), al(AL).%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Sorts
%**% #program domain_sorts.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Constants defining abstraction levels
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Maximum abstraction level
#const abstraction_max = 3.

%% Abstraction types
#const reduc = 3. % Classical
#const conde = 2. % Refine both
#const groun = 1. % Refine both

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Declarations - class(AL, CLS) declares a class CLS at abstraction level AL
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Classes included in all abstractions
class(3, robot).
class(3, armed_robot).
class(3, location).
class(3, room).
class(3, object).
class(3, grounded).
class(3, graspable).
class(3, placeable).
class(3, block).
class(3, surface).
class(3, table).
class(3, colour).
class(3, manipulator_arm).
class(3, grasper).

%% Classes deleted by reduction
class(2, door).
class(2, handle).
class(2, configurable).
class(2, extensible).

%% Classes deleted in condensed model
class(1, cell).
class(1, manipulator_limb).
class(1, manipulator_end).
class(1, side).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Hierarchy - super_class(C1, C2) defines C1 as a super class of C2 if class(AL_1, CLS_1), class(AL_2, CLS_2), AL_1 >= AL_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Armed robots are robots
super_class(robot, armed_robot).

%% Location classes
super_class(location, room).
super_class(location, cell).

%% Object classes
super_class(object, robot).
super_class(object, manipulator_arm).
super_class(object, manipulator_limb).
super_class(object, manipulator_end).
super_class(object, table).
super_class(object, side).
super_class(object, block).

%% Grounded objects
super_class(object, grounded).
super_class(grounded, handle).

%% Configurable classes
super_class(configurable, extensible).
super_class(configurable, grasper).
super_class(configurable, door).

%% Extensible classes
super_class(extensible, manipulator_arm).
super_class(extensible, manipulator_limb).

%% Grasper classes
super_class(grasper, manipulator_arm).
super_class(grasper, manipulator_end).

%% Graspable classes
super_class(graspable, block).
super_class(graspable, handle).

%% Placeable classes
super_class(placeable, block).

%% Surface classes
super_class(surface, table).
super_class(surface, side).
super_class(surface, block).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Class Type Overrides - override_class(CLS_1, CLS_2, CLS_3) deletes the CLS_3 type of CLS_1 when for components of type CLS_2 exist at AL >= plan_at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% End-effectors can grasp objects
override_class(manipulator_arm, manipulator_end, grasper).

%% Manipulator limbs are extensible
override_class(manipulator_arm, manipulator_limb, extensible).

%% The cells of rooms are places
override_class(room, cell, location).

%% The sides of a table are surfaces
override_class(table, side, surface).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Configuration State Declarations - state(CLS, S) declares a state S for class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Extensible objects can be extended or retracted
state(AL, extensible, extended) :- AL < reduc, al(AL).
state(AL, extensible, retracted) :- AL < reduc, al(AL).

%% End effectors can be aligned with graspable objects
state(AL, manipulator_end, aligned_with(OBJ)) :- insta_of(AL, graspable, OBJ), class(AL_I, manipulator_end), AL <= AL_I, AL < reduc, al(AL).
state(AL, manipulator_end, aligned_with(nothing)) :- AL < reduc, al(AL).

%% Doors can be open or closed
state(AL, door, open) :- AL < reduc, al(AL).
state(AL, door, closed) :- AL < reduc, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics - Define the static domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Statics are given in the form - static(abstraction_level, static)

%% Locations can be connected
static(AL, connected(L_1, L_2)) :- insta_of(AL, location, L_1),
                                   insta_of(AL, location, L_2),
                                   al(AL).

%% Locations can be connected by doors
static(AL, connected_by_door(D, L_1, L_2)) :- insta_of(AL, door, D),
                                              insta_of(AL, location, L_1),
                                              insta_of(AL, location, L_2),
                                              AL < reduc, al(AL).

%% Locations for grounded entities
static(AL, in(OBJ, L)) :- insta_of(AL, object, OBJ),
                          insta_of(AL, grounded, OBJ),
                          insta_of(AL, location, L),
                          AL < reduc, al(AL).

%% Blocks have colours
static(AL, colour_of(BLOCK, COLOUR)) :- insta_of(AL, block, BLOCK),
                                        insta_of(AL, colour, COLOUR),
                                        al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents - Define the fluent domain properties here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Fluents are given in the form - fluent(abstraction_level, fluent_type, fluent, value)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Inertial Fluents

%% All objects must be in a location
fluent(AL_1, inertial, in(OBJ), L) :- insta_of(AL_1, location, L),
                                      insta_of(AL_2, object, OBJ), OBJ != nothing,
                                      not insta_of(AL_2, grounded, OBJ),
                                      sl(AL_1), sl(AL_2),
                                      AL_2 >= AL_1.

%% Objects can be placed on other surfaces
fluent(AL_1, inertial, on(OBJ), SURFACE) :- OBJ != SURFACE,
                                            insta_of(AL_1, surface, SURFACE),
                                            insta_of(AL_2, placeable, OBJ),
                                            sl(AL_1), sl(AL_2),
                                            AL_2 >= AL_1.

%% Graspable objects can be grasped by a robot's graspers
fluent(AL_1, inertial, grasping(DESC), OBJ) :- insta_of(AL_1, graspable, OBJ),
                                               insta_of(AL_2, grasper, DESC),
                                               sl(AL_1), sl(AL_2),
                                               AL_2 >= AL_1.

%% All of a robot's reconfigurable components must have a configuration
fluent(AL_1, inertial, configuration(DESC), STATE) :- state_of(AL_1, DESC, STATE),
                                                      insta_of(AL_2, configurable, DESC),
                                                      AL_1 < reduc, AL_2 < reduc,
                                                      sl(AL_1), sl(AL_2),
                                                      AL_2 >= AL_1.

%% Doors must have a configuration
fluent(AL_1, inertial, configuration(D), STATE) :- state_of(AL_1, D, STATE),
                                                   insta_of(AL_2, door, D),
                                                   AL_1 < reduc, AL_2 < reduc,
                                                   sl(AL_1), sl(AL_2), AL_2 >= AL_1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Defined Fluents

%% A block that is on a table is the base of a tower
fluent(AL, defined, tower_base(BASE), B) :- insta_of(AL, block, BASE),
                                            sl(AL), boolean(B).

%% A block that is the base of a tower or placed upon another block that is in a tower also in the same tower
fluent(AL, defined, in_tower(BASE, BLOCK), B) :- insta_of(AL, block, BASE),
                                                 insta_of(AL, block, BLOCK),
                                                 sl(AL), boolean(B).

%% A tower that is not stacked in descending order from top to bottom is unordered
fluent(AL, defined, unordered_tower(BASE), B) :- insta_of(AL, block, BASE),
                                                 sl(AL), boolean(B).

%% A tower is complete if all the blocks that form it are the same colour and they are stacked in descending order from top to bottom
fluent(AL, defined, complete(COLOUR), B) :- insta_of(AL, colour, COLOUR),
                                            sl(AL), boolean(B).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions - Define the available actions here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Actions are given in the form - action(abstraction_level, sequencing_type, action_type, actor, action)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Actions

%% Robots can move between locations
action(AL, sequential, locomotion, ROBO, move(L)) :- insta_of(AL, robot, ROBO),
                                                     insta_of(AL, location, L),
                                                     sl(AL).

%% Robots can grasp objects with their graspers
action(AL, concurrent, manipulation, ROBO, grasp(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                sl(AL).

%% Robots can release objects from their graspers
action(AL, concurrent, manipulation, ROBO, release(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                  sl(AL).

%% Robots can set the configuration state of their configurable components
action(AL, concurrent, configuration, ROBO, configure(DESC, STATE)) :- desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, configurable, DESC),
                                                                       state_of(AL, DESC, STATE),
                                                                       AL < reduc, sl(AL).

%% Robots can put objects on surfaces
action(AL, concurrent, manipulation, ROBO, put(DESC, OBJ, SURFACE)) :- OBJ != SURFACE, SURFACE != nothing,
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       sl(AL).

%% Robots can lift objects off of surfaces
action(AL, concurrent, manipulation, ROBO, lift(DESC, OBJ)) :- desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               sl(AL).

%% Robots can actuate doors
action(AL, concurrent, manipulation, ROBO, actuate(DESC, D)) :- insta_of(AL, armed_robot, ROBO),
                                                                insta_of(AL, grasper, DESC),
                                                                insta_of(AL, door, D),
                                                                AL < reduc, sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Domain Specific Rules - The domain's dynamic behaviour is defined here
%**% #program action_effects(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Effects - The direct effects of executing actions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% When a robot moves its location changes
effect(AL, ROBO, move(L), in(ROBO), L) :- action(AL, _, _, ROBO, move(L)),
                                          fluent(AL, inertial, in(ROBO), L),
                                          insta_of(AL, robot, ROBO),
                                          insta_of(AL, location, L),
                                          pl(AL).

%% When a robot grasps an object the object becomes grasped
effect(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), OBJ) :- action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                           fluent(AL, inertial, grasping(DESC), OBJ),
                                                           desce_of(AL, ROBO, DESC),
                                                           insta_of(AL, armed_robot, ROBO),
                                                           insta_of(AL, grasper, DESC),
                                                           insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                           pl(AL).

%% When a robot releases an object the object is no longer grasped
effect(AL, ROBO, release(DESC, OBJ), grasping(DESC), nothing) :- action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), nothing),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 pl(AL).

%% When a robot releases an object from an end effector it is no longer aligned with that object
effect(AL, ROBO, release(END, OBJ), configuration(END), aligned_with(nothing)) :- action(AL, _, _, ROBO, release(END, OBJ)),
                                                                                  fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                  desce_of(AL, ROBO, END),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, manipulator_end, END),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  state_of(AL, END, aligned_with(nothing)),
                                                                                  AL < reduc, pl(AL).

%% When a robot configures a component it causes the state of that component to change
effect(AL, ROBO, configure(DESC, STATE), configuration(DESC), STATE) :- action(AL, _, _, ROBO, configure(DESC, STATE)),
                                                                        fluent(AL, inertial, configuration(DESC), STATE),
                                                                        desce_of(AL, ROBO, DESC),
                                                                        insta_of(AL, robot, ROBO),
                                                                        insta_of(AL, configurable, DESC),
                                                                        state_of(AL, DESC, STATE),
                                                                        AL < reduc, pl(AL).

%% When a robot retracts a manipulator limb any of its sibling end effectors are no longer aligned with any objects unless it is grasping an object
effect(AL, ROBO, configure(ARM, retracted), configuration(END), aligned_with(nothing), t) :- holds(AL, grasping(END), nothing, t - 1),
                                                                                             action(AL, _, _, ROBO, configure(ARM, retracted)),
                                                                                             fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                                                             desce_of(AL, ROBO, ARM),
                                                                                             desce_of(AL, ROBO, END),
                                                                                             siblings(AL, ARM, END),
                                                                                             insta_of(AL, armed_robot, ROBO),
                                                                                             insta_of(AL, extensible, ARM),
                                                                                             insta_of(AL, manipulator_end, END),
                                                                                             state_of(AL, END, aligned_with(nothing)),
                                                                                             AL < reduc, pl(AL).

%% When a robot puts an object on a surface the object is on that surface
effect(AL, ROBO, put(DESC, OBJ, SURFACE), on(OBJ), SURFACE) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                               fluent(AL, inertial, on(OBJ), SURFACE),
                                                               OBJ != SURFACE, SURFACE != nothing,
                                                               desce_of(AL, ROBO, DESC),
                                                               insta_of(AL, armed_robot, ROBO),
                                                               insta_of(AL, grasper, DESC),
                                                               insta_of(AL, placeable, OBJ),
                                                               insta_of(AL, surface, SURFACE),
                                                               pl(AL).

%% When a robot lifts an object the object is on nothing
effect(AL, ROBO, lift(DESC, OBJ), on(OBJ), nothing) :- action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                       fluent(AL, inertial, on(OBJ), nothing),
                                                       desce_of(AL, ROBO, DESC),
                                                       insta_of(AL, armed_robot, ROBO),
                                                       insta_of(AL, grasper, DESC),
                                                       insta_of(AL, placeable, OBJ),
                                                       pl(AL).

%% When a robot actuates a door its configuration is flipped, if it was closed it becomes open and vice versa
effect(AL, ROBO, actuate(DESC, D), configuration(D), STATE_1, t) :- holds(AL, configuration(D), STATE_2, t - 1),
                                                                    action(AL, _, _, ROBO, actuate(DESC, D)),
                                                                    fluent(AL, inertial, configuration(D), STATE_1),
                                                                    fluent(AL, inertial, configuration(D), STATE_2),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, door, D),
                                                                    state_of(AL, D, STATE_1),
                                                                    state_of(AL, D, STATE_2),
                                                                    STATE_1 != STATE_2,
                                                                    AL < reduc, pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Agent Action Preconditions - Conditions that must hold to plan certain actions
%**% #program action_preconditions(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A robot can only move between locations that are connected
precond(AL, ROBO, move(L_2), in(ROBO), L_1, false) :- not is(AL, connected(L_1, L_2)), L_1 != L_2,
                                                      action(AL, _, _, ROBO, move(L_2)),
                                                      fluent(AL, inertial, in(ROBO), L_1),
                                                      static(AL, connected(L_1, L_2)),
                                                      insta_of(AL, robot, ROBO),
                                                      insta_of(AL, location, L_1),
                                                      insta_of(AL, location, L_2),
                                                      AL < reduc, pl(AL).

%% Alternative encoding of the previous rule using disjunctive precondition
% { precond(AL, ROBO, move(P_2), in(ROBO), P_1, true, t) : is(AL, connected(P_1, P_2)),
%                                                          fluent(AL, inertial, in(ROBO), P_1),
%                                                          static(AL, connected(P_1, P_2)), P_1 != P_2,
%                                                          insta_of(AL, location, P_1) } = 1 :- action(AL, _, _, ROBO, move(P_2)),
%                                                                                               insta_of(AL, robot, ROBO),
%                                                                                               insta_of(AL, location, P_2),
%                                                                                               AL < reduc, pl(AL).

%% A robot can only move between locations that are connected by a door if that door is open
precond(AL, ROBO, move(L_2), configuration(D), open, true, t) :- holds(AL, in(ROBO), L_1, t - 1),
                                                                 is(AL, connected_by_door(D, L_1, L_2)), L_1 != L_2,
                                                                 action(AL, _, _, ROBO, move(L_2)),
                                                                 fluent(AL, inertial, configuration(D), open),
                                                                 fluent(AL, _, in(ROBO), L_1),
                                                                 static(AL, connected_by_door(D, L_1, L_2)),
                                                                 insta_of(AL, robot, ROBO),
                                                                 insta_of(AL, location, L_1),
                                                                 insta_of(AL, location, L_2),
                                                                 insta_of(AL, door, D),
                                                                 AL < reduc, pl(AL).

%% An armed robot can only open a door if it is grasping at least one of its handles
{ precond(AL, ROBO, actuate(COMP, D), grasping(COMP), H, true, t) : desce_of(AL, D, H),
                                                                    insta_of(AL, handle, H),
                                                                    action(AL, _, _, ROBO, actuate(COMP, D)),
                                                                    fluent(AL, inertial, grasping(COMP), H) } = 1 :- desce_of(AL, ROBO, COMP),
                                                                                                                     insta_of(AL, armed_robot, ROBO),
                                                                                                                     insta_of(AL, grasper, COMP),
                                                                                                                     insta_of(AL, door, D),
                                                                                                                     AL < reduc, pl(AL).

% %% An armed robot can only open a door if it is grasping at least one of its handles
% not occurs(AL, ROBO, actuate(DESC, D), t) :- not { holds(AL, grasping(DESC), H, t - 1) : desce_of(AL, D, H),
%                                                                     insta_of(AL, handle, H),
%                                                                     action(AL, _, _, ROBO, actuate(DESC, D)),
%                                                                     fluent(AL, inertial, grasping(DESC), H) } = 1, desce_of(AL, ROBO, DESC),
%                                                                                                                      insta_of(AL, robot, ROBO),
%                                                                                                                      insta_of(AL, grasper, DESC),
%                                                                                                                      insta_of(AL, door, D),
%                                                                                                                      AL < reduc, pl(AL).

%% An armed robot can only grasp a grounded object when it is in the same location as it
precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true) :- is(AL, in(OBJ, L)),
                                                          action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                          fluent(AL, inertial, in(ROBO), L),
                                                          static(AL, in(OBJ, L)),
                                                          desce_of(AL, ROBO, DESC),
                                                          insta_of(AL, armed_robot, ROBO),
                                                          insta_of(AL, grasper, DESC),
                                                          insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                          insta_of(AL, grounded, OBJ),
                                                          insta_of(AL, location, L),
                                                          AL < reduc, pl(AL).

%% An armed robot can only move if all of its extensible components are retracted
precond(AL, ROBO, move(L), configuration(DESC), retracted, true) :- action(AL, _, _, ROBO, move(L)),
                                                                    fluent(AL, inertial, configuration(DESC), retracted),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, extensible, DESC),
                                                                    insta_of(AL, location, L),
                                                                    state_of(AL, DESC, retracted),
                                                                    AL < reduc, pl(AL).

%% An armed robot can only grasp an object when it is in the same location as that object
precond(AL, ROBO, grasp(DESC, OBJ), in(OBJ), L, true, t) :- holds(AL, in(ROBO), L, t - 1), OBJ != nothing,
                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                            fluent(AL, inertial, in(OBJ), L),
                                                            fluent(AL, inertial, in(ROBO), L),
                                                            desce_of(AL, ROBO, DESC),
                                                            insta_of(AL, armed_robot, ROBO),
                                                            insta_of(AL, grasper, DESC),
                                                            insta_of(AL, graspable, OBJ),
                                                            insta_of(AL, location, L),
                                                            pl(AL).

precond(AL, ROBO, grasp(DESC, OBJ), in(ROBO), L, true, t) :- holds(AL, in(OBJ), L, t - 1), OBJ != nothing,
                                                             action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                             fluent(AL, inertial, in(OBJ), L),
                                                             fluent(AL, inertial, in(ROBO), L),
                                                             desce_of(AL, ROBO, DESC),
                                                             insta_of(AL, armed_robot, ROBO),
                                                             insta_of(AL, grasper, DESC),
                                                             insta_of(AL, graspable, OBJ),
                                                             insta_of(AL, location, L),
                                                             pl(AL).

%% An armed robot can only grasp an object with a given grasper if it is not currently grasping another object with that grasper
precond(AL, ROBO, grasp(DESC, OBJ), grasping(DESC), nothing, true) :- OBJ != nothing,
                                                                      action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                      fluent(AL, inertial, grasping(DESC), nothing),
                                                                      desce_of(AL, ROBO, DESC),
                                                                      insta_of(AL, armed_robot, ROBO),
                                                                      insta_of(AL, grasper, DESC),
                                                                      insta_of(AL, graspable, OBJ),
                                                                      pl(AL).

%% An armed robot cannot grasp an object that has another object on top of it
precond(AL, ROBO, grasp(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2, OBJ_1 != nothing,
                                                                  action(AL, _, _, ROBO, grasp(DESC, OBJ_1)),
                                                                  fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                  desce_of(AL, ROBO, DESC),
                                                                  insta_of(AL, armed_robot, ROBO),
                                                                  insta_of(AL, grasper, DESC),
                                                                  insta_of(AL, graspable, OBJ_1),
                                                                  insta_of(AL, surface, OBJ_1),
                                                                  insta_of(AL, placeable, OBJ_2),
                                                                  pl(AL).

%% An armed robot can only grasp an object with a grasper that is extensible if it is extended
precond(AL, ROBO, grasp(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                            action(AL, _, _, ROBO, grasp(DESC, OBJ)),
                                                                            fluent(AL, inertial, configuration(DESC), extended),
                                                                            desce_of(AL, ROBO, DESC),
                                                                            insta_of(AL, armed_robot, ROBO),
                                                                            insta_of(AL, grasper, DESC),
                                                                            insta_of(AL, extensible, DESC),
                                                                            insta_of(AL, graspable, OBJ),
                                                                            AL < reduc, pl(AL).

%% An armed robot can only grasp an object with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, grasp(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                action(AL, _, _, ROBO, grasp(DESC_1, OBJ)),
                                                                                fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                desce_of(AL, ROBO, DESC_1),              
                                                                                desce_of(AL, ROBO, DESC_2),
                                                                                siblings(AL, DESC_1, DESC_2),
                                                                                insta_of(AL, armed_robot, ROBO),
                                                                                insta_of(AL, grasper, DESC_1),
                                                                                not insta_of(AL, extensible, DESC_1),
                                                                                insta_of(AL, extensible, DESC_2),
                                                                                insta_of(AL, graspable, OBJ),
                                                                                AL < reduc, pl(AL).

%% An armed robot can only grasp an object with an end effector if that end effector is aligned with that object
precond(AL, ROBO, grasp(END, OBJ), configuration(END), aligned_with(OBJ), true) :- OBJ != nothing,
                                                                                   action(AL, _, _, ROBO, grasp(END, OBJ)),
                                                                                   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
                                                                                   desce_of(AL, ROBO, END),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, manipulator_end, END),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   state_of(AL, END, aligned_with(OBJ)),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only release an object when it is grasping that object
precond(AL, ROBO, release(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != nothing,
                                                                    action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                    fluent(AL, inertial, grasping(DESC), OBJ),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, graspable, OBJ),
                                                                    pl(AL).

%% An armed robot can only release an object from a grasper that is extensible if it is extended
precond(AL, ROBO, release(DESC, OBJ), configuration(DESC), extended, true) :- OBJ != nothing,
                                                                              action(AL, _, _, ROBO, release(DESC, OBJ)),
                                                                              fluent(AL, inertial, configuration(DESC), extended),
                                                                              desce_of(AL, ROBO, DESC),
                                                                              insta_of(AL, armed_robot, ROBO),
                                                                              insta_of(AL, grasper, DESC),
                                                                              insta_of(AL, graspable, OBJ),
                                                                              state_of(AL, DESC, extended),
                                                                              pl(AL), t > 0.

%% An armed robot can only release an object from a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, release(DESC_1, OBJ), configuration(DESC_2), extended, true) :- OBJ != nothing,
                                                                                  action(AL, _, _, ROBO, release(DESC_1, OBJ)),
                                                                                  fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                  desce_of(AL, ROBO, DESC_1),
                                                                                  desce_of(AL, ROBO, DESC_2),
                                                                                  siblings(AL, DESC_1, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  not insta_of(AL, extensible, DESC_1),
                                                                                  insta_of(AL, extensible, DESC_2),
                                                                                  insta_of(AL, graspable, OBJ),
                                                                                  pl(AL).

%% An armed robot can only change the configuration of the descendant components of its manipulator arms if the extensible descendant sibling components of that arm are extended
precond(AL, ROBO, configure(DESC_1, STATE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, configure(DESC_1, STATE)),
                                                                                      fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                      desce_of(AL, ROBO, DESC_1),
                                                                                      desce_of(AL, ROBO, DESC_2),
                                                                                      desce_of(AL, ROBO, ARM),
                                                                                      child_of(AL, ARM, DESC_1),
                                                                                      child_of(AL, ARM, DESC_2),
                                                                                      siblings(AL, DESC_1, DESC_2),
                                                                                      insta_of(AL, armed_robot, ROBO),
                                                                                      insta_of(AL, configurable, DESC_1),
                                                                                      insta_of(AL, extensible, DESC_2),
                                                                                      insta_of(AL, manipulator_arm, ARM),
                                                                                      state_of(AL, DESC_1, STATE),
                                                                                      AL < reduc, pl(AL).

%% An armed robot can only align an end effector with an object if it is grasping nothing with that end effector
precond(AL, ROBO, configure(DESC, aligned_with(OBJ)), grasping(DESC), nothing, true) :- action(AL, _, _, ROBO, configure(DESC, aligned_with(OBJ))),
                                                                                        fluent(AL, inertial, grasping(DESC), nothing),
                                                                                        desce_of(AL, ROBO, DESC),
                                                                                        insta_of(AL, armed_robot, ROBO),
                                                                                        insta_of(AL, manipulator_end, DESC),
                                                                                        insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                                        state_of(AL, DESC, aligned_with(OBJ)),
                                                                                        AL < reduc, pl(AL).

% An armed robot can only put an object on a surface when it is in the same location as that surface
precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(SURFACE), L, true, t) :- holds(AL, in(ROBO), L, t - 1),
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                       fluent(AL, inertial, in(SURFACE), L),
                                                                       fluent(AL, inertial, in(ROBO), L),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ),
                                                                       insta_of(AL, surface, SURFACE),
                                                                       insta_of(AL, location, L),
                                                                       pl(AL).

precond(AL, ROBO, put(DESC, OBJ, SURFACE), in(ROBO), L, true, t) :- holds(AL, in(SURFACE), L, t - 1),
                                                                    action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                    fluent(AL, inertial, in(SURFACE), L),
                                                                    fluent(AL, inertial, in(ROBO), L),
                                                                    desce_of(AL, ROBO, DESC),
                                                                    insta_of(AL, armed_robot, ROBO),
                                                                    insta_of(AL, grasper, DESC),
                                                                    insta_of(AL, placeable, OBJ),
                                                                    insta_of(AL, surface, SURFACE),
                                                                    insta_of(AL, location, L),
                                                                    pl(AL).

%% An armed robot cannot put an object on top of another object that already has some other object on top of it
precond(AL, ROBO, put(DESC, OBJ_1, BLOCK), on(OBJ_2), BLOCK, false) :- OBJ_1 != OBJ_2,
                                                                       action(AL, _, _, ROBO, put(DESC, OBJ_1, SURFACE)),
                                                                       fluent(AL, inertial, on(OBJ_2), BLOCK),
                                                                       desce_of(AL, ROBO, DESC),
                                                                       insta_of(AL, armed_robot, ROBO),
                                                                       insta_of(AL, grasper, DESC),
                                                                       insta_of(AL, placeable, OBJ_1),
                                                                       insta_of(AL, placeable, OBJ_2),
                                                                       insta_of(AL, block, BLOCK),
                                                                       pl(AL).

%% An armed robot can only put an object on a surface when it is grasping that object
precond(AL, ROBO, put(DESC, OBJ, SURFACE), grasping(DESC), OBJ, true) :- OBJ != SURFACE, OBJ != nothing, SURFACE != nothing,
                                                                         action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                         fluent(AL, inertial, grasping(DESC), OBJ),
                                                                         desce_of(AL, ROBO, DESC),
                                                                         insta_of(AL, armed_robot, ROBO),
                                                                         insta_of(AL, grasper, DESC),
                                                                         insta_of(AL, placeable, OBJ),
                                                                         insta_of(AL, surface, SURFACE),
                                                                         pl(AL).

%% An armed robot cannot put an object on another object if any robot is grasping the other object with any of its graspers
precond(AL, ROBO_1, put(DESC_1, OBJ_1, OBJ_2), grasping(DESC_2), OBJ_2, false) :- OBJ_1 != OBJ_2, DESC_1 != DESC_2,
                                                                                  action(AL, _, _, ROBO, put(DESC_1, OBJ_1, OBJ_2)),
                                                                                  fluent(AL, inertial, grasping(DESC_2), OBJ_2),
                                                                                  desce_of(AL, ROBO_1, DESC_1),
                                                                                  desce_of(AL, ROBO_2, DESC_2),
                                                                                  insta_of(AL, armed_robot, ROBO_1),
                                                                                  insta_of(AL, armed_robot, ROBO_2),
                                                                                  insta_of(AL, grasper, DESC_1),
                                                                                  insta_of(AL, grasper, DESC_2),
                                                                                  insta_of(AL, placeable, OBJ_1),
                                                                                  insta_of(AL, surface, OBJ_2),
                                                                                  insta_of(AL, graspable, OBJ_2),
                                                                                  pl(AL).

%% An armed robot can only put an object on a surface with a grasper that is extensible if it is extended
precond(AL, ROBO, put(DESC, OBJ, SURFACE), configuration(DESC), extended, true) :- action(AL, _, _, ROBO, put(DESC, OBJ, SURFACE)),
                                                                                   fluent(AL, inertial, configuration(DESC), extended),
                                                                                   desce_of(AL, ROBO, DESC),
                                                                                   insta_of(AL, armed_robot, ROBO),
                                                                                   insta_of(AL, grasper, DESC),
                                                                                   insta_of(AL, extensible, DESC),
                                                                                   insta_of(AL, graspable, OBJ),
                                                                                   insta_of(AL, surface, SURFACE),
                                                                                   AL < reduc, pl(AL).

%% An armed robot can only put an object on aa surface with a grasper that is not extensible but has extensible siblings is those siblings are extended
precond(AL, ROBO, put(DESC_1, OBJ, SURFACE), configuration(DESC_2), extended, true) :- action(AL, _, _, ROBO, put(DESC_1, OBJ, SURFACE)),
                                                                                       fluent(AL, inertial, configuration(DESC_2), extended),
                                                                                       desce_of(AL, ROBO, DESC_1),
                                                                                       desce_of(AL, ROBO, DESC_2),
                                                                                       siblings(AL, DESC_1, DESC_2),
                                                                                       insta_of(AL, armed_robot, ROBO),
                                                                                       insta_of(AL, grasper, DESC_1),
                                                                                       not insta_of(AL, extensible, DESC_1),
                                                                                       insta_of(AL, extensible, DESC_2),
                                                                                       insta_of(AL, graspable, OBJ),
                                                                                       insta_of(AL, surface, SURFACE),
                                                                                       AL < reduc, pl(AL).

%% An armed robot cannot lift a grasped object that has another object on top of it
precond(AL, ROBO, lift(DESC, OBJ_1), on(OBJ_2), OBJ_1, false) :- OBJ_1 != OBJ_2,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ_1)),
                                                                 fluent(AL, inertial, on(OBJ_2), OBJ_1),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, placeable, OBJ_1),
                                                                 insta_of(AL, surface, OBJ_1),
                                                                 insta_of(AL, placeable, OBJ_2),
                                                                 pl(AL).

%% An armed robot can only lift a block that it is grasping
precond(AL, ROBO, lift(DESC, OBJ), grasping(DESC), OBJ, true) :- OBJ != SURFACE,
                                                                 action(AL, _, _, ROBO, lift(DESC, OBJ)),
                                                                 fluent(AL, inertial, grasping(DESC), OBJ),
                                                                 desce_of(AL, ROBO, DESC),
                                                                 insta_of(AL, armed_robot, ROBO),
                                                                 insta_of(AL, grasper, DESC),
                                                                 insta_of(AL, graspable, OBJ), OBJ != nothing,
                                                                 insta_of(AL, surface, SURFACE),
                                                                 pl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program variable_relations(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% State Variable Relations and Validity Constraints - Rules constraining the range of valid states
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If any of a robot is grasping an object then that object must share its location
:- holds(AL, grasping(DESC), OBJ, t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, grasping(DESC), OBJ),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   sl(AL).

%% If any of a robot's end effectors are aligned with an object then that object must share its location
:- holds(AL, configuration(END), aligned_with(OBJ), t),
   holds(AL, in(ROBO), L, t),
   not holds(AL, in(OBJ), L, t) : not insta_of(AL, grounded, OBJ),
                                  fluent(AL, inertial, in(OBJ), L);
   not is(AL, in(OBJ, L)) : insta_of(AL, grounded, OBJ),
                            static(AL, in(OBJ, L));
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   fluent(AL, inertial, in(ROBO), L),
   desce_of(AL, ROBO, END),
   insta_of(AL, robot, ROBO),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   insta_of(AL, location, L),
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% If a robot is grasping an object with an end effector then that end effector must be aligned with the object
:- holds(AL, grasping(END), OBJ, t),
   not holds(AL, configuration(END), aligned_with(OBJ), t),
   fluent(AL, inertial, grasping(END), OBJ),
   fluent(AL, inertial, configuration(END), aligned_with(OBJ)),
   insta_of(AL, manipulator_end, END),
   insta_of(AL, graspable, OBJ), OBJ != nothing,
   state_of(AL, END, aligned_with(OBJ)),
   sl(AL).

%% A robot cannot be grasping an object that has another object on top of it
:- holds(AL, grasping(DESC), OBJ_1, t),
   holds(AL, on(OBJ_2), OBJ_1, t),
   fluent(AL, inertial, grasping(DESC), OBJ_1),
   fluent(AL, inertial, on(OBJ_2), OBJ_1),
   desce_of(AL, ROBO, DESC),
   insta_of(AL, robot, ROBO),
   insta_of(AL, grasper, DESC),
   insta_of(AL, graspable, OBJ_1), OBJ_1 != nothing,
   insta_of(AL, surface, OBJ_1),
   insta_of(AL, placeable, OBJ_2),
   sl(AL).

%% If an object is on a surface then that object shares the location of the surface
:- holds(AL, on(OBJ), SURFACE, t),
   holds(AL, in(SURFACE), L, t),
   not holds(AL, in(OBJ), L, t),
   fluent(AL, inertial, on(OBJ), SURFACE),
   fluent(AL, inertial, in(SURFACE), L),
   fluent(AL, inertial, in(OBJ), L),
   insta_of(AL, location, L),
   insta_of(AL, location, L),
   insta_of(AL, surface, SURFACE),
   insta_of(AL, object, OBJ),
   sl(AL).

%% A block cannot be on a block that is on nothing
:- holds(AL, on(BLOCK_1), BLOCK_2, t),
   holds(AL, on(BLOCK_2), nothing, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_2),
   fluent(AL, inertial, on(BLOCK_2), nothing),
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   sl(AL).

%% Two blocks cannot be on top of the same block
:- holds(AL, on(BLOCK_1), BLOCK_3, t),
   holds(AL, on(BLOCK_2), BLOCK_3, t),
   fluent(AL, inertial, on(BLOCK_1), BLOCK_3),
   fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
   BLOCK_1 != BLOCK_2,
   insta_of(AL, block, BLOCK_1),
   insta_of(AL, block, BLOCK_2),
   insta_of(AL, block, BLOCK_3),
   sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Definitions - Rules defining the truth of defined fluents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% A block is the base of a tower if it is either:
%%      - On a table
%%      - On a descenant surface of a table
holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), TABLE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), TABLE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

holds(AL, tower_base(BASE), true, t) :- holds(AL, on(BASE), SURFACE, t),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        fluent(AL, inertial, on(BASE), SURFACE),
                                        desce_of(AL, TABLE, SURFACE),
                                        insta_of(AL, block, BASE),
                                        insta_of(AL, surface, SURFACE),
                                        insta_of(AL, table, TABLE),
                                        sl(AL).

%% A block is in a tower if it is either:
%%      - The base of the tower
%%      - On a block that is in the tower
holds(AL, in_tower(BASE, BASE), true, t) :- holds(AL, tower_base(BASE), true, t),
                                            fluent(AL, defined, in_tower(BASE, BASE), true),
                                            fluent(AL, defined, tower_base(BASE), true),
                                            insta_of(AL, block, BASE),
                                            sl(AL).

holds(AL, in_tower(BLOCK_1, BLOCK_2), true, t) :- holds(AL, on(BLOCK_2), BLOCK_3, t),
                                                  holds(AL, in_tower(BLOCK_1, BLOCK_3), true, t),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_2), true),
                                                  fluent(AL, defined, in_tower(BLOCK_1, BLOCK_3), true),
                                                  fluent(AL, inertial, on(BLOCK_2), BLOCK_3),
                                                  BLOCK_1 != BLOCK_2,
                                                  insta_of(AL, block, BLOCK_1),
                                                  insta_of(AL, block, BLOCK_2),
                                                  insta_of(AL, block, BLOCK_3),
                                                  sl(AL).

%% A tower that is not stacked in descending order from top to bottom is unordered
holds(AL, unordered_tower(BASE), true, t) :- holds(AL, on(BLOCK_1), BLOCK_2, t),
                                             holds(AL, in_tower(BASE, BLOCK_1), true, t),
                                             holds(AL, in_tower(BASE, BLOCK_2), true, t),
                                             holds(AL, tower_base(BASE), true, t),
                                             fluent(AL, defined, unordered_tower(BASE), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_1), true),
                                             fluent(AL, defined, in_tower(BASE, BLOCK_2), true),
                                             fluent(AL, defined, tower_base(BASE), true),
                                             fluent(AL, inertial, on(BLOCK_1), BLOCK_2),     
                                             BLOCK_1 = (block, N_1), block_number(N_1),
                                             BLOCK_2 = (block, N_2), block_number(N_2),
                                             BLOCK_1 != BLOCK_2, N_1 > N_2,
                                             insta_of(AL, block, BLOCK_1),
                                             insta_of(AL, block, BLOCK_2),
                                             insta_of(AL, block, BASE),
                                             sl(AL).

%% A tower is complete if it contains of the blocks of a particular colour and they are stacked in descending order from top to bottom
holds(AL, complete(COLOUR), true, t) :- N = #count { BLOCK : holds(AL, in_tower(BASE, BLOCK), true, t),
                                                             is(AL, colour_of(BLOCK, COLOUR)),
                                                             fluent(AL, defined, in_tower(BASE, BLOCK), true),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        N = #count { BLOCK : is(AL, colour_of(BLOCK, COLOUR)),
                                                             static(AL, colour_of(BLOCK, COLOUR)),
                                                             insta_of(AL, block, BLOCK) },
                                        holds(AL, unordered_tower(BASE), false, t),
                                        holds(AL, tower_base(BASE), true, t),
                                        fluent(AL, defined, unordered_tower(BASE), true),
                                        fluent(AL, defined, tower_base(BASE), true),
                                        is(AL, colour_of(BASE, COLOUR)),
                                        static(AL, colour_of(BASE, COLOUR)),
                                        insta_of(AL, colour, COLOUR),
                                        insta_of(AL, block, BASE),
                                        sl(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%**% #program abstraction_mappings(t).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Abstraction Mappings - The mappings between the static state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Abstraction rule for connectedness of locations that have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1_C, L_2_C)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1_C, L_2_C)),
                                 L_1 != L_2,
                                 desce_of(AL_2, L_1, L_1_C),
                                 desce_of(AL_2, L_2, L_2_C),
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1_C),
                                 insta_of(AL_2, location, L_2_C),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for connectedness of locations that do not have descendants
is(AL_1, connected(L_1, L_2)) :- is(AL_2, connected(L_1, L_2)),
                                 static(AL_1, connected(L_1, L_2)),
                                 static(AL_2, connected(L_1, L_2)),
                                 L_1 != L_2,
                                 insta_of(AL_1, location, L_1),
                                 insta_of(AL_1, location, L_2),
                                 insta_of(AL_2, location, L_1),
                                 insta_of(AL_2, location, L_2),
                                 al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for locations that are connected by doors
is(AL_1, connected_by_door(D, L_1, L_2)) :- is(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            static(AL_1, connected_by_door(D, L_1, L_2)),
                                            static(AL_2, connected_by_door(D, L_1_C, L_2_C)),
                                            L_1 != L_2,
                                            desce_of(AL_2, L_1, L_1_C),
                                            desce_of(AL_2, L_2, L_2_C),
                                            insta_of(AL_1, door, D),
                                            insta_of(AL_2, door, D),
                                            insta_of(AL_1, location, L_1),
                                            insta_of(AL_1, location, L_2),
                                            insta_of(AL_2, location, L_1_C),
                                            insta_of(AL_2, location, L_2_C),
                                            al(AL_1), al(AL_2), AL_1 >= AL_2.

%% Abstraction rule for the location of grounded objects
is(AL_1, in(OBJ, L_1)) :- is(AL_2, in(OBJ, L_2)),
                          static(AL_1, in(OBJ, L_1)),
                          static(AL_2, in(OBJ, L_2)),
                          desce_of(AL_2, L_1, L_2),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_1, object, OBJ),
                          insta_of(AL_1, grounded, OBJ),
                          insta_of(AL_1, location, L_1),
                          insta_of(AL_2, location, L_2),
                          al(AL_1), al(AL_2), AL_1 >= AL_2.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Fluent Abstraction Mappings - The mappings between the dynamic state represention at adjacent abstraction levels are defined here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% If an object is in a location that is a descendant of some ancester location then that
%% object is also located in the ancestor location at the current and higher abstractions
holds(AL_1, in(OBJ), L_1, t) :- holds(AL_2, in(OBJ), L_2, t),
                                fluent(AL_1, inertial, in(OBJ), L_1),
                                fluent(AL_2, inertial, in(OBJ), L_2),
                                desce_of(AL_2, L_1, L_2),
                                insta_of(AL_1, location, L_1),
                                insta_of(AL_2, location, L_2),
                                insta_of(AL_3, object, OBJ),
                                sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                sl(AL_3), AL_3 >= AL_1.

%% If an object is in a location then it is in that location at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(OBJ), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(OBJ), L),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1.

%% If an object has any descendants then those descendants share the location of the object at the current and higher abstractions
holds(AL_1, in(DESC), L, t) :- holds(AL_2, in(OBJ), L, t),
                               fluent(AL_1, inertial, in(DESC), L),
                               fluent(AL_2, inertial, in(OBJ), L),
                               desce_of(AL_2, OBJ, DESC),
                               insta_of(AL_1, location, L),
                               insta_of(AL_2, location, L),
                               insta_of(AL_3, object, OBJ),
                               insta_of(AL_4, _, DESC),
                               sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                               sl(AL_3), AL_3 >= AL_2,
                               sl(AL_4), AL_4 >= AL_1.

%% If an object has any descendants then the object shares the location of its descendants at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(DESC), L, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(DESC), L),
                              desce_of(AL_2, OBJ, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, object, OBJ),
                              insta_of(AL_4, _, DESC),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_2.

%% If a robot is grasping an object then that object shares the location of the robot at the current and higher abstractions
holds(AL_1, in(OBJ), L, t) :- holds(AL_2, in(ROBO), L, t),
                              holds(AL_3, grasping(DESC), OBJ, t),
                              fluent(AL_1, inertial, in(OBJ), L),
                              fluent(AL_2, inertial, in(ROBO), L),
                              fluent(AL_3, inertial, grasping(DESC), OBJ),
                              desce_of(AL_2, ROBO, DESC),
                              insta_of(AL_1, location, L),
                              insta_of(AL_2, location, L),
                              insta_of(AL_3, graspable, OBJ), OBJ != nothing,
                              insta_of(AL_4, grasper, DESC),
                              insta_of(AL_5, robot, ROBO),
                              sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                              sl(AL_3), AL_3 >= AL_1,
                              sl(AL_4), AL_4 >= AL_3,
                              sl(AL_5), AL_5 >= AL_3.

%% If a robot is grasping a graspble object with any of its graspers which is a descendant of some ancestor graspable object then
%% the robot is also grasping the ancestor object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ_1, t) :- holds(AL_2, grasping(DESC), OBJ_2, t),
                                         fluent(AL_1, inertial, grasping(DESC), OBJ_1),
                                         fluent(AL_2, inertial, grasping(DESC), OBJ_2),
                                         desce_of(AL_2, ROBO, DESC),
                                         desce_of(AL_2, OBJ_1, OBJ_2),
                                         insta_of(AL_1, graspable, OBJ_1),
                                         insta_of(AL_2, graspable, OBJ_2),
                                         insta_of(AL_3, grasper, DESC),
                                         insta_of(AL_4, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers which is itself a descendant of an ancestor grasper then
%% the robot is also grasping the same object with the ancestor grasper at the current and higher abstractions
holds(AL_1, grasping(DESC_1), OBJ, t) :- holds(AL_2, grasping(DESC_2), OBJ, t),
                                         fluent(AL_1, inertial, grasping(DESC_1), OBJ),
                                         fluent(AL_2, inertial, grasping(DESC_2), OBJ),
                                         desce_of(AL_2, ROBO, DESC_1),
                                         desce_of(AL_2, ROBO, DESC_2),
                                         desce_of(AL_2, DESC_1, DESC_2),
                                         insta_of(AL_1, graspable, OBJ),
                                         insta_of(AL_2, graspable, OBJ),
                                         insta_of(AL_3, grasper, DESC_1),
                                         insta_of(AL_4, grasper, DESC_2),
                                         insta_of(AL_5, robot, ROBO),
                                         sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                         sl(AL_3), AL_3 >= AL_1,
                                         sl(AL_4), AL_4 >= AL_2,
                                         sl(AL_5), AL_5 >= AL_1.

%% If a robot is grasping a graspable object with any of its graspers then the
%% robot is grasping that object with that grasper at the current and higher abstractions
holds(AL_1, grasping(DESC), OBJ, t) :- holds(AL_2, grasping(DESC), OBJ, t),
                                       fluent(AL_1, inertial, grasping(DESC), OBJ),
                                       fluent(AL_2, inertial, grasping(DESC), OBJ),
                                       desce_of(AL_2, ROBO, DESC),
                                       insta_of(AL_1, graspable, OBJ),
                                       insta_of(AL_2, graspable, OBJ),
                                       insta_of(AL_3, grasper, DESC),
                                       insta_of(AL_4, robot, ROBO),
                                       sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                       sl(AL_3), AL_3 >= AL_1,
                                       sl(AL_4), AL_4 >= AL_1,
                                       boolean(B).

%% If a configurable entity has configurable descendants which share the same configuration states then the
%% ancestors have the same configuration state as their descendants at the current and higher abstractions
holds(AL_1, configuration(DESC_1), STATE, t) :- holds(AL_2, configuration(DESC_2), STATE, t),
                                                      fluent(AL_1, inertial, configuration(DESC_1), STATE),
                                                      fluent(AL_2, inertial, configuration(DESC_2), STATE),
                                                      desce_of(AL_2, DESC_1, DESC_2),
                                                      state_of(AL_1, DESC_1, STATE),
                                                      state_of(AL_2, DESC_2, STATE),
                                                      insta_of(AL_1, configurable, DESC_1),
                                                      insta_of(AL_2, configurable, DESC_2),
                                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If a configurable entity has the same configuration state at the current and higher abstractions
holds(AL_1, configuration(DESC), STATE, t) :- holds(AL_2, configuration(DESC), STATE, t),
                                              fluent(AL_1, inertial, configuration(DESC), STATE),
                                              fluent(AL_2, inertial, configuration(DESC), STATE),
                                              state_of(AL_1, DESC, STATE),
                                              state_of(AL_2, DESC, STATE),
                                              insta_of(AL_1, configurable, DESC),
                                              insta_of(AL_2, configurable, DESC),
                                              sl(AL_1), sl(AL_2), AL_1 >= AL_2.

%% If an object is on a surface that is a descendant of some ancester surface then that
%% object is also on the ancestor surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE_1, t) :- holds(AL_2, on(OBJ), SURFACE_2, t),
                                      fluent(AL_1, inertial, on(OBJ), SURFACE_1),
                                      fluent(AL_2, inertial, on(OBJ), SURFACE_2),
                                      desce_of(AL_2, SURFACE_1, SURFACE_2),
                                      insta_of(AL_1, surface, SURFACE_1),
                                      insta_of(AL_2, surface, SURFACE_2),
                                      insta_of(AL_3, placeable, OBJ),
                                      sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                      sl(AL_3), AL_3 >= AL_1.

%% If an object is on a surface then it is on that surface at the current and higher abstractions
holds(AL_1, on(OBJ), SURFACE, t) :- holds(AL_2, on(OBJ), SURFACE, t),
                                    fluent(AL_1, inertial, on(OBJ), SURFACE),
                                    fluent(AL_2, inertial, on(OBJ), SURFACE),
                                    insta_of(AL_1, surface, SURFACE),
                                    insta_of(AL_2, surface, SURFACE),
                                    insta_of(AL_3, placeable, OBJ),
                                    sl(AL_1), sl(AL_2), AL_1 >= AL_2,
                                    sl(AL_3), AL_3 >= AL_1.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% The Blocks World Plus Planning Domain                                 %%
%% Copyright (C)  2021  Oliver Michael Kamperis                          %%
%% Email: o.m.kamperis@gmail.com                                         %%
%%                                                                       %%
%% This program is free software: you can redistribute it and/or modify  %%
%% it under the terms of the GNU General Public License as published by  %%
%% the Free Software Foundation, either version 3 of the License, or     %%
%% any later version.                                                    %%
%%                                                                       %%
%% This program is distributed in the hope that it will be useful,       %%
%% but WITHOUT ANY WARRANTY; without even the implied warranty of        %%
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          %%
%% GNU General Public License for more details.                          %%
%%                                                                       %%
%% You should have received a copy of the GNU General Public License     %%
%% along with this program. If not, see <https://www.gnu.org/licenses/>. %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Static Domain State - The static domain structure is defined here
%**% #program static_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Definitions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Room Layout
%%                                ___________________
%%                               |                   |
%%                               |   starting_room   |
%%                               |___________________|
%%                                         ^
%%      ___________________       _________v_________       ___________________
%%     |                   |     |                   |     |                   |
%%     |    store_room     | <-> |      hallway      | <-> |    puzzle_room    |
%%     |___________________|     |___________________|     |___________________|
%%

%% Cell connections between rooms
is(1, connected((starting_room, 1), (hallway, 1))).
is(1, connected((store_room, 1), (hallway, 0))).
is(1, connected((hallway, 2), (puzzle_room, 0))).

%% Door connection between the hallway and the puzzle room
is(1, connected_by_door(store_room_door, (store_room, 1), (hallway, 0))).
% is(1, connected_by_door(starting_room_door, (starting_room, 1), (hallway, 1))).
is(1, connected_by_door(puzzle_room_door, (hallway, 2), (puzzle_room, 0))).

%% The door's handles are located on either side of it
is(1, in(store_room_door_handle_inner, (store_room, 1))).
is(1, in(store_room_door_handle_outer, (hallway, 0))).
is(1, in(starting_room_door_handle_inner, (starting_room, 1))).
is(1, in(starting_room_door_handle_outer, (hallway, 1))).
is(1, in(puzzle_room_door_handle_inner, (puzzle_room, 0))).
is(1, in(puzzle_room_door_handle_outer, (hallway, 2))).

%% Block colouring
is(AL, colour_of((BLOCK, N), red)) :- static(AL, colour_of((BLOCK, N), red)),
                                      insta_of(AL, block, (BLOCK, N)),
                                      N <= 3, al(AL).
is(AL, colour_of((BLOCK, N), blue)) :- static(AL, colour_of((BLOCK, N), blue)),
                                       insta_of(AL, block, (BLOCK, N)),
                                       N > 3, N <= 6, al(AL).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Static Relations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Adjacent cells are connected
is(1, connected((A, X_1), (A, X_2))) :- insta_of(1, cell, (A, X_1)),
                                        insta_of(1, cell, (A, X_2)),
                                        X_2 = X_1 + 1.

%% Reversability of cell connections
is(1, connected(C_1, C_2)) :- is(1, connected(C_2, C_1)),
                              insta_of(1, cell, C_1),
                              insta_of(1, cell, C_2).

%% Reversibilty of door connections between cells
is(1, connected_by_door(D, C_1, C_2)) :- is(1, connected_by_door(D, C_2, C_1)),
                                         insta_of(1, door, D),
                                         insta_of(1, cell, C_1),
                                         insta_of(1, cell, C_2).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Specific initial state
%**% #program initial_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos starts in the starting room
holds(1, in(talos), (starting_room, 0), 0).

%% Talos start with nothing in its grasp
holds(AL, grasping(DESC), nothing, 0) :- fluent(AL, inertial, grasping(DESC), nothing),
                                         insta_of(AL, grasper, DESC),
                                         al(AL).

%% Talos starts with its extensible descendants retracted
holds(AL, configuration(DESC), retracted, 0) :- fluent(AL, inertial, configuration(DESC), retracted),
                                                insta_of(AL, extensible, DESC),
                                                sl(AL).

%% Talos starts with its end effectors aligned with nothing
holds(1, configuration(END), aligned_with(nothing), 0) :- fluent(AL, inertial, configuration(END), aligned_with(nothing)),
                                                          insta_of(AL, manipulator_end, END),
                                                          state_of(AL, END, aligned_with(nothing)),
                                                          sl(AL).

%% The doors start closed
holds(1, configuration(DOOR), closed, 0) :- fluent(AL, inertial, configuration(DOOR), closed),
                                            insta_of(AL, door, DOOR),
                                            state_of(AL, DOOR, closed),
                                            sl(AL).

%% The puzzle room table is in the puzzle room
holds(1, in(puzzle_room_table), (puzzle_room, 1), 0).

%% The first four blocks are stacked on the puzzle room table
holds(1, on((block, 1)), puzzle_room_table_left, 0).
holds(1, on((block, 2)), puzzle_room_table_right, 0).
holds(1, on((block, 3)), (block, 1), 0).
% holds(1, on((block, 4)), (block, 2), 0).

%% The other three blocks are on the floor in the store room
holds(1, in((block, 4)), (store_room, 0), 0).
holds(1, in((block, 5)), (store_room, 0), 0).
holds(1, in((block, 6)), (store_room, 0), 0).
holds(1, on((block, 4)), nothing, 0).
holds(1, on((block, 5)), nothing, 0).
holds(1, on((block, 6)), nothing, 0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Goals - The specific goal states the robot(s) must satisfy are defined here
%**% #program goal_state.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% The fluents pertinent to the goal state are the placement of blocks and the completeness of the towers
goal_fluent(AL, complete(COLOUR)) :- insta_of(AL, colour, COLOUR), al(AL).
goal_fluent(AL, unordered_tower(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, in_tower(BASE, BLOCK)) :- insta_of(AL, block, BASE), insta_of(AL, block, BLOCK), al(AL).
goal_fluent(AL, tower_base(BASE)) :- insta_of(AL, block, BASE), al(AL).
goal_fluent(AL, on(BLOCK)) :- insta_of(AL, block, BLOCK), al(AL).

%% The goal is to put block 2 on the left hand side of the table in puzzle room 2 whilst leaving block 1 on the table in puzzle room 1
final_goal(AL, complete(COLOUR), true, true) :- insta_of(AL, colour, COLOUR), al(AL).
final_goal(1, on((block, 3)), puzzle_room_table_left, true).
final_goal(1, on((block, 6)), puzzle_room_table_right, true).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Entities and Component Relations
%**% #program entities.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%s%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Instance Declarations - entity(CLS, EN) declares an entity EN of class CLS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Talos is an armed robot
entity(armed_robot, talos).

%% Talos has two manipulator arms, each of which is composed on a limb and end effector
entity(manipulator_arm, manipulator_arm_1).
entity(manipulator_limb, manipulator_limb_1).
entity(manipulator_end, manipulator_end_1).
entity(manipulator_arm, manipulator_arm_2).
entity(manipulator_limb, manipulator_limb_2).
entity(manipulator_end, manipulator_end_2).

%% There are six blocks
block_number(1..6).
entity(block, (block, N)) :- block_number(N).

%% There are four rooms
entity(room, starting_room).
entity(room, store_room).
entity(room, puzzle_room).
entity(room, hallway).

%% All the rooms have two cells except the hallway which has three
x(0..3).
size(starting_room, 2).
size(store_room, 2).
size(hallway, 3).
size(puzzle_room, 2).
entity(cell, (ROOM, X)) :- entity(room, ROOM), size(ROOM, MAX), X < MAX, x(X).

%% The is one door between the hallway and the puzzle room
entity(door, store_room_door).
entity(door, starting_room_door).
entity(door, puzzle_room_door).

%% The door has two handles
entity(handle, store_room_door_handle_inner).
entity(handle, store_room_door_handle_outer).
entity(handle, starting_room_door_handle_inner).
entity(handle, starting_room_door_handle_outer).
entity(handle, puzzle_room_door_handle_inner).
entity(handle, puzzle_room_door_handle_outer).

%% There is one table in the puzzle room
entity(table, puzzle_room_table).

%% The table has three sides
entity(side, puzzle_room_table_left).
entity(side, puzzle_room_table_right).

%% Available colours
entity(colour, red).
entity(colour, blue).

%% Entity constant for nothing
entity(surface, nothing).
entity(graspable, nothing).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Entity Ancestry Relationships - ancestry_relation(EN, DESCE) delcares that entity EN has a descendant DESCE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Relations between Talos and his manipulator arms
ancestry_relation(talos, manipulator_arm_1).
ancestry_relation(talos, manipulator_arm_2).

%% Relations between Talos' manipulator arms, and the limbs and end-effectors that compose them
ancestry_relation(manipulator_arm_1, manipulator_limb_1).
ancestry_relation(manipulator_arm_2, manipulator_limb_2).
ancestry_relation(manipulator_arm_1, manipulator_end_1).
ancestry_relation(manipulator_arm_2, manipulator_end_2).

%% Relations between rooms and the cells that compose them
ancestry_relation(ROOM, (ROOM, X)) :- entity(room, ROOM), entity(cell, (ROOM, X)), x(X).

%% Relations between the puzzle room door and its handles
ancestry_relation(store_room_door, store_room_door_handle_inner).
ancestry_relation(store_room_door, store_room_door_handle_outer).
ancestry_relation(starting_room_door, starting_room_door_handle_inner).
ancestry_relation(starting_room_door, starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door, puzzle_room_door_handle_outer).

%% Relations betweens the puzzle room table and its sides
ancestry_relation(puzzle_room_table, puzzle_room_table_left).
ancestry_relation(puzzle_room_table, puzzle_room_table_right).

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Logic program code parsed successfully.

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Input storing variables set.

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Resetting output storing variables.

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Output storing variables reset.

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Logic program instantiated successfully.

[13-11-2021_23-39-12] DEBUG :: ASH Planner Main #1 >> Instantiated with program:
LogicProgram(#program base.
#program abstraction_levels(planning_level, mode).
al((1..abstraction_max)).
pl(AL) :- AL = planning_level; al(AL).
sl(AL) :- AL = planning_level; mode = classical; al(AL).
sl(AL) :- AL >= planning_level; AL <= (planning_level+1); mode = refinement; al(AL).
sl(AL) :- AL >= planning_level; AL <= abstraction_max; mode = hierarchical; al(AL).
#program instance_module.
boolean(true;false).
insta_of(AL,CLS,EN) :- entity(CLS,EN); class(AL,CLS); al(AL).
insta_of(AL_3,CLS_1,EN) :- insta_of(AL_2,CLS_2,EN); super_class(CLS_1,CLS_2); entity(CLS_3,EN); class(AL_3,CLS_3); class(AL_1,CLS_1); AL_1 >= AL_2; al(AL_1); al(AL_2); al(AL_3).
insta_of((AL-1),CLS,EN) :- insta_of(AL,CLS,EN); not overridden((AL-1),CLS,EN); class(_,CLS); al(AL); al((AL-1)).
overridden((AL-1),CLS,EN_1) :- overridden_by((AL-1),CLS,EN_1,EN_2); insta_of(AL,CLS,EN_1); insta_of((AL-1),CLS,EN_2); class(_,CLS); al(AL); al((AL-1)).
overridden_by((AL-1),CLS_3,EN_1,EN_2) :- insta_of(AL,CLS_1,EN_1); insta_of((AL-1),CLS_2,EN_2); insta_of(AL,CLS_3,EN_1); insta_of((AL-1),CLS_3,EN_2); desce_of((AL-1),EN_1,EN_2); override_class(CLS_1,CLS_2,CLS_3); class(_,CLS_1); class(_,CLS_2); class(_,CLS_3); al(AL); al((AL-1)).
state_of(AL,EN,S) :- state(AL,CLS,S); insta_of(AL,CLS,EN); al(AL).
child_of(AL,EN,DESCE) :- ancestry_relation(EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE) :- child_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
desce_of(AL,EN,DESCE_1) :- desce_of(AL,DESCE_2,DESCE_1); desce_of(AL,EN,DESCE_2); insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
has_desce(AL,EN) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,_,DESCE); al(AL).
has_desce(AL,EN,CLS) :- desce_of(AL,EN,DESCE); insta_of(AL,_,EN); insta_of(AL,CLS,DESCE); al(AL).
siblings(AL,DESCE_1,DESCE_2) :- child_of(AL,EN,DESCE_1); child_of(AL,EN,DESCE_2); DESCE_1 != DESCE_2; insta_of(AL,_,EN); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
siblings(AL,DESCE_2,DESCE_1) :- siblings(AL,DESCE_1,DESCE_2); insta_of(AL,_,DESCE_1); insta_of(AL,_,DESCE_2); al(AL).
#program state_module(step, start).
{ holds(AL,F,V,step) } :- fluent(AL,inertial,F,V); sl(AL); step = start.
#false :- not 1 = { holds(AL,F,V,step): fluent(AL,_,F,V) }; fluent(AL,_,F,_); sl(AL).
holds(AL,F,V,step) :- holds(AL,F,V,(step-1)); not not holds(AL,F,V,step); fluent(AL,inertial,F,V); sl(AL); step > start.
holds(AL,F,false,step) :- not holds(AL,F,true,step); fluent(AL,defined,F,B); boolean(B); sl(AL).
#program plan_module(step, start, concurrency, achieve_fgoals).
{ occurs(AL,ROBOT,A,step): action(AL,_,_,ROBOT,A) } :- pl(AL); step > start.
occurs(AL,ROBOT,step) :- occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); pl(AL); step > start.
occurs(AL,step) :- occurs(AL,ROBOT,step); insta_of(AL,robot,ROBOT); pl(AL); step > start.
#false :- not 1 = { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = false.
#false :- not 1 <= { occurs(AL,R,A,step): action(AL,_,_,ROBOT,A) }; pl(AL); step > start; concurrency = true.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
holds(AL,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true,step); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,true); not holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false,step); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A,step); precond(AL,ROBOT,A,F,V,false); holds(AL,F,V,(step-1)); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); step > start.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,_,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = false.
#false :- occurs(AL,ROBOT,A_1,step); occurs(AL,ROBOT,A_2,step); A_1 != A_2; action(AL,sequential,_,ROBOT,A_1); action(AL,_,_,ROBOT,A_2); pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); effect(AL,ROBOT_2,A_2,F,V_2); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; ROBOT_1 != ROBOT_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1,step); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V,step); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V_1); precond(AL,ROBOT_2,A_2,F,V_2,true); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V_1); fluent(AL,inertial,F,V_2); A_1 != A_2; V_1 != V_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false,step); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#false :- occurs(AL,ROBOT_1,A_1,step); occurs(AL,ROBOT_2,A_2,step); effect(AL,ROBOT_1,A_1,F,V); precond(AL,ROBOT_2,A_2,F,V,false); action(AL,concurrent,_,ROBOT_1,A_1); action(AL,concurrent,_,ROBOT_2,A_2); fluent(AL,inertial,F,V); A_1 != A_2; pl(AL); step > start; concurrency = true.
#external seq_achieve_fgoals(step). [false]
enforce_achieve_fgoals(step) :- achieve_fgoals = true.
enforce_achieve_fgoals(step) :- 0 <= S; S <= step; seq_achieve_fgoals(S).
goal_satisfied(AL,F,V,true,step) :- final_goal(AL,F,V,true); holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
goal_satisfied(AL,F,V,false,step) :- final_goal(AL,F,V,false); not holds(AL,F,V,step); fluent(AL,_,F,V); pl(AL); enforce_achieve_fgoals(step).
incomplete_plan(step) :- final_goal(AL,F,V,B); not goal_satisfied(AL,F,V,B,step); fluent(AL,_,F,V); pl(AL); boolean(B); enforce_achieve_fgoals(step).
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V,step); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
sub_goal(AL,ROBOT,A,F,V,step) :- occurs(AL,ROBOT,A,step); effect(AL,ROBOT,A,F,V); action(AL,_,_,ROBOT,A); fluent(AL,inertial,F,V); pl(AL); AL != 1; step > start.
#program optimisation_module(step, start, minimise_actions, preempt_pos_fgoals, preempt_neg_fgoals, order_fgoals_achievement).
:~ occurs(AL,ROBOT,A,step); action(AL,_,_,ROBOT,A); incomplete_plan((step-1)); pl(AL); step > start; minimise_actions = true. [1@2,ROBOT,A,step]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,true); pl(AL); step > start; preempt_pos_fgoals = true. [10@1,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); final_goal(AL,F,V,false); pl(AL); step > start; preempt_neg_fgoals = true. [10@0,false]
:~ goal_satisfied(AL,F,V,B,step); goal_order(AL,F,V,B,ORDER); final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B); max_order(M). [(((M+1)-ORDER)*-step)@4,AL,F,V,B]
max_order(M) :- M = #max { ORDER: goal_order(AL,F,V,B,ORDER) }; final_goal(AL,F,V,B); fluent(AL,_,F,V); pl(AL); boolean(B).
#program check(step).
:~ gen_search_space_at(step); incomplete_plan((step-1)); enforce_achieve_fgoals((step-1)). [1@1,step]
#external query(step). [false]
#external gen_search_space_at(step). [false]
#false :- incomplete_plan(step); not gen_search_space_at(step); query(step).
#const minimum_search_length_bound = -1.
#false :- step <= minimum_search_length_bound; query(step).
#program conformance_module(step, start, first, last, type, yield).
#external current_last_sgoals(I,step) : sgoals_index(I); yield = true. [false]
include_sgoals(I,step) :- I <= I_L; step >= S; current_last_sgoals(I_L,S); sgoals_index(I).
include_sgoals(I,step) :- sgoals_index(I); yield = false.
sgoals_index((first..last)) :- last != none.
sgoals_index((first..L)) :- last = none; L = @get_total_last_sgoals(PL); pl(PL).
current_sub_goal((AL+1),ROBOT,A,F,V,first,(start+1)) :- sub_goal((AL+1),ROBOT,A,F,V,first); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); holds((AL+1),F,V,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
unachieved_sgoals((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = sequential; pl(AL).
current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,(step-1)); unachieved_sgoals((AL+1),I_SG,(step-1)); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); type = simultaneous; pl(AL).
current_sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1),step) :- include_sgoals((I_SG+1),step); sub_goal((AL+1),ROBOT_1,A_1,F_1,V_1,(I_SG+1)); current_sub_goal_index((AL+1),I_SG,(step-1)); not current_sub_goal_index((AL+1),I_SG,step); action((AL+1),_,_,ROBOT_1,A_1); fluent((AL+1),inertial,F_1,V_1); pl(AL).
sgoals_ach_at((AL+1),I_SG,step) :- current_sub_goal_index((AL+1),I_SG,step); not unachieved_sgoals((AL+1),I_SG,step); pl(AL).
current_sub_goal_index((AL+1),FI,SS) :- restart_from(FI,SS); pl(AL).
current_sub_goal_index((AL+1),I_SG,step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); not sub_goal_satisfied((AL+1),ROBOT,A,F,V,I_SG,step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
incomplete_plan(step) :- sub_goal((AL+1),ROBOT,A,F,V,I_SG); current_sub_goal((AL+1),ROBOT,A,F,V,I_SG,step); include_sgoals((I_SG+1),step); action((AL+1),_,_,ROBOT,A); fluent((AL+1),inertial,F,V); pl(AL).
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#heuristic occurs(AL,ROBOT,A,step) : action(AL,_,_,ROBOT,A); effect(AL,ROBOT,A,F,V,step); fluent(AL,inertial,F,V); current_sub_goal((AL+1),ROBOT,A,F,V,_,(step-1)); pl(AL); step > start; preempt_pos_fgoals = true. [10@2,true]
#program goal_abstraction_module.
holds(AL,F,V,0) :- final_goal(AL,F,V,true); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
not holds(AL,F,V,0) :- final_goal(AL,F,V,false); goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,true,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,false,0); final_goal(AL,F,false,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,false,true); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
#false :- holds(AL,F,true,0); final_goal(AL,F,true,false); goal_fluent(AL,F); fluent(AL,defined,F,_); al(AL).
final_goal(AL,F,V,true) :- holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
final_goal(AL,F,V,false) :- not holds(AL,F,V,0); goal_fluent(AL,F); fluent(AL,_,F,V); al(AL).
{ holds(AL,F,V,0) } :- goal_fluent(AL,F); fluent(AL,inertial,F,V); al(AL).
#false :- not 1 = { holds(AL,F,V,0): fluent(AL,_,F,V) }; goal_fluent(AL,F); fluent(AL,_,F,_); al(AL).
holds(AL,F,false,0) :- not holds(AL,F,true,0); goal_fluent(AL,F); fluent(AL,defined,F,B); boolean(B); al(AL).
#program domain_sorts.
#const abstraction_max = 3.
#const reduc = 3.
#const conde = 2.
#const groun = 1.
class(3,robot).
class(3,armed_robot).
class(3,location).
class(3,room).
class(3,object).
class(3,grounded).
class(3,graspable).
class(3,placeable).
class(3,block).
class(3,surface).
class(3,table).
class(3,colour).
class(3,manipulator_arm).
class(3,grasper).
class(2,door).
class(2,handle).
class(2,configurable).
class(2,extensible).
class(1,cell).
class(1,manipulator_limb).
class(1,manipulator_end).
class(1,side).
super_class(robot,armed_robot).
super_class(location,room).
super_class(location,cell).
super_class(object,robot).
super_class(object,manipulator_arm).
super_class(object,manipulator_limb).
super_class(object,manipulator_end).
super_class(object,table).
super_class(object,side).
super_class(object,block).
super_class(object,grounded).
super_class(grounded,handle).
super_class(configurable,extensible).
super_class(configurable,grasper).
super_class(configurable,door).
super_class(extensible,manipulator_arm).
super_class(extensible,manipulator_limb).
super_class(grasper,manipulator_arm).
super_class(grasper,manipulator_end).
super_class(graspable,block).
super_class(graspable,handle).
super_class(placeable,block).
super_class(surface,table).
super_class(surface,side).
super_class(surface,block).
override_class(manipulator_arm,manipulator_end,grasper).
override_class(manipulator_arm,manipulator_limb,extensible).
override_class(room,cell,location).
override_class(table,side,surface).
state(AL,extensible,extended) :- AL < reduc; al(AL).
state(AL,extensible,retracted) :- AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(OBJ)) :- insta_of(AL,graspable,OBJ); class(AL_I,manipulator_end); AL <= AL_I; AL < reduc; al(AL).
state(AL,manipulator_end,aligned_with(nothing)) :- AL < reduc; al(AL).
state(AL,door,open) :- AL < reduc; al(AL).
state(AL,door,closed) :- AL < reduc; al(AL).
static(AL,connected(L_1,L_2)) :- insta_of(AL,location,L_1); insta_of(AL,location,L_2); al(AL).
static(AL,connected_by_door(D,L_1,L_2)) :- insta_of(AL,door,D); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; al(AL).
static(AL,in(OBJ,L)) :- insta_of(AL,object,OBJ); insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; al(AL).
static(AL,colour_of(BLOCK,COLOUR)) :- insta_of(AL,block,BLOCK); insta_of(AL,colour,COLOUR); al(AL).
fluent(AL_1,inertial,in(OBJ),L) :- insta_of(AL_1,location,L); insta_of(AL_2,object,OBJ); OBJ != nothing; not insta_of(AL_2,grounded,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,on(OBJ),SURFACE) :- OBJ != SURFACE; insta_of(AL_1,surface,SURFACE); insta_of(AL_2,placeable,OBJ); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,grasping(DESC),OBJ) :- insta_of(AL_1,graspable,OBJ); insta_of(AL_2,grasper,DESC); sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(DESC),STATE) :- state_of(AL_1,DESC,STATE); insta_of(AL_2,configurable,DESC); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL_1,inertial,configuration(D),STATE) :- state_of(AL_1,D,STATE); insta_of(AL_2,door,D); AL_1 < reduc; AL_2 < reduc; sl(AL_1); sl(AL_2); AL_2 >= AL_1.
fluent(AL,defined,tower_base(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,in_tower(BASE,BLOCK),B) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); sl(AL); boolean(B).
fluent(AL,defined,unordered_tower(BASE),B) :- insta_of(AL,block,BASE); sl(AL); boolean(B).
fluent(AL,defined,complete(COLOUR),B) :- insta_of(AL,colour,COLOUR); sl(AL); boolean(B).
action(AL,sequential,locomotion,ROBO,move(L)) :- insta_of(AL,robot,ROBO); insta_of(AL,location,L); sl(AL).
action(AL,concurrent,manipulation,ROBO,grasp(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,manipulation,ROBO,release(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; sl(AL).
action(AL,concurrent,configuration,ROBO,configure(DESC,STATE)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; sl(AL).
action(AL,concurrent,manipulation,ROBO,put(DESC,OBJ,SURFACE)) :- OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); sl(AL).
action(AL,concurrent,manipulation,ROBO,lift(DESC,OBJ)) :- desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); sl(AL).
action(AL,concurrent,manipulation,ROBO,actuate(DESC,D)) :- insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); AL < reduc; sl(AL).
#program action_effects(t).
effect(AL,ROBO,move(L),in(ROBO),L) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,in(ROBO),L); insta_of(AL,robot,ROBO); insta_of(AL,location,L); pl(AL).
effect(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),OBJ) :- action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; pl(AL).
effect(AL,ROBO,release(DESC,OBJ),grasping(DESC),nothing) :- action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); pl(AL).
effect(AL,ROBO,release(END,OBJ),configuration(END),aligned_with(nothing)) :- action(AL,_,_,ROBO,release(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,configure(DESC,STATE),configuration(DESC),STATE) :- action(AL,_,_,ROBO,configure(DESC,STATE)); fluent(AL,inertial,configuration(DESC),STATE); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,configurable,DESC); state_of(AL,DESC,STATE); AL < reduc; pl(AL).
effect(AL,ROBO,configure(ARM,retracted),configuration(END),aligned_with(nothing),t) :- holds(AL,grasping(END),nothing,(t-1)); action(AL,_,_,ROBO,configure(ARM,retracted)); fluent(AL,inertial,configuration(END),aligned_with(nothing)); desce_of(AL,ROBO,ARM); desce_of(AL,ROBO,END); siblings(AL,ARM,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,ARM); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); AL < reduc; pl(AL).
effect(AL,ROBO,put(DESC,OBJ,SURFACE),on(OBJ),SURFACE) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,on(OBJ),SURFACE); OBJ != SURFACE; SURFACE != nothing; desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
effect(AL,ROBO,lift(DESC,OBJ),on(OBJ),nothing) :- action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,on(OBJ),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); pl(AL).
effect(AL,ROBO,actuate(DESC,D),configuration(D),STATE_1,t) :- holds(AL,configuration(D),STATE_2,(t-1)); action(AL,_,_,ROBO,actuate(DESC,D)); fluent(AL,inertial,configuration(D),STATE_1); fluent(AL,inertial,configuration(D),STATE_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,door,D); state_of(AL,D,STATE_1); state_of(AL,D,STATE_2); STATE_1 != STATE_2; AL < reduc; pl(AL).
#program action_preconditions(t).
precond(AL,ROBO,move(L_2),in(ROBO),L_1,false) :- not is(AL,connected(L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,in(ROBO),L_1); static(AL,connected(L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); AL < reduc; pl(AL).
precond(AL,ROBO,move(L_2),configuration(D),open,true,t) :- holds(AL,in(ROBO),L_1,(t-1)); is(AL,connected_by_door(D,L_1,L_2)); L_1 != L_2; action(AL,_,_,ROBO,move(L_2)); fluent(AL,inertial,configuration(D),open); fluent(AL,_,in(ROBO),L_1); static(AL,connected_by_door(D,L_1,L_2)); insta_of(AL,robot,ROBO); insta_of(AL,location,L_1); insta_of(AL,location,L_2); insta_of(AL,door,D); AL < reduc; pl(AL).
1 = { precond(AL,ROBO,actuate(COMP,D),grasping(COMP),H,true,t): desce_of(AL,D,H), insta_of(AL,handle,H), action(AL,_,_,ROBO,actuate(COMP,D)), fluent(AL,inertial,grasping(COMP),H) } :- desce_of(AL,ROBO,COMP); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,COMP); insta_of(AL,door,D); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true) :- is(AL,in(OBJ,L)); action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(ROBO),L); static(AL,in(OBJ,L)); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,grounded,OBJ); insta_of(AL,location,L); AL < reduc; pl(AL).
precond(AL,ROBO,move(L),configuration(DESC),retracted,true) :- action(AL,_,_,ROBO,move(L)); fluent(AL,inertial,configuration(DESC),retracted); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,extensible,DESC); insta_of(AL,location,L); state_of(AL,DESC,retracted); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(OBJ),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),in(ROBO),L,true,t) :- holds(AL,in(OBJ),L,(t-1)); OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,in(OBJ),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),grasping(DESC),nothing,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; OBJ_1 != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,grasp(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); AL < reduc; pl(AL).
precond(AL,ROBO,grasp(END,OBJ),configuration(END),aligned_with(OBJ),true) :- OBJ != nothing; action(AL,_,_,ROBO,grasp(END,OBJ)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); desce_of(AL,ROBO,END); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); state_of(AL,END,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,release(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,release(DESC,OBJ),configuration(DESC),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC,OBJ)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); state_of(AL,DESC,extended); pl(AL); t > 0.
precond(AL,ROBO,release(DESC_1,OBJ),configuration(DESC_2),extended,true) :- OBJ != nothing; action(AL,_,_,ROBO,release(DESC_1,OBJ)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); pl(AL).
precond(AL,ROBO,configure(DESC_1,STATE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,configure(DESC_1,STATE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); desce_of(AL,ROBO,ARM); child_of(AL,ARM,DESC_1); child_of(AL,ARM,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,configurable,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,manipulator_arm,ARM); state_of(AL,DESC_1,STATE); AL < reduc; pl(AL).
precond(AL,ROBO,configure(DESC,aligned_with(OBJ)),grasping(DESC),nothing,true) :- action(AL,_,_,ROBO,configure(DESC,aligned_with(OBJ))); fluent(AL,inertial,grasping(DESC),nothing); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,manipulator_end,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,DESC,aligned_with(OBJ)); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(SURFACE),L,true,t) :- holds(AL,in(ROBO),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),in(ROBO),L,true,t) :- holds(AL,in(SURFACE),L,(t-1)); action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); insta_of(AL,location,L); pl(AL).
precond(AL,ROBO,put(DESC,OBJ_1,BLOCK),on(OBJ_2),BLOCK,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,put(DESC,OBJ_1,SURFACE)); fluent(AL,inertial,on(OBJ_2),BLOCK); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,placeable,OBJ_2); insta_of(AL,block,BLOCK); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),grasping(DESC),OBJ,true) :- OBJ != SURFACE; OBJ != nothing; SURFACE != nothing; action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ); insta_of(AL,surface,SURFACE); pl(AL).
precond(AL,ROBO_1,put(DESC_1,OBJ_1,OBJ_2),grasping(DESC_2),OBJ_2,false) :- OBJ_1 != OBJ_2; DESC_1 != DESC_2; action(AL,_,_,ROBO,put(DESC_1,OBJ_1,OBJ_2)); fluent(AL,inertial,grasping(DESC_2),OBJ_2); desce_of(AL,ROBO_1,DESC_1); desce_of(AL,ROBO_2,DESC_2); insta_of(AL,armed_robot,ROBO_1); insta_of(AL,armed_robot,ROBO_2); insta_of(AL,grasper,DESC_1); insta_of(AL,grasper,DESC_2); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_2); insta_of(AL,graspable,OBJ_2); pl(AL).
precond(AL,ROBO,put(DESC,OBJ,SURFACE),configuration(DESC),extended,true) :- action(AL,_,_,ROBO,put(DESC,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC),extended); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,extensible,DESC); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,put(DESC_1,OBJ,SURFACE),configuration(DESC_2),extended,true) :- action(AL,_,_,ROBO,put(DESC_1,OBJ,SURFACE)); fluent(AL,inertial,configuration(DESC_2),extended); desce_of(AL,ROBO,DESC_1); desce_of(AL,ROBO,DESC_2); siblings(AL,DESC_1,DESC_2); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC_1); not insta_of(AL,extensible,DESC_1); insta_of(AL,extensible,DESC_2); insta_of(AL,graspable,OBJ); insta_of(AL,surface,SURFACE); AL < reduc; pl(AL).
precond(AL,ROBO,lift(DESC,OBJ_1),on(OBJ_2),OBJ_1,false) :- OBJ_1 != OBJ_2; action(AL,_,_,ROBO,lift(DESC,OBJ_1)); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,placeable,OBJ_1); insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); pl(AL).
precond(AL,ROBO,lift(DESC,OBJ),grasping(DESC),OBJ,true) :- OBJ != SURFACE; action(AL,_,_,ROBO,lift(DESC,OBJ)); fluent(AL,inertial,grasping(DESC),OBJ); desce_of(AL,ROBO,DESC); insta_of(AL,armed_robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,surface,SURFACE); pl(AL).
#program variable_relations(t).
#false :- holds(AL,grasping(DESC),OBJ,t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,grasping(DESC),OBJ); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); sl(AL).
#false :- holds(AL,configuration(END),aligned_with(OBJ),t); holds(AL,in(ROBO),L,t); not holds(AL,in(OBJ),L,t): not insta_of(AL,grounded,OBJ), fluent(AL,inertial,in(OBJ),L); not is(AL,in(OBJ,L)): insta_of(AL,grounded,OBJ), static(AL,in(OBJ,L)); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); fluent(AL,inertial,in(ROBO),L); desce_of(AL,ROBO,END); insta_of(AL,robot,ROBO); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; insta_of(AL,location,L); state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(END),OBJ,t); not holds(AL,configuration(END),aligned_with(OBJ),t); fluent(AL,inertial,grasping(END),OBJ); fluent(AL,inertial,configuration(END),aligned_with(OBJ)); insta_of(AL,manipulator_end,END); insta_of(AL,graspable,OBJ); OBJ != nothing; state_of(AL,END,aligned_with(OBJ)); sl(AL).
#false :- holds(AL,grasping(DESC),OBJ_1,t); holds(AL,on(OBJ_2),OBJ_1,t); fluent(AL,inertial,grasping(DESC),OBJ_1); fluent(AL,inertial,on(OBJ_2),OBJ_1); desce_of(AL,ROBO,DESC); insta_of(AL,robot,ROBO); insta_of(AL,grasper,DESC); insta_of(AL,graspable,OBJ_1); OBJ_1 != nothing; insta_of(AL,surface,OBJ_1); insta_of(AL,placeable,OBJ_2); sl(AL).
#false :- holds(AL,on(OBJ),SURFACE,t); holds(AL,in(SURFACE),L,t); not holds(AL,in(OBJ),L,t); fluent(AL,inertial,on(OBJ),SURFACE); fluent(AL,inertial,in(SURFACE),L); fluent(AL,inertial,in(OBJ),L); insta_of(AL,location,L); insta_of(AL,location,L); insta_of(AL,surface,SURFACE); insta_of(AL,object,OBJ); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,on(BLOCK_2),nothing,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); fluent(AL,inertial,on(BLOCK_2),nothing); insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); sl(AL).
#false :- holds(AL,on(BLOCK_1),BLOCK_3,t); holds(AL,on(BLOCK_2),BLOCK_3,t); fluent(AL,inertial,on(BLOCK_1),BLOCK_3); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),TABLE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),TABLE); insta_of(AL,block,BASE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,tower_base(BASE),true,t) :- holds(AL,on(BASE),SURFACE,t); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BASE),SURFACE); desce_of(AL,TABLE,SURFACE); insta_of(AL,block,BASE); insta_of(AL,surface,SURFACE); insta_of(AL,table,TABLE); sl(AL).
holds(AL,in_tower(BASE,BASE),true,t) :- holds(AL,tower_base(BASE),true,t); fluent(AL,defined,in_tower(BASE,BASE),true); fluent(AL,defined,tower_base(BASE),true); insta_of(AL,block,BASE); sl(AL).
holds(AL,in_tower(BLOCK_1,BLOCK_2),true,t) :- holds(AL,on(BLOCK_2),BLOCK_3,t); holds(AL,in_tower(BLOCK_1,BLOCK_3),true,t); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_2),true); fluent(AL,defined,in_tower(BLOCK_1,BLOCK_3),true); fluent(AL,inertial,on(BLOCK_2),BLOCK_3); BLOCK_1 != BLOCK_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BLOCK_3); sl(AL).
holds(AL,unordered_tower(BASE),true,t) :- holds(AL,on(BLOCK_1),BLOCK_2,t); holds(AL,in_tower(BASE,BLOCK_1),true,t); holds(AL,in_tower(BASE,BLOCK_2),true,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,in_tower(BASE,BLOCK_1),true); fluent(AL,defined,in_tower(BASE,BLOCK_2),true); fluent(AL,defined,tower_base(BASE),true); fluent(AL,inertial,on(BLOCK_1),BLOCK_2); BLOCK_1 = (block,N_1); block_number(N_1); BLOCK_2 = (block,N_2); block_number(N_2); BLOCK_1 != BLOCK_2; N_1 > N_2; insta_of(AL,block,BLOCK_1); insta_of(AL,block,BLOCK_2); insta_of(AL,block,BASE); sl(AL).
holds(AL,complete(COLOUR),true,t) :- N = #count { BLOCK: holds(AL,in_tower(BASE,BLOCK),true,t), is(AL,colour_of(BLOCK,COLOUR)), fluent(AL,defined,in_tower(BASE,BLOCK),true), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; N = #count { BLOCK: is(AL,colour_of(BLOCK,COLOUR)), static(AL,colour_of(BLOCK,COLOUR)), insta_of(AL,block,BLOCK) }; holds(AL,unordered_tower(BASE),false,t); holds(AL,tower_base(BASE),true,t); fluent(AL,defined,unordered_tower(BASE),true); fluent(AL,defined,tower_base(BASE),true); is(AL,colour_of(BASE,COLOUR)); static(AL,colour_of(BASE,COLOUR)); insta_of(AL,colour,COLOUR); insta_of(AL,block,BASE); sl(AL).
#program abstraction_mappings(t).
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1_C,L_2_C)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected(L_1,L_2)) :- is(AL_2,connected(L_1,L_2)); static(AL_1,connected(L_1,L_2)); static(AL_2,connected(L_1,L_2)); L_1 != L_2; insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,connected_by_door(D,L_1,L_2)) :- is(AL_2,connected_by_door(D,L_1_C,L_2_C)); static(AL_1,connected_by_door(D,L_1,L_2)); static(AL_2,connected_by_door(D,L_1_C,L_2_C)); L_1 != L_2; desce_of(AL_2,L_1,L_1_C); desce_of(AL_2,L_2,L_2_C); insta_of(AL_1,door,D); insta_of(AL_2,door,D); insta_of(AL_1,location,L_1); insta_of(AL_1,location,L_2); insta_of(AL_2,location,L_1_C); insta_of(AL_2,location,L_2_C); al(AL_1); al(AL_2); AL_1 >= AL_2.
is(AL_1,in(OBJ,L_1)) :- is(AL_2,in(OBJ,L_2)); static(AL_1,in(OBJ,L_1)); static(AL_2,in(OBJ,L_2)); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_1,object,OBJ); insta_of(AL_1,grounded,OBJ); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); al(AL_1); al(AL_2); AL_1 >= AL_2.
holds(AL_1,in(OBJ),L_1,t) :- holds(AL_2,in(OBJ),L_2,t); fluent(AL_1,inertial,in(OBJ),L_1); fluent(AL_2,inertial,in(OBJ),L_2); desce_of(AL_2,L_1,L_2); insta_of(AL_1,location,L_1); insta_of(AL_2,location,L_2); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(OBJ),L); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,in(DESC),L,t) :- holds(AL_2,in(OBJ),L,t); fluent(AL_1,inertial,in(DESC),L); fluent(AL_2,inertial,in(OBJ),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_2; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(DESC),L,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(DESC),L); desce_of(AL_2,OBJ,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,object,OBJ); insta_of(AL_4,_,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2.
holds(AL_1,in(OBJ),L,t) :- holds(AL_2,in(ROBO),L,t); holds(AL_3,grasping(DESC),OBJ,t); fluent(AL_1,inertial,in(OBJ),L); fluent(AL_2,inertial,in(ROBO),L); fluent(AL_3,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,location,L); insta_of(AL_2,location,L); insta_of(AL_3,graspable,OBJ); OBJ != nothing; insta_of(AL_4,grasper,DESC); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_3; sl(AL_5); AL_5 >= AL_3.
holds(AL_1,grasping(DESC),OBJ_1,t) :- holds(AL_2,grasping(DESC),OBJ_2,t); fluent(AL_1,inertial,grasping(DESC),OBJ_1); fluent(AL_2,inertial,grasping(DESC),OBJ_2); desce_of(AL_2,ROBO,DESC); desce_of(AL_2,OBJ_1,OBJ_2); insta_of(AL_1,graspable,OBJ_1); insta_of(AL_2,graspable,OBJ_2); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1.
holds(AL_1,grasping(DESC_1),OBJ,t) :- holds(AL_2,grasping(DESC_2),OBJ,t); fluent(AL_1,inertial,grasping(DESC_1),OBJ); fluent(AL_2,inertial,grasping(DESC_2),OBJ); desce_of(AL_2,ROBO,DESC_1); desce_of(AL_2,ROBO,DESC_2); desce_of(AL_2,DESC_1,DESC_2); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC_1); insta_of(AL_4,grasper,DESC_2); insta_of(AL_5,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_2; sl(AL_5); AL_5 >= AL_1.
holds(AL_1,grasping(DESC),OBJ,t) :- holds(AL_2,grasping(DESC),OBJ,t); fluent(AL_1,inertial,grasping(DESC),OBJ); fluent(AL_2,inertial,grasping(DESC),OBJ); desce_of(AL_2,ROBO,DESC); insta_of(AL_1,graspable,OBJ); insta_of(AL_2,graspable,OBJ); insta_of(AL_3,grasper,DESC); insta_of(AL_4,robot,ROBO); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1; sl(AL_4); AL_4 >= AL_1; boolean(B).
holds(AL_1,configuration(DESC_1),STATE,t) :- holds(AL_2,configuration(DESC_2),STATE,t); fluent(AL_1,inertial,configuration(DESC_1),STATE); fluent(AL_2,inertial,configuration(DESC_2),STATE); desce_of(AL_2,DESC_1,DESC_2); state_of(AL_1,DESC_1,STATE); state_of(AL_2,DESC_2,STATE); insta_of(AL_1,configurable,DESC_1); insta_of(AL_2,configurable,DESC_2); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,configuration(DESC),STATE,t) :- holds(AL_2,configuration(DESC),STATE,t); fluent(AL_1,inertial,configuration(DESC),STATE); fluent(AL_2,inertial,configuration(DESC),STATE); state_of(AL_1,DESC,STATE); state_of(AL_2,DESC,STATE); insta_of(AL_1,configurable,DESC); insta_of(AL_2,configurable,DESC); sl(AL_1); sl(AL_2); AL_1 >= AL_2.
holds(AL_1,on(OBJ),SURFACE_1,t) :- holds(AL_2,on(OBJ),SURFACE_2,t); fluent(AL_1,inertial,on(OBJ),SURFACE_1); fluent(AL_2,inertial,on(OBJ),SURFACE_2); desce_of(AL_2,SURFACE_1,SURFACE_2); insta_of(AL_1,surface,SURFACE_1); insta_of(AL_2,surface,SURFACE_2); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
holds(AL_1,on(OBJ),SURFACE,t) :- holds(AL_2,on(OBJ),SURFACE,t); fluent(AL_1,inertial,on(OBJ),SURFACE); fluent(AL_2,inertial,on(OBJ),SURFACE); insta_of(AL_1,surface,SURFACE); insta_of(AL_2,surface,SURFACE); insta_of(AL_3,placeable,OBJ); sl(AL_1); sl(AL_2); AL_1 >= AL_2; sl(AL_3); AL_3 >= AL_1.
#program static_state.
is(1,connected((starting_room,1),(hallway,1))).
is(1,connected((store_room,1),(hallway,0))).
is(1,connected((hallway,2),(puzzle_room,0))).
is(1,connected_by_door(store_room_door,(store_room,1),(hallway,0))).
is(1,connected_by_door(puzzle_room_door,(hallway,2),(puzzle_room,0))).
is(1,in(store_room_door_handle_inner,(store_room,1))).
is(1,in(store_room_door_handle_outer,(hallway,0))).
is(1,in(starting_room_door_handle_inner,(starting_room,1))).
is(1,in(starting_room_door_handle_outer,(hallway,1))).
is(1,in(puzzle_room_door_handle_inner,(puzzle_room,0))).
is(1,in(puzzle_room_door_handle_outer,(hallway,2))).
is(AL,colour_of((BLOCK,N),red)) :- static(AL,colour_of((BLOCK,N),red)); insta_of(AL,block,(BLOCK,N)); N <= 3; al(AL).
is(AL,colour_of((BLOCK,N),blue)) :- static(AL,colour_of((BLOCK,N),blue)); insta_of(AL,block,(BLOCK,N)); N > 3; N <= 6; al(AL).
is(1,connected((A,X_1),(A,X_2))) :- insta_of(1,cell,(A,X_1)); insta_of(1,cell,(A,X_2)); X_2 = (X_1+1).
is(1,connected(C_1,C_2)) :- is(1,connected(C_2,C_1)); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
is(1,connected_by_door(D,C_1,C_2)) :- is(1,connected_by_door(D,C_2,C_1)); insta_of(1,door,D); insta_of(1,cell,C_1); insta_of(1,cell,C_2).
#program initial_state.
holds(1,in(talos),(starting_room,0),0).
holds(AL,grasping(DESC),nothing,0) :- fluent(AL,inertial,grasping(DESC),nothing); insta_of(AL,grasper,DESC); al(AL).
holds(AL,configuration(DESC),retracted,0) :- fluent(AL,inertial,configuration(DESC),retracted); insta_of(AL,extensible,DESC); sl(AL).
holds(1,configuration(END),aligned_with(nothing),0) :- fluent(AL,inertial,configuration(END),aligned_with(nothing)); insta_of(AL,manipulator_end,END); state_of(AL,END,aligned_with(nothing)); sl(AL).
holds(1,configuration(DOOR),closed,0) :- fluent(AL,inertial,configuration(DOOR),closed); insta_of(AL,door,DOOR); state_of(AL,DOOR,closed); sl(AL).
holds(1,in(puzzle_room_table),(puzzle_room,1),0).
holds(1,on((block,1)),puzzle_room_table_left,0).
holds(1,on((block,2)),puzzle_room_table_right,0).
holds(1,on((block,3)),(block,1),0).
holds(1,in((block,4)),(store_room,0),0).
holds(1,in((block,5)),(store_room,0),0).
holds(1,in((block,6)),(store_room,0),0).
holds(1,on((block,4)),nothing,0).
holds(1,on((block,5)),nothing,0).
holds(1,on((block,6)),nothing,0).
#program goal_state.
goal_fluent(AL,complete(COLOUR)) :- insta_of(AL,colour,COLOUR); al(AL).
goal_fluent(AL,unordered_tower(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,in_tower(BASE,BLOCK)) :- insta_of(AL,block,BASE); insta_of(AL,block,BLOCK); al(AL).
goal_fluent(AL,tower_base(BASE)) :- insta_of(AL,block,BASE); al(AL).
goal_fluent(AL,on(BLOCK)) :- insta_of(AL,block,BLOCK); al(AL).
final_goal(AL,complete(COLOUR),true,true) :- insta_of(AL,colour,COLOUR); al(AL).
final_goal(1,on((block,3)),puzzle_room_table_left,true).
final_goal(1,on((block,6)),puzzle_room_table_right,true).
#program entities.
entity(armed_robot,talos).
entity(manipulator_arm,manipulator_arm_1).
entity(manipulator_limb,manipulator_limb_1).
entity(manipulator_end,manipulator_end_1).
entity(manipulator_arm,manipulator_arm_2).
entity(manipulator_limb,manipulator_limb_2).
entity(manipulator_end,manipulator_end_2).
block_number((1..6)).
entity(block,(block,N)) :- block_number(N).
entity(room,starting_room).
entity(room,store_room).
entity(room,puzzle_room).
entity(room,hallway).
x((0..3)).
size(starting_room,2).
size(store_room,2).
size(hallway,3).
size(puzzle_room,2).
entity(cell,(ROOM,X)) :- entity(room,ROOM); size(ROOM,MAX); X < MAX; x(X).
entity(door,store_room_door).
entity(door,starting_room_door).
entity(door,puzzle_room_door).
entity(handle,store_room_door_handle_inner).
entity(handle,store_room_door_handle_outer).
entity(handle,starting_room_door_handle_inner).
entity(handle,starting_room_door_handle_outer).
entity(handle,puzzle_room_door_handle_inner).
entity(handle,puzzle_room_door_handle_outer).
entity(table,puzzle_room_table).
entity(side,puzzle_room_table_left).
entity(side,puzzle_room_table_right).
entity(colour,red).
entity(colour,blue).
entity(surface,nothing).
entity(graspable,nothing).
ancestry_relation(talos,manipulator_arm_1).
ancestry_relation(talos,manipulator_arm_2).
ancestry_relation(manipulator_arm_1,manipulator_limb_1).
ancestry_relation(manipulator_arm_2,manipulator_limb_2).
ancestry_relation(manipulator_arm_1,manipulator_end_1).
ancestry_relation(manipulator_arm_2,manipulator_end_2).
ancestry_relation(ROOM,(ROOM,X)) :- entity(room,ROOM); entity(cell,(ROOM,X)); x(X).
ancestry_relation(store_room_door,store_room_door_handle_inner).
ancestry_relation(store_room_door,store_room_door_handle_outer).
ancestry_relation(starting_room_door,starting_room_door_handle_inner).
ancestry_relation(starting_room_door,starting_room_door_handle_outer).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_inner).
ancestry_relation(puzzle_room_door,puzzle_room_door_handle_outer).
ancestry_relation(puzzle_room_table,puzzle_room_table_left).
ancestry_relation(puzzle_room_table,puzzle_room_table_right)., ASH #1)

[13-11-2021_23-39-12] INFO :: ASH Planner Main #1 >> Attempting to initialise hierarchical planning problem...

[13-11-2021_23-39-12] INFO :: ASH Planner Main #1 >> Generating initial states...

[13-11-2021_23-39-12] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Initial States

[13-11-2021_23-39-12] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Initial States')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Parsing raw logic program code:


[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program code parsed successfully.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Logic program instantiated successfully.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Resetting output storing variables.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Output storing variables reset.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building started :: Processing 349 rules

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Program building completed in 0.0025338000000001415s

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='state_module', args=[0, 0]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='initial_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('state_module', [Number(0), Number(0)]), ('entities', []), ('static_state', []), ('initial_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-11-2021_23-39-12] WARNING :: Logic Program Main #1 || Generate Initial States #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Grounding completed in 0.121491s.

[13-11-2021_23-39-12] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Solving completed in 0.028780s with result Satisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Freeing held grounding...

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Input storing variables set.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Held grounding freed successfully.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Initial States #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.121491s, Solving = 0.028780s, Total = 0.150270s, Memory = (RSS = 112.351562Mb, VMS = 99.476562Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Initial states generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.121491s, Solving = 0.028780s, Total = 0.150270s, Memory = (RSS = 112.351562Mb, VMS = 99.476562Mb)
Final Model :: Total atoms = 2731, Cost = (), Optimality proven = False, Number = 1, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 3            
      ================================================      

holds(3, complete(blue), false, 0)
holds(3, complete(red), false, 0)
holds(3, grasping(manipulator_arm_1), nothing, 0)
holds(3, grasping(manipulator_arm_2), nothing, 0)
holds(3, in((block,1)), puzzle_room, 0)
holds(3, in((block,2)), puzzle_room, 0)
holds(3, in((block,3)), puzzle_room, 0)
holds(3, in((block,4)), store_room, 0)
holds(3, in((block,5)), store_room, 0)
holds(3, in((block,6)), store_room, 0)
holds(3, in(manipulator_arm_1), starting_room, 0)
holds(3, in(manipulator_arm_2), starting_room, 0)
holds(3, in(puzzle_room_table), puzzle_room, 0)
holds(3, in(talos), starting_room, 0)
holds(3, in_tower((block,1),(block,1)), true, 0)
holds(3, in_tower((block,1),(block,2)), false, 0)
holds(3, in_tower((block,1),(block,3)), true, 0)
holds(3, in_tower((block,1),(block,4)), false, 0)
holds(3, in_tower((block,1),(block,5)), false, 0)
holds(3, in_tower((block,1),(block,6)), false, 0)
holds(3, in_tower((block,2),(block,1)), false, 0)
holds(3, in_tower((block,2),(block,2)), true, 0)
holds(3, in_tower((block,2),(block,3)), false, 0)
holds(3, in_tower((block,2),(block,4)), false, 0)
holds(3, in_tower((block,2),(block,5)), false, 0)
holds(3, in_tower((block,2),(block,6)), false, 0)
holds(3, in_tower((block,3),(block,1)), false, 0)
holds(3, in_tower((block,3),(block,2)), false, 0)
holds(3, in_tower((block,3),(block,3)), false, 0)
holds(3, in_tower((block,3),(block,4)), false, 0)
holds(3, in_tower((block,3),(block,5)), false, 0)
holds(3, in_tower((block,3),(block,6)), false, 0)
holds(3, in_tower((block,4),(block,1)), false, 0)
holds(3, in_tower((block,4),(block,2)), false, 0)
holds(3, in_tower((block,4),(block,3)), false, 0)
holds(3, in_tower((block,4),(block,4)), false, 0)
holds(3, in_tower((block,4),(block,5)), false, 0)
holds(3, in_tower((block,4),(block,6)), false, 0)
holds(3, in_tower((block,5),(block,1)), false, 0)
holds(3, in_tower((block,5),(block,2)), false, 0)
holds(3, in_tower((block,5),(block,3)), false, 0)
holds(3, in_tower((block,5),(block,4)), false, 0)
holds(3, in_tower((block,5),(block,5)), false, 0)
holds(3, in_tower((block,5),(block,6)), false, 0)
holds(3, in_tower((block,6),(block,1)), false, 0)
holds(3, in_tower((block,6),(block,2)), false, 0)
holds(3, in_tower((block,6),(block,3)), false, 0)
holds(3, in_tower((block,6),(block,4)), false, 0)
holds(3, in_tower((block,6),(block,5)), false, 0)
holds(3, in_tower((block,6),(block,6)), false, 0)
holds(3, on((block,1)), puzzle_room_table, 0)
holds(3, on((block,2)), puzzle_room_table, 0)
holds(3, on((block,3)), (block,1), 0)
holds(3, on((block,4)), nothing, 0)
holds(3, on((block,5)), nothing, 0)
holds(3, on((block,6)), nothing, 0)
holds(3, tower_base((block,1)), true, 0)
holds(3, tower_base((block,2)), true, 0)
holds(3, tower_base((block,3)), false, 0)
holds(3, tower_base((block,4)), false, 0)
holds(3, tower_base((block,5)), false, 0)
holds(3, tower_base((block,6)), false, 0)
holds(3, unordered_tower((block,1)), true, 0)
holds(3, unordered_tower((block,2)), false, 0)
holds(3, unordered_tower((block,3)), false, 0)
holds(3, unordered_tower((block,4)), false, 0)
holds(3, unordered_tower((block,5)), false, 0)
holds(3, unordered_tower((block,6)), false, 0)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 2            
      ================================================      

holds(2, complete(blue), false, 0)
holds(2, complete(red), false, 0)
holds(2, configuration(manipulator_arm_1), retracted, 0)
holds(2, configuration(manipulator_arm_2), retracted, 0)
holds(2, configuration(puzzle_room_door), closed, 0)
holds(2, configuration(starting_room_door), closed, 0)
holds(2, configuration(store_room_door), closed, 0)
holds(2, grasping(manipulator_arm_1), nothing, 0)
holds(2, grasping(manipulator_arm_2), nothing, 0)
holds(2, in((block,1)), puzzle_room, 0)
holds(2, in((block,2)), puzzle_room, 0)
holds(2, in((block,3)), puzzle_room, 0)
holds(2, in((block,4)), store_room, 0)
holds(2, in((block,5)), store_room, 0)
holds(2, in((block,6)), store_room, 0)
holds(2, in(manipulator_arm_1), starting_room, 0)
holds(2, in(manipulator_arm_2), starting_room, 0)
holds(2, in(puzzle_room_table), puzzle_room, 0)
holds(2, in(talos), starting_room, 0)
holds(2, in_tower((block,1),(block,1)), true, 0)
holds(2, in_tower((block,1),(block,2)), false, 0)
holds(2, in_tower((block,1),(block,3)), true, 0)
holds(2, in_tower((block,1),(block,4)), false, 0)
holds(2, in_tower((block,1),(block,5)), false, 0)
holds(2, in_tower((block,1),(block,6)), false, 0)
holds(2, in_tower((block,2),(block,1)), false, 0)
holds(2, in_tower((block,2),(block,2)), true, 0)
holds(2, in_tower((block,2),(block,3)), false, 0)
holds(2, in_tower((block,2),(block,4)), false, 0)
holds(2, in_tower((block,2),(block,5)), false, 0)
holds(2, in_tower((block,2),(block,6)), false, 0)
holds(2, in_tower((block,3),(block,1)), false, 0)
holds(2, in_tower((block,3),(block,2)), false, 0)
holds(2, in_tower((block,3),(block,3)), false, 0)
holds(2, in_tower((block,3),(block,4)), false, 0)
holds(2, in_tower((block,3),(block,5)), false, 0)
holds(2, in_tower((block,3),(block,6)), false, 0)
holds(2, in_tower((block,4),(block,1)), false, 0)
holds(2, in_tower((block,4),(block,2)), false, 0)
holds(2, in_tower((block,4),(block,3)), false, 0)
holds(2, in_tower((block,4),(block,4)), false, 0)
holds(2, in_tower((block,4),(block,5)), false, 0)
holds(2, in_tower((block,4),(block,6)), false, 0)
holds(2, in_tower((block,5),(block,1)), false, 0)
holds(2, in_tower((block,5),(block,2)), false, 0)
holds(2, in_tower((block,5),(block,3)), false, 0)
holds(2, in_tower((block,5),(block,4)), false, 0)
holds(2, in_tower((block,5),(block,5)), false, 0)
holds(2, in_tower((block,5),(block,6)), false, 0)
holds(2, in_tower((block,6),(block,1)), false, 0)
holds(2, in_tower((block,6),(block,2)), false, 0)
holds(2, in_tower((block,6),(block,3)), false, 0)
holds(2, in_tower((block,6),(block,4)), false, 0)
holds(2, in_tower((block,6),(block,5)), false, 0)
holds(2, in_tower((block,6),(block,6)), false, 0)
holds(2, on((block,1)), puzzle_room_table, 0)
holds(2, on((block,2)), puzzle_room_table, 0)
holds(2, on((block,3)), (block,1), 0)
holds(2, on((block,4)), nothing, 0)
holds(2, on((block,5)), nothing, 0)
holds(2, on((block,6)), nothing, 0)
holds(2, tower_base((block,1)), true, 0)
holds(2, tower_base((block,2)), true, 0)
holds(2, tower_base((block,3)), false, 0)
holds(2, tower_base((block,4)), false, 0)
holds(2, tower_base((block,5)), false, 0)
holds(2, tower_base((block,6)), false, 0)
holds(2, unordered_tower((block,1)), true, 0)
holds(2, unordered_tower((block,2)), false, 0)
holds(2, unordered_tower((block,3)), false, 0)
holds(2, unordered_tower((block,4)), false, 0)
holds(2, unordered_tower((block,5)), false, 0)
holds(2, unordered_tower((block,6)), false, 0)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
            Initial state at abstraction level 1            
      ================================================      

holds(1, complete(blue), false, 0)
holds(1, complete(red), false, 0)
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)
holds(1, configuration(manipulator_limb_1), retracted, 0)
holds(1, configuration(manipulator_limb_2), retracted, 0)
holds(1, configuration(puzzle_room_door), closed, 0)
holds(1, configuration(starting_room_door), closed, 0)
holds(1, configuration(store_room_door), closed, 0)
holds(1, grasping(manipulator_arm_1), nothing, 0)
holds(1, grasping(manipulator_arm_2), nothing, 0)
holds(1, grasping(manipulator_end_1), nothing, 0)
holds(1, grasping(manipulator_end_2), nothing, 0)
holds(1, in((block,1)), (puzzle_room,1), 0)
holds(1, in((block,2)), (puzzle_room,1), 0)
holds(1, in((block,3)), (puzzle_room,1), 0)
holds(1, in((block,4)), (store_room,0), 0)
holds(1, in((block,5)), (store_room,0), 0)
holds(1, in((block,6)), (store_room,0), 0)
holds(1, in(manipulator_arm_1), (starting_room,0), 0)
holds(1, in(manipulator_arm_2), (starting_room,0), 0)
holds(1, in(manipulator_end_1), (starting_room,0), 0)
holds(1, in(manipulator_end_2), (starting_room,0), 0)
holds(1, in(manipulator_limb_1), (starting_room,0), 0)
holds(1, in(manipulator_limb_2), (starting_room,0), 0)
holds(1, in(puzzle_room_table), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)
holds(1, in(talos), (starting_room,0), 0)
holds(1, in_tower((block,1),(block,1)), true, 0)
holds(1, in_tower((block,1),(block,2)), false, 0)
holds(1, in_tower((block,1),(block,3)), true, 0)
holds(1, in_tower((block,1),(block,4)), false, 0)
holds(1, in_tower((block,1),(block,5)), false, 0)
holds(1, in_tower((block,1),(block,6)), false, 0)
holds(1, in_tower((block,2),(block,1)), false, 0)
holds(1, in_tower((block,2),(block,2)), true, 0)
holds(1, in_tower((block,2),(block,3)), false, 0)
holds(1, in_tower((block,2),(block,4)), false, 0)
holds(1, in_tower((block,2),(block,5)), false, 0)
holds(1, in_tower((block,2),(block,6)), false, 0)
holds(1, in_tower((block,3),(block,1)), false, 0)
holds(1, in_tower((block,3),(block,2)), false, 0)
holds(1, in_tower((block,3),(block,3)), false, 0)
holds(1, in_tower((block,3),(block,4)), false, 0)
holds(1, in_tower((block,3),(block,5)), false, 0)
holds(1, in_tower((block,3),(block,6)), false, 0)
holds(1, in_tower((block,4),(block,1)), false, 0)
holds(1, in_tower((block,4),(block,2)), false, 0)
holds(1, in_tower((block,4),(block,3)), false, 0)
holds(1, in_tower((block,4),(block,4)), false, 0)
holds(1, in_tower((block,4),(block,5)), false, 0)
holds(1, in_tower((block,4),(block,6)), false, 0)
holds(1, in_tower((block,5),(block,1)), false, 0)
holds(1, in_tower((block,5),(block,2)), false, 0)
holds(1, in_tower((block,5),(block,3)), false, 0)
holds(1, in_tower((block,5),(block,4)), false, 0)
holds(1, in_tower((block,5),(block,5)), false, 0)
holds(1, in_tower((block,5),(block,6)), false, 0)
holds(1, in_tower((block,6),(block,1)), false, 0)
holds(1, in_tower((block,6),(block,2)), false, 0)
holds(1, in_tower((block,6),(block,3)), false, 0)
holds(1, in_tower((block,6),(block,4)), false, 0)
holds(1, in_tower((block,6),(block,5)), false, 0)
holds(1, in_tower((block,6),(block,6)), false, 0)
holds(1, on((block,1)), puzzle_room_table_left, 0)
holds(1, on((block,2)), puzzle_room_table_right, 0)
holds(1, on((block,3)), (block,1), 0)
holds(1, on((block,4)), nothing, 0)
holds(1, on((block,5)), nothing, 0)
holds(1, on((block,6)), nothing, 0)
holds(1, tower_base((block,1)), true, 0)
holds(1, tower_base((block,2)), true, 0)
holds(1, tower_base((block,3)), false, 0)
holds(1, tower_base((block,4)), false, 0)
holds(1, tower_base((block,5)), false, 0)
holds(1, tower_base((block,6)), false, 0)
holds(1, unordered_tower((block,1)), true, 0)
holds(1, unordered_tower((block,2)), false, 0)
holds(1, unordered_tower((block,3)), false, 0)
holds(1, unordered_tower((block,4)), false, 0)
holds(1, unordered_tower((block,5)), false, 0)
holds(1, unordered_tower((block,6)), false, 0)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Generating final-goals...

[13-11-2021_23-39-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 || Generate Final Goals

[13-11-2021_23-39-13] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 || Generate Final Goals')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Parsing raw logic program code:


[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program code parsed successfully.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Logic program instantiated successfully.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Entering new direct one-shot solve call.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = ['--models=2', '--enum-mode=auto', '--parallel-mode=8,compete', '--warn=all']
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = [BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Resetting output storing variables.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Output storing variables reset.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building started :: Processing 349 rules

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Program building completed in 0.0033794000000000324s

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='abstraction_levels', args=[1, 'hierarchical']), BasePart(name='instance_module', args=[]), BasePart(name='goal_abstraction_module', args=[]), BasePart(name='entities', args=[]), BasePart(name='static_state', args=[]), BasePart(name='goal_state', args=[]), BasePart(name='domain_sorts', args=[]), BasePart(name='variable_relations', args=[0]), BasePart(name='abstraction_mappings', args=[0])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding program parts:
[('abstraction_levels', [Number(1), Function('hierarchical', [], True)]), ('instance_module', []), ('goal_abstraction_module', []), ('entities', []), ('static_state', []), ('goal_state', []), ('domain_sorts', []), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)])]

[13-11-2021_23-39-13] WARNING :: Logic Program Main #1 || Generate Final Goals #1 >> Clingo warning MessageCode.AtomUndefined: <string>:444:125-178: info: atom does not occur in any rule head:
  current_sub_goal(#X0,#X1,#X2,#X3,#X4,#P5,#X6)


[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Grounding completed in 0.072669s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Solving completed in 0.013661s with result Satisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Freeing held grounding...

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Input storing variables set.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Held grounding freed successfully.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 || Generate Final Goals #1 >> Returning from standard solve call:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.072669s, Solving = 0.013661s, Total = 0.086330s, Memory = (RSS = 111.113281Mb, VMS = 98.042969Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Final-goals generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 1
Statistics :: Grounding = 0.072669s, Solving = 0.013661s, Total = 0.086330s, Memory = (RSS = 111.113281Mb, VMS = 98.042969Mb)
Final Model :: Total atoms = 3275, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), true, true)
final_goal(3, complete(red), true, true)
final_goal(3, in_tower((block,1),(block,1)), false, true)
final_goal(3, in_tower((block,1),(block,2)), false, true)
final_goal(3, in_tower((block,1),(block,3)), false, true)
final_goal(3, in_tower((block,1),(block,4)), false, true)
final_goal(3, in_tower((block,1),(block,5)), false, true)
final_goal(3, in_tower((block,1),(block,6)), false, true)
final_goal(3, in_tower((block,2),(block,1)), false, true)
final_goal(3, in_tower((block,2),(block,2)), false, true)
final_goal(3, in_tower((block,2),(block,3)), false, true)
final_goal(3, in_tower((block,2),(block,4)), false, true)
final_goal(3, in_tower((block,2),(block,5)), false, true)
final_goal(3, in_tower((block,2),(block,6)), false, true)
final_goal(3, in_tower((block,3),(block,1)), true, true)
final_goal(3, in_tower((block,3),(block,2)), true, true)
final_goal(3, in_tower((block,3),(block,3)), true, true)
final_goal(3, in_tower((block,3),(block,4)), false, true)
final_goal(3, in_tower((block,3),(block,5)), false, true)
final_goal(3, in_tower((block,3),(block,6)), false, true)
final_goal(3, in_tower((block,4),(block,1)), false, true)
final_goal(3, in_tower((block,4),(block,2)), false, true)
final_goal(3, in_tower((block,4),(block,3)), false, true)
final_goal(3, in_tower((block,4),(block,4)), false, true)
final_goal(3, in_tower((block,4),(block,5)), false, true)
final_goal(3, in_tower((block,4),(block,6)), false, true)
final_goal(3, in_tower((block,5),(block,1)), false, true)
final_goal(3, in_tower((block,5),(block,2)), false, true)
final_goal(3, in_tower((block,5),(block,3)), false, true)
final_goal(3, in_tower((block,5),(block,4)), false, true)
final_goal(3, in_tower((block,5),(block,5)), false, true)
final_goal(3, in_tower((block,5),(block,6)), false, true)
final_goal(3, in_tower((block,6),(block,1)), false, true)
final_goal(3, in_tower((block,6),(block,2)), false, true)
final_goal(3, in_tower((block,6),(block,3)), false, true)
final_goal(3, in_tower((block,6),(block,4)), true, true)
final_goal(3, in_tower((block,6),(block,5)), true, true)
final_goal(3, in_tower((block,6),(block,6)), true, true)
final_goal(3, on((block,1)), (block,2), true)
final_goal(3, on((block,2)), (block,3), true)
final_goal(3, on((block,3)), puzzle_room_table, true)
final_goal(3, on((block,4)), (block,5), true)
final_goal(3, on((block,5)), (block,6), true)
final_goal(3, on((block,6)), puzzle_room_table, true)
final_goal(3, tower_base((block,1)), false, true)
final_goal(3, tower_base((block,2)), false, true)
final_goal(3, tower_base((block,3)), true, true)
final_goal(3, tower_base((block,4)), false, true)
final_goal(3, tower_base((block,5)), false, true)
final_goal(3, tower_base((block,6)), true, true)
final_goal(3, unordered_tower((block,1)), false, true)
final_goal(3, unordered_tower((block,2)), false, true)
final_goal(3, unordered_tower((block,3)), false, true)
final_goal(3, unordered_tower((block,4)), false, true)
final_goal(3, unordered_tower((block,5)), false, true)
final_goal(3, unordered_tower((block,6)), false, true)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 3         
      ================================================      

final_goal(3, complete(blue), false, false)
final_goal(3, complete(red), false, false)
final_goal(3, in_tower((block,1),(block,1)), true, false)
final_goal(3, in_tower((block,1),(block,2)), true, false)
final_goal(3, in_tower((block,1),(block,3)), true, false)
final_goal(3, in_tower((block,1),(block,4)), true, false)
final_goal(3, in_tower((block,1),(block,5)), true, false)
final_goal(3, in_tower((block,1),(block,6)), true, false)
final_goal(3, in_tower((block,2),(block,1)), true, false)
final_goal(3, in_tower((block,2),(block,2)), true, false)
final_goal(3, in_tower((block,2),(block,3)), true, false)
final_goal(3, in_tower((block,2),(block,4)), true, false)
final_goal(3, in_tower((block,2),(block,5)), true, false)
final_goal(3, in_tower((block,2),(block,6)), true, false)
final_goal(3, in_tower((block,3),(block,1)), false, false)
final_goal(3, in_tower((block,3),(block,2)), false, false)
final_goal(3, in_tower((block,3),(block,3)), false, false)
final_goal(3, in_tower((block,3),(block,4)), true, false)
final_goal(3, in_tower((block,3),(block,5)), true, false)
final_goal(3, in_tower((block,3),(block,6)), true, false)
final_goal(3, in_tower((block,4),(block,1)), true, false)
final_goal(3, in_tower((block,4),(block,2)), true, false)
final_goal(3, in_tower((block,4),(block,3)), true, false)
final_goal(3, in_tower((block,4),(block,4)), true, false)
final_goal(3, in_tower((block,4),(block,5)), true, false)
final_goal(3, in_tower((block,4),(block,6)), true, false)
final_goal(3, in_tower((block,5),(block,1)), true, false)
final_goal(3, in_tower((block,5),(block,2)), true, false)
final_goal(3, in_tower((block,5),(block,3)), true, false)
final_goal(3, in_tower((block,5),(block,4)), true, false)
final_goal(3, in_tower((block,5),(block,5)), true, false)
final_goal(3, in_tower((block,5),(block,6)), true, false)
final_goal(3, in_tower((block,6),(block,1)), true, false)
final_goal(3, in_tower((block,6),(block,2)), true, false)
final_goal(3, in_tower((block,6),(block,3)), true, false)
final_goal(3, in_tower((block,6),(block,4)), false, false)
final_goal(3, in_tower((block,6),(block,5)), false, false)
final_goal(3, in_tower((block,6),(block,6)), false, false)
final_goal(3, on((block,1)), (block,3), false)
final_goal(3, on((block,1)), (block,4), false)
final_goal(3, on((block,1)), (block,5), false)
final_goal(3, on((block,1)), (block,6), false)
final_goal(3, on((block,1)), nothing, false)
final_goal(3, on((block,1)), puzzle_room_table, false)
final_goal(3, on((block,2)), (block,1), false)
final_goal(3, on((block,2)), (block,4), false)
final_goal(3, on((block,2)), (block,5), false)
final_goal(3, on((block,2)), (block,6), false)
final_goal(3, on((block,2)), nothing, false)
final_goal(3, on((block,2)), puzzle_room_table, false)
final_goal(3, on((block,3)), (block,1), false)
final_goal(3, on((block,3)), (block,2), false)
final_goal(3, on((block,3)), (block,4), false)
final_goal(3, on((block,3)), (block,5), false)
final_goal(3, on((block,3)), (block,6), false)
final_goal(3, on((block,3)), nothing, false)
final_goal(3, on((block,4)), (block,1), false)
final_goal(3, on((block,4)), (block,2), false)
final_goal(3, on((block,4)), (block,3), false)
final_goal(3, on((block,4)), (block,6), false)
final_goal(3, on((block,4)), nothing, false)
final_goal(3, on((block,4)), puzzle_room_table, false)
final_goal(3, on((block,5)), (block,1), false)
final_goal(3, on((block,5)), (block,2), false)
final_goal(3, on((block,5)), (block,3), false)
final_goal(3, on((block,5)), (block,4), false)
final_goal(3, on((block,5)), nothing, false)
final_goal(3, on((block,5)), puzzle_room_table, false)
final_goal(3, on((block,6)), (block,1), false)
final_goal(3, on((block,6)), (block,2), false)
final_goal(3, on((block,6)), (block,3), false)
final_goal(3, on((block,6)), (block,4), false)
final_goal(3, on((block,6)), (block,5), false)
final_goal(3, on((block,6)), nothing, false)
final_goal(3, tower_base((block,1)), true, false)
final_goal(3, tower_base((block,2)), true, false)
final_goal(3, tower_base((block,3)), false, false)
final_goal(3, tower_base((block,4)), true, false)
final_goal(3, tower_base((block,5)), true, false)
final_goal(3, tower_base((block,6)), false, false)
final_goal(3, unordered_tower((block,1)), true, false)
final_goal(3, unordered_tower((block,2)), true, false)
final_goal(3, unordered_tower((block,3)), true, false)
final_goal(3, unordered_tower((block,4)), true, false)
final_goal(3, unordered_tower((block,5)), true, false)
final_goal(3, unordered_tower((block,6)), true, false)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,6)), false, true)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 2         
      ================================================      

final_goal(2, complete(blue), false, false)
final_goal(2, complete(red), false, false)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), true, false)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Positive final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,6)), false, true)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> 

      ================================================      
        Negative final-Goals at abstraction level 1         
      ================================================      

final_goal(1, complete(blue), false, false)
final_goal(1, complete(red), false, false)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), true, false)

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Hierarchical planning problem successfully initialised:
Initial State is UNIQUE, Final-Goal is UNIQUE

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> The given problem specification has a unique interpretation (exactly one stable model exists).

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Arguments:
	('bottom_level', 1)
	('top_level', None)
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('online_method', <OnlineMethod.GroundFirst: 'ground-first'>)
	('save_grounding', True)
	('use_search_length_bound', True)
	('avoid_refining_sgoals_marked_for_blending', False)
	('make_observable', False)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('minimise_actions', None)
	('detect_interleaving', False)
	('detect_dependencies', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', {1: 150, 2: 100, 3: 50})
	('pause_on_level_change', False)
	('pause_on_increment_change', False)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Generating hierarchical plan : LEVELS [1-3] : ONLINE MODE

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 1 : Solved problems = 0 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Current valid planning level range: [3-3]

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 1 by method ground-first: [1-3]

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Starting top-level classical planning: level = 3

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', False)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', None)
	('last_sgoals', None)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 50)
	('level', 3)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 3
concurrency = True
conformance = False
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 1
start_step = 0
is_initial = True
is_final = True
complete_planning = True
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 0

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [3] : Concurrency enabled : Problem type = classical : Minimum search length bound = disabled with value = 0

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = False
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-39-13] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-39-13] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 68 rules into program part ash_initial_state:

holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 142 rules into program part ash_goal_state:

final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-39-13] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000027C94BA53A0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=50, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'false', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None)]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 563 rules

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.003958499999999976s

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(3, 'classical')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(3), Function('classical', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.023517s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005634s with result Satisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000027C94BAF950>

[13-11-2021_23-39-13] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 3)
	('start_step', 0)
	('last_sgoals', 1)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000027C94BAF950>)

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, true). %* None *%
#program optimisation_module(#inc, 0, true, false, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106050s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007926s with result Unsatisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11397560000000029, Incremental time limit = None
Running cumulative time = 0.11397560000000029, Cumulative time limit = 3600
Used memory = (RSS = 112.949219Mb, VMS = 99.878906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.101079s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004406s with result Unsatisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10548530000000023, Incremental time limit = None
Running cumulative time = 0.21946090000000051, Cumulative time limit = 3600
Used memory = (RSS = 114.628906Mb, VMS = 101.710938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.103055s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006940s with result Unsatisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10999490000000023, Incremental time limit = None
Running cumulative time = 0.32945580000000074, Cumulative time limit = 3600
Used memory = (RSS = 115.562500Mb, VMS = 102.609375Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095132s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004944s with result Unsatisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10007680000000008, Incremental time limit = None
Running cumulative time = 0.4295326000000008, Cumulative time limit = 3600
Used memory = (RSS = 117.507812Mb, VMS = 104.652344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094433s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005208s with result Unsatisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09964090000000025, Incremental time limit = None
Running cumulative time = 0.5291735000000011, Cumulative time limit = 3600
Used memory = (RSS = 119.820312Mb, VMS = 107.039062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)])]

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102059s.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006586s with result Unsatisfiable.

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10864530000000006, Incremental time limit = None
Running cumulative time = 0.6378188000000011, Cumulative time limit = 3600
Used memory = (RSS = 123.148438Mb, VMS = 110.160156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)])]

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.099356s.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007647s with result Unsatisfiable.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10700319999999985, Incremental time limit = None
Running cumulative time = 0.744822000000001, Cumulative time limit = 3600
Used memory = (RSS = 126.093750Mb, VMS = 113.324219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)])]

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.115070s.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008045s with result Unsatisfiable.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12311439999999996, Incremental time limit = None
Running cumulative time = 0.8679364000000009, Cumulative time limit = 3600
Used memory = (RSS = 128.941406Mb, VMS = 116.042969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)])]

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.109056s.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010778s with result Unsatisfiable.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11983370000000004, Incremental time limit = None
Running cumulative time = 0.987770100000001, Cumulative time limit = 3600
Used memory = (RSS = 132.710938Mb, VMS = 120.289062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)])]

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.106964s.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015268s with result Unsatisfiable.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12223219999999957, Incremental time limit = None
Running cumulative time = 1.1100023000000006, Cumulative time limit = 3600
Used memory = (RSS = 134.734375Mb, VMS = 122.062500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)])]

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.107339s.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019248s with result Unsatisfiable.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12658729999999974, Incremental time limit = None
Running cumulative time = 1.2365896000000003, Cumulative time limit = 3600
Used memory = (RSS = 136.703125Mb, VMS = 123.832031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)])]

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125782s.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.030791s with result Unsatisfiable.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.15657280000000018, Incremental time limit = None
Running cumulative time = 1.3931624000000005, Cumulative time limit = 3600
Used memory = (RSS = 141.222656Mb, VMS = 129.363281Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)])]

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.110420s.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062064s with result Unsatisfiable.

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17248470000000005, Incremental time limit = None
Running cumulative time = 1.5656471000000005, Cumulative time limit = 3600
Used memory = (RSS = 142.867188Mb, VMS = 130.941406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =     50

[13-11-2021_23-39-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)])]

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.141959s.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.132968s with result Satisfiable.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2749277999999995, Incremental time limit = None
Running cumulative time = 1.8405749, Cumulative time limit = 3600
Used memory = (RSS = 149.242188Mb, VMS = 137.085938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.517756s, Solving = 0.322819s, Total = 1.840575s, Memory = (RSS = 149.242188Mb, VMS = 137.085938Mb)), Calls = 14
Final Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 3, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.106050s, Solving = 0.007926s, Total = 0.113976s, Memory = (RSS = 112.949219Mb, VMS = 99.878906Mb)
2 : Statistics :: Grounding = 0.101079s, Solving = 0.004406s, Total = 0.105485s, Memory = (RSS = 114.628906Mb, VMS = 101.710938Mb)
3 : Statistics :: Grounding = 0.103055s, Solving = 0.006940s, Total = 0.109995s, Memory = (RSS = 115.562500Mb, VMS = 102.609375Mb)
4 : Statistics :: Grounding = 0.095132s, Solving = 0.004944s, Total = 0.100077s, Memory = (RSS = 117.507812Mb, VMS = 104.652344Mb)
5 : Statistics :: Grounding = 0.094433s, Solving = 0.005208s, Total = 0.099641s, Memory = (RSS = 119.820312Mb, VMS = 107.039062Mb)
6 : Statistics :: Grounding = 0.102059s, Solving = 0.006586s, Total = 0.108645s, Memory = (RSS = 123.148438Mb, VMS = 110.160156Mb)
7 : Statistics :: Grounding = 0.099356s, Solving = 0.007647s, Total = 0.107003s, Memory = (RSS = 126.093750Mb, VMS = 113.324219Mb)
8 : Statistics :: Grounding = 0.115070s, Solving = 0.008045s, Total = 0.123114s, Memory = (RSS = 128.941406Mb, VMS = 116.042969Mb)
9 : Statistics :: Grounding = 0.109056s, Solving = 0.010778s, Total = 0.119834s, Memory = (RSS = 132.710938Mb, VMS = 120.289062Mb)
10 : Statistics :: Grounding = 0.106964s, Solving = 0.015268s, Total = 0.122232s, Memory = (RSS = 134.734375Mb, VMS = 122.062500Mb)
11 : Statistics :: Grounding = 0.107339s, Solving = 0.019248s, Total = 0.126587s, Memory = (RSS = 136.703125Mb, VMS = 123.832031Mb)
12 : Statistics :: Grounding = 0.125782s, Solving = 0.030791s, Total = 0.156573s, Memory = (RSS = 141.222656Mb, VMS = 129.363281Mb)
13 : Statistics :: Grounding = 0.110420s, Solving = 0.062064s, Total = 0.172485s, Memory = (RSS = 142.867188Mb, VMS = 130.941406Mb)
14 : Statistics :: Grounding = 0.141959s, Solving = 0.132968s, Total = 0.274928s, Memory = (RSS = 149.242188Mb, VMS = 137.085938Mb)

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 1.840575s due to: Stop condition reached.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.517756s, Solving = 0.322819s, Total = 1.840575s, Memory = (RSS = 149.242188Mb, VMS = 137.085938Mb)), Calls = 14
Model :: Total atoms = 7619, Cost = (21, 0), Optimality proven = False, Number = 3, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 14 :: Actions = 21                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 3:
    Planned actions:
        talos : move(puzzle_room)
Step 4:
    Planned actions:
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 5:
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 6:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 7:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 8:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))
Step 9:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 10:
    Planned actions:
        talos : lift(manipulator_arm_1,(block,1))
        talos : release(manipulator_arm_2,(block,2))
Step 11:
    Planned actions:
        talos : move(store_room)
Step 12:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 13:
    Planned actions:
        talos : move(puzzle_room)
Step 14:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,4),(block,5))

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 0, Actions = 0
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.870s (Gro =   1.541s, Sea =   0.328s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))

[13-11-2021_23-39-15] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=14, start_step=0, blend=Blend(left=0, right=0.2)

[13-11-2021_23-39-15] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=7, large_group_size=8

[13-11-2021_23-39-15] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=7, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.870s (Gro =   1.541s, Sea =   0.328s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 1:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.870s (Gro =   1.541s, Sea =   0.328s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-8]

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-8], problem number = 1, increment number = 1

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 8)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 8
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 7

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-8] : Minimum search length bound = disabled with value = 7

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-39-15] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-39-15] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).
holds(3, complete(blue), false, 0).
holds(3, complete(red), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1)), true, 0).
holds(3, tower_base((block,2)), true, 0).
holds(3, tower_base((block,3)), false, 0).
holds(3, tower_base((block,4)), false, 0).
holds(3, tower_base((block,5)), false, 0).
holds(3, tower_base((block,6)), false, 0).
holds(3, unordered_tower((block,1)), true, 0).
holds(3, unordered_tower((block,2)), false, 0).
holds(3, unordered_tower((block,3)), false, 0).
holds(3, unordered_tower((block,4)), false, 0).
holds(3, unordered_tower((block,5)), false, 0).
holds(3, unordered_tower((block,6)), false, 0).

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).
final_goal(3, complete(blue), false, false).
final_goal(3, complete(blue), true, true).
final_goal(3, complete(red), false, false).
final_goal(3, complete(red), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1)), false, true).
final_goal(3, tower_base((block,1)), true, false).
final_goal(3, tower_base((block,2)), false, true).
final_goal(3, tower_base((block,2)), true, false).
final_goal(3, tower_base((block,3)), false, false).
final_goal(3, tower_base((block,3)), true, true).
final_goal(3, tower_base((block,4)), false, true).
final_goal(3, tower_base((block,4)), true, false).
final_goal(3, tower_base((block,5)), false, true).
final_goal(3, tower_base((block,5)), true, false).
final_goal(3, tower_base((block,6)), false, false).
final_goal(3, tower_base((block,6)), true, true).
final_goal(3, unordered_tower((block,1)), false, true).
final_goal(3, unordered_tower((block,1)), true, false).
final_goal(3, unordered_tower((block,2)), false, true).
final_goal(3, unordered_tower((block,2)), true, false).
final_goal(3, unordered_tower((block,3)), false, true).
final_goal(3, unordered_tower((block,3)), true, false).
final_goal(3, unordered_tower((block,4)), false, true).
final_goal(3, unordered_tower((block,4)), true, false).
final_goal(3, unordered_tower((block,5)), false, true).
final_goal(3, unordered_tower((block,5)), true, false).
final_goal(3, unordered_tower((block,6)), false, true).
final_goal(3, unordered_tower((block,6)), true, false).

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 2).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3).
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4).
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 6).
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 6).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7).
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8).

[13-11-2021_23-39-15] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000027C94BB3AF0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=100, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 792 rules

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005996199999999341s

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.031525s.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005533s with result Satisfiable.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000027C97CF3F90>

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 8)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000027C97CF3F90>)

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.154991s.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010858s with result Unsatisfiable.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16584860000000035, Incremental time limit = None
Running cumulative time = 0.16584860000000035, Cumulative time limit = 3600
Used memory = (RSS = 127.007812Mb, VMS = 114.789062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.15499110000000016, solving_time=0.010857500000000186, total_time=0.16584860000000035, memory=Memory(rss=127.0078125, vms=114.7890625), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15499110000000016, solving_time=0.010857500000000186, total_time=0.16584860000000035, memory=Memory(rss=127.0078125, vms=114.7890625), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 8549.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10282.0, 'bodies_tr': 10282.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 18251.0, 'rules_normal': 17906.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18249.0, 'rules_tr_normal': 17906.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 15357.0, 'eqs_atom': 3454.0, 'eqs_body': 1143.0, 'eqs_other': 10760.0}, 'lpStep': {'atoms': 4054.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9106.0, 'bodies_tr': 9106.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 226.0, 'count_bodies_tr': 226.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 358.0, 'rules': 13397.0, 'rules_normal': 13052.0, 'rules_choice': 331.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13395.0, 'rules_tr_normal': 13052.0, 'rules_tr_choice': 331.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9219.0, 'eqs_atom': 1171.0, 'eqs_body': 378.0, 'eqs_other': 7670.0}, 'generator': {'vars': 1841.0, 'vars_eliminated': 0.0, 'vars_frozen': 1255.0, 'constraints': 27.0, 'constraints_binary': 779.0, 'constraints_ternary': 121.0, 'acyc_edges': 0.0, 'complexity': 939.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 4.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 147.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.165557861328125, 'cpu': 0.171875, 'solve': 0.0019969940185546875, 'unsat': 0.0019969940185546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.209442138671875, 'cpu': 0.21875, 'solve': 0.0049896240234375, 'unsat': 0.0019969940185546875, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 4.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 155.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 4.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168120s.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.004367s with result Unsatisfiable.

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17248700000000028, Incremental time limit = None
Running cumulative time = 0.3383356000000006, Cumulative time limit = 3600
Used memory = (RSS = 129.320312Mb, VMS = 117.980469Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-15] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.32311090000000053, solving_time=0.015224700000000091, total_time=0.3383356000000006, memory=Memory(rss=129.3203125, vms=117.98046875), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16811980000000037, solving_time=0.0043671999999999045, total_time=0.17248700000000028, memory=Memory(rss=129.3203125, vms=117.98046875), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 10233.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16880.0, 'bodies_tr': 16880.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 406.0, 'count_bodies_tr': 406.0, 'sccs': 26.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 410.0, 'rules': 26955.0, 'rules_normal': 26444.0, 'rules_choice': 483.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 26941.0, 'rules_tr_normal': 26444.0, 'rules_tr_choice': 483.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 18491.0, 'eqs_atom': 4176.0, 'eqs_body': 1590.0, 'eqs_other': 12725.0}, 'lpStep': {'atoms': 1684.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6598.0, 'bodies_tr': 6598.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 6.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 52.0, 'rules': 8704.0, 'rules_normal': 8538.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 8692.0, 'rules_tr_normal': 8538.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3134.0, 'eqs_atom': 722.0, 'eqs_body': 447.0, 'eqs_other': 1965.0}, 'generator': {'vars': 1982.0, 'vars_eliminated': 0.0, 'vars_frozen': 1386.0, 'constraints': 71.0, 'constraints_binary': 1234.0, 'constraints_ternary': 211.0, 'acyc_edges': 0.0, 'complexity': 1544.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 9.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 186.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 3.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 9.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 2.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.17266845703125, 'cpu': 0.15625, 'solve': 0.000995635986328125, 'unsat': 0.000995635986328125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.382110595703125, 'cpu': 0.375, 'solve': 0.005985260009765625, 'unsat': 0.0029926300048828125, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 13.0, 'lemmas_binary': 3.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 341.0, 'guiding_paths': 21.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 6.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 13.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146883s.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005220s with result Unsatisfiable.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15210359999999934, Incremental time limit = None
Running cumulative time = 0.49043919999999996, Cumulative time limit = 3600
Used memory = (RSS = 130.117188Mb, VMS = 118.230469Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.4699941000000001, solving_time=0.020445099999999883, total_time=0.49043919999999996, memory=Memory(rss=130.1171875, vms=118.23046875), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14688319999999955, solving_time=0.005220399999999792, total_time=0.15210359999999934, memory=Memory(rss=130.1171875, vms=118.23046875), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 12252.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 23743.0, 'bodies_tr': 23743.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 586.0, 'count_bodies_tr': 586.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 36120.0, 'rules_normal': 35443.0, 'rules_choice': 635.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 36094.0, 'rules_tr_normal': 35443.0, 'rules_tr_choice': 635.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 22938.0, 'eqs_atom': 5083.0, 'eqs_body': 2048.0, 'eqs_other': 15807.0}, 'lpStep': {'atoms': 2019.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 6863.0, 'bodies_tr': 6863.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 8.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 76.0, 'rules': 9165.0, 'rules_normal': 8999.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9153.0, 'rules_tr_normal': 8999.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4447.0, 'eqs_atom': 907.0, 'eqs_body': 458.0, 'eqs_other': 3082.0}, 'generator': {'vars': 2331.0, 'vars_eliminated': 0.0, 'vars_frozen': 1645.0, 'constraints': 145.0, 'constraints_binary': 2397.0, 'constraints_ternary': 540.0, 'acyc_edges': 0.0, 'complexity': 3142.0}}, 'solving': {'solvers': {'choices': 131.0, 'conflicts': 29.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 10.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 20.0, 'distributed_sum_lbd': 24.0, 'integrated': 99.0, 'lemmas': 107.0, 'lits_learnt': 157.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 79.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 287.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 4.0, 'lemmas_other': 83.0, 'lits_conflict': 33.0, 'lits_loop': 24.0, 'lits_other': 100.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 10.0, 'levels': 516.0, 'levels_bounded': 415.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}, 'summary': {'call': 3.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.15259170532226562, 'cpu': 0.15625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.5347023010253906, 'cpu': 0.53125, 'solve': 0.0079803466796875, 'unsat': 0.0049877166748046875, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 131.0, 'conflicts': 36.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 10.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 30.0, 'integrated': 99.0, 'lemmas': 113.0, 'lits_learnt': 170.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 79.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 628.0, 'guiding_paths': 29.0, 'splits': 0.0, 'lemmas_conflict': 20.0, 'lemmas_loop': 10.0, 'lemmas_other': 83.0, 'lits_conflict': 33.0, 'lits_loop': 37.0, 'lits_other': 100.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 10.0, 'levels': 516.0, 'levels_bounded': 415.0, 'max': 52.0, 'max_executed': 52.0, 'max_bounded': 42.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.134755s.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.005940s with result Unsatisfiable.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1406944999999995, Incremental time limit = None
Running cumulative time = 0.6311336999999995, Cumulative time limit = 3600
Used memory = (RSS = 132.773438Mb, VMS = 122.027344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.6047488999999997, solving_time=0.026384799999999764, total_time=0.6311336999999995, memory=Memory(rss=132.7734375, vms=122.02734375), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.13475479999999962, solving_time=0.005939699999999881, total_time=0.1406944999999995, memory=Memory(rss=132.7734375, vms=122.02734375), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 14430.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 30879.0, 'bodies_tr': 30879.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 766.0, 'count_bodies_tr': 766.0, 'sccs': 44.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 572.0, 'rules': 45588.0, 'rules_normal': 44745.0, 'rules_choice': 787.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 45554.0, 'rules_tr_normal': 44745.0, 'rules_tr_choice': 787.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 14.0, 'eqs': 27384.0, 'eqs_atom': 5977.0, 'eqs_body': 2440.0, 'eqs_other': 18967.0}, 'lpStep': {'atoms': 2178.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7136.0, 'bodies_tr': 7136.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9468.0, 'rules_normal': 9302.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9460.0, 'rules_tr_normal': 9302.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4446.0, 'eqs_atom': 894.0, 'eqs_body': 392.0, 'eqs_other': 3160.0}, 'generator': {'vars': 2943.0, 'vars_eliminated': 0.0, 'vars_frozen': 2091.0, 'constraints': 214.0, 'constraints_binary': 4273.0, 'constraints_ternary': 1043.0, 'acyc_edges': 0.0, 'complexity': 5626.0}}, 'solving': {'solvers': {'choices': 114.0, 'conflicts': 30.0, 'conflicts_analyzed': 18.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 11.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 21.0, 'integrated': 55.0, 'lemmas': 68.0, 'lits_learnt': 152.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 36.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 357.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 15.0, 'lemmas_other': 36.0, 'lits_conflict': 30.0, 'lits_loop': 82.0, 'lits_other': 40.0, 'jumps': {'jumps': 18.0, 'jumps_bounded': 13.0, 'levels': 747.0, 'levels_bounded': 669.0, 'max': 61.0, 'max_executed': 53.0, 'max_bounded': 52.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.14162254333496094, 'cpu': 0.140625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.6763248443603516, 'cpu': 0.671875, 'solve': 0.009975433349609375, 'unsat': 0.0069828033447265625, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 245.0, 'conflicts': 66.0, 'conflicts_analyzed': 39.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 21.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 40.0, 'distributed_sum_lbd': 51.0, 'integrated': 154.0, 'lemmas': 181.0, 'lits_learnt': 322.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 115.0, 'integrated_jumps': 72.0, 'guiding_paths_lits': 985.0, 'guiding_paths': 37.0, 'splits': 0.0, 'lemmas_conflict': 37.0, 'lemmas_loop': 25.0, 'lemmas_other': 119.0, 'lits_conflict': 63.0, 'lits_loop': 119.0, 'lits_other': 140.0, 'jumps': {'jumps': 39.0, 'jumps_bounded': 23.0, 'levels': 1263.0, 'levels_bounded': 1084.0, 'max': 61.0, 'max_executed': 53.0, 'max_bounded': 52.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147935s.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007046s with result Unsatisfiable.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.1549813999999996, Incremental time limit = None
Running cumulative time = 0.7861150999999991, Cumulative time limit = 3600
Used memory = (RSS = 135.031250Mb, VMS = 124.128906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.7526843999999997, solving_time=0.03343069999999937, total_time=0.7861150999999991, memory=Memory(rss=135.03125, vms=124.12890625), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1479355, solving_time=0.007045899999999605, total_time=0.1549813999999996, memory=Memory(rss=135.03125, vms=124.12890625), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 16702.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 38070.0, 'bodies_tr': 38070.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 946.0, 'count_bodies_tr': 946.0, 'sccs': 54.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 658.0, 'rules': 55139.0, 'rules_normal': 54130.0, 'rules_choice': 939.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 55097.0, 'rules_tr_normal': 54130.0, 'rules_tr_choice': 939.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 18.0, 'eqs': 31972.0, 'eqs_atom': 6878.0, 'eqs_body': 2841.0, 'eqs_other': 22253.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7191.0, 'bodies_tr': 7191.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9551.0, 'rules_normal': 9385.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9543.0, 'rules_tr_normal': 9385.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4588.0, 'eqs_atom': 901.0, 'eqs_body': 401.0, 'eqs_other': 3286.0}, 'generator': {'vars': 3554.0, 'vars_eliminated': 0.0, 'vars_frozen': 2536.0, 'constraints': 254.0, 'constraints_binary': 5257.0, 'constraints_ternary': 1217.0, 'acyc_edges': 0.0, 'complexity': 6840.0}}, 'solving': {'solvers': {'choices': 177.0, 'conflicts': 50.0, 'conflicts_analyzed': 47.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 14.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 36.0, 'distributed_sum_lbd': 63.0, 'integrated': 99.0, 'lemmas': 136.0, 'lits_learnt': 325.0, 'lemmas_binary': 24.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.0, 'integrated_imps': 69.0, 'integrated_jumps': 77.0, 'guiding_paths_lits': 305.0, 'guiding_paths': 5.0, 'splits': 0.0, 'lemmas_conflict': 36.0, 'lemmas_loop': 11.0, 'lemmas_other': 89.0, 'lits_conflict': 88.0, 'lits_loop': 49.0, 'lits_other': 188.0, 'jumps': {'jumps': 47.0, 'jumps_bounded': 24.0, 'levels': 681.0, 'levels_bounded': 576.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 62.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.15658187866210938, 'cpu': 0.15625, 'solve': 0.002964019775390625, 'unsat': 0.002964019775390625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.8329067230224609, 'cpu': 0.828125, 'solve': 0.012939453125, 'unsat': 0.009946823120117188, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 422.0, 'conflicts': 116.0, 'conflicts_analyzed': 86.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 35.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 76.0, 'distributed_sum_lbd': 114.0, 'integrated': 253.0, 'lemmas': 317.0, 'lits_learnt': 647.0, 'lemmas_binary': 30.0, 'lemmas_ternary': 10.0, 'cpu_time': 0.015625, 'integrated_imps': 184.0, 'integrated_jumps': 149.0, 'guiding_paths_lits': 1290.0, 'guiding_paths': 42.0, 'splits': 0.0, 'lemmas_conflict': 73.0, 'lemmas_loop': 36.0, 'lemmas_other': 208.0, 'lits_conflict': 151.0, 'lits_loop': 168.0, 'lits_other': 328.0, 'jumps': {'jumps': 86.0, 'jumps_bounded': 47.0, 'levels': 1944.0, 'levels_bounded': 1660.0, 'max': 66.0, 'max_executed': 66.0, 'max_bounded': 62.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.131206s.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008216s with result Unsatisfiable.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.13942170000000065, Incremental time limit = None
Running cumulative time = 0.9255367999999997, Cumulative time limit = 3600
Used memory = (RSS = 137.960938Mb, VMS = 126.074219Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.8838904999999997, solving_time=0.041646300000000025, total_time=0.9255367999999997, memory=Memory(rss=137.9609375, vms=126.07421875), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1312061, solving_time=0.008215600000000656, total_time=0.13942170000000065, memory=Memory(rss=137.9609375, vms=126.07421875), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 18974.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45270.0, 'bodies_tr': 45270.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1126.0, 'count_bodies_tr': 1126.0, 'sccs': 64.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 744.0, 'rules': 64727.0, 'rules_normal': 63552.0, 'rules_choice': 1091.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 64677.0, 'rules_tr_normal': 63552.0, 'rules_tr_choice': 1091.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 22.0, 'eqs': 36586.0, 'eqs_atom': 7779.0, 'eqs_body': 3241.0, 'eqs_other': 25566.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7200.0, 'bodies_tr': 7200.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9588.0, 'rules_normal': 9422.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9580.0, 'rules_tr_normal': 9422.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4614.0, 'eqs_atom': 901.0, 'eqs_body': 400.0, 'eqs_other': 3313.0}, 'generator': {'vars': 4165.0, 'vars_eliminated': 0.0, 'vars_frozen': 2981.0, 'constraints': 285.0, 'constraints_binary': 5892.0, 'constraints_ternary': 1242.0, 'acyc_edges': 0.0, 'complexity': 7547.0}}, 'solving': {'solvers': {'choices': 253.0, 'conflicts': 50.0, 'conflicts_analyzed': 41.0, 'restarts': 0.0, 'restarts_last': 10.0, 'extra': {'domain_choices': 20.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 60.0, 'integrated': 164.0, 'lemmas': 202.0, 'lits_learnt': 454.0, 'lemmas_binary': 54.0, 'lemmas_ternary': 33.0, 'cpu_time': 0.109375, 'integrated_imps': 117.0, 'integrated_jumps': 158.0, 'guiding_paths_lits': 426.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 33.0, 'lemmas_loop': 14.0, 'lemmas_other': 155.0, 'lits_conflict': 70.0, 'lits_loop': 64.0, 'lits_other': 320.0, 'jumps': {'jumps': 41.0, 'jumps_bounded': 21.0, 'levels': 888.0, 'levels_bounded': 799.0, 'max': 73.0, 'max_executed': 73.0, 'max_bounded': 72.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [5.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1406230926513672, 'cpu': 0.234375, 'solve': 0.0019931793212890625, 'unsat': 0.0019931793212890625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.9735298156738281, 'cpu': 1.0625, 'solve': 0.014932632446289062, 'unsat': 0.01194000244140625, 'sat': 0.000995635986328125}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 675.0, 'conflicts': 166.0, 'conflicts_analyzed': 127.0, 'restarts': 0.0, 'restarts_last': 13.0, 'extra': {'domain_choices': 55.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 110.0, 'distributed_sum_lbd': 174.0, 'integrated': 417.0, 'lemmas': 519.0, 'lits_learnt': 1101.0, 'lemmas_binary': 84.0, 'lemmas_ternary': 43.0, 'cpu_time': 0.125, 'integrated_imps': 301.0, 'integrated_jumps': 307.0, 'guiding_paths_lits': 1716.0, 'guiding_paths': 53.0, 'splits': 0.0, 'lemmas_conflict': 106.0, 'lemmas_loop': 50.0, 'lemmas_other': 363.0, 'lits_conflict': 221.0, 'lits_loop': 232.0, 'lits_other': 648.0, 'jumps': {'jumps': 127.0, 'jumps_bounded': 68.0, 'levels': 2832.0, 'levels_bounded': 2459.0, 'max': 73.0, 'max_executed': 73.0, 'max_bounded': 72.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126280s.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051589s with result Satisfiable.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1778688999999991, Incremental time limit = None
Running cumulative time = 1.1034056999999988, Cumulative time limit = 3600
Used memory = (RSS = 140.597656Mb, VMS = 128.792969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 4
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.010170s, Solving = 0.093235s, Total = 1.103406s, Memory = (RSS = 140.597656Mb, VMS = 128.792969Mb)), Calls = 7
Final Model :: Total atoms = 5611, Cost = (6, 0), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.0101702999999995, solving_time=0.0932353999999993, total_time=1.1034056999999988, memory=Memory(rss=140.59765625, vms=128.79296875), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.12627979999999983, solving_time=0.05158909999999928, total_time=0.1778688999999991, memory=Memory(rss=140.59765625, vms=128.79296875), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 21246.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 52509.0, 'bodies_tr': 52509.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1306.0, 'count_bodies_tr': 1306.0, 'sccs': 74.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 830.0, 'rules': 74414.0, 'rules_normal': 73073.0, 'rules_choice': 1243.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 74356.0, 'rules_tr_normal': 73073.0, 'rules_tr_choice': 1243.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 26.0, 'eqs': 41320.0, 'eqs_atom': 8720.0, 'eqs_body': 3634.0, 'eqs_other': 28966.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7239.0, 'bodies_tr': 7239.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9687.0, 'rules_normal': 9521.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9679.0, 'rules_tr_normal': 9521.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4734.0, 'eqs_atom': 941.0, 'eqs_body': 393.0, 'eqs_other': 3400.0}, 'generator': {'vars': 4794.0, 'vars_eliminated': 0.0, 'vars_frozen': 3430.0, 'constraints': 344.0, 'constraints_binary': 7298.0, 'constraints_ternary': 1646.0, 'acyc_edges': 0.0, 'complexity': 9444.0}}, 'solving': {'solvers': {'choices': 1618.0, 'conflicts': 105.0, 'conflicts_analyzed': 98.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 22.0, 'models': 3.0, 'models_level': 470.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 78.0, 'distributed_sum_lbd': 178.0, 'integrated': 404.0, 'lemmas': 517.0, 'lits_learnt': 2381.0, 'lemmas_binary': 146.0, 'lemmas_ternary': 81.0, 'cpu_time': 0.0625, 'integrated_imps': 146.0, 'integrated_jumps': 614.0, 'guiding_paths_lits': 648.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 88.0, 'lemmas_loop': 44.0, 'lemmas_other': 385.0, 'lits_conflict': 658.0, 'lits_loop': 245.0, 'lits_other': 1478.0, 'jumps': {'jumps': 98.0, 'jumps_bounded': 18.0, 'levels': 895.0, 'levels_bounded': 573.0, 'max': 153.0, 'max_executed': 153.0, 'max_bounded': 146.0}}}}, 'summary': {'call': 7.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [6.0, 0.0], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 6.0, 'times': {'total': 0.17949295043945312, 'cpu': 0.203125, 'solve': 0.0458526611328125, 'unsat': 0.03191566467285156, 'sat': 0.0019702911376953125}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.1530227661132812, 'cpu': 1.265625, 'solve': 0.06078529357910156, 'unsat': 0.04385566711425781, 'sat': 0.0029659271240234375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 2293.0, 'conflicts': 271.0, 'conflicts_analyzed': 225.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 77.0, 'models': 4.0, 'models_level': 471.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 188.0, 'distributed_sum_lbd': 352.0, 'integrated': 821.0, 'lemmas': 1036.0, 'lits_learnt': 3482.0, 'lemmas_binary': 230.0, 'lemmas_ternary': 124.0, 'cpu_time': 0.1875, 'integrated_imps': 447.0, 'integrated_jumps': 921.0, 'guiding_paths_lits': 2364.0, 'guiding_paths': 68.0, 'splits': 0.0, 'lemmas_conflict': 194.0, 'lemmas_loop': 94.0, 'lemmas_other': 748.0, 'lits_conflict': 879.0, 'lits_loop': 477.0, 'lits_other': 2126.0, 'jumps': {'jumps': 225.0, 'jumps_bounded': 86.0, 'levels': 3727.0, 'levels_bounded': 3032.0, 'max': 153.0, 'max_executed': 153.0, 'max_bounded': 146.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7}

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None)

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 7]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 2)
sub_goal(3, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 2)

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.148998s.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 8: original = External(symbol='current_last_sgoals(2, 7)', truth=True, inc_range=None), conversion = current_last_sgoals(2,7).

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.008540s with result Unsatisfiable.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15753810000000001, Incremental time limit = None
Running cumulative time = 1.2609437999999988, Cumulative time limit = 3600
Used memory = (RSS = 143.218750Mb, VMS = 130.707031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.1591684999999998, solving_time=0.10177529999999901, total_time=1.2609437999999988, memory=Memory(rss=143.21875, vms=130.70703125), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1489982000000003, solving_time=0.008539899999999712, total_time=0.15753810000000001, memory=Memory(rss=143.21875, vms=130.70703125), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 23518.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 59727.0, 'bodies_tr': 59727.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1486.0, 'count_bodies_tr': 1486.0, 'sccs': 84.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 916.0, 'rules': 84076.0, 'rules_normal': 82569.0, 'rules_choice': 1395.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 84010.0, 'rules_tr_normal': 82569.0, 'rules_tr_choice': 1395.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 30.0, 'eqs': 45988.0, 'eqs_atom': 9621.0, 'eqs_body': 4034.0, 'eqs_other': 32333.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7218.0, 'bodies_tr': 7218.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 10.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 86.0, 'rules': 9662.0, 'rules_normal': 9496.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9654.0, 'rules_tr_normal': 9496.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 4668.0, 'eqs_atom': 901.0, 'eqs_body': 400.0, 'eqs_other': 3367.0}, 'generator': {'vars': 5405.0, 'vars_eliminated': 0.0, 'vars_frozen': 3875.0, 'constraints': 361.0, 'constraints_binary': 7553.0, 'constraints_ternary': 1633.0, 'acyc_edges': 0.0, 'complexity': 9707.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 5.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.15857696533203125, 'cpu': 0.15625, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.3115997314453125, 'cpu': 1.421875, 'solve': 0.06278038024902344, 'unsat': 0.04585075378417969, 'sat': 0.0029659271240234375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 2293.0, 'conflicts': 276.0, 'conflicts_analyzed': 225.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 77.0, 'models': 4.0, 'models_level': 471.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 188.0, 'distributed_sum_lbd': 352.0, 'integrated': 821.0, 'lemmas': 1036.0, 'lits_learnt': 3482.0, 'lemmas_binary': 230.0, 'lemmas_ternary': 124.0, 'cpu_time': 0.1875, 'integrated_imps': 447.0, 'integrated_jumps': 921.0, 'guiding_paths_lits': 2910.0, 'guiding_paths': 74.0, 'splits': 0.0, 'lemmas_conflict': 194.0, 'lemmas_loop': 94.0, 'lemmas_other': 748.0, 'lits_conflict': 879.0, 'lits_loop': 477.0, 'lits_other': 2126.0, 'jumps': {'jumps': 225.0, 'jumps_bounded': 86.0, 'levels': 3727.0, 'levels_bounded': 3032.0, 'max': 153.0, 'max_executed': 153.0, 'max_bounded': 146.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-16] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.153129s.

[13-11-2021_23-39-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023768s with result Satisfiable.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17689730000000115, Incremental time limit = None
Running cumulative time = 1.4378411, Cumulative time limit = 3600
Used memory = (RSS = 147.066406Mb, VMS = 135.027344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.312298s, Solving = 0.125543s, Total = 1.437841s, Memory = (RSS = 147.066406Mb, VMS = 135.027344Mb)), Calls = 9
Final Model :: Total atoms = 6285, Cost = (10, 0), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.3122978000000005, solving_time=0.12554329999999947, total_time=1.4378411, memory=Memory(rss=147.06640625, vms=135.02734375), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1531293000000007, solving_time=0.023768000000000455, total_time=0.17689730000000115, memory=Memory(rss=147.06640625, vms=135.02734375), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 25790.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 67445.0, 'bodies_tr': 67445.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1666.0, 'count_bodies_tr': 1666.0, 'sccs': 104.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1236.0, 'rules': 94426.0, 'rules_normal': 92753.0, 'rules_choice': 1547.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 94358.0, 'rules_tr_normal': 92753.0, 'rules_tr_choice': 1547.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 40.0, 'eqs': 51754.0, 'eqs_atom': 10643.0, 'eqs_body': 4251.0, 'eqs_other': 36860.0}, 'lpStep': {'atoms': 2272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7718.0, 'bodies_tr': 7718.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 320.0, 'rules': 10350.0, 'rules_normal': 10184.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10348.0, 'rules_tr_normal': 10184.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 5766.0, 'eqs_atom': 1022.0, 'eqs_body': 217.0, 'eqs_other': 4527.0}, 'generator': {'vars': 6887.0, 'vars_eliminated': 0.0, 'vars_frozen': 4869.0, 'constraints': 705.0, 'constraints_binary': 14772.0, 'constraints_ternary': 3455.0, 'acyc_edges': 0.0, 'complexity': 19152.0}}, 'solving': {'solvers': {'choices': 1754.0, 'conflicts': 132.0, 'conflicts_analyzed': 116.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 95.0, 'models': 1.0, 'models_level': 195.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 91.0, 'distributed_sum_lbd': 150.0, 'integrated': 533.0, 'lemmas': 732.0, 'lits_learnt': 3590.0, 'lemmas_binary': 91.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.03125, 'integrated_imps': 433.0, 'integrated_jumps': 924.0, 'guiding_paths_lits': 707.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 97.0, 'lemmas_loop': 165.0, 'lemmas_other': 470.0, 'lits_conflict': 496.0, 'lits_loop': 1020.0, 'lits_other': 2074.0, 'jumps': {'jumps': 116.0, 'jumps_bounded': 60.0, 'levels': 3880.0, 'levels_bounded': 3656.0, 'max': 135.0, 'max_executed': 135.0, 'max_bounded': 134.0}}}}, 'summary': {'call': 9.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [10.0, 0.0], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.17742347717285156, 'cpu': 0.1875, 'solve': 0.015958786010742188, 'unsat': 0.011968612670898438, 'sat': 0.00399017333984375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 1.489023208618164, 'cpu': 1.609375, 'solve': 0.07873916625976562, 'unsat': 0.057819366455078125, 'sat': 0.0069561004638671875}, 'models': {'enumerated': 5.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4047.0, 'conflicts': 408.0, 'conflicts_analyzed': 341.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 172.0, 'models': 5.0, 'models_level': 666.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 279.0, 'distributed_sum_lbd': 502.0, 'integrated': 1354.0, 'lemmas': 1768.0, 'lits_learnt': 7072.0, 'lemmas_binary': 321.0, 'lemmas_ternary': 145.0, 'cpu_time': 0.21875, 'integrated_imps': 880.0, 'integrated_jumps': 1845.0, 'guiding_paths_lits': 3617.0, 'guiding_paths': 91.0, 'splits': 0.0, 'lemmas_conflict': 291.0, 'lemmas_loop': 259.0, 'lemmas_other': 1218.0, 'lits_conflict': 1375.0, 'lits_loop': 1497.0, 'lits_other': 4200.0, 'jumps': {'jumps': 341.0, 'jumps_bounded': 146.0, 'levels': 7607.0, 'levels_bounded': 6688.0, 'max': 153.0, 'max_executed': 153.0, 'max_bounded': 146.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9}

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None)

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 9]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 3)

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.146642s.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 10: original = External(symbol='current_last_sgoals(3, 9)', truth=True, inc_range=None), conversion = current_last_sgoals(3,9).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011354s with result Unsatisfiable.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.15799559999999957, Incremental time limit = None
Running cumulative time = 1.5958366999999996, Cumulative time limit = 3600
Used memory = (RSS = 149.335938Mb, VMS = 136.753906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.4589396, solving_time=0.13689709999999966, total_time=1.5958366999999996, memory=Memory(rss=149.3359375, vms=136.75390625), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14664179999999938, solving_time=0.011353800000000192, total_time=0.15799559999999957, memory=Memory(rss=149.3359375, vms=136.75390625), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 28126.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 75370.0, 'bodies_tr': 75370.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1846.0, 'count_bodies_tr': 1846.0, 'sccs': 124.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1657.0, 'rules': 105012.0, 'rules_normal': 103173.0, 'rules_choice': 1699.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 104944.0, 'rules_tr_normal': 103173.0, 'rules_tr_choice': 1699.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 52.0, 'eqs': 56761.0, 'eqs_atom': 11689.0, 'eqs_body': 4457.0, 'eqs_other': 40615.0}, 'lpStep': {'atoms': 2336.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7925.0, 'bodies_tr': 7925.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 421.0, 'rules': 10586.0, 'rules_normal': 10420.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10586.0, 'rules_tr_normal': 10420.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5007.0, 'eqs_atom': 1046.0, 'eqs_body': 206.0, 'eqs_other': 3755.0}, 'generator': {'vars': 8645.0, 'vars_eliminated': 0.0, 'vars_frozen': 6051.0, 'constraints': 926.0, 'constraints_binary': 19353.0, 'constraints_ternary': 4536.0, 'acyc_edges': 0.0, 'complexity': 25079.0}}, 'solving': {'solvers': {'choices': 3.0, 'conflicts': 7.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 3.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 4.0, 'lemmas': 4.0, 'lits_learnt': 8.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 2.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 666.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 0.0, 'lemmas_other': 2.0, 'lits_conflict': 4.0, 'lits_loop': 0.0, 'lits_other': 4.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 3.0, 'levels': 8.0, 'levels_bounded': 5.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1601123809814453, 'cpu': 0.21875, 'solve': 0.003993988037109375, 'unsat': 0.003993988037109375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6491355895996094, 'cpu': 1.828125, 'solve': 0.082733154296875, 'unsat': 0.0618133544921875, 'sat': 0.0069561004638671875}, 'models': {'enumerated': 5.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4050.0, 'conflicts': 415.0, 'conflicts_analyzed': 344.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 175.0, 'models': 5.0, 'models_level': 666.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 281.0, 'distributed_sum_lbd': 506.0, 'integrated': 1358.0, 'lemmas': 1772.0, 'lits_learnt': 7080.0, 'lemmas_binary': 325.0, 'lemmas_ternary': 145.0, 'cpu_time': 0.28125, 'integrated_imps': 882.0, 'integrated_jumps': 1845.0, 'guiding_paths_lits': 4283.0, 'guiding_paths': 97.0, 'splits': 0.0, 'lemmas_conflict': 293.0, 'lemmas_loop': 259.0, 'lemmas_other': 1220.0, 'lits_conflict': 1379.0, 'lits_loop': 1497.0, 'lits_other': 4204.0, 'jumps': {'jumps': 344.0, 'jumps_bounded': 149.0, 'levels': 7615.0, 'levels_bounded': 6693.0, 'max': 153.0, 'max_executed': 153.0, 'max_bounded': 146.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.147638s.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016987s with result Unsatisfiable.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.16462530000000086, Incremental time limit = None
Running cumulative time = 1.7604620000000004, Cumulative time limit = 3600
Used memory = (RSS = 154.515625Mb, VMS = 142.714844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.6065776000000005, solving_time=0.15388439999999992, total_time=1.7604620000000004, memory=Memory(rss=154.515625, vms=142.71484375), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1476380000000006, solving_time=0.01698730000000026, total_time=0.16462530000000086, memory=Memory(rss=154.515625, vms=142.71484375), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 30527.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 83765.0, 'bodies_tr': 83765.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2026.0, 'count_bodies_tr': 2026.0, 'sccs': 144.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2093.0, 'rules': 116129.0, 'rules_normal': 114124.0, 'rules_choice': 1851.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 116061.0, 'rules_tr_normal': 114124.0, 'rules_tr_choice': 1851.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 64.0, 'eqs': 61894.0, 'eqs_atom': 12733.0, 'eqs_body': 4569.0, 'eqs_other': 44592.0}, 'lpStep': {'atoms': 2401.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8395.0, 'bodies_tr': 8395.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11117.0, 'rules_normal': 10951.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11117.0, 'rules_tr_normal': 10951.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5133.0, 'eqs_atom': 1044.0, 'eqs_body': 112.0, 'eqs_other': 3977.0}, 'generator': {'vars': 10534.0, 'vars_eliminated': 0.0, 'vars_frozen': 7285.0, 'constraints': 1407.0, 'constraints_binary': 28892.0, 'constraints_ternary': 6950.0, 'acyc_edges': 0.0, 'complexity': 37581.0}}, 'solving': {'solvers': {'choices': 193.0, 'conflicts': 120.0, 'conflicts_analyzed': 104.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 147.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 97.0, 'distributed_sum_lbd': 213.0, 'integrated': 499.0, 'lemmas': 952.0, 'lits_learnt': 11854.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.078125, 'integrated_imps': 308.0, 'integrated_jumps': 76.0, 'guiding_paths_lits': 847.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 98.0, 'lemmas_loop': 402.0, 'lemmas_other': 452.0, 'lits_conflict': 1686.0, 'lits_loop': 3127.0, 'lits_other': 7041.0, 'jumps': {'jumps': 104.0, 'jumps_bounded': 66.0, 'levels': 4761.0, 'levels_bounded': 4646.0, 'max': 483.0, 'max_executed': 483.0, 'max_bounded': 482.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.1655597686767578, 'cpu': 0.234375, 'solve': 0.0079803466796875, 'unsat': 0.0079803466796875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.8146953582763672, 'cpu': 2.0625, 'solve': 0.0907135009765625, 'unsat': 0.069793701171875, 'sat': 0.0069561004638671875}, 'models': {'enumerated': 5.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 4243.0, 'conflicts': 535.0, 'conflicts_analyzed': 448.0, 'restarts': 0.0, 'restarts_last': 27.0, 'extra': {'domain_choices': 322.0, 'models': 5.0, 'models_level': 666.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 378.0, 'distributed_sum_lbd': 719.0, 'integrated': 1857.0, 'lemmas': 2724.0, 'lits_learnt': 18934.0, 'lemmas_binary': 381.0, 'lemmas_ternary': 146.0, 'cpu_time': 0.359375, 'integrated_imps': 1190.0, 'integrated_jumps': 1921.0, 'guiding_paths_lits': 5130.0, 'guiding_paths': 114.0, 'splits': 0.0, 'lemmas_conflict': 391.0, 'lemmas_loop': 661.0, 'lemmas_other': 1672.0, 'lits_conflict': 3065.0, 'lits_loop': 4624.0, 'lits_other': 11245.0, 'jumps': {'jumps': 448.0, 'jumps_bounded': 215.0, 'levels': 12376.0, 'levels_bounded': 11339.0, 'max': 483.0, 'max_executed': 483.0, 'max_bounded': 482.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171712s.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.043588s with result Satisfiable.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.21530009999999944, Incremental time limit = None
Running cumulative time = 1.9757620999999999, Cumulative time limit = 3600
Used memory = (RSS = 160.316406Mb, VMS = 148.664062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 7
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.778290s, Solving = 0.197473s, Total = 1.975762s, Memory = (RSS = 160.316406Mb, VMS = 148.664062Mb)), Calls = 12
Final Model :: Total atoms = 7300, Cost = (19, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=1.7782895000000005, solving_time=0.19747259999999933, total_time=1.9757620999999999, memory=Memory(rss=160.31640625, vms=148.6640625), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17171190000000003, solving_time=0.04358819999999941, total_time=0.21530009999999944, memory=Memory(rss=160.31640625, vms=148.6640625), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 32943.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 92188.0, 'bodies_tr': 92188.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2206.0, 'count_bodies_tr': 2206.0, 'sccs': 164.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2529.0, 'rules': 127305.0, 'rules_normal': 125134.0, 'rules_choice': 2003.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 127237.0, 'rules_tr_normal': 125134.0, 'rules_tr_choice': 2003.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 76.0, 'eqs': 67082.0, 'eqs_atom': 13787.0, 'eqs_body': 4684.0, 'eqs_other': 48611.0}, 'lpStep': {'atoms': 2416.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8423.0, 'bodies_tr': 8423.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11176.0, 'rules_normal': 11010.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11176.0, 'rules_tr_normal': 11010.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5188.0, 'eqs_atom': 1054.0, 'eqs_body': 115.0, 'eqs_other': 4019.0}, 'generator': {'vars': 12433.0, 'vars_eliminated': 0.0, 'vars_frozen': 8524.0, 'constraints': 1838.0, 'constraints_binary': 37785.0, 'constraints_ternary': 9219.0, 'acyc_edges': 0.0, 'complexity': 49242.0}}, 'solving': {'solvers': {'choices': 1781.0, 'conflicts': 196.0, 'conflicts_analyzed': 182.0, 'restarts': 1.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 167.0, 'models': 2.0, 'models_level': 463.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 170.0, 'distributed_sum_lbd': 396.0, 'integrated': 990.0, 'lemmas': 1543.0, 'lits_learnt': 21446.0, 'lemmas_binary': 126.0, 'lemmas_ternary': 94.0, 'cpu_time': 0.140625, 'integrated_imps': 475.0, 'integrated_jumps': 474.0, 'guiding_paths_lits': 917.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 171.0, 'lemmas_loop': 481.0, 'lemmas_other': 891.0, 'lits_conflict': 3068.0, 'lits_loop': 3994.0, 'lits_other': 14384.0, 'jumps': {'jumps': 182.0, 'jumps_bounded': 65.0, 'levels': 3919.0, 'levels_bounded': 3287.0, 'max': 430.0, 'max_executed': 430.0, 'max_bounded': 429.0}}}}, 'summary': {'call': 12.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2184162139892578, 'cpu': 0.328125, 'solve': 0.03388404846191406, 'unsat': 0.007953643798828125, 'sat': 0.01393890380859375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.033111572265625, 'cpu': 2.390625, 'solve': 0.12459754943847656, 'unsat': 0.07774734497070312, 'sat': 0.020895004272460938}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6024.0, 'conflicts': 731.0, 'conflicts_analyzed': 630.0, 'restarts': 1.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 489.0, 'models': 7.0, 'models_level': 1129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 548.0, 'distributed_sum_lbd': 1115.0, 'integrated': 2847.0, 'lemmas': 4267.0, 'lits_learnt': 40380.0, 'lemmas_binary': 507.0, 'lemmas_ternary': 240.0, 'cpu_time': 0.5, 'integrated_imps': 1665.0, 'integrated_jumps': 2395.0, 'guiding_paths_lits': 6047.0, 'guiding_paths': 132.0, 'splits': 0.0, 'lemmas_conflict': 562.0, 'lemmas_loop': 1142.0, 'lemmas_other': 2563.0, 'lits_conflict': 6133.0, 'lits_loop': 8618.0, 'lits_other': 25629.0, 'jumps': {'jumps': 630.0, 'jumps_bounded': 280.0, 'levels': 16295.0, 'levels_bounded': 14626.0, 'max': 483.0, 'max_executed': 483.0, 'max_bounded': 482.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12}

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None)

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 12]:
sub_goal(3, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 4)

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164524s.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 13: original = External(symbol='current_last_sgoals(4, 12)', truth=True, inc_range=None), conversion = current_last_sgoals(4,12).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015040s with result Unsatisfiable.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.17956349999999954, Incremental time limit = None
Running cumulative time = 2.1553255999999994, Cumulative time limit = 3600
Used memory = (RSS = 169.574219Mb, VMS = 160.292969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.9428133, solving_time=0.21251229999999932, total_time=2.1553255999999994, memory=Memory(rss=169.57421875, vms=160.29296875), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16452379999999955, solving_time=0.01503969999999999, total_time=0.17956349999999954, memory=Memory(rss=169.57421875, vms=160.29296875), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 35376.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 100641.0, 'bodies_tr': 100641.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2386.0, 'count_bodies_tr': 2386.0, 'sccs': 184.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2965.0, 'rules': 138543.0, 'rules_normal': 136206.0, 'rules_choice': 2155.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 138475.0, 'rules_tr_normal': 136206.0, 'rules_tr_choice': 2155.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 88.0, 'eqs': 72326.0, 'eqs_atom': 14851.0, 'eqs_body': 4800.0, 'eqs_other': 52675.0}, 'lpStep': {'atoms': 2433.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8453.0, 'bodies_tr': 8453.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11238.0, 'rules_normal': 11072.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11238.0, 'rules_tr_normal': 11072.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5244.0, 'eqs_atom': 1064.0, 'eqs_body': 116.0, 'eqs_other': 4064.0}, 'generator': {'vars': 14348.0, 'vars_eliminated': 0.0, 'vars_frozen': 9770.0, 'constraints': 2323.0, 'constraints_binary': 47377.0, 'constraints_ternary': 11624.0, 'acyc_edges': 0.0, 'complexity': 61792.0}}, 'solving': {'solvers': {'choices': 7.0, 'conflicts': 18.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 7.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3.0, 'distributed_sum_lbd': 6.0, 'integrated': 1.0, 'lemmas': 23.0, 'lits_learnt': 457.0, 'lemmas_binary': 2.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 846.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 19.0, 'lemmas_other': 1.0, 'lits_conflict': 326.0, 'lits_loop': 129.0, 'lits_other': 2.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 5.0, 'levels': 14.0, 'levels_bounded': 7.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 13.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.18152999877929688, 'cpu': 0.171875, 'solve': 0.004985809326171875, 'unsat': 0.004985809326171875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.214641571044922, 'cpu': 2.5625, 'solve': 0.12958335876464844, 'unsat': 0.082733154296875, 'sat': 0.020895004272460938}, 'models': {'enumerated': 7.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6031.0, 'conflicts': 749.0, 'conflicts_analyzed': 637.0, 'restarts': 1.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 496.0, 'models': 7.0, 'models_level': 1129.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 551.0, 'distributed_sum_lbd': 1121.0, 'integrated': 2848.0, 'lemmas': 4290.0, 'lits_learnt': 40837.0, 'lemmas_binary': 509.0, 'lemmas_ternary': 240.0, 'cpu_time': 0.5, 'integrated_imps': 1666.0, 'integrated_jumps': 2395.0, 'guiding_paths_lits': 6893.0, 'guiding_paths': 144.0, 'splits': 0.0, 'lemmas_conflict': 565.0, 'lemmas_loop': 1161.0, 'lemmas_other': 2564.0, 'lits_conflict': 6459.0, 'lits_loop': 8747.0, 'lits_other': 25631.0, 'jumps': {'jumps': 637.0, 'jumps_bounded': 285.0, 'levels': 16309.0, 'levels_bounded': 14633.0, 'max': 483.0, 'max_executed': 483.0, 'max_bounded': 482.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.169856s.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044132s with result Satisfiable.

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.21398770000000056, Incremental time limit = None
Running cumulative time = 2.3693133, Cumulative time limit = 3600
Used memory = (RSS = 173.214844Mb, VMS = 162.851562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 8
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.112669s, Solving = 0.256644s, Total = 2.369313s, Memory = (RSS = 173.214844Mb, VMS = 162.851562Mb)), Calls = 14
Final Model :: Total atoms = 7971, Cost = (21, 0), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.1126689, solving_time=0.2566443999999999, total_time=2.3693133, memory=Memory(rss=173.21484375, vms=162.8515625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1698556, solving_time=0.04413210000000056, total_time=0.21398770000000056, memory=Memory(rss=173.21484375, vms=162.8515625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 37828.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 109124.0, 'bodies_tr': 109124.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2566.0, 'count_bodies_tr': 2566.0, 'sccs': 204.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3401.0, 'rules': 149843.0, 'rules_normal': 147340.0, 'rules_choice': 2307.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 149775.0, 'rules_tr_normal': 147340.0, 'rules_tr_choice': 2307.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 100.0, 'eqs': 77629.0, 'eqs_atom': 15927.0, 'eqs_body': 4914.0, 'eqs_other': 56788.0}, 'lpStep': {'atoms': 2452.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8483.0, 'bodies_tr': 8483.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11300.0, 'rules_normal': 11134.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11300.0, 'rules_tr_normal': 11134.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5303.0, 'eqs_atom': 1076.0, 'eqs_body': 114.0, 'eqs_other': 4113.0}, 'generator': {'vars': 16278.0, 'vars_eliminated': 0.0, 'vars_frozen': 11023.0, 'constraints': 2811.0, 'constraints_binary': 57098.0, 'constraints_ternary': 14036.0, 'acyc_edges': 0.0, 'complexity': 74481.0}}, 'solving': {'solvers': {'choices': 1491.0, 'conflicts': 294.0, 'conflicts_analyzed': 280.0, 'restarts': 1.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 431.0, 'models': 1.0, 'models_level': 266.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 258.0, 'distributed_sum_lbd': 623.0, 'integrated': 1542.0, 'lemmas': 2345.0, 'lits_learnt': 79702.0, 'lemmas_binary': 225.0, 'lemmas_ternary': 146.0, 'cpu_time': 0.21875, 'integrated_imps': 543.0, 'integrated_jumps': 307.0, 'guiding_paths_lits': 1057.0, 'guiding_paths': 20.0, 'splits': 0.0, 'lemmas_conflict': 265.0, 'lemmas_loop': 743.0, 'lemmas_other': 1337.0, 'lits_conflict': 13181.0, 'lits_loop': 6145.0, 'lits_other': 60376.0, 'jumps': {'jumps': 280.0, 'jumps_bounded': 63.0, 'levels': 6631.0, 'levels_bounded': 6135.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}, 'summary': {'call': 14.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.215423583984375, 'cpu': 0.390625, 'solve': 0.03390693664550781, 'unsat': 0.010969161987304688, 'sat': 0.022937774658203125}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.430065155029297, 'cpu': 2.953125, 'solve': 0.16349029541015625, 'unsat': 0.09370231628417969, 'sat': 0.04383277893066406}, 'models': {'enumerated': 8.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 7522.0, 'conflicts': 1043.0, 'conflicts_analyzed': 917.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 927.0, 'models': 8.0, 'models_level': 1395.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 809.0, 'distributed_sum_lbd': 1744.0, 'integrated': 4390.0, 'lemmas': 6635.0, 'lits_learnt': 120539.0, 'lemmas_binary': 734.0, 'lemmas_ternary': 386.0, 'cpu_time': 0.71875, 'integrated_imps': 2209.0, 'integrated_jumps': 2702.0, 'guiding_paths_lits': 7950.0, 'guiding_paths': 164.0, 'splits': 0.0, 'lemmas_conflict': 830.0, 'lemmas_loop': 1904.0, 'lemmas_other': 3901.0, 'lits_conflict': 19640.0, 'lits_loop': 14892.0, 'lits_other': 86007.0, 'jumps': {'jumps': 917.0, 'jumps_bounded': 348.0, 'levels': 22940.0, 'levels_bounded': 20768.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14}

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None)

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 14]:
sub_goal(3, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 5)

[13-11-2021_23-39-17] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.168876s.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 15: original = External(symbol='current_last_sgoals(5, 14)', truth=True, inc_range=None), conversion = current_last_sgoals(5,14).

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052225s with result Satisfiable.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22110109999999938, Incremental time limit = None
Running cumulative time = 2.5904143999999993, Cumulative time limit = 3600
Used memory = (RSS = 180.800781Mb, VMS = 170.242188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 11
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.281545s, Solving = 0.308870s, Total = 2.590414s, Memory = (RSS = 180.800781Mb, VMS = 170.242188Mb)), Calls = 15
Final Model :: Total atoms = 8309, Cost = (22, 0), Optimality proven = False, Number = 3, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.2815446, solving_time=0.3088697999999992, total_time=2.5904143999999993, memory=Memory(rss=180.80078125, vms=170.2421875), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16887570000000007, solving_time=0.05222539999999931, total_time=0.22110109999999938, memory=Memory(rss=180.80078125, vms=170.2421875), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 40292.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 117629.0, 'bodies_tr': 117629.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2746.0, 'count_bodies_tr': 2746.0, 'sccs': 224.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3837.0, 'rules': 161194.0, 'rules_normal': 158525.0, 'rules_choice': 2459.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 161126.0, 'rules_tr_normal': 158525.0, 'rules_tr_choice': 2459.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 112.0, 'eqs': 82979.0, 'eqs_atom': 17013.0, 'eqs_body': 5026.0, 'eqs_other': 60940.0}, 'lpStep': {'atoms': 2464.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8505.0, 'bodies_tr': 8505.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11351.0, 'rules_normal': 11185.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11351.0, 'rules_tr_normal': 11185.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5350.0, 'eqs_atom': 1086.0, 'eqs_body': 112.0, 'eqs_other': 4152.0}, 'generator': {'vars': 18215.0, 'vars_eliminated': 0.0, 'vars_frozen': 12278.0, 'constraints': 3301.0, 'constraints_binary': 66872.0, 'constraints_ternary': 16453.0, 'acyc_edges': 0.0, 'complexity': 87230.0}}, 'solving': {'solvers': {'choices': 1527.0, 'conflicts': 20.0, 'conflicts_analyzed': 11.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 848.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 9.0, 'integrated': 22.0, 'lemmas': 140.0, 'lits_learnt': 1101.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.0625, 'integrated_imps': 18.0, 'integrated_jumps': 25.0, 'guiding_paths_lits': 1127.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 11.0, 'lemmas_loop': 111.0, 'lemmas_other': 18.0, 'lits_conflict': 194.0, 'lits_loop': 871.0, 'lits_other': 36.0, 'jumps': {'jumps': 11.0, 'jumps_bounded': 1.0, 'levels': 26.0, 'levels_bounded': 1.0, 'max': 14.0, 'max_executed': 14.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [22.0, 0.0], 'lower': [22.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.22439956665039062, 'cpu': 0.25, 'solve': 0.041889190673828125, 'unsat': 0.0109710693359375, 'sat': 0.005985260009765625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.6544647216796875, 'cpu': 3.203125, 'solve': 0.20537948608398438, 'unsat': 0.10467338562011719, 'sat': 0.04981803894042969}, 'models': {'enumerated': 11.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 9049.0, 'conflicts': 1063.0, 'conflicts_analyzed': 928.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 927.0, 'models': 11.0, 'models_level': 2243.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 815.0, 'distributed_sum_lbd': 1753.0, 'integrated': 4412.0, 'lemmas': 6775.0, 'lits_learnt': 121640.0, 'lemmas_binary': 734.0, 'lemmas_ternary': 387.0, 'cpu_time': 0.78125, 'integrated_imps': 2227.0, 'integrated_jumps': 2727.0, 'guiding_paths_lits': 9077.0, 'guiding_paths': 179.0, 'splits': 0.0, 'lemmas_conflict': 841.0, 'lemmas_loop': 2015.0, 'lemmas_other': 3919.0, 'lits_conflict': 19834.0, 'lits_loop': 15763.0, 'lits_other': 86043.0, 'jumps': {'jumps': 928.0, 'jumps_bounded': 349.0, 'levels': 22966.0, 'levels_bounded': 20769.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15}

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None)

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 15]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 6)
sub_goal(3, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 6)

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159344s.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(6, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(6,15).

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041931s with result Satisfiable.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20127469999999992, Incremental time limit = None
Running cumulative time = 2.7916890999999993, Cumulative time limit = 3600
Used memory = (RSS = 186.597656Mb, VMS = 175.218750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.440889s, Solving = 0.350800s, Total = 2.791689s, Memory = (RSS = 186.597656Mb, VMS = 175.218750Mb)), Calls = 16
Final Model :: Total atoms = 8654, Cost = (25, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.4408887999999997, solving_time=0.3508002999999995, total_time=2.7916890999999993, memory=Memory(rss=186.59765625, vms=175.21875), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1593441999999996, solving_time=0.041930500000000315, total_time=0.20127469999999992, memory=Memory(rss=186.59765625, vms=175.21875), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 42768.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 126155.0, 'bodies_tr': 126155.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2926.0, 'count_bodies_tr': 2926.0, 'sccs': 244.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4273.0, 'rules': 172594.0, 'rules_normal': 169759.0, 'rules_choice': 2611.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 172526.0, 'rules_tr_normal': 169759.0, 'rules_tr_choice': 2611.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 124.0, 'eqs': 88382.0, 'eqs_atom': 18111.0, 'eqs_body': 5137.0, 'eqs_other': 65134.0}, 'lpStep': {'atoms': 2476.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8526.0, 'bodies_tr': 8526.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11400.0, 'rules_normal': 11234.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11400.0, 'rules_tr_normal': 11234.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5403.0, 'eqs_atom': 1098.0, 'eqs_body': 111.0, 'eqs_other': 4194.0}, 'generator': {'vars': 20152.0, 'vars_eliminated': 0.0, 'vars_frozen': 13533.0, 'constraints': 3790.0, 'constraints_binary': 76673.0, 'constraints_ternary': 18867.0, 'acyc_edges': 0.0, 'complexity': 100002.0}}, 'solving': {'solvers': {'choices': 1478.0, 'conflicts': 16.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 593.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 12.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 224.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1197.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 224.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [25.0, 0.0], 'lower': [25.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.20347213745117188, 'cpu': 0.234375, 'solve': 0.028942108154296875, 'unsat': 0.01198577880859375, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 2.8579368591308594, 'cpu': 3.4375, 'solve': 0.23432159423828125, 'unsat': 0.11665916442871094, 'sat': 0.054805755615234375}, 'models': {'enumerated': 13.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 10527.0, 'conflicts': 1079.0, 'conflicts_analyzed': 935.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 927.0, 'models': 13.0, 'models_level': 2836.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 820.0, 'distributed_sum_lbd': 1765.0, 'integrated': 4412.0, 'lemmas': 6782.0, 'lits_learnt': 121864.0, 'lemmas_binary': 734.0, 'lemmas_ternary': 387.0, 'cpu_time': 0.84375, 'integrated_imps': 2227.0, 'integrated_jumps': 2727.0, 'guiding_paths_lits': 10274.0, 'guiding_paths': 194.0, 'splits': 0.0, 'lemmas_conflict': 848.0, 'lemmas_loop': 2015.0, 'lemmas_other': 3919.0, 'lits_conflict': 20058.0, 'lits_loop': 15763.0, 'lits_other': 86043.0, 'jumps': {'jumps': 935.0, 'jumps_bounded': 349.0, 'levels': 22973.0, 'levels_bounded': 20769.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16}

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None)

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 16]:
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 7)
sub_goal(3, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 7)

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.172732s.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(7, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(7,16).

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.098540s with result Satisfiable.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.2712720000000015, Incremental time limit = None
Running cumulative time = 3.0629611000000008, Cumulative time limit = 3600
Used memory = (RSS = 197.160156Mb, VMS = 188.519531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 15
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.613621s, Solving = 0.449340s, Total = 3.062961s, Memory = (RSS = 197.160156Mb, VMS = 188.519531Mb)), Calls = 17
Final Model :: Total atoms = 8998, Cost = (27, 0), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.613621, solving_time=0.4493401000000006, total_time=3.0629611000000008, memory=Memory(rss=197.16015625, vms=188.51953125), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17273220000000045, solving_time=0.09853980000000107, total_time=0.2712720000000015, memory=Memory(rss=197.16015625, vms=188.51953125), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 45256.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 134702.0, 'bodies_tr': 134702.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3106.0, 'count_bodies_tr': 3106.0, 'sccs': 264.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4709.0, 'rules': 184043.0, 'rules_normal': 181042.0, 'rules_choice': 2763.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 183975.0, 'rules_tr_normal': 181042.0, 'rules_tr_choice': 2763.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 136.0, 'eqs': 93840.0, 'eqs_atom': 19221.0, 'eqs_body': 5249.0, 'eqs_other': 69370.0}, 'lpStep': {'atoms': 2488.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8547.0, 'bodies_tr': 8547.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11449.0, 'rules_normal': 11283.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11449.0, 'rules_tr_normal': 11283.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5458.0, 'eqs_atom': 1110.0, 'eqs_body': 112.0, 'eqs_other': 4236.0}, 'generator': {'vars': 22089.0, 'vars_eliminated': 0.0, 'vars_frozen': 14788.0, 'constraints': 4280.0, 'constraints_binary': 86521.0, 'constraints_ternary': 21286.0, 'acyc_edges': 0.0, 'complexity': 112827.0}}, 'solving': {'solvers': {'choices': 1369.0, 'conflicts': 35.0, 'conflicts_analyzed': 24.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 631.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 27.0, 'integrated': 20.0, 'lemmas': 123.0, 'lits_learnt': 818.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.15625, 'integrated_imps': 20.0, 'integrated_jumps': 1.0, 'guiding_paths_lits': 1267.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 24.0, 'lemmas_loop': 79.0, 'lemmas_other': 20.0, 'lits_conflict': 161.0, 'lits_loop': 602.0, 'lits_other': 55.0, 'jumps': {'jumps': 24.0, 'jumps_bounded': 0.0, 'levels': 24.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [27.0, 0.0], 'lower': [27.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.2738361358642578, 'cpu': 0.34375, 'solve': 0.08434104919433594, 'unsat': 0.06439399719238281, 'sat': 0.00698089599609375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.131772994995117, 'cpu': 3.78125, 'solve': 0.3186626434326172, 'unsat': 0.18105316162109375, 'sat': 0.061786651611328125}, 'models': {'enumerated': 15.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 11896.0, 'conflicts': 1114.0, 'conflicts_analyzed': 959.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 927.0, 'models': 15.0, 'models_level': 3467.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 843.0, 'distributed_sum_lbd': 1792.0, 'integrated': 4432.0, 'lemmas': 6905.0, 'lits_learnt': 122682.0, 'lemmas_binary': 734.0, 'lemmas_ternary': 387.0, 'cpu_time': 1.0, 'integrated_imps': 2247.0, 'integrated_jumps': 2728.0, 'guiding_paths_lits': 11541.0, 'guiding_paths': 209.0, 'splits': 0.0, 'lemmas_conflict': 872.0, 'lemmas_loop': 2094.0, 'lemmas_other': 3939.0, 'lits_conflict': 20219.0, 'lits_loop': 16365.0, 'lits_other': 86098.0, 'jumps': {'jumps': 959.0, 'jumps_bounded': 349.0, 'levels': 22997.0, 'levels_bounded': 20769.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None)

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 17]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8)
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8)

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165651s.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(8, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(8,17).

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054461s with result Satisfiable.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.22011120000000162, Incremental time limit = None
Running cumulative time = 3.2830723000000024, Cumulative time limit = 3600
Used memory = (RSS = 202.269531Mb, VMS = 192.921875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 17
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.779272s, Solving = 0.503801s, Total = 3.283072s, Memory = (RSS = 202.269531Mb, VMS = 192.921875Mb)), Calls = 18
Final Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.7792716000000013, solving_time=0.5038007000000011, total_time=3.2830723000000024, memory=Memory(rss=202.26953125, vms=192.921875), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1656506000000011, solving_time=0.054460600000000525, total_time=0.22011120000000162, memory=Memory(rss=202.26953125, vms=192.921875), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 47756.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143264.0, 'bodies_tr': 143264.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3286.0, 'count_bodies_tr': 3286.0, 'sccs': 284.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5145.0, 'rules': 195532.0, 'rules_normal': 192365.0, 'rules_choice': 2915.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 195464.0, 'rules_tr_normal': 192365.0, 'rules_tr_choice': 2915.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 148.0, 'eqs': 99327.0, 'eqs_atom': 20334.0, 'eqs_body': 5360.0, 'eqs_other': 73633.0}, 'lpStep': {'atoms': 2500.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8562.0, 'bodies_tr': 8562.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 11489.0, 'rules_normal': 11323.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11489.0, 'rules_tr_normal': 11323.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5487.0, 'eqs_atom': 1113.0, 'eqs_body': 111.0, 'eqs_other': 4263.0}, 'generator': {'vars': 24026.0, 'vars_eliminated': 0.0, 'vars_frozen': 16043.0, 'constraints': 4667.0, 'constraints_binary': 94678.0, 'constraints_ternary': 23399.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 1397.0, 'conflicts': 14.0, 'conflicts_analyzed': 3.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 673.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 4.0, 'integrated': 0.0, 'lemmas': 3.0, 'lits_learnt': 110.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.171875, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1337.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 3.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 110.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 3.0, 'jumps_bounded': 0.0, 'levels': 4.0, 'levels_bounded': 0.0, 'max': 2.0, 'max_executed': 2.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.22296524047851562, 'cpu': 0.34375, 'solve': 0.0388946533203125, 'unsat': 0.014959335327148438, 'sat': 0.00698089599609375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.354738235473633, 'cpu': 4.125, 'solve': 0.3575572967529297, 'unsat': 0.1960124969482422, 'sat': 0.06876754760742188}, 'models': {'enumerated': 17.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 13293.0, 'conflicts': 1128.0, 'conflicts_analyzed': 962.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 927.0, 'models': 17.0, 'models_level': 4140.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 845.0, 'distributed_sum_lbd': 1796.0, 'integrated': 4432.0, 'lemmas': 6908.0, 'lits_learnt': 122792.0, 'lemmas_binary': 734.0, 'lemmas_ternary': 387.0, 'cpu_time': 1.171875, 'integrated_imps': 2247.0, 'integrated_jumps': 2728.0, 'guiding_paths_lits': 12878.0, 'guiding_paths': 224.0, 'splits': 0.0, 'lemmas_conflict': 875.0, 'lemmas_loop': 2094.0, 'lemmas_other': 3939.0, 'lits_conflict': 20329.0, 'lits_loop': 16365.0, 'lits_other': 86098.0, 'jumps': {'jumps': 962.0, 'jumps_bounded': 349.0, 'levels': 23001.0, 'levels_bounded': 20769.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 8 was achieved successfully.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.154991s, Solving = 0.010858s, Total = 0.165849s, Memory = (RSS = 127.007812Mb, VMS = 114.789062Mb)
2 : Statistics :: Grounding = 0.168120s, Solving = 0.004367s, Total = 0.172487s, Memory = (RSS = 129.320312Mb, VMS = 117.980469Mb)
3 : Statistics :: Grounding = 0.146883s, Solving = 0.005220s, Total = 0.152104s, Memory = (RSS = 130.117188Mb, VMS = 118.230469Mb)
4 : Statistics :: Grounding = 0.134755s, Solving = 0.005940s, Total = 0.140694s, Memory = (RSS = 132.773438Mb, VMS = 122.027344Mb)
5 : Statistics :: Grounding = 0.147935s, Solving = 0.007046s, Total = 0.154981s, Memory = (RSS = 135.031250Mb, VMS = 124.128906Mb)
6 : Statistics :: Grounding = 0.131206s, Solving = 0.008216s, Total = 0.139422s, Memory = (RSS = 137.960938Mb, VMS = 126.074219Mb)
7 : Statistics :: Grounding = 0.126280s, Solving = 0.051589s, Total = 0.177869s, Memory = (RSS = 140.597656Mb, VMS = 128.792969Mb)
8 : Statistics :: Grounding = 0.148998s, Solving = 0.008540s, Total = 0.157538s, Memory = (RSS = 143.218750Mb, VMS = 130.707031Mb)
9 : Statistics :: Grounding = 0.153129s, Solving = 0.023768s, Total = 0.176897s, Memory = (RSS = 147.066406Mb, VMS = 135.027344Mb)
10 : Statistics :: Grounding = 0.146642s, Solving = 0.011354s, Total = 0.157996s, Memory = (RSS = 149.335938Mb, VMS = 136.753906Mb)
11 : Statistics :: Grounding = 0.147638s, Solving = 0.016987s, Total = 0.164625s, Memory = (RSS = 154.515625Mb, VMS = 142.714844Mb)
12 : Statistics :: Grounding = 0.171712s, Solving = 0.043588s, Total = 0.215300s, Memory = (RSS = 160.316406Mb, VMS = 148.664062Mb)
13 : Statistics :: Grounding = 0.164524s, Solving = 0.015040s, Total = 0.179563s, Memory = (RSS = 169.574219Mb, VMS = 160.292969Mb)
14 : Statistics :: Grounding = 0.169856s, Solving = 0.044132s, Total = 0.213988s, Memory = (RSS = 173.214844Mb, VMS = 162.851562Mb)
15 : Statistics :: Grounding = 0.168876s, Solving = 0.052225s, Total = 0.221101s, Memory = (RSS = 180.800781Mb, VMS = 170.242188Mb)
16 : Statistics :: Grounding = 0.159344s, Solving = 0.041931s, Total = 0.201275s, Memory = (RSS = 186.597656Mb, VMS = 175.218750Mb)
17 : Statistics :: Grounding = 0.172732s, Solving = 0.098540s, Total = 0.271272s, Memory = (RSS = 197.160156Mb, VMS = 188.519531Mb)
18 : Statistics :: Grounding = 0.165651s, Solving = 0.054461s, Total = 0.220111s, Memory = (RSS = 202.269531Mb, VMS = 192.921875Mb)

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 3.283072s due to: External generator exit.

[13-11-2021_23-39-18] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 2.

[13-11-2021_23-39-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 8, Last requested goal index = 8 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.779272s, Solving = 0.503801s, Total = 3.283072s, Memory = (RSS = 202.269531Mb, VMS = 192.921875Mb)), Calls = 18
Model :: Total atoms = 9343, Cost = (29, 0), Optimality proven = False, Number = 2, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 18 :: Actions = 30                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=18, step_range=range(0, 18)

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 0, Actions = 0
Level [2]: Length = 18, Actions = 30
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.320s (Gro =   2.811s, Sea =   0.509s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))

[13-11-2021_23-39-19] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=17, start_step=0, blend=Blend(left=0, right=0.2)

[13-11-2021_23-39-19] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=8, large_group_size=9

[13-11-2021_23-39-19] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=8, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.320s (Gro =   2.811s, Sea =   0.509s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 1:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.320s (Gro =   2.811s, Sea =   0.509s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-9]

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-9], problem number = 1, increment number = 1

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 9)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 9
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 8

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [1-9] : Minimum search length bound = disabled with value = 8

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = False, chosen = FalseSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-39-19] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[13-11-2021_23-39-19] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,1)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete(red)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'S': 0})

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 156 rules into program part ash_initial_state:

holds(1, complete(blue), false, 0).
holds(1, complete(red), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,1), 0).
holds(1, in((block,2)), (puzzle_room,1), 0).
holds(1, in((block,3)), (puzzle_room,1), 0).
holds(1, in((block,4)), (store_room,0), 0).
holds(1, in((block,5)), (store_room,0), 0).
holds(1, in((block,6)), (store_room,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0).
holds(1, in(talos), (starting_room,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1)), true, 0).
holds(1, tower_base((block,2)), true, 0).
holds(1, tower_base((block,3)), false, 0).
holds(1, tower_base((block,4)), false, 0).
holds(1, tower_base((block,5)), false, 0).
holds(1, tower_base((block,6)), false, 0).
holds(1, unordered_tower((block,1)), true, 0).
holds(1, unordered_tower((block,2)), false, 0).
holds(1, unordered_tower((block,3)), false, 0).
holds(1, unordered_tower((block,4)), false, 0).
holds(1, unordered_tower((block,5)), false, 0).
holds(1, unordered_tower((block,6)), false, 0).
holds(2, complete(blue), false, 0).
holds(2, complete(red), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1)), true, 0).
holds(2, tower_base((block,2)), true, 0).
holds(2, tower_base((block,3)), false, 0).
holds(2, tower_base((block,4)), false, 0).
holds(2, tower_base((block,5)), false, 0).
holds(2, tower_base((block,6)), false, 0).
holds(2, unordered_tower((block,1)), true, 0).
holds(2, unordered_tower((block,2)), false, 0).
holds(2, unordered_tower((block,3)), false, 0).
holds(2, unordered_tower((block,4)), false, 0).
holds(2, unordered_tower((block,5)), false, 0).
holds(2, unordered_tower((block,6)), false, 0).

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(blue)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete(red)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6))', 'V': 'true', 'T': 'false'})

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 290 rules into program part ash_goal_state:

final_goal(1, complete(blue), false, false).
final_goal(1, complete(blue), true, true).
final_goal(1, complete(red), false, false).
final_goal(1, complete(red), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1)), false, true).
final_goal(1, tower_base((block,1)), true, false).
final_goal(1, tower_base((block,2)), false, true).
final_goal(1, tower_base((block,2)), true, false).
final_goal(1, tower_base((block,3)), false, false).
final_goal(1, tower_base((block,3)), true, true).
final_goal(1, tower_base((block,4)), false, true).
final_goal(1, tower_base((block,4)), true, false).
final_goal(1, tower_base((block,5)), false, true).
final_goal(1, tower_base((block,5)), true, false).
final_goal(1, tower_base((block,6)), false, false).
final_goal(1, tower_base((block,6)), true, true).
final_goal(1, unordered_tower((block,1)), false, true).
final_goal(1, unordered_tower((block,1)), true, false).
final_goal(1, unordered_tower((block,2)), false, true).
final_goal(1, unordered_tower((block,2)), true, false).
final_goal(1, unordered_tower((block,3)), false, true).
final_goal(1, unordered_tower((block,3)), true, false).
final_goal(1, unordered_tower((block,4)), false, true).
final_goal(1, unordered_tower((block,4)), true, false).
final_goal(1, unordered_tower((block,5)), false, true).
final_goal(1, unordered_tower((block,5)), true, false).
final_goal(1, unordered_tower((block,6)), false, true).
final_goal(1, unordered_tower((block,6)), true, false).
final_goal(2, complete(blue), false, false).
final_goal(2, complete(blue), true, true).
final_goal(2, complete(red), false, false).
final_goal(2, complete(red), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1)), false, true).
final_goal(2, tower_base((block,1)), true, false).
final_goal(2, tower_base((block,2)), false, true).
final_goal(2, tower_base((block,2)), true, false).
final_goal(2, tower_base((block,3)), false, false).
final_goal(2, tower_base((block,3)), true, true).
final_goal(2, tower_base((block,4)), false, true).
final_goal(2, tower_base((block,4)), true, false).
final_goal(2, tower_base((block,5)), false, true).
final_goal(2, tower_base((block,5)), true, false).
final_goal(2, tower_base((block,6)), false, false).
final_goal(2, tower_base((block,6)), true, true).
final_goal(2, unordered_tower((block,1)), false, true).
final_goal(2, unordered_tower((block,1)), true, false).
final_goal(2, unordered_tower((block,2)), false, true).
final_goal(2, unordered_tower((block,2)), true, false).
final_goal(2, unordered_tower((block,3)), false, true).
final_goal(2, unordered_tower((block,3)), true, false).
final_goal(2, unordered_tower((block,4)), false, true).
final_goal(2, unordered_tower((block,4)), true, false).
final_goal(2, unordered_tower((block,5)), false, true).
final_goal(2, unordered_tower((block,5)), true, false).
final_goal(2, unordered_tower((block,6)), false, true).
final_goal(2, unordered_tower((block,6)), true, false).

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_1,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,6)', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,5)', 'I': 9})

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 16 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6).
sub_goal(2, talos, move(store_room), in(talos), store_room, 7).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9).

[13-11-2021_23-39-19] INFO :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x0000027C94BA53A0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=2, step_end_min=None, step_end_max=150, stop_condition=None, increment_limit=None, increment_time_limit=None, cumulative_time_limit=3600, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'true', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'true', 'true', 'none', 'none'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 'none', 'sequential', 'true'), range_=None)]

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 817 rules

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004536099999999266s

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.032710s.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.006723s with result Satisfiable.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000027C9B8FE680>

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 9)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000027C9B8FE680>)

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None)

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      1
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(1)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.354841s.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 0: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 1: original = External(symbol='current_last_sgoals(1, 1)', truth=True, inc_range=None), conversion = current_last_sgoals(1,1).

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.014656s with result Unsatisfiable.

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3694974999999996, Incremental time limit = None
Running cumulative time = 0.3694974999999996, Cumulative time limit = 3600
Used memory = (RSS = 212.695312Mb, VMS = 203.542969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-19] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=1, start_step=-1, end_step=1, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.35484139999999975, solving_time=0.014656099999999839, total_time=0.3694974999999996, memory=Memory(rss=212.6953125, vms=203.54296875), step_range=range(0, 2), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.35484139999999975, solving_time=0.014656099999999839, total_time=0.3694974999999996, memory=Memory(rss=212.6953125, vms=203.54296875), step_range=range(0, 2), clingo_stats={'problem': {'lp': {'atoms': 12427.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 16672.0, 'bodies_tr': 16672.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 28740.0, 'rules_normal': 28183.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28728.0, 'rules_tr_normal': 28183.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 27428.0, 'eqs_atom': 7036.0, 'eqs_body': 1888.0, 'eqs_other': 18504.0}, 'lpStep': {'atoms': 5900.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 14069.0, 'bodies_tr': 14069.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 261.0, 'count_bodies_tr': 261.0, 'sccs': 34.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 592.0, 'rules': 21303.0, 'rules_normal': 20746.0, 'rules_choice': 543.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21291.0, 'rules_tr_normal': 20746.0, 'rules_tr_choice': 543.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 14420.0, 'eqs_atom': 2126.0, 'eqs_body': 379.0, 'eqs_other': 11915.0}, 'generator': {'vars': 2759.0, 'vars_eliminated': 0.0, 'vars_frozen': 1725.0, 'constraints': 29.0, 'constraints_binary': 936.0, 'constraints_ternary': 143.0, 'acyc_edges': 0.0, 'complexity': 1122.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 5.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 161.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 5.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 1.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.36901283264160156, 'cpu': 0.328125, 'solve': 0.00096893310546875, 'unsat': 0.00096893310546875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 0.41339874267578125, 'cpu': 0.375, 'solve': 0.0049610137939453125, 'unsat': 0.00096893310546875, 'sat': 0.00099945068359375}, 'models': {'enumerated': 1.0, 'optimal': 0.0}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 1.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 4.0, 'lits_learnt': 5.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 169.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 4.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 5.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      1 : Current =      2
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(2)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.171898s.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011550s with result Satisfiable.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.1834478999999991, Incremental time limit = None
Running cumulative time = 0.5529453999999987, Cumulative time limit = 3600
Used memory = (RSS = 214.488281Mb, VMS = 205.753906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.526739s, Solving = 0.026206s, Total = 0.552945s, Memory = (RSS = 214.488281Mb, VMS = 205.753906Mb)), Calls = 2
Final Model :: Total atoms = 4541, Cost = (1, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=2, start_step=1, end_step=2, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.5267389999999992, solving_time=0.02620639999999952, total_time=0.5529453999999987, memory=Memory(rss=214.48828125, vms=205.75390625), step_range=range(0, 3), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17189759999999943, solving_time=0.01155029999999968, total_time=0.1834478999999991, memory=Memory(rss=214.48828125, vms=205.75390625), step_range=range(2, 3), clingo_stats={'problem': {'lp': {'atoms': 14269.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 26073.0, 'bodies_tr': 26073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 462.0, 'count_bodies_tr': 462.0, 'sccs': 47.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 768.0, 'rules': 41252.0, 'rules_normal': 40486.0, 'rules_choice': 738.0, 'rules_minimize': 4.0, 'rules_acyc': 0.0, 'rules_heuristic': 24.0, 'rules_tr': 41228.0, 'rules_tr_normal': 40486.0, 'rules_tr_choice': 738.0, 'rules_tr_minimize': 4.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 31159.0, 'eqs_atom': 7801.0, 'eqs_body': 2322.0, 'eqs_other': 21036.0}, 'lpStep': {'atoms': 1842.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9401.0, 'bodies_tr': 9401.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 176.0, 'rules': 12512.0, 'rules_normal': 12303.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12500.0, 'rules_tr_normal': 12303.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 3731.0, 'eqs_atom': 765.0, 'eqs_body': 434.0, 'eqs_other': 2532.0}, 'generator': {'vars': 3013.0, 'vars_eliminated': 0.0, 'vars_frozen': 1947.0, 'constraints': 116.0, 'constraints_binary': 2190.0, 'constraints_ternary': 233.0, 'acyc_edges': 0.0, 'complexity': 2577.0}}, 'solving': {'solvers': {'choices': 116.0, 'conflicts': 14.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 54.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 24.0, 'integrated': 55.0, 'lemmas': 60.0, 'lits_learnt': 108.0, 'lemmas_binary': 19.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 27.0, 'integrated_jumps': 34.0, 'guiding_paths_lits': 238.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 11.0, 'lemmas_other': 39.0, 'lits_conflict': 10.0, 'lits_loop': 47.0, 'lits_other': 51.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 116.0, 'levels_bounded': 103.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}, 'summary': {'call': 2.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [1.0, 0.0], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.18450546264648438, 'cpu': 0.171875, 'solve': 0.0059833526611328125, 'unsat': 0.0039882659912109375, 'sat': 0.001995086669921875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.5979042053222656, 'cpu': 0.546875, 'solve': 0.010944366455078125, 'unsat': 0.0049571990966796875, 'sat': 0.002994537353515625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}, 'solving': {'solvers': {'choices': 116.0, 'conflicts': 14.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 2.0, 'models_level': 55.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 26.0, 'integrated': 55.0, 'lemmas': 64.0, 'lits_learnt': 113.0, 'lemmas_binary': 20.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 27.0, 'integrated_jumps': 34.0, 'guiding_paths_lits': 407.0, 'guiding_paths': 22.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 15.0, 'lemmas_other': 39.0, 'lits_conflict': 10.0, 'lits_loop': 52.0, 'lits_other': 51.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 116.0, 'levels_bounded': 103.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2}

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 2 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 2 ( 22.22% solved)

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None)

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 2, step = 2]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 2)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2)

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 2:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      2 : Current =      3
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(3)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.218843s.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 3: original = External(symbol='current_last_sgoals(2, 2)', truth=True, inc_range=None), conversion = current_last_sgoals(2,2).

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011994s with result Satisfiable.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.23083659999999995, Incremental time limit = None
Running cumulative time = 0.7837819999999986, Cumulative time limit = 3600
Used memory = (RSS = 216.796875Mb, VMS = 207.828125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.745582s, Solving = 0.038200s, Total = 0.783782s, Memory = (RSS = 216.796875Mb, VMS = 207.828125Mb)), Calls = 3
Final Model :: Total atoms = 4918, Cost = (3, 0), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=3, start_step=2, end_step=3, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=0.7455819999999989, solving_time=0.03819999999999979, total_time=0.7837819999999986, memory=Memory(rss=216.796875, vms=207.828125), step_range=range(0, 4), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.21884299999999968, solving_time=0.01199360000000027, total_time=0.23083659999999995, memory=Memory(rss=216.796875, vms=207.828125), step_range=range(3, 4), clingo_stats={'problem': {'lp': {'atoms': 17057.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 35775.0, 'bodies_tr': 35775.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 663.0, 'count_bodies_tr': 663.0, 'sccs': 60.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 954.0, 'rules': 54196.0, 'rules_normal': 53221.0, 'rules_choice': 933.0, 'rules_minimize': 6.0, 'rules_acyc': 0.0, 'rules_heuristic': 36.0, 'rules_tr': 54160.0, 'rules_tr_normal': 53221.0, 'rules_tr_choice': 933.0, 'rules_tr_minimize': 6.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 35955.0, 'eqs_atom': 8661.0, 'eqs_body': 2756.0, 'eqs_other': 24538.0}, 'lpStep': {'atoms': 2788.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9702.0, 'bodies_tr': 9702.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 12944.0, 'rules_normal': 12735.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12932.0, 'rules_tr_normal': 12735.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 4796.0, 'eqs_atom': 860.0, 'eqs_body': 434.0, 'eqs_other': 3502.0}, 'generator': {'vars': 3337.0, 'vars_eliminated': 0.0, 'vars_frozen': 2235.0, 'constraints': 165.0, 'constraints_binary': 2737.0, 'constraints_ternary': 331.0, 'acyc_edges': 0.0, 'complexity': 3291.0}}, 'solving': {'solvers': {'choices': 174.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 1.0, 'models_level': 76.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 12.0, 'integrated': 36.0, 'lemmas': 22.0, 'lits_learnt': 156.0, 'lemmas_binary': 6.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 270.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 22.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 156.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 3.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [3.0, 0.0], 'lower': [3.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.23234939575195312, 'cpu': 0.234375, 'solve': 0.0059833526611328125, 'unsat': 0.004985809326171875, 'sat': 0.0009975433349609375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 0.8302536010742188, 'cpu': 0.78125, 'solve': 0.016927719116210938, 'unsat': 0.009943008422851562, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 290.0, 'conflicts': 15.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 38.0, 'integrated': 91.0, 'lemmas': 86.0, 'lits_learnt': 269.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 27.0, 'integrated_jumps': 34.0, 'guiding_paths_lits': 677.0, 'guiding_paths': 28.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 37.0, 'lemmas_other': 39.0, 'lits_conflict': 10.0, 'lits_loop': 208.0, 'lits_other': 51.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 116.0, 'levels_bounded': 103.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3}

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 3 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 3 ( 33.33% solved)

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None)

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 3, step = 3]:
sub_goal(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)
sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 3)

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 3:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      3 : Current =      4
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.242261s.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 4: original = External(symbol='current_last_sgoals(3, 3)', truth=True, inc_range=None), conversion = current_last_sgoals(3,3).

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.007012s with result Unsatisfiable.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2492726999999988, Incremental time limit = None
Running cumulative time = 1.0330546999999974, Cumulative time limit = 3600
Used memory = (RSS = 218.238281Mb, VMS = 209.019531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=4, start_step=3, end_step=4, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=0.9878428999999986, solving_time=0.0452117999999988, total_time=1.0330546999999974, memory=Memory(rss=218.23828125, vms=209.01953125), step_range=range(0, 5), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24226089999999978, solving_time=0.007011799999999013, total_time=0.2492726999999988, memory=Memory(rss=218.23828125, vms=209.01953125), step_range=range(4, 5), clingo_stats={'problem': {'lp': {'atoms': 19857.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 45765.0, 'bodies_tr': 45765.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 864.0, 'count_bodies_tr': 864.0, 'sccs': 73.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1188.0, 'rules': 68042.0, 'rules_normal': 66858.0, 'rules_choice': 1128.0, 'rules_minimize': 8.0, 'rules_acyc': 0.0, 'rules_heuristic': 48.0, 'rules_tr': 67994.0, 'rules_tr_normal': 66858.0, 'rules_tr_choice': 1128.0, 'rules_tr_minimize': 8.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 43351.0, 'eqs_atom': 10123.0, 'eqs_body': 3390.0, 'eqs_other': 29838.0}, 'lpStep': {'atoms': 2800.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 9990.0, 'bodies_tr': 9990.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 13846.0, 'rules_normal': 13637.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 13834.0, 'rules_tr_normal': 13637.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 0.0, 'eqs': 7396.0, 'eqs_atom': 1462.0, 'eqs_body': 634.0, 'eqs_other': 5300.0}, 'generator': {'vars': 4025.0, 'vars_eliminated': 0.0, 'vars_frozen': 2730.0, 'constraints': 325.0, 'constraints_binary': 5900.0, 'constraints_ternary': 1017.0, 'acyc_edges': 0.0, 'complexity': 7348.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 336.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 4.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.24933242797851562, 'cpu': 0.25, 'solve': 0.0009975433349609375, 'unsat': 0.0009975433349609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.0795860290527344, 'cpu': 1.03125, 'solve': 0.017925262451171875, 'unsat': 0.0109405517578125, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 290.0, 'conflicts': 22.0, 'conflicts_analyzed': 10.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 0.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 24.0, 'distributed_sum_lbd': 38.0, 'integrated': 91.0, 'lemmas': 86.0, 'lits_learnt': 269.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 27.0, 'integrated_jumps': 34.0, 'guiding_paths_lits': 1013.0, 'guiding_paths': 34.0, 'splits': 0.0, 'lemmas_conflict': 10.0, 'lemmas_loop': 37.0, 'lemmas_other': 39.0, 'lits_conflict': 10.0, 'lits_loop': 208.0, 'lits_other': 51.0, 'jumps': {'jumps': 10.0, 'jumps_bounded': 3.0, 'levels': 116.0, 'levels_bounded': 103.0, 'max': 37.0, 'max_executed': 2.0, 'max_bounded': 35.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 4:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258064s.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012757s with result Unsatisfiable.

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.27082099999999976, Incremental time limit = None
Running cumulative time = 1.3038756999999972, Cumulative time limit = 3600
Used memory = (RSS = 223.519531Mb, VMS = 214.519531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=5, start_step=4, end_step=5, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.2459064999999985, solving_time=0.05796919999999872, total_time=1.3038756999999972, memory=Memory(rss=223.51953125, vms=214.51953125), step_range=range(0, 6), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25806359999999984, solving_time=0.012757399999999919, total_time=0.27082099999999976, memory=Memory(rss=223.51953125, vms=214.51953125), step_range=range(5, 6), clingo_stats={'problem': {'lp': {'atoms': 23058.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 57054.0, 'bodies_tr': 57054.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1065.0, 'count_bodies_tr': 1065.0, 'sccs': 98.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 1674.0, 'rules': 83460.0, 'rules_normal': 82067.0, 'rules_choice': 1323.0, 'rules_minimize': 10.0, 'rules_acyc': 0.0, 'rules_heuristic': 60.0, 'rules_tr': 83410.0, 'rules_tr_normal': 82067.0, 'rules_tr_choice': 1323.0, 'rules_tr_minimize': 10.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 51353.0, 'eqs_atom': 11632.0, 'eqs_body': 3541.0, 'eqs_other': 36180.0}, 'lpStep': {'atoms': 3201.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11289.0, 'bodies_tr': 11289.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15418.0, 'rules_normal': 15209.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15416.0, 'rules_tr_normal': 15209.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8002.0, 'eqs_atom': 1509.0, 'eqs_body': 151.0, 'eqs_other': 6342.0}, 'generator': {'vars': 6059.0, 'vars_eliminated': 0.0, 'vars_frozen': 4021.0, 'constraints': 788.0, 'constraints_binary': 16041.0, 'constraints_ternary': 3636.0, 'acyc_edges': 0.0, 'complexity': 20647.0}}, 'solving': {'solvers': {'choices': 102.0, 'conflicts': 43.0, 'conflicts_analyzed': 33.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 32.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 33.0, 'distributed_sum_lbd': 34.0, 'integrated': 128.0, 'lemmas': 219.0, 'lits_learnt': 588.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 5.0, 'cpu_time': 0.0, 'integrated_imps': 128.0, 'integrated_jumps': 67.0, 'guiding_paths_lits': 469.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 33.0, 'lemmas_loop': 58.0, 'lemmas_other': 128.0, 'lits_conflict': 35.0, 'lits_loop': 417.0, 'lits_other': 136.0, 'jumps': {'jumps': 33.0, 'jumps_bounded': 33.0, 'levels': 2196.0, 'levels_bounded': 2161.0, 'max': 69.0, 'max_executed': 3.0, 'max_bounded': 68.0}}}}, 'summary': {'call': 5.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [2.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.2711524963378906, 'cpu': 0.28125, 'solve': 0.001995086669921875, 'unsat': 0.001995086669921875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.350738525390625, 'cpu': 1.3125, 'solve': 0.01992034912109375, 'unsat': 0.012935638427734375, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 392.0, 'conflicts': 65.0, 'conflicts_analyzed': 43.0, 'restarts': 0.0, 'restarts_last': 8.0, 'extra': {'domain_choices': 32.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 57.0, 'distributed_sum_lbd': 72.0, 'integrated': 219.0, 'lemmas': 305.0, 'lits_learnt': 857.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 5.0, 'cpu_time': 0.015625, 'integrated_imps': 155.0, 'integrated_jumps': 101.0, 'guiding_paths_lits': 1482.0, 'guiding_paths': 43.0, 'splits': 0.0, 'lemmas_conflict': 43.0, 'lemmas_loop': 95.0, 'lemmas_other': 167.0, 'lits_conflict': 45.0, 'lits_loop': 625.0, 'lits_other': 187.0, 'jumps': {'jumps': 43.0, 'jumps_bounded': 36.0, 'levels': 2312.0, 'levels_bounded': 2264.0, 'max': 69.0, 'max_executed': 3.0, 'max_bounded': 68.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-20] DEBUG :: ASH Planner Main #1 >> Reaction at search length 5:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.258460s.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015432s with result Unsatisfiable.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2738920999999994, Incremental time limit = None
Running cumulative time = 1.5777677999999966, Cumulative time limit = 3600
Used memory = (RSS = 228.601562Mb, VMS = 220.160156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=6, start_step=5, end_step=6, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.504366199999998, solving_time=0.07340159999999862, total_time=1.5777677999999966, memory=Memory(rss=228.6015625, vms=220.16015625), step_range=range(0, 7), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2584596999999995, solving_time=0.015432399999999902, total_time=0.2738920999999994, memory=Memory(rss=228.6015625, vms=220.16015625), step_range=range(6, 7), clingo_stats={'problem': {'lp': {'atoms': 26546.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 68643.0, 'bodies_tr': 68643.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1266.0, 'count_bodies_tr': 1266.0, 'sccs': 123.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2160.0, 'rules': 99218.0, 'rules_normal': 97616.0, 'rules_choice': 1518.0, 'rules_minimize': 12.0, 'rules_acyc': 0.0, 'rules_heuristic': 72.0, 'rules_tr': 99166.0, 'rules_tr_normal': 97616.0, 'rules_tr_choice': 1518.0, 'rules_tr_minimize': 12.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 20.0, 'eqs': 59812.0, 'eqs_atom': 13176.0, 'eqs_body': 3716.0, 'eqs_other': 42920.0}, 'lpStep': {'atoms': 3488.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11589.0, 'bodies_tr': 11589.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 15758.0, 'rules_normal': 15549.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 15756.0, 'rules_tr_normal': 15549.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8459.0, 'eqs_atom': 1544.0, 'eqs_body': 175.0, 'eqs_other': 6740.0}, 'generator': {'vars': 8116.0, 'vars_eliminated': 0.0, 'vars_frozen': 5317.0, 'constraints': 996.0, 'constraints_binary': 20939.0, 'constraints_ternary': 4612.0, 'acyc_edges': 0.0, 'complexity': 26773.0}}, 'solving': {'solvers': {'choices': 127.0, 'conflicts': 112.0, 'conflicts_analyzed': 102.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 56.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 91.0, 'distributed_sum_lbd': 178.0, 'integrated': 440.0, 'lemmas': 557.0, 'lits_learnt': 5678.0, 'lemmas_binary': 13.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.0625, 'integrated_imps': 326.0, 'integrated_jumps': 36.0, 'guiding_paths_lits': 546.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 92.0, 'lemmas_loop': 70.0, 'lemmas_other': 395.0, 'lits_conflict': 1019.0, 'lits_loop': 647.0, 'lits_other': 4012.0, 'jumps': {'jumps': 102.0, 'jumps_bounded': 45.0, 'levels': 1567.0, 'levels_bounded': 1459.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 357.0}}}}, 'summary': {'call': 6.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [4.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.27652549743652344, 'cpu': 0.3125, 'solve': 0.0049591064453125, 'unsat': 0.0049591064453125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.6272640228271484, 'cpu': 1.625, 'solve': 0.02487945556640625, 'unsat': 0.017894744873046875, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 519.0, 'conflicts': 177.0, 'conflicts_analyzed': 145.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 88.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 148.0, 'distributed_sum_lbd': 250.0, 'integrated': 659.0, 'lemmas': 862.0, 'lits_learnt': 6535.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 23.0, 'cpu_time': 0.078125, 'integrated_imps': 481.0, 'integrated_jumps': 137.0, 'guiding_paths_lits': 2028.0, 'guiding_paths': 54.0, 'splits': 0.0, 'lemmas_conflict': 135.0, 'lemmas_loop': 165.0, 'lemmas_other': 562.0, 'lits_conflict': 1064.0, 'lits_loop': 1272.0, 'lits_other': 4199.0, 'jumps': {'jumps': 145.0, 'jumps_bounded': 81.0, 'levels': 3879.0, 'levels_bounded': 3723.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 357.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 6:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.244636s.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027616s with result Unsatisfiable.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.27225180000000115, Incremental time limit = None
Running cumulative time = 1.8500195999999978, Cumulative time limit = 3600
Used memory = (RSS = 236.832031Mb, VMS = 229.296875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=7, start_step=6, end_step=7, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=1.7490018999999979, solving_time=0.10101769999999988, total_time=1.8500195999999978, memory=Memory(rss=236.83203125, vms=229.296875), step_range=range(0, 8), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2446356999999999, solving_time=0.027616100000001254, total_time=0.27225180000000115, memory=Memory(rss=236.83203125, vms=229.296875), step_range=range(7, 8), clingo_stats={'problem': {'lp': {'atoms': 30052.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 80714.0, 'bodies_tr': 80714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1467.0, 'count_bodies_tr': 1467.0, 'sccs': 148.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 2650.0, 'rules': 115672.0, 'rules_normal': 113861.0, 'rules_choice': 1713.0, 'rules_minimize': 14.0, 'rules_acyc': 0.0, 'rules_heuristic': 84.0, 'rules_tr': 115618.0, 'rules_tr_normal': 113861.0, 'rules_tr_choice': 1713.0, 'rules_tr_minimize': 14.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 30.0, 'eqs': 72433.0, 'eqs_atom': 14913.0, 'eqs_body': 3897.0, 'eqs_other': 53623.0}, 'lpStep': {'atoms': 3506.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12071.0, 'bodies_tr': 12071.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 16454.0, 'rules_normal': 16245.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16452.0, 'rules_tr_normal': 16245.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 12621.0, 'eqs_atom': 1737.0, 'eqs_body': 181.0, 'eqs_other': 10703.0}, 'generator': {'vars': 10366.0, 'vars_eliminated': 0.0, 'vars_frozen': 6679.0, 'constraints': 1471.0, 'constraints_binary': 30514.0, 'constraints_ternary': 7380.0, 'acyc_edges': 0.0, 'complexity': 39659.0}}, 'solving': {'solvers': {'choices': 152.0, 'conflicts': 127.0, 'conflicts_analyzed': 116.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 90.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 111.0, 'distributed_sum_lbd': 211.0, 'integrated': 575.0, 'lemmas': 789.0, 'lits_learnt': 14820.0, 'lemmas_binary': 17.0, 'lemmas_ternary': 12.0, 'cpu_time': 0.109375, 'integrated_imps': 399.0, 'integrated_jumps': 43.0, 'guiding_paths_lits': 534.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 115.0, 'lemmas_loop': 159.0, 'lemmas_other': 515.0, 'lits_conflict': 2724.0, 'lits_loop': 1102.0, 'lits_other': 10994.0, 'jumps': {'jumps': 116.0, 'jumps_bounded': 56.0, 'levels': 1199.0, 'levels_bounded': 1070.0, 'max': 236.0, 'max_executed': 236.0, 'max_bounded': 235.0}}}}, 'summary': {'call': 7.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [5.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.27477264404296875, 'cpu': 0.359375, 'solve': 0.007978439331054688, 'unsat': 0.007978439331054688, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 1.9020366668701172, 'cpu': 1.984375, 'solve': 0.03285789489746094, 'unsat': 0.025873184204101562, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 671.0, 'conflicts': 304.0, 'conflicts_analyzed': 261.0, 'restarts': 0.0, 'restarts_last': 19.0, 'extra': {'domain_choices': 178.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 259.0, 'distributed_sum_lbd': 461.0, 'integrated': 1234.0, 'lemmas': 1651.0, 'lits_learnt': 21355.0, 'lemmas_binary': 56.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.1875, 'integrated_imps': 880.0, 'integrated_jumps': 180.0, 'guiding_paths_lits': 2562.0, 'guiding_paths': 65.0, 'splits': 0.0, 'lemmas_conflict': 250.0, 'lemmas_loop': 324.0, 'lemmas_other': 1077.0, 'lits_conflict': 3788.0, 'lits_loop': 2374.0, 'lits_other': 15193.0, 'jumps': {'jumps': 261.0, 'jumps_bounded': 137.0, 'levels': 5078.0, 'levels_bounded': 4793.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 357.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 7:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270229s.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019479s with result Unsatisfiable.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2897084999999997, Incremental time limit = None
Running cumulative time = 2.1397280999999975, Cumulative time limit = 3600
Used memory = (RSS = 242.281250Mb, VMS = 234.308594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-21] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=8, start_step=7, end_step=8, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.019231399999997, solving_time=0.12049670000000035, total_time=2.1397280999999975, memory=Memory(rss=242.28125, vms=234.30859375), step_range=range(0, 9), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27022949999999923, solving_time=0.019479000000000468, total_time=0.2897084999999997, memory=Memory(rss=242.28125, vms=234.30859375), step_range=range(8, 9), clingo_stats={'problem': {'lp': {'atoms': 33589.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 93134.0, 'bodies_tr': 93134.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1668.0, 'count_bodies_tr': 1668.0, 'sccs': 173.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3244.0, 'rules': 132513.0, 'rules_normal': 130493.0, 'rules_choice': 1908.0, 'rules_minimize': 16.0, 'rules_acyc': 0.0, 'rules_heuristic': 96.0, 'rules_tr': 132459.0, 'rules_tr_normal': 130493.0, 'rules_tr_choice': 1908.0, 'rules_tr_minimize': 16.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 42.0, 'eqs': 79972.0, 'eqs_atom': 16619.0, 'eqs_body': 3964.0, 'eqs_other': 59389.0}, 'lpStep': {'atoms': 3537.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12420.0, 'bodies_tr': 12420.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 16841.0, 'rules_normal': 16632.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16841.0, 'rules_tr_normal': 16632.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7539.0, 'eqs_atom': 1706.0, 'eqs_body': 67.0, 'eqs_other': 5766.0}, 'generator': {'vars': 12968.0, 'vars_eliminated': 0.0, 'vars_frozen': 8256.0, 'constraints': 2050.0, 'constraints_binary': 42947.0, 'constraints_ternary': 11109.0, 'acyc_edges': 0.0, 'complexity': 56484.0}}, 'solving': {'solvers': {'choices': 183.0, 'conflicts': 137.0, 'conflicts_analyzed': 122.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 109.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 117.0, 'distributed_sum_lbd': 237.0, 'integrated': 680.0, 'lemmas': 871.0, 'lits_learnt': 16866.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 69.0, 'cpu_time': 0.125, 'integrated_imps': 371.0, 'integrated_jumps': 54.0, 'guiding_paths_lits': 700.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 117.0, 'lemmas_loop': 173.0, 'lemmas_other': 581.0, 'lits_conflict': 2723.0, 'lits_loop': 1464.0, 'lits_other': 12679.0, 'jumps': {'jumps': 122.0, 'jumps_bounded': 58.0, 'levels': 3004.0, 'levels_bounded': 2875.0, 'max': 264.0, 'max_executed': 264.0, 'max_bounded': 263.0}}}}, 'summary': {'call': 8.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [6.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.2922210693359375, 'cpu': 0.40625, 'solve': 0.008951187133789062, 'unsat': 0.008951187133789062, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.1942577362060547, 'cpu': 2.390625, 'solve': 0.04180908203125, 'unsat': 0.034824371337890625, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 854.0, 'conflicts': 441.0, 'conflicts_analyzed': 383.0, 'restarts': 0.0, 'restarts_last': 26.0, 'extra': {'domain_choices': 287.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 376.0, 'distributed_sum_lbd': 698.0, 'integrated': 1914.0, 'lemmas': 2522.0, 'lits_learnt': 38221.0, 'lemmas_binary': 96.0, 'lemmas_ternary': 104.0, 'cpu_time': 0.3125, 'integrated_imps': 1251.0, 'integrated_jumps': 234.0, 'guiding_paths_lits': 3262.0, 'guiding_paths': 78.0, 'splits': 0.0, 'lemmas_conflict': 367.0, 'lemmas_loop': 497.0, 'lemmas_other': 1658.0, 'lits_conflict': 6511.0, 'lits_loop': 3838.0, 'lits_other': 27872.0, 'jumps': {'jumps': 383.0, 'jumps_bounded': 195.0, 'levels': 8082.0, 'levels_bounded': 7668.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 357.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-21] DEBUG :: ASH Planner Main #1 >> Reaction at search length 8:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.275772s.

[13-11-2021_23-39-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.026332s with result Unsatisfiable.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3021046999999992, Incremental time limit = None
Running cumulative time = 2.4418327999999967, Cumulative time limit = 3600
Used memory = (RSS = 250.570312Mb, VMS = 243.796875Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=9, start_step=8, end_step=9, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.2950037999999964, solving_time=0.14682900000000032, total_time=2.4418327999999967, memory=Memory(rss=250.5703125, vms=243.796875), step_range=range(0, 10), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27577239999999925, solving_time=0.026332299999999975, total_time=0.3021046999999992, memory=Memory(rss=250.5703125, vms=243.796875), step_range=range(9, 10), clingo_stats={'problem': {'lp': {'atoms': 37265.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 105709.0, 'bodies_tr': 105709.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 1869.0, 'count_bodies_tr': 1869.0, 'sccs': 198.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 3838.0, 'rules': 149548.0, 'rules_normal': 147319.0, 'rules_choice': 2103.0, 'rules_minimize': 18.0, 'rules_acyc': 0.0, 'rules_heuristic': 108.0, 'rules_tr': 149494.0, 'rules_tr_normal': 147319.0, 'rules_tr_choice': 2103.0, 'rules_tr_minimize': 18.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 54.0, 'eqs': 87669.0, 'eqs_atom': 18343.0, 'eqs_body': 4041.0, 'eqs_other': 65285.0}, 'lpStep': {'atoms': 3676.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12575.0, 'bodies_tr': 12575.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17035.0, 'rules_normal': 16826.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17035.0, 'rules_tr_normal': 16826.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7697.0, 'eqs_atom': 1724.0, 'eqs_body': 77.0, 'eqs_other': 5896.0}, 'generator': {'vars': 15582.0, 'vars_eliminated': 0.0, 'vars_frozen': 9840.0, 'constraints': 2214.0, 'constraints_binary': 46481.0, 'constraints_ternary': 11929.0, 'acyc_edges': 0.0, 'complexity': 61038.0}}, 'solving': {'solvers': {'choices': 255.0, 'conflicts': 158.0, 'conflicts_analyzed': 153.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 95.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 148.0, 'distributed_sum_lbd': 305.0, 'integrated': 719.0, 'lemmas': 1039.0, 'lits_learnt': 26900.0, 'lemmas_binary': 107.0, 'lemmas_ternary': 78.0, 'cpu_time': 0.109375, 'integrated_imps': 456.0, 'integrated_jumps': 87.0, 'guiding_paths_lits': 666.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 146.0, 'lemmas_loop': 229.0, 'lemmas_other': 664.0, 'lits_conflict': 5398.0, 'lits_loop': 1785.0, 'lits_other': 19717.0, 'jumps': {'jumps': 153.0, 'jumps_bounded': 60.0, 'levels': 285.0, 'levels_bounded': 97.0, 'max': 10.0, 'max_executed': 10.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 9.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.30718040466308594, 'cpu': 0.40625, 'solve': 0.01496124267578125, 'unsat': 0.01496124267578125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.5014381408691406, 'cpu': 2.796875, 'solve': 0.05677032470703125, 'unsat': 0.049785614013671875, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1109.0, 'conflicts': 599.0, 'conflicts_analyzed': 536.0, 'restarts': 0.0, 'restarts_last': 30.0, 'extra': {'domain_choices': 382.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 524.0, 'distributed_sum_lbd': 1003.0, 'integrated': 2633.0, 'lemmas': 3561.0, 'lits_learnt': 65121.0, 'lemmas_binary': 203.0, 'lemmas_ternary': 182.0, 'cpu_time': 0.421875, 'integrated_imps': 1707.0, 'integrated_jumps': 321.0, 'guiding_paths_lits': 3928.0, 'guiding_paths': 84.0, 'splits': 0.0, 'lemmas_conflict': 513.0, 'lemmas_loop': 726.0, 'lemmas_other': 2322.0, 'lits_conflict': 11909.0, 'lits_loop': 5623.0, 'lits_other': 47589.0, 'jumps': {'jumps': 536.0, 'jumps_bounded': 255.0, 'levels': 8367.0, 'levels_bounded': 7765.0, 'max': 359.0, 'max_executed': 359.0, 'max_bounded': 357.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 9:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.275814s.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033745s with result Unsatisfiable.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.30955969999999944, Incremental time limit = None
Running cumulative time = 2.751392499999996, Cumulative time limit = 3600
Used memory = (RSS = 254.960938Mb, VMS = 247.535156Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=10, start_step=9, end_step=10, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.570818199999996, solving_time=0.18057429999999997, total_time=2.751392499999996, memory=Memory(rss=254.9609375, vms=247.53515625), step_range=range(0, 11), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2758143999999998, solving_time=0.033745299999999645, total_time=0.30955969999999944, memory=Memory(rss=254.9609375, vms=247.53515625), step_range=range(10, 11), clingo_stats={'problem': {'lp': {'atoms': 40962.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 118423.0, 'bodies_tr': 118423.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2070.0, 'count_bodies_tr': 2070.0, 'sccs': 223.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 4432.0, 'rules': 166848.0, 'rules_normal': 164410.0, 'rules_choice': 2298.0, 'rules_minimize': 20.0, 'rules_acyc': 0.0, 'rules_heuristic': 120.0, 'rules_tr': 166794.0, 'rules_tr_normal': 164410.0, 'rules_tr_choice': 2298.0, 'rules_tr_minimize': 20.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 66.0, 'eqs': 95652.0, 'eqs_atom': 20177.0, 'eqs_body': 4111.0, 'eqs_other': 71364.0}, 'lpStep': {'atoms': 3697.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12714.0, 'bodies_tr': 12714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17300.0, 'rules_normal': 17091.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17300.0, 'rules_tr_normal': 17091.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 7983.0, 'eqs_atom': 1834.0, 'eqs_body': 70.0, 'eqs_other': 6079.0}, 'generator': {'vars': 18245.0, 'vars_eliminated': 0.0, 'vars_frozen': 11437.0, 'constraints': 2845.0, 'constraints_binary': 59259.0, 'constraints_ternary': 15800.0, 'acyc_edges': 0.0, 'complexity': 78402.0}}, 'solving': {'solvers': {'choices': 527.0, 'conflicts': 208.0, 'conflicts_analyzed': 193.0, 'restarts': 0.0, 'restarts_last': 43.0, 'extra': {'domain_choices': 155.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 178.0, 'distributed_sum_lbd': 411.0, 'integrated': 882.0, 'lemmas': 1443.0, 'lits_learnt': 43813.0, 'lemmas_binary': 144.0, 'lemmas_ternary': 65.0, 'cpu_time': 0.109375, 'integrated_imps': 369.0, 'integrated_jumps': 115.0, 'guiding_paths_lits': 732.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 188.0, 'lemmas_loop': 418.0, 'lemmas_other': 837.0, 'lits_conflict': 7702.0, 'lits_loop': 3361.0, 'lits_other': 32750.0, 'jumps': {'jumps': 193.0, 'jumps_bounded': 68.0, 'levels': 4120.0, 'levels_bounded': 3706.0, 'max': 639.0, 'max_executed': 639.0, 'max_bounded': 638.0}}}}, 'summary': {'call': 10.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [7.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3126335144042969, 'cpu': 0.40625, 'solve': 0.02094268798828125, 'unsat': 0.02094268798828125, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 2.8140716552734375, 'cpu': 3.203125, 'solve': 0.0777130126953125, 'unsat': 0.07072830200195312, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 1636.0, 'conflicts': 807.0, 'conflicts_analyzed': 729.0, 'restarts': 0.0, 'restarts_last': 43.0, 'extra': {'domain_choices': 537.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 702.0, 'distributed_sum_lbd': 1414.0, 'integrated': 3515.0, 'lemmas': 5004.0, 'lits_learnt': 108934.0, 'lemmas_binary': 347.0, 'lemmas_ternary': 247.0, 'cpu_time': 0.53125, 'integrated_imps': 2076.0, 'integrated_jumps': 436.0, 'guiding_paths_lits': 4660.0, 'guiding_paths': 97.0, 'splits': 0.0, 'lemmas_conflict': 701.0, 'lemmas_loop': 1144.0, 'lemmas_other': 3159.0, 'lits_conflict': 19611.0, 'lits_loop': 8984.0, 'lits_other': 80339.0, 'jumps': {'jumps': 729.0, 'jumps_bounded': 323.0, 'levels': 12487.0, 'levels_bounded': 11471.0, 'max': 639.0, 'max_executed': 639.0, 'max_bounded': 638.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 10:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.266745s.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054024s with result Unsatisfiable.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3207695000000026, Incremental time limit = None
Running cumulative time = 3.0721619999999987, Cumulative time limit = 3600
Used memory = (RSS = 259.937500Mb, VMS = 252.070312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-22] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=11, start_step=10, end_step=11, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=2.8375632999999976, solving_time=0.23459870000000116, total_time=3.0721619999999987, memory=Memory(rss=259.9375, vms=252.0703125), step_range=range(0, 12), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2667451000000014, solving_time=0.054024400000001194, total_time=0.3207695000000026, memory=Memory(rss=259.9375, vms=252.0703125), step_range=range(11, 12), clingo_stats={'problem': {'lp': {'atoms': 44673.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 131162.0, 'bodies_tr': 131162.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2271.0, 'count_bodies_tr': 2271.0, 'sccs': 248.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5026.0, 'rules': 184210.0, 'rules_normal': 181563.0, 'rules_choice': 2493.0, 'rules_minimize': 22.0, 'rules_acyc': 0.0, 'rules_heuristic': 132.0, 'rules_tr': 184156.0, 'rules_tr_normal': 181563.0, 'rules_tr_choice': 2493.0, 'rules_tr_minimize': 22.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 78.0, 'eqs': 103689.0, 'eqs_atom': 22023.0, 'eqs_body': 4178.0, 'eqs_other': 77488.0}, 'lpStep': {'atoms': 3711.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12739.0, 'bodies_tr': 12739.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17362.0, 'rules_normal': 17153.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17362.0, 'rules_tr_normal': 17153.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8037.0, 'eqs_atom': 1846.0, 'eqs_body': 67.0, 'eqs_other': 6124.0}, 'generator': {'vars': 20915.0, 'vars_eliminated': 0.0, 'vars_frozen': 13036.0, 'constraints': 3460.0, 'constraints_binary': 72735.0, 'constraints_ternary': 19768.0, 'acyc_edges': 0.0, 'complexity': 96545.0}}, 'solving': {'solvers': {'choices': 650.0, 'conflicts': 344.0, 'conflicts_analyzed': 334.0, 'restarts': 0.0, 'restarts_last': 56.0, 'extra': {'domain_choices': 360.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 335.0, 'distributed_sum_lbd': 790.0, 'integrated': 1691.0, 'lemmas': 2320.0, 'lits_learnt': 102367.0, 'lemmas_binary': 139.0, 'lemmas_ternary': 105.0, 'cpu_time': 0.234375, 'integrated_imps': 489.0, 'integrated_jumps': 206.0, 'guiding_paths_lits': 931.0, 'guiding_paths': 15.0, 'splits': 0.0, 'lemmas_conflict': 333.0, 'lemmas_loop': 555.0, 'lemmas_other': 1432.0, 'lits_conflict': 19749.0, 'lits_loop': 4686.0, 'lits_other': 77932.0, 'jumps': {'jumps': 334.0, 'jumps_bounded': 33.0, 'levels': 6462.0, 'levels_bounded': 6004.0, 'max': 691.0, 'max_executed': 691.0, 'max_bounded': 690.0}}}}, 'summary': {'call': 11.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [8.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3231353759765625, 'cpu': 0.515625, 'solve': 0.03689765930175781, 'unsat': 0.03689765930175781, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.13720703125, 'cpu': 3.71875, 'solve': 0.11461067199707031, 'unsat': 0.10762596130371094, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 2286.0, 'conflicts': 1151.0, 'conflicts_analyzed': 1063.0, 'restarts': 0.0, 'restarts_last': 56.0, 'extra': {'domain_choices': 897.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1037.0, 'distributed_sum_lbd': 2204.0, 'integrated': 5206.0, 'lemmas': 7324.0, 'lits_learnt': 211301.0, 'lemmas_binary': 486.0, 'lemmas_ternary': 352.0, 'cpu_time': 0.765625, 'integrated_imps': 2565.0, 'integrated_jumps': 642.0, 'guiding_paths_lits': 5591.0, 'guiding_paths': 112.0, 'splits': 0.0, 'lemmas_conflict': 1034.0, 'lemmas_loop': 1699.0, 'lemmas_other': 4591.0, 'lits_conflict': 39360.0, 'lits_loop': 13670.0, 'lits_other': 158271.0, 'jumps': {'jumps': 1063.0, 'jumps_bounded': 356.0, 'levels': 18949.0, 'levels_bounded': 17475.0, 'max': 691.0, 'max_executed': 691.0, 'max_bounded': 690.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-22] DEBUG :: ASH Planner Main #1 >> Reaction at search length 11:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279657s.

[13-11-2021_23-39-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065987s with result Unsatisfiable.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3456437000000001, Incremental time limit = None
Running cumulative time = 3.417805699999999, Cumulative time limit = 3600
Used memory = (RSS = 270.566406Mb, VMS = 265.093750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=12, start_step=11, end_step=12, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.117219999999998, solving_time=0.30058570000000095, total_time=3.417805699999999, memory=Memory(rss=270.56640625, vms=265.09375), step_range=range(0, 13), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2796567000000003, solving_time=0.0659869999999998, total_time=0.3456437000000001, memory=Memory(rss=270.56640625, vms=265.09375), step_range=range(12, 13), clingo_stats={'problem': {'lp': {'atoms': 48398.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 143925.0, 'bodies_tr': 143925.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2472.0, 'count_bodies_tr': 2472.0, 'sccs': 273.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5620.0, 'rules': 201632.0, 'rules_normal': 198776.0, 'rules_choice': 2688.0, 'rules_minimize': 24.0, 'rules_acyc': 0.0, 'rules_heuristic': 144.0, 'rules_tr': 201578.0, 'rules_tr_normal': 198776.0, 'rules_tr_choice': 2688.0, 'rules_tr_minimize': 24.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 90.0, 'eqs': 111788.0, 'eqs_atom': 23883.0, 'eqs_body': 4245.0, 'eqs_other': 83660.0}, 'lpStep': {'atoms': 3725.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12763.0, 'bodies_tr': 12763.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17422.0, 'rules_normal': 17213.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17422.0, 'rules_tr_normal': 17213.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8099.0, 'eqs_atom': 1860.0, 'eqs_body': 67.0, 'eqs_other': 6172.0}, 'generator': {'vars': 23585.0, 'vars_eliminated': 0.0, 'vars_frozen': 14635.0, 'constraints': 3627.0, 'constraints_binary': 76849.0, 'constraints_ternary': 20594.0, 'acyc_edges': 0.0, 'complexity': 101688.0}}, 'solving': {'solvers': {'choices': 1232.0, 'conflicts': 478.0, 'conflicts_analyzed': 461.0, 'restarts': 0.0, 'restarts_last': 69.0, 'extra': {'domain_choices': 455.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 436.0, 'distributed_sum_lbd': 1070.0, 'integrated': 2537.0, 'lemmas': 3395.0, 'lits_learnt': 207618.0, 'lemmas_binary': 272.0, 'lemmas_ternary': 221.0, 'cpu_time': 0.28125, 'integrated_imps': 740.0, 'integrated_jumps': 472.0, 'guiding_paths_lits': 1008.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 455.0, 'lemmas_loop': 667.0, 'lemmas_other': 2273.0, 'lits_conflict': 37613.0, 'lits_loop': 5706.0, 'lits_other': 164299.0, 'jumps': {'jumps': 461.0, 'jumps_bounded': 85.0, 'levels': 15213.0, 'levels_bounded': 14473.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}, 'summary': {'call': 12.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [10.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3505821228027344, 'cpu': 0.578125, 'solve': 0.05086326599121094, 'unsat': 0.05086326599121094, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 3.4877891540527344, 'cpu': 4.296875, 'solve': 0.16547393798828125, 'unsat': 0.15848922729492188, 'sat': 0.0039920806884765625}, 'models': {'enumerated': 3.0, 'optimal': 2.0}, 'solving': {'solvers': {'choices': 3518.0, 'conflicts': 1629.0, 'conflicts_analyzed': 1524.0, 'restarts': 0.0, 'restarts_last': 69.0, 'extra': {'domain_choices': 1352.0, 'models': 3.0, 'models_level': 131.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1473.0, 'distributed_sum_lbd': 3274.0, 'integrated': 7743.0, 'lemmas': 10719.0, 'lits_learnt': 418919.0, 'lemmas_binary': 758.0, 'lemmas_ternary': 573.0, 'cpu_time': 1.046875, 'integrated_imps': 3305.0, 'integrated_jumps': 1114.0, 'guiding_paths_lits': 6599.0, 'guiding_paths': 129.0, 'splits': 0.0, 'lemmas_conflict': 1489.0, 'lemmas_loop': 2366.0, 'lemmas_other': 6864.0, 'lits_conflict': 76973.0, 'lits_loop': 19376.0, 'lits_other': 322570.0, 'jumps': {'jumps': 1524.0, 'jumps_bounded': 441.0, 'levels': 34162.0, 'levels_bounded': 31948.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 12:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270707s.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.111081s with result Satisfiable.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.381788499999999, Incremental time limit = None
Running cumulative time = 3.799594199999998, Cumulative time limit = 3600
Used memory = (RSS = 273.394531Mb, VMS = 266.636719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 5
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.387927s, Solving = 0.411667s, Total = 3.799594s, Memory = (RSS = 273.394531Mb, VMS = 266.636719Mb)), Calls = 13
Final Model :: Total atoms = 8653, Cost = (14, 0), Optimality proven = False, Number = 2, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=13, start_step=12, end_step=13, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.3879271999999983, solving_time=0.41166699999999956, total_time=3.799594199999998, memory=Memory(rss=273.39453125, vms=266.63671875), step_range=range(0, 14), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27070720000000037, solving_time=0.1110812999999986, total_time=0.381788499999999, memory=Memory(rss=273.39453125, vms=266.63671875), step_range=range(13, 14), clingo_stats={'problem': {'lp': {'atoms': 52137.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 156712.0, 'bodies_tr': 156712.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2673.0, 'count_bodies_tr': 2673.0, 'sccs': 298.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6214.0, 'rules': 219114.0, 'rules_normal': 216049.0, 'rules_choice': 2883.0, 'rules_minimize': 26.0, 'rules_acyc': 0.0, 'rules_heuristic': 156.0, 'rules_tr': 219060.0, 'rules_tr_normal': 216049.0, 'rules_tr_choice': 2883.0, 'rules_tr_minimize': 26.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 102.0, 'eqs': 119949.0, 'eqs_atom': 25757.0, 'eqs_body': 4312.0, 'eqs_other': 89880.0}, 'lpStep': {'atoms': 3739.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12787.0, 'bodies_tr': 12787.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17482.0, 'rules_normal': 17273.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17482.0, 'rules_tr_normal': 17273.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8161.0, 'eqs_atom': 1874.0, 'eqs_body': 67.0, 'eqs_other': 6220.0}, 'generator': {'vars': 26255.0, 'vars_eliminated': 0.0, 'vars_frozen': 16234.0, 'constraints': 3753.0, 'constraints_binary': 79999.0, 'constraints_ternary': 21123.0, 'acyc_edges': 0.0, 'complexity': 105529.0}}, 'solving': {'solvers': {'choices': 3044.0, 'conflicts': 614.0, 'conflicts_analyzed': 602.0, 'restarts': 1.0, 'restarts_last': 95.0, 'extra': {'domain_choices': 554.0, 'models': 2.0, 'models_level': 531.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 579.0, 'distributed_sum_lbd': 1402.0, 'integrated': 3426.0, 'lemmas': 4303.0, 'lits_learnt': 355663.0, 'lemmas_binary': 413.0, 'lemmas_ternary': 426.0, 'cpu_time': 0.515625, 'integrated_imps': 864.0, 'integrated_jumps': 829.0, 'guiding_paths_lits': 1085.0, 'guiding_paths': 18.0, 'splits': 0.0, 'lemmas_conflict': 602.0, 'lemmas_loop': 600.0, 'lemmas_other': 3101.0, 'lits_conflict': 60791.0, 'lits_loop': 5045.0, 'lits_other': 289827.0, 'jumps': {'jumps': 602.0, 'jumps_bounded': 49.0, 'levels': 9469.0, 'levels_bounded': 7990.0, 'max': 540.0, 'max_executed': 540.0, 'max_bounded': 539.0}}}}, 'summary': {'call': 13.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [14.0, 0.0], 'lower': [14.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.39095497131347656, 'cpu': 0.8125, 'solve': 0.08876228332519531, 'unsat': 0.011968612670898438, 'sat': 0.06183433532714844}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.878744125366211, 'cpu': 5.109375, 'solve': 0.25423622131347656, 'unsat': 0.1704578399658203, 'sat': 0.065826416015625}, 'models': {'enumerated': 5.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 6562.0, 'conflicts': 2243.0, 'conflicts_analyzed': 2126.0, 'restarts': 1.0, 'restarts_last': 95.0, 'extra': {'domain_choices': 1906.0, 'models': 5.0, 'models_level': 662.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2052.0, 'distributed_sum_lbd': 4676.0, 'integrated': 11169.0, 'lemmas': 15022.0, 'lits_learnt': 774582.0, 'lemmas_binary': 1171.0, 'lemmas_ternary': 999.0, 'cpu_time': 1.5625, 'integrated_imps': 4169.0, 'integrated_jumps': 1943.0, 'guiding_paths_lits': 7684.0, 'guiding_paths': 147.0, 'splits': 0.0, 'lemmas_conflict': 2091.0, 'lemmas_loop': 2966.0, 'lemmas_other': 9965.0, 'lits_conflict': 137764.0, 'lits_loop': 24421.0, 'lits_other': 612397.0, 'jumps': {'jumps': 2126.0, 'jumps_bounded': 490.0, 'levels': 43631.0, 'levels_bounded': 39938.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13}

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 4 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 4 ( 44.44% solved)

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None)

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 4, step = 13]:
sub_goal(2, talos, actuate(manipulator_arm_1,puzzle_room_door), configuration(puzzle_room_door), open, 4)
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 4)

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 13:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.296313s.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 14: original = External(symbol='current_last_sgoals(4, 13)', truth=True, inc_range=None), conversion = current_last_sgoals(4,13).

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037970s with result Unsatisfiable.

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3342830999999986, Incremental time limit = None
Running cumulative time = 4.133877299999996, Cumulative time limit = 3600
Used memory = (RSS = 278.074219Mb, VMS = 270.976562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=14, start_step=13, end_step=14, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.6842403999999984, solving_time=0.449636899999998, total_time=4.133877299999996, memory=Memory(rss=278.07421875, vms=270.9765625), step_range=range(0, 15), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29631320000000017, solving_time=0.03796989999999845, total_time=0.3342830999999986, memory=Memory(rss=278.07421875, vms=270.9765625), step_range=range(14, 15), clingo_stats={'problem': {'lp': {'atoms': 55888.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 169509.0, 'bodies_tr': 169509.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 2874.0, 'count_bodies_tr': 2874.0, 'sccs': 323.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6808.0, 'rules': 236638.0, 'rules_normal': 233364.0, 'rules_choice': 3078.0, 'rules_minimize': 28.0, 'rules_acyc': 0.0, 'rules_heuristic': 168.0, 'rules_tr': 236584.0, 'rules_tr_normal': 233364.0, 'rules_tr_choice': 3078.0, 'rules_tr_minimize': 28.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 114.0, 'eqs': 128122.0, 'eqs_atom': 27627.0, 'eqs_body': 4379.0, 'eqs_other': 96116.0}, 'lpStep': {'atoms': 3751.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12797.0, 'bodies_tr': 12797.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17524.0, 'rules_normal': 17315.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17524.0, 'rules_tr_normal': 17315.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8173.0, 'eqs_atom': 1870.0, 'eqs_body': 67.0, 'eqs_other': 6236.0}, 'generator': {'vars': 28925.0, 'vars_eliminated': 0.0, 'vars_frozen': 17833.0, 'constraints': 3706.0, 'constraints_binary': 76996.0, 'constraints_ternary': 19907.0, 'acyc_edges': 0.0, 'complexity': 105529.0}}, 'solving': {'solvers': {'choices': 655.0, 'conflicts': 105.0, 'conflicts_analyzed': 87.0, 'restarts': 0.0, 'restarts_last': 17.0, 'extra': {'domain_choices': 84.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 77.0, 'distributed_sum_lbd': 166.0, 'integrated': 412.0, 'lemmas': 478.0, 'lits_learnt': 71371.0, 'lemmas_binary': 40.0, 'lemmas_ternary': 36.0, 'cpu_time': 0.125, 'integrated_imps': 134.0, 'integrated_jumps': 286.0, 'guiding_paths_lits': 1162.0, 'guiding_paths': 19.0, 'splits': 0.0, 'lemmas_conflict': 78.0, 'lemmas_loop': 159.0, 'lemmas_other': 241.0, 'lits_conflict': 19163.0, 'lits_loop': 1346.0, 'lits_other': 50862.0, 'jumps': {'jumps': 87.0, 'jumps_bounded': 10.0, 'levels': 967.0, 'levels_bounded': 618.0, 'max': 234.0, 'max_executed': 234.0, 'max_bounded': 233.0}}}}, 'summary': {'call': 14.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [12.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.3450775146484375, 'cpu': 0.4375, 'solve': 0.021942138671875, 'unsat': 0.021942138671875, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.223821640014648, 'cpu': 5.546875, 'solve': 0.27617835998535156, 'unsat': 0.1923999786376953, 'sat': 0.065826416015625}, 'models': {'enumerated': 5.0, 'optimal': 3.0}, 'solving': {'solvers': {'choices': 7217.0, 'conflicts': 2348.0, 'conflicts_analyzed': 2213.0, 'restarts': 1.0, 'restarts_last': 95.0, 'extra': {'domain_choices': 1990.0, 'models': 5.0, 'models_level': 662.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2129.0, 'distributed_sum_lbd': 4842.0, 'integrated': 11581.0, 'lemmas': 15500.0, 'lits_learnt': 845953.0, 'lemmas_binary': 1211.0, 'lemmas_ternary': 1035.0, 'cpu_time': 1.6875, 'integrated_imps': 4303.0, 'integrated_jumps': 2229.0, 'guiding_paths_lits': 8846.0, 'guiding_paths': 166.0, 'splits': 0.0, 'lemmas_conflict': 2169.0, 'lemmas_loop': 3125.0, 'lemmas_other': 10206.0, 'lits_conflict': 156927.0, 'lits_loop': 25767.0, 'lits_other': 663259.0, 'jumps': {'jumps': 2213.0, 'jumps_bounded': 500.0, 'levels': 44598.0, 'levels_bounded': 40556.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-23] DEBUG :: ASH Planner Main #1 >> Reaction at search length 14:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.327567s.

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.322777s with result Satisfiable.

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6503441999999993, Incremental time limit = None
Running cumulative time = 4.784221499999996, Cumulative time limit = 3600
Used memory = (RSS = 294.429688Mb, VMS = 294.078125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 13
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.011808s, Solving = 0.772414s, Total = 4.784221s, Memory = (RSS = 294.429688Mb, VMS = 294.078125Mb)), Calls = 15
Final Model :: Total atoms = 9404, Cost = (16, 0), Optimality proven = False, Number = 8, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=15, start_step=14, end_step=15, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.011807699999997, solving_time=0.7724137999999989, total_time=4.784221499999996, memory=Memory(rss=294.4296875, vms=294.078125), step_range=range(0, 16), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32756729999999834, solving_time=0.3227769000000009, total_time=0.6503441999999993, memory=Memory(rss=294.4296875, vms=294.078125), step_range=range(15, 16), clingo_stats={'problem': {'lp': {'atoms': 59637.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 182330.0, 'bodies_tr': 182330.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3075.0, 'count_bodies_tr': 3075.0, 'sccs': 348.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7402.0, 'rules': 254222.0, 'rules_normal': 250739.0, 'rules_choice': 3273.0, 'rules_minimize': 30.0, 'rules_acyc': 0.0, 'rules_heuristic': 180.0, 'rules_tr': 254168.0, 'rules_tr_normal': 250739.0, 'rules_tr_choice': 3273.0, 'rules_tr_minimize': 30.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 126.0, 'eqs': 136357.0, 'eqs_atom': 29511.0, 'eqs_body': 4446.0, 'eqs_other': 102400.0}, 'lpStep': {'atoms': 3749.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12821.0, 'bodies_tr': 12821.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17584.0, 'rules_normal': 17375.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17584.0, 'rules_tr_normal': 17375.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8235.0, 'eqs_atom': 1884.0, 'eqs_body': 67.0, 'eqs_other': 6284.0}, 'generator': {'vars': 31595.0, 'vars_eliminated': 0.0, 'vars_frozen': 19432.0, 'constraints': 4233.0, 'constraints_binary': 89664.0, 'constraints_ternary': 23688.0, 'acyc_edges': 0.0, 'complexity': 118343.0}}, 'solving': {'solvers': {'choices': 6220.0, 'conflicts': 932.0, 'conflicts_analyzed': 916.0, 'restarts': 2.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 583.0, 'models': 8.0, 'models_level': 2307.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 677.0, 'distributed_sum_lbd': 1639.0, 'integrated': 3969.0, 'lemmas': 5642.0, 'lits_learnt': 477976.0, 'lemmas_binary': 837.0, 'lemmas_ternary': 329.0, 'cpu_time': 1.28125, 'integrated_imps': 1109.0, 'integrated_jumps': 1760.0, 'guiding_paths_lits': 1239.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 909.0, 'lemmas_loop': 1105.0, 'lemmas_other': 3628.0, 'lits_conflict': 111456.0, 'lits_loop': 9552.0, 'lits_other': 356968.0, 'jumps': {'jumps': 916.0, 'jumps_bounded': 57.0, 'levels': 7193.0, 'levels_bounded': 5527.0, 'max': 482.0, 'max_executed': 482.0, 'max_bounded': 481.0}}}}, 'summary': {'call': 15.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [16.0, 0.0], 'lower': [16.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.6564121246337891, 'cpu': 1.609375, 'solve': 0.3058300018310547, 'unsat': 0.01795196533203125, 'sat': 0.0668182373046875}, 'models': {'enumerated': 8.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.8802337646484375, 'cpu': 7.15625, 'solve': 0.5820083618164062, 'unsat': 0.21035194396972656, 'sat': 0.1326446533203125}, 'models': {'enumerated': 13.0, 'optimal': 4.0}, 'solving': {'solvers': {'choices': 13437.0, 'conflicts': 3280.0, 'conflicts_analyzed': 3129.0, 'restarts': 3.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 2573.0, 'models': 13.0, 'models_level': 2969.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2806.0, 'distributed_sum_lbd': 6481.0, 'integrated': 15550.0, 'lemmas': 21142.0, 'lits_learnt': 1323929.0, 'lemmas_binary': 2048.0, 'lemmas_ternary': 1364.0, 'cpu_time': 2.96875, 'integrated_imps': 5412.0, 'integrated_jumps': 3989.0, 'guiding_paths_lits': 10085.0, 'guiding_paths': 189.0, 'splits': 0.0, 'lemmas_conflict': 3078.0, 'lemmas_loop': 4230.0, 'lemmas_other': 13834.0, 'lits_conflict': 268383.0, 'lits_loop': 35319.0, 'lits_other': 1020227.0, 'jumps': {'jumps': 3129.0, 'jumps_bounded': 557.0, 'levels': 51791.0, 'levels_bounded': 46083.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15}

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 5 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 5 ( 55.56% solved)

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None)

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 5, step = 15]:
sub_goal(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), grasping(manipulator_arm_1), nothing, 5)
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5)

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 15:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.276918s.

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 16: original = External(symbol='current_last_sgoals(5, 15)', truth=True, inc_range=None), conversion = current_last_sgoals(5,15).

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.193113s with result Satisfiable.

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.47003079999999997, Incremental time limit = None
Running cumulative time = 5.254252299999996, Cumulative time limit = 3600
Used memory = (RSS = 305.027344Mb, VMS = 303.402344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 18
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.288726s, Solving = 0.965526s, Total = 5.254252s, Memory = (RSS = 305.027344Mb, VMS = 303.402344Mb)), Calls = 16
Final Model :: Total atoms = 9783, Cost = (17, 0), Optimality proven = False, Number = 5, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=16, start_step=15, end_step=16, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.2887258999999975, solving_time=0.9655263999999981, total_time=5.254252299999996, memory=Memory(rss=305.02734375, vms=303.40234375), step_range=range(0, 17), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2769182000000008, solving_time=0.1931125999999992, total_time=0.47003079999999997, memory=Memory(rss=305.02734375, vms=303.40234375), step_range=range(16, 17), clingo_stats={'problem': {'lp': {'atoms': 63400.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 195175.0, 'bodies_tr': 195175.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3276.0, 'count_bodies_tr': 3276.0, 'sccs': 373.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7996.0, 'rules': 271866.0, 'rules_normal': 268174.0, 'rules_choice': 3468.0, 'rules_minimize': 32.0, 'rules_acyc': 0.0, 'rules_heuristic': 192.0, 'rules_tr': 271812.0, 'rules_tr_normal': 268174.0, 'rules_tr_choice': 3468.0, 'rules_tr_minimize': 32.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 138.0, 'eqs': 144654.0, 'eqs_atom': 31409.0, 'eqs_body': 4513.0, 'eqs_other': 108732.0}, 'lpStep': {'atoms': 3763.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12845.0, 'bodies_tr': 12845.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17644.0, 'rules_normal': 17435.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17644.0, 'rules_tr_normal': 17435.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8297.0, 'eqs_atom': 1898.0, 'eqs_body': 67.0, 'eqs_other': 6332.0}, 'generator': {'vars': 34265.0, 'vars_eliminated': 0.0, 'vars_frozen': 21031.0, 'constraints': 3620.0, 'constraints_binary': 76308.0, 'constraints_ternary': 18960.0, 'acyc_edges': 0.0, 'complexity': 118343.0}}, 'solving': {'solvers': {'choices': 3435.0, 'conflicts': 222.0, 'conflicts_analyzed': 205.0, 'restarts': 0.0, 'restarts_last': 44.0, 'extra': {'domain_choices': 112.0, 'models': 5.0, 'models_level': 1594.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 114.0, 'distributed_sum_lbd': 285.0, 'integrated': 625.0, 'lemmas': 956.0, 'lits_learnt': 201197.0, 'lemmas_binary': 63.0, 'lemmas_ternary': 35.0, 'cpu_time': 0.375, 'integrated_imps': 391.0, 'integrated_jumps': 537.0, 'guiding_paths_lits': 1316.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 203.0, 'lemmas_loop': 135.0, 'lemmas_other': 618.0, 'lits_conflict': 41457.0, 'lits_loop': 1270.0, 'lits_other': 158470.0, 'jumps': {'jumps': 205.0, 'jumps_bounded': 59.0, 'levels': 1149.0, 'levels_bounded': 686.0, 'max': 227.0, 'max_executed': 227.0, 'max_bounded': 222.0}}}}, 'summary': {'call': 16.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [17.0, 0.0], 'lower': [17.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.4886913299560547, 'cpu': 0.703125, 'solve': 0.17453384399414062, 'unsat': 0.10571670532226562, 'sat': 0.011972427368164062}, 'models': {'enumerated': 5.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.368925094604492, 'cpu': 7.859375, 'solve': 0.7565422058105469, 'unsat': 0.3160686492919922, 'sat': 0.14461708068847656}, 'models': {'enumerated': 18.0, 'optimal': 5.0}, 'solving': {'solvers': {'choices': 16872.0, 'conflicts': 3502.0, 'conflicts_analyzed': 3334.0, 'restarts': 3.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 2685.0, 'models': 18.0, 'models_level': 4563.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2920.0, 'distributed_sum_lbd': 6766.0, 'integrated': 16175.0, 'lemmas': 22098.0, 'lits_learnt': 1525126.0, 'lemmas_binary': 2111.0, 'lemmas_ternary': 1399.0, 'cpu_time': 3.34375, 'integrated_imps': 5803.0, 'integrated_jumps': 4526.0, 'guiding_paths_lits': 11401.0, 'guiding_paths': 212.0, 'splits': 0.0, 'lemmas_conflict': 3281.0, 'lemmas_loop': 4365.0, 'lemmas_other': 14452.0, 'lits_conflict': 309840.0, 'lits_loop': 36589.0, 'lits_other': 1178697.0, 'jumps': {'jumps': 3334.0, 'jumps_bounded': 616.0, 'levels': 52940.0, 'levels_bounded': 46769.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16}

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 6 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 6 ( 66.67% solved)

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None)

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 6, step = 16]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 6)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 6)

[13-11-2021_23-39-24] DEBUG :: ASH Planner Main #1 >> Reaction at search length 16:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280480s.

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 17: original = External(symbol='current_last_sgoals(6, 16)', truth=True, inc_range=None), conversion = current_last_sgoals(6,16).

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.069022s with result Satisfiable.

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.34950240000000043, Incremental time limit = None
Running cumulative time = 5.603754699999996, Cumulative time limit = 3600
Used memory = (RSS = 312.875000Mb, VMS = 310.371094Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 21
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.569206s, Solving = 1.034549s, Total = 5.603755s, Memory = (RSS = 312.875000Mb, VMS = 310.371094Mb)), Calls = 17
Final Model :: Total atoms = 10164, Cost = (18, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=17, start_step=16, end_step=17, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.569205899999998, solving_time=1.0345487999999978, total_time=5.603754699999996, memory=Memory(rss=312.875, vms=310.37109375), step_range=range(0, 18), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28048000000000073, solving_time=0.0690223999999997, total_time=0.34950240000000043, memory=Memory(rss=312.875, vms=310.37109375), step_range=range(17, 18), clingo_stats={'problem': {'lp': {'atoms': 67177.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 208044.0, 'bodies_tr': 208044.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3477.0, 'count_bodies_tr': 3477.0, 'sccs': 398.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8590.0, 'rules': 289570.0, 'rules_normal': 285669.0, 'rules_choice': 3663.0, 'rules_minimize': 34.0, 'rules_acyc': 0.0, 'rules_heuristic': 204.0, 'rules_tr': 289516.0, 'rules_tr_normal': 285669.0, 'rules_tr_choice': 3663.0, 'rules_tr_minimize': 34.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 150.0, 'eqs': 153013.0, 'eqs_atom': 33321.0, 'eqs_body': 4580.0, 'eqs_other': 115112.0}, 'lpStep': {'atoms': 3777.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12869.0, 'bodies_tr': 12869.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17704.0, 'rules_normal': 17495.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17704.0, 'rules_tr_normal': 17495.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8359.0, 'eqs_atom': 1912.0, 'eqs_body': 67.0, 'eqs_other': 6380.0}, 'generator': {'vars': 36935.0, 'vars_eliminated': 0.0, 'vars_frozen': 22630.0, 'constraints': 4263.0, 'constraints_binary': 90304.0, 'constraints_ternary': 22972.0, 'acyc_edges': 0.0, 'complexity': 118343.0}}, 'solving': {'solvers': {'choices': 1677.0, 'conflicts': 153.0, 'conflicts_analyzed': 140.0, 'restarts': 0.0, 'restarts_last': 46.0, 'extra': {'domain_choices': 16.0, 'models': 3.0, 'models_level': 1012.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 52.0, 'distributed_sum_lbd': 163.0, 'integrated': 65.0, 'lemmas': 266.0, 'lits_learnt': 35819.0, 'lemmas_binary': 12.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 6.0, 'integrated_jumps': 57.0, 'guiding_paths_lits': 1393.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 140.0, 'lemmas_loop': 66.0, 'lemmas_other': 60.0, 'lits_conflict': 25779.0, 'lits_loop': 609.0, 'lits_other': 9431.0, 'jumps': {'jumps': 140.0, 'jumps_bounded': 0.0, 'levels': 189.0, 'levels_bounded': 0.0, 'max': 6.0, 'max_executed': 6.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 17.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [18.0, 0.0], 'lower': [18.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.35405540466308594, 'cpu': 0.4375, 'solve': 0.04986763000488281, 'unsat': 0.017953872680664062, 'sat': 0.008977890014648438}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.722980499267578, 'cpu': 8.296875, 'solve': 0.8064098358154297, 'unsat': 0.33402252197265625, 'sat': 0.153594970703125}, 'models': {'enumerated': 21.0, 'optimal': 6.0}, 'solving': {'solvers': {'choices': 18549.0, 'conflicts': 3655.0, 'conflicts_analyzed': 3474.0, 'restarts': 3.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 2701.0, 'models': 21.0, 'models_level': 5575.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2972.0, 'distributed_sum_lbd': 6929.0, 'integrated': 16240.0, 'lemmas': 22364.0, 'lits_learnt': 1560945.0, 'lemmas_binary': 2123.0, 'lemmas_ternary': 1399.0, 'cpu_time': 3.46875, 'integrated_imps': 5809.0, 'integrated_jumps': 4583.0, 'guiding_paths_lits': 12794.0, 'guiding_paths': 228.0, 'splits': 0.0, 'lemmas_conflict': 3421.0, 'lemmas_loop': 4431.0, 'lemmas_other': 14512.0, 'lits_conflict': 335619.0, 'lits_loop': 37198.0, 'lits_other': 1188128.0, 'jumps': {'jumps': 3474.0, 'jumps_bounded': 616.0, 'levels': 53129.0, 'levels_bounded': 46769.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17}

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 7 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 7 ( 77.78% solved)

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None)

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 7, step = 17]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 7)

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 17:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.288519s.

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 18: original = External(symbol='current_last_sgoals(7, 17)', truth=True, inc_range=None), conversion = current_last_sgoals(7,17).

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.268018s with result Satisfiable.

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.5565373000000005, Incremental time limit = None
Running cumulative time = 6.1602919999999965, Cumulative time limit = 3600
Used memory = (RSS = 326.050781Mb, VMS = 321.941406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 28
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.857725s, Solving = 1.302567s, Total = 6.160292s, Memory = (RSS = 326.050781Mb, VMS = 321.941406Mb)), Calls = 18
Final Model :: Total atoms = 10544, Cost = (19, 0), Optimality proven = False, Number = 7, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=18, start_step=17, end_step=18, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.8577252999999985, solving_time=1.302566699999998, total_time=6.1602919999999965, memory=Memory(rss=326.05078125, vms=321.94140625), step_range=range(0, 19), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2885194000000002, solving_time=0.26801790000000025, total_time=0.5565373000000005, memory=Memory(rss=326.05078125, vms=321.94140625), step_range=range(18, 19), clingo_stats={'problem': {'lp': {'atoms': 70968.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 220937.0, 'bodies_tr': 220937.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3678.0, 'count_bodies_tr': 3678.0, 'sccs': 423.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9184.0, 'rules': 307334.0, 'rules_normal': 303224.0, 'rules_choice': 3858.0, 'rules_minimize': 36.0, 'rules_acyc': 0.0, 'rules_heuristic': 216.0, 'rules_tr': 307280.0, 'rules_tr_normal': 303224.0, 'rules_tr_choice': 3858.0, 'rules_tr_minimize': 36.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 162.0, 'eqs': 161434.0, 'eqs_atom': 35247.0, 'eqs_body': 4647.0, 'eqs_other': 121540.0}, 'lpStep': {'atoms': 3791.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12893.0, 'bodies_tr': 12893.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17764.0, 'rules_normal': 17555.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17764.0, 'rules_tr_normal': 17555.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8421.0, 'eqs_atom': 1926.0, 'eqs_body': 67.0, 'eqs_other': 6428.0}, 'generator': {'vars': 39605.0, 'vars_eliminated': 0.0, 'vars_frozen': 24229.0, 'constraints': 4906.0, 'constraints_binary': 104423.0, 'constraints_ternary': 26984.0, 'acyc_edges': 0.0, 'complexity': 137195.0}}, 'solving': {'solvers': {'choices': 3375.0, 'conflicts': 148.0, 'conflicts_analyzed': 131.0, 'restarts': 0.0, 'restarts_last': 35.0, 'extra': {'domain_choices': 67.0, 'models': 7.0, 'models_level': 2451.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 33.0, 'distributed_sum_lbd': 94.0, 'integrated': 169.0, 'lemmas': 340.0, 'lits_learnt': 67003.0, 'lemmas_binary': 26.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.34375, 'integrated_imps': 46.0, 'integrated_jumps': 135.0, 'guiding_paths_lits': 1470.0, 'guiding_paths': 25.0, 'splits': 0.0, 'lemmas_conflict': 131.0, 'lemmas_loop': 52.0, 'lemmas_other': 157.0, 'lits_conflict': 21432.0, 'lits_loop': 447.0, 'lits_other': 45124.0, 'jumps': {'jumps': 131.0, 'jumps_bounded': 3.0, 'levels': 212.0, 'levels_bounded': 4.0, 'max': 7.0, 'max_executed': 7.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 18.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [19.0, 0.0], 'lower': [19.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.5610122680664062, 'cpu': 0.65625, 'solve': 0.24933433532714844, 'unsat': 0.1107025146484375, 'sat': 0.014963150024414062}, 'models': {'enumerated': 7.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.283992767333984, 'cpu': 8.953125, 'solve': 1.0557441711425781, 'unsat': 0.44472503662109375, 'sat': 0.16855812072753906}, 'models': {'enumerated': 28.0, 'optimal': 7.0}, 'solving': {'solvers': {'choices': 21924.0, 'conflicts': 3803.0, 'conflicts_analyzed': 3605.0, 'restarts': 3.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 2768.0, 'models': 28.0, 'models_level': 8026.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3005.0, 'distributed_sum_lbd': 7023.0, 'integrated': 16409.0, 'lemmas': 22704.0, 'lits_learnt': 1627948.0, 'lemmas_binary': 2149.0, 'lemmas_ternary': 1405.0, 'cpu_time': 3.8125, 'integrated_imps': 5855.0, 'integrated_jumps': 4718.0, 'guiding_paths_lits': 14264.0, 'guiding_paths': 253.0, 'splits': 0.0, 'lemmas_conflict': 3552.0, 'lemmas_loop': 4483.0, 'lemmas_other': 14669.0, 'lits_conflict': 357051.0, 'lits_loop': 37645.0, 'lits_other': 1233252.0, 'jumps': {'jumps': 3605.0, 'jumps_bounded': 619.0, 'levels': 53341.0, 'levels_bounded': 46773.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18}

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 8 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 8 ( 88.89% solved)

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None)

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 8, step = 18]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 8)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 8)

[13-11-2021_23-39-25] DEBUG :: ASH Planner Main #1 >> Reaction at search length 18:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.299374s.

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(8, 18)', truth=True, inc_range=None), conversion = current_last_sgoals(8,18).

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.080286s with result Satisfiable.

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37965980000000066, Incremental time limit = None
Running cumulative time = 6.539951799999997, Cumulative time limit = 3600
Used memory = (RSS = 335.382812Mb, VMS = 330.718750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 31
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.157099s, Solving = 1.382853s, Total = 6.539952s, Memory = (RSS = 335.382812Mb, VMS = 330.718750Mb)), Calls = 19
Final Model :: Total atoms = 10928, Cost = (21, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=5.157098999999999, solving_time=1.3828527999999984, total_time=6.539951799999997, memory=Memory(rss=335.3828125, vms=330.71875), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2993737000000003, solving_time=0.08028610000000036, total_time=0.37965980000000066, memory=Memory(rss=335.3828125, vms=330.71875), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 74773.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 233854.0, 'bodies_tr': 233854.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3879.0, 'count_bodies_tr': 3879.0, 'sccs': 448.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9778.0, 'rules': 325158.0, 'rules_normal': 320839.0, 'rules_choice': 4053.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 325104.0, 'rules_tr_normal': 320839.0, 'rules_tr_choice': 4053.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 174.0, 'eqs': 169917.0, 'eqs_atom': 37187.0, 'eqs_body': 4714.0, 'eqs_other': 128016.0}, 'lpStep': {'atoms': 3805.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12917.0, 'bodies_tr': 12917.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17824.0, 'rules_normal': 17615.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17824.0, 'rules_tr_normal': 17615.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8483.0, 'eqs_atom': 1940.0, 'eqs_body': 67.0, 'eqs_other': 6476.0}, 'generator': {'vars': 42275.0, 'vars_eliminated': 0.0, 'vars_frozen': 25828.0, 'constraints': 5549.0, 'constraints_binary': 118588.0, 'constraints_ternary': 30996.0, 'acyc_edges': 0.0, 'complexity': 156099.0}}, 'solving': {'solvers': {'choices': 1677.0, 'conflicts': 65.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 61.0, 'models': 3.0, 'models_level': 1141.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 18.0, 'distributed_sum_lbd': 50.0, 'integrated': 52.0, 'lemmas': 179.0, 'lits_learnt': 29272.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.25, 'integrated_imps': 17.0, 'integrated_jumps': 175.0, 'guiding_paths_lits': 1547.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 51.0, 'lemmas_loop': 80.0, 'lemmas_other': 48.0, 'lits_conflict': 13537.0, 'lits_loop': 765.0, 'lits_other': 14970.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 0.0, 'levels': 84.0, 'levels_bounded': 0.0, 'max': 11.0, 'max_executed': 11.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [21.0, 0.0], 'lower': [21.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3845329284667969, 'cpu': 0.578125, 'solve': 0.05485343933105469, 'unsat': 0.01795196533203125, 'sat': 0.0079803466796875}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.668525695800781, 'cpu': 9.53125, 'solve': 1.1105976104736328, 'unsat': 0.462677001953125, 'sat': 0.17653846740722656}, 'models': {'enumerated': 31.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 23601.0, 'conflicts': 3868.0, 'conflicts_analyzed': 3656.0, 'restarts': 3.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 2829.0, 'models': 31.0, 'models_level': 9167.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3023.0, 'distributed_sum_lbd': 7073.0, 'integrated': 16461.0, 'lemmas': 22883.0, 'lits_learnt': 1657220.0, 'lemmas_binary': 2149.0, 'lemmas_ternary': 1405.0, 'cpu_time': 4.0625, 'integrated_imps': 5872.0, 'integrated_jumps': 4893.0, 'guiding_paths_lits': 15811.0, 'guiding_paths': 270.0, 'splits': 0.0, 'lemmas_conflict': 3603.0, 'lemmas_loop': 4563.0, 'lemmas_other': 14717.0, 'lits_conflict': 370588.0, 'lits_loop': 38410.0, 'lits_other': 1248222.0, 'jumps': {'jumps': 3656.0, 'jumps_bounded': 619.0, 'levels': 53425.0, 'levels_bounded': 46773.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-26] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19}

[13-11-2021_23-39-26] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 9 (100.00% solved)

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None)

[13-11-2021_23-39-26] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 19]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), (block,6), 9)
sub_goal(2, talos, grasp(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), (block,5), 9)

[13-11-2021_23-39-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.316110s.

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(9,19).

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032650s with result Unsatisfiable.

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.34876020000000274, Incremental time limit = None
Running cumulative time = 6.888712, Cumulative time limit = 3600
Used memory = (RSS = 340.617188Mb, VMS = 334.539062Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-26] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.4732091, solving_time=1.4155029, total_time=6.888712, memory=Memory(rss=340.6171875, vms=334.5390625), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3161101000000013, solving_time=0.03265010000000146, total_time=0.34876020000000274, memory=Memory(rss=340.6171875, vms=334.5390625), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 78592.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 246795.0, 'bodies_tr': 246795.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4080.0, 'count_bodies_tr': 4080.0, 'sccs': 473.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10372.0, 'rules': 343042.0, 'rules_normal': 338514.0, 'rules_choice': 4248.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 342988.0, 'rules_tr_normal': 338514.0, 'rules_tr_choice': 4248.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 186.0, 'eqs': 178462.0, 'eqs_atom': 39141.0, 'eqs_body': 4781.0, 'eqs_other': 134540.0}, 'lpStep': {'atoms': 3819.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12941.0, 'bodies_tr': 12941.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17884.0, 'rules_normal': 17675.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17884.0, 'rules_tr_normal': 17675.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8545.0, 'eqs_atom': 1954.0, 'eqs_body': 67.0, 'eqs_other': 6524.0}, 'generator': {'vars': 44945.0, 'vars_eliminated': 0.0, 'vars_frozen': 27427.0, 'constraints': 6192.0, 'constraints_binary': 132799.0, 'constraints_ternary': 35008.0, 'acyc_edges': 0.0, 'complexity': 175049.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 1624.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 20.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [0.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3530559539794922, 'cpu': 0.46875, 'solve': 0.012937545776367188, 'unsat': 0.012937545776367188, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.021581649780273, 'cpu': 10.0, 'solve': 1.12353515625, 'unsat': 0.4756145477294922, 'sat': 0.17653846740722656}, 'models': {'enumerated': 31.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 23601.0, 'conflicts': 3876.0, 'conflicts_analyzed': 3656.0, 'restarts': 3.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 2829.0, 'models': 31.0, 'models_level': 9167.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3023.0, 'distributed_sum_lbd': 7073.0, 'integrated': 16461.0, 'lemmas': 22883.0, 'lits_learnt': 1657220.0, 'lemmas_binary': 2149.0, 'lemmas_ternary': 1405.0, 'cpu_time': 4.1875, 'integrated_imps': 5872.0, 'integrated_jumps': 4893.0, 'guiding_paths_lits': 17435.0, 'guiding_paths': 277.0, 'splits': 0.0, 'lemmas_conflict': 3603.0, 'lemmas_loop': 4563.0, 'lemmas_other': 14717.0, 'lits_conflict': 370588.0, 'lits_loop': 38410.0, 'lits_other': 1248222.0, 'jumps': {'jumps': 3656.0, 'jumps_bounded': 619.0, 'levels': 53425.0, 'levels_bounded': 46773.0, 'max': 817.0, 'max_executed': 817.0, 'max_bounded': 816.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-26] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.300881s.

[13-11-2021_23-39-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.169022s with result Unsatisfiable.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.46990289999999746, Incremental time limit = None
Running cumulative time = 7.358614899999997, Cumulative time limit = 3600
Used memory = (RSS = 352.699219Mb, VMS = 357.703125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=5.774090299999999, solving_time=1.5845245999999982, total_time=7.358614899999997, memory=Memory(rss=352.69921875, vms=357.703125), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3008811999999992, solving_time=0.16902169999999828, total_time=0.46990289999999746, memory=Memory(rss=352.69921875, vms=357.703125), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 82425.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 259760.0, 'bodies_tr': 259760.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4281.0, 'count_bodies_tr': 4281.0, 'sccs': 498.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 10966.0, 'rules': 360986.0, 'rules_normal': 356249.0, 'rules_choice': 4443.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 360932.0, 'rules_tr_normal': 356249.0, 'rules_tr_choice': 4443.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 198.0, 'eqs': 187069.0, 'eqs_atom': 41109.0, 'eqs_body': 4848.0, 'eqs_other': 141112.0}, 'lpStep': {'atoms': 3833.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12965.0, 'bodies_tr': 12965.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 17944.0, 'rules_normal': 17735.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17944.0, 'rules_tr_normal': 17735.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8607.0, 'eqs_atom': 1968.0, 'eqs_body': 67.0, 'eqs_other': 6572.0}, 'generator': {'vars': 47615.0, 'vars_eliminated': 0.0, 'vars_frozen': 29026.0, 'constraints': 6835.0, 'constraints_binary': 147056.0, 'constraints_ternary': 39020.0, 'acyc_edges': 0.0, 'complexity': 194045.0}}, 'solving': {'solvers': {'choices': 1229.0, 'conflicts': 589.0, 'conflicts_analyzed': 565.0, 'restarts': 1.0, 'restarts_last': 99.0, 'extra': {'domain_choices': 676.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 528.0, 'distributed_sum_lbd': 1268.0, 'integrated': 3115.0, 'lemmas': 5289.0, 'lits_learnt': 806293.0, 'lemmas_binary': 466.0, 'lemmas_ternary': 186.0, 'cpu_time': 0.859375, 'integrated_imps': 875.0, 'integrated_jumps': 456.0, 'guiding_paths_lits': 1701.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 559.0, 'lemmas_loop': 1829.0, 'lemmas_other': 2901.0, 'lits_conflict': 131021.0, 'lits_loop': 16340.0, 'lits_other': 658932.0, 'jumps': {'jumps': 565.0, 'jumps_bounded': 122.0, 'levels': 56818.0, 'levels_bounded': 56045.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}, 'summary': {'call': 21.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [17.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4762306213378906, 'cpu': 1.203125, 'solve': 0.14560890197753906, 'unsat': 0.14560890197753906, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 7.497812271118164, 'cpu': 11.203125, 'solve': 1.269144058227539, 'unsat': 0.6212234497070312, 'sat': 0.17653846740722656}, 'models': {'enumerated': 31.0, 'optimal': 8.0}, 'solving': {'solvers': {'choices': 24830.0, 'conflicts': 4465.0, 'conflicts_analyzed': 4221.0, 'restarts': 4.0, 'restarts_last': 148.0, 'extra': {'domain_choices': 3505.0, 'models': 31.0, 'models_level': 9167.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3551.0, 'distributed_sum_lbd': 8341.0, 'integrated': 19576.0, 'lemmas': 28172.0, 'lits_learnt': 2463513.0, 'lemmas_binary': 2615.0, 'lemmas_ternary': 1591.0, 'cpu_time': 5.046875, 'integrated_imps': 6747.0, 'integrated_jumps': 5349.0, 'guiding_paths_lits': 19136.0, 'guiding_paths': 300.0, 'splits': 0.0, 'lemmas_conflict': 4162.0, 'lemmas_loop': 6392.0, 'lemmas_other': 17618.0, 'lits_conflict': 501609.0, 'lits_loop': 54750.0, 'lits_other': 1907154.0, 'jumps': {'jumps': 4221.0, 'jumps_bounded': 741.0, 'levels': 110243.0, 'levels_bounded': 102818.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-27] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306098s.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.453395s with result Satisfiable.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.7594928999999979, Incremental time limit = None
Running cumulative time = 8.118107799999995, Cumulative time limit = 3600
Used memory = (RSS = 365.527344Mb, VMS = 369.585938Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 36
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.080188s, Solving = 2.037920s, Total = 8.118108s, Memory = (RSS = 365.527344Mb, VMS = 369.585938Mb)), Calls = 22
Final Model :: Total atoms = 12071, Cost = (26, 0), Optimality proven = False, Number = 5, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-27] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.080187999999998, solving_time=2.0379197999999974, total_time=8.118107799999995, memory=Memory(rss=365.52734375, vms=369.5859375), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3060976999999987, solving_time=0.4533951999999992, total_time=0.7594928999999979, memory=Memory(rss=365.52734375, vms=369.5859375), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 86272.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 272749.0, 'bodies_tr': 272749.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4482.0, 'count_bodies_tr': 4482.0, 'sccs': 523.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 11560.0, 'rules': 378990.0, 'rules_normal': 374044.0, 'rules_choice': 4638.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 378936.0, 'rules_tr_normal': 374044.0, 'rules_tr_choice': 4638.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 210.0, 'eqs': 195738.0, 'eqs_atom': 43091.0, 'eqs_body': 4915.0, 'eqs_other': 147732.0}, 'lpStep': {'atoms': 3847.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12989.0, 'bodies_tr': 12989.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 18004.0, 'rules_normal': 17795.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18004.0, 'rules_tr_normal': 17795.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8669.0, 'eqs_atom': 1982.0, 'eqs_body': 67.0, 'eqs_other': 6620.0}, 'generator': {'vars': 50285.0, 'vars_eliminated': 0.0, 'vars_frozen': 30625.0, 'constraints': 7475.0, 'constraints_binary': 160958.0, 'constraints_ternary': 42883.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 7054.0, 'conflicts': 1770.0, 'conflicts_analyzed': 1752.0, 'restarts': 8.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 1487.0, 'models': 5.0, 'models_level': 2231.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1401.0, 'distributed_sum_lbd': 3943.0, 'integrated': 8322.0, 'lemmas': 11770.0, 'lits_learnt': 2179620.0, 'lemmas_binary': 944.0, 'lemmas_ternary': 485.0, 'cpu_time': 2.3125, 'integrated_imps': 1331.0, 'integrated_jumps': 1563.0, 'guiding_paths_lits': 1778.0, 'guiding_paths': 23.0, 'splits': 0.0, 'lemmas_conflict': 1748.0, 'lemmas_loop': 1966.0, 'lemmas_other': 8056.0, 'lits_conflict': 406036.0, 'lits_loop': 16624.0, 'lits_other': 1756960.0, 'jumps': {'jumps': 1752.0, 'jumps_bounded': 153.0, 'levels': 52596.0, 'levels_bounded': 49470.0, 'max': 1513.0, 'max_executed': 1513.0, 'max_bounded': 1512.0}}}}, 'summary': {'call': 22.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.7662944793701172, 'cpu': 2.640625, 'solve': 0.42685890197753906, 'unsat': 0.021930694580078125, 'sat': 0.31316375732421875}, 'models': {'enumerated': 5.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 8.264106750488281, 'cpu': 13.84375, 'solve': 1.6960029602050781, 'unsat': 0.6431541442871094, 'sat': 0.4897022247314453}, 'models': {'enumerated': 36.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 31884.0, 'conflicts': 6235.0, 'conflicts_analyzed': 5973.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 4992.0, 'models': 36.0, 'models_level': 11398.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4952.0, 'distributed_sum_lbd': 12284.0, 'integrated': 27898.0, 'lemmas': 39942.0, 'lits_learnt': 4643133.0, 'lemmas_binary': 3559.0, 'lemmas_ternary': 2076.0, 'cpu_time': 7.359375, 'integrated_imps': 8078.0, 'integrated_jumps': 6912.0, 'guiding_paths_lits': 20914.0, 'guiding_paths': 323.0, 'splits': 0.0, 'lemmas_conflict': 5910.0, 'lemmas_loop': 8358.0, 'lemmas_other': 25674.0, 'lits_conflict': 907645.0, 'lits_loop': 71374.0, 'lits_other': 3664114.0, 'jumps': {'jumps': 5973.0, 'jumps_bounded': 894.0, 'levels': 162839.0, 'levels_bounded': 152288.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-27] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{1: 2, 2: 3, 3: 13, 4: 15, 5: 16, 6: 17, 7: 18, 8: 19, 9: 22}

[13-11-2021_23-39-27] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 9, current total achieved sgoals = 10 (111.11% solved)

[13-11-2021_23-39-27] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 9 was achieved successfully.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.354841s, Solving = 0.014656s, Total = 0.369497s, Memory = (RSS = 212.695312Mb, VMS = 203.542969Mb)
2 : Statistics :: Grounding = 0.171898s, Solving = 0.011550s, Total = 0.183448s, Memory = (RSS = 214.488281Mb, VMS = 205.753906Mb)
3 : Statistics :: Grounding = 0.218843s, Solving = 0.011994s, Total = 0.230837s, Memory = (RSS = 216.796875Mb, VMS = 207.828125Mb)
4 : Statistics :: Grounding = 0.242261s, Solving = 0.007012s, Total = 0.249273s, Memory = (RSS = 218.238281Mb, VMS = 209.019531Mb)
5 : Statistics :: Grounding = 0.258064s, Solving = 0.012757s, Total = 0.270821s, Memory = (RSS = 223.519531Mb, VMS = 214.519531Mb)
6 : Statistics :: Grounding = 0.258460s, Solving = 0.015432s, Total = 0.273892s, Memory = (RSS = 228.601562Mb, VMS = 220.160156Mb)
7 : Statistics :: Grounding = 0.244636s, Solving = 0.027616s, Total = 0.272252s, Memory = (RSS = 236.832031Mb, VMS = 229.296875Mb)
8 : Statistics :: Grounding = 0.270229s, Solving = 0.019479s, Total = 0.289708s, Memory = (RSS = 242.281250Mb, VMS = 234.308594Mb)
9 : Statistics :: Grounding = 0.275772s, Solving = 0.026332s, Total = 0.302105s, Memory = (RSS = 250.570312Mb, VMS = 243.796875Mb)
10 : Statistics :: Grounding = 0.275814s, Solving = 0.033745s, Total = 0.309560s, Memory = (RSS = 254.960938Mb, VMS = 247.535156Mb)
11 : Statistics :: Grounding = 0.266745s, Solving = 0.054024s, Total = 0.320770s, Memory = (RSS = 259.937500Mb, VMS = 252.070312Mb)
12 : Statistics :: Grounding = 0.279657s, Solving = 0.065987s, Total = 0.345644s, Memory = (RSS = 270.566406Mb, VMS = 265.093750Mb)
13 : Statistics :: Grounding = 0.270707s, Solving = 0.111081s, Total = 0.381788s, Memory = (RSS = 273.394531Mb, VMS = 266.636719Mb)
14 : Statistics :: Grounding = 0.296313s, Solving = 0.037970s, Total = 0.334283s, Memory = (RSS = 278.074219Mb, VMS = 270.976562Mb)
15 : Statistics :: Grounding = 0.327567s, Solving = 0.322777s, Total = 0.650344s, Memory = (RSS = 294.429688Mb, VMS = 294.078125Mb)
16 : Statistics :: Grounding = 0.276918s, Solving = 0.193113s, Total = 0.470031s, Memory = (RSS = 305.027344Mb, VMS = 303.402344Mb)
17 : Statistics :: Grounding = 0.280480s, Solving = 0.069022s, Total = 0.349502s, Memory = (RSS = 312.875000Mb, VMS = 310.371094Mb)
18 : Statistics :: Grounding = 0.288519s, Solving = 0.268018s, Total = 0.556537s, Memory = (RSS = 326.050781Mb, VMS = 321.941406Mb)
19 : Statistics :: Grounding = 0.299374s, Solving = 0.080286s, Total = 0.379660s, Memory = (RSS = 335.382812Mb, VMS = 330.718750Mb)
20 : Statistics :: Grounding = 0.316110s, Solving = 0.032650s, Total = 0.348760s, Memory = (RSS = 340.617188Mb, VMS = 334.539062Mb)
21 : Statistics :: Grounding = 0.300881s, Solving = 0.169022s, Total = 0.469903s, Memory = (RSS = 352.699219Mb, VMS = 357.703125Mb)
22 : Statistics :: Grounding = 0.306098s, Solving = 0.453395s, Total = 0.759493s, Memory = (RSS = 365.527344Mb, VMS = 369.585938Mb)

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 8.118108s due to: External generator exit.

[13-11-2021_23-39-27] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-39-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {}
Sub-goal achievement steps: {}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 9, Last requested goal index = 9 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.080188s, Solving = 2.037920s, Total = 8.118108s, Memory = (RSS = 365.527344Mb, VMS = 369.585938Mb)), Calls = 22
Model :: Total atoms = 12071, Cost = (26, 0), Optimality proven = False, Number = 5, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 22 :: Actions = 27                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Online planning increment 1 finished.

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 7 : Unachieved sgoals = 7
Level = 1 : Solved problems = 1 : Total constraining sgoals = 17 : Achieved sgoals = 9 : Unachieved sgoals = 8

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-2]

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 2 by method ground-first: [1-1]

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 2:
Divided plan : Level =  2 (par-ref), Length =  17, Actions =  28 (Com = 0.61), Sgs = 28, Time =   3.320s (Gro =   2.811s, Sea =   0.509s), Expan (2.43, 2.80) (Dev = (2.15, 3.95), Bal = (0.88, 1.41))
Division points [total=1] : [(Index = 8, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [9-17]

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [9-17], problem number = 2, increment number = 2

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 9)
	('last_sgoals', 17)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 9
last_sgoals = 17
start_step = 20
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 28

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [9-17] : Minimum search length bound = disabled with value = 28

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 10})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,6))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 15})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,5))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 17})

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 12 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 10).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 10).
sub_goal(2, talos, move(hallway), in(talos), hallway, 11).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 14).
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14).
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16).
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16).
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17).
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17).

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000027C9B8FE680>

[13-11-2021_23-39-28] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-39-28] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027C9B8FE680> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-39-28] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027C9B8FE680> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-39-28] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 20)
	('last_sgoals', 17)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('first_sgoals', 10)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000027C9B8FE680>)

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None)

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.312556s.

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 23: original = External(symbol='current_last_sgoals(10, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(10,21).

[13-11-2021_23-39-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.308633s with result Satisfiable.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6211886, Incremental time limit = None
Running cumulative time = 8.739296399999995, Cumulative time limit = 3600
Used memory = (RSS = 384.101562Mb, VMS = 386.667969Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 42
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.392744s, Solving = 2.346552s, Total = 8.739296s, Memory = (RSS = 384.101562Mb, VMS = 386.667969Mb)), Calls = 23
Final Model :: Total atoms = 15764, Cost = (26, 0), Optimality proven = False, Number = 6, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.392743999999999, solving_time=2.3465523999999967, total_time=8.739296399999995, memory=Memory(rss=384.1015625, vms=386.66796875), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3125560000000007, solving_time=0.30863259999999926, total_time=0.6211886, memory=Memory(rss=384.1015625, vms=386.66796875), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 94144.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 286453.0, 'bodies_tr': 286453.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4683.0, 'count_bodies_tr': 4683.0, 'sccs': 548.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12154.0, 'rules': 401953.0, 'rules_normal': 396798.0, 'rules_choice': 4833.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 401899.0, 'rules_tr_normal': 396798.0, 'rules_tr_choice': 4833.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 222.0, 'eqs': 206508.0, 'eqs_atom': 45757.0, 'eqs_body': 5655.0, 'eqs_other': 155096.0}, 'lpStep': {'atoms': 7872.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13704.0, 'bodies_tr': 13704.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22963.0, 'rules_normal': 22754.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22963.0, 'rules_tr_normal': 22754.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10770.0, 'eqs_atom': 2666.0, 'eqs_body': 740.0, 'eqs_other': 7364.0}, 'generator': {'vars': 52982.0, 'vars_eliminated': 0.0, 'vars_frozen': 32246.0, 'constraints': 702.0, 'constraints_binary': 33612.0, 'constraints_ternary': 3959.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 3456.0, 'conflicts': 108.0, 'conflicts_analyzed': 101.0, 'restarts': 0.0, 'restarts_last': 7.0, 'extra': {'domain_choices': 39.0, 'models': 6.0, 'models_level': 2717.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 96.0, 'distributed_sum_lbd': 130.0, 'integrated': 593.0, 'lemmas': 718.0, 'lits_learnt': 3701.0, 'lemmas_binary': 43.0, 'lemmas_ternary': 16.0, 'cpu_time': 0.4375, 'integrated_imps': 522.0, 'integrated_jumps': 351.0, 'guiding_paths_lits': 2184.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 101.0, 'lemmas_loop': 33.0, 'lemmas_other': 584.0, 'lits_conflict': 2218.0, 'lits_loop': 230.0, 'lits_other': 1253.0, 'jumps': {'jumps': 101.0, 'jumps_bounded': 12.0, 'levels': 3051.0, 'levels_bounded': 2742.0, 'max': 310.0, 'max_executed': 36.0, 'max_bounded': 274.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [26.0, 0.0], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.7449684143066406, 'cpu': 0.890625, 'solve': 0.2702960968017578, 'unsat': 0.015956878662109375, 'sat': 0.012966156005859375}, 'models': {'enumerated': 6.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 9.009075164794922, 'cpu': 14.734375, 'solve': 1.966299057006836, 'unsat': 0.6591110229492188, 'sat': 0.5026683807373047}, 'models': {'enumerated': 42.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 35340.0, 'conflicts': 6343.0, 'conflicts_analyzed': 6074.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5031.0, 'models': 42.0, 'models_level': 14115.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5048.0, 'distributed_sum_lbd': 12414.0, 'integrated': 28491.0, 'lemmas': 40660.0, 'lits_learnt': 4646834.0, 'lemmas_binary': 3602.0, 'lemmas_ternary': 2092.0, 'cpu_time': 7.796875, 'integrated_imps': 8600.0, 'integrated_jumps': 7263.0, 'guiding_paths_lits': 23098.0, 'guiding_paths': 335.0, 'splits': 0.0, 'lemmas_conflict': 6011.0, 'lemmas_loop': 8391.0, 'lemmas_other': 26258.0, 'lits_conflict': 909863.0, 'lits_loop': 71604.0, 'lits_other': 3665367.0, 'jumps': {'jumps': 6074.0, 'jumps_bounded': 906.0, 'levels': 165890.0, 'levels_bounded': 155030.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23}

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 2 ( 25.00% solved)

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None)

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 23]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 11)

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.264452s.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(11, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(11,23).

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027282s with result Unsatisfiable.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2917342000000005, Incremental time limit = None
Running cumulative time = 9.031030599999996, Cumulative time limit = 3600
Used memory = (RSS = 386.421875Mb, VMS = 388.714844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=6.657196000000001, solving_time=2.373834599999995, total_time=9.031030599999996, memory=Memory(rss=386.421875, vms=388.71484375), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26445200000000213, solving_time=0.02728219999999837, total_time=0.2917342000000005, memory=Memory(rss=386.421875, vms=388.71484375), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 97568.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 297053.0, 'bodies_tr': 297053.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4884.0, 'count_bodies_tr': 4884.0, 'sccs': 561.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12340.0, 'rules': 416775.0, 'rules_normal': 411411.0, 'rules_choice': 5028.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 416713.0, 'rules_tr_normal': 411411.0, 'rules_tr_choice': 5028.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 226.0, 'eqs': 213488.0, 'eqs_atom': 46694.0, 'eqs_body': 6055.0, 'eqs_other': 160739.0}, 'lpStep': {'atoms': 3424.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10600.0, 'bodies_tr': 10600.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 186.0, 'rules': 14822.0, 'rules_normal': 14613.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 14814.0, 'rules_tr_normal': 14613.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 4.0, 'eqs': 6980.0, 'eqs_atom': 937.0, 'eqs_body': 400.0, 'eqs_other': 5643.0}, 'generator': {'vars': 53728.0, 'vars_eliminated': 0.0, 'vars_frozen': 32731.0, 'constraints': 593.0, 'constraints_binary': 31761.0, 'constraints_ternary': 3116.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 2.0, 'lits_learnt': 11.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2044.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 2.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 11.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.2981986999511719, 'cpu': 0.296875, 'solve': 0.0039882659912109375, 'unsat': 0.0039882659912109375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.307273864746094, 'cpu': 15.03125, 'solve': 1.9702873229980469, 'unsat': 0.6630992889404297, 'sat': 0.5026683807373047}, 'models': {'enumerated': 42.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 35340.0, 'conflicts': 6345.0, 'conflicts_analyzed': 6074.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5031.0, 'models': 42.0, 'models_level': 14115.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5049.0, 'distributed_sum_lbd': 12416.0, 'integrated': 28491.0, 'lemmas': 40662.0, 'lits_learnt': 4646845.0, 'lemmas_binary': 3603.0, 'lemmas_ternary': 2092.0, 'cpu_time': 7.796875, 'integrated_imps': 8600.0, 'integrated_jumps': 7263.0, 'guiding_paths_lits': 25142.0, 'guiding_paths': 342.0, 'splits': 0.0, 'lemmas_conflict': 6011.0, 'lemmas_loop': 8393.0, 'lemmas_other': 26258.0, 'lits_conflict': 909863.0, 'lits_loop': 71615.0, 'lits_other': 3665367.0, 'jumps': {'jumps': 6074.0, 'jumps_bounded': 906.0, 'levels': 165890.0, 'levels_bounded': 155030.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245595s.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058659s with result Satisfiable.

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.30425349999999796, Incremental time limit = None
Running cumulative time = 9.335284099999994, Cumulative time limit = 3600
Used memory = (RSS = 390.332031Mb, VMS = 391.617188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 44
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 6.902791s, Solving = 2.432493s, Total = 9.335284s, Memory = (RSS = 390.332031Mb, VMS = 391.617188Mb)), Calls = 25
Final Model :: Total atoms = 16530, Cost = (28, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=6.9027908, solving_time=2.4324932999999938, total_time=9.335284099999994, memory=Memory(rss=390.33203125, vms=391.6171875), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24559479999999922, solving_time=0.05865869999999873, total_time=0.30425349999999796, memory=Memory(rss=390.33203125, vms=391.6171875), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 100783.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 308199.0, 'bodies_tr': 308199.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5085.0, 'count_bodies_tr': 5085.0, 'sccs': 584.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12652.0, 'rules': 433066.0, 'rules_normal': 427493.0, 'rules_choice': 5223.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 432998.0, 'rules_tr_normal': 427493.0, 'rules_tr_choice': 5223.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 232.0, 'eqs': 224522.0, 'eqs_atom': 48372.0, 'eqs_body': 6432.0, 'eqs_other': 169718.0}, 'lpStep': {'atoms': 3215.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11146.0, 'bodies_tr': 11146.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16291.0, 'rules_normal': 16082.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16285.0, 'rules_tr_normal': 16082.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 11034.0, 'eqs_atom': 1678.0, 'eqs_body': 377.0, 'eqs_other': 8979.0}, 'generator': {'vars': 55095.0, 'vars_eliminated': 0.0, 'vars_frozen': 33605.0, 'constraints': 883.0, 'constraints_binary': 39373.0, 'constraints_ternary': 4802.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 1388.0, 'conflicts': 66.0, 'conflicts_analyzed': 60.0, 'restarts': 0.0, 'restarts_last': 14.0, 'extra': {'domain_choices': 66.0, 'models': 2.0, 'models_level': 986.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 71.0, 'distributed_sum_lbd': 120.0, 'integrated': 402.0, 'lemmas': 413.0, 'lits_learnt': 2027.0, 'lemmas_binary': 50.0, 'lemmas_ternary': 27.0, 'cpu_time': 0.046875, 'integrated_imps': 164.0, 'integrated_jumps': 90.0, 'guiding_paths_lits': 2177.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 56.0, 'lemmas_loop': 143.0, 'lemmas_other': 214.0, 'lits_conflict': 236.0, 'lits_loop': 921.0, 'lits_other': 870.0, 'jumps': {'jumps': 60.0, 'jumps_bounded': 24.0, 'levels': 5683.0, 'levels_bounded': 5614.0, 'max': 313.0, 'max_executed': 313.0, 'max_bounded': 312.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [28.0, 0.0], 'lower': [28.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.30817413330078125, 'cpu': 0.328125, 'solve': 0.0359039306640625, 'unsat': 0.0139617919921875, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 9.615447998046875, 'cpu': 15.359375, 'solve': 2.0061912536621094, 'unsat': 0.6770610809326172, 'sat': 0.5076560974121094}, 'models': {'enumerated': 44.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 36728.0, 'conflicts': 6411.0, 'conflicts_analyzed': 6134.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5097.0, 'models': 44.0, 'models_level': 15101.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5120.0, 'distributed_sum_lbd': 12536.0, 'integrated': 28893.0, 'lemmas': 41075.0, 'lits_learnt': 4648872.0, 'lemmas_binary': 3653.0, 'lemmas_ternary': 2119.0, 'cpu_time': 7.84375, 'integrated_imps': 8764.0, 'integrated_jumps': 7353.0, 'guiding_paths_lits': 27319.0, 'guiding_paths': 355.0, 'splits': 0.0, 'lemmas_conflict': 6067.0, 'lemmas_loop': 8536.0, 'lemmas_other': 26472.0, 'lits_conflict': 910099.0, 'lits_loop': 72536.0, 'lits_other': 3666237.0, 'jumps': {'jumps': 6134.0, 'jumps_bounded': 930.0, 'levels': 171573.0, 'levels_bounded': 160644.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25}

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 3 ( 37.50% solved)

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None)

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 25]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 12)

[13-11-2021_23-39-29] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.256532s.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(12, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(12,25).

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036428s with result Unsatisfiable.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.2929591000000009, Incremental time limit = None
Running cumulative time = 9.628243199999995, Cumulative time limit = 3600
Used memory = (RSS = 394.734375Mb, VMS = 395.554688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.159322300000001, solving_time=2.4689208999999934, total_time=9.628243199999995, memory=Memory(rss=394.734375, vms=395.5546875), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.25653150000000124, solving_time=0.03642759999999967, total_time=0.2929591000000009, memory=Memory(rss=394.734375, vms=395.5546875), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 104073.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 319436.0, 'bodies_tr': 319436.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5286.0, 'count_bodies_tr': 5286.0, 'sccs': 607.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 12964.0, 'rules': 449585.0, 'rules_normal': 443803.0, 'rules_choice': 5418.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 449511.0, 'rules_tr_normal': 443803.0, 'rules_tr_choice': 5418.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 238.0, 'eqs': 236204.0, 'eqs_atom': 50072.0, 'eqs_body': 6831.0, 'eqs_other': 179301.0}, 'lpStep': {'atoms': 3290.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11237.0, 'bodies_tr': 11237.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 312.0, 'rules': 16519.0, 'rules_normal': 16310.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16513.0, 'rules_tr_normal': 16310.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 6.0, 'eqs': 11682.0, 'eqs_atom': 1700.0, 'eqs_body': 399.0, 'eqs_other': 9583.0}, 'generator': {'vars': 56508.0, 'vars_eliminated': 0.0, 'vars_frozen': 34508.0, 'constraints': 1100.0, 'constraints_binary': 44991.0, 'constraints_ternary': 6012.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 8.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 7.0, 'lits_learnt': 63.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.078125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2310.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 7.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 63.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.29784584045410156, 'cpu': 0.359375, 'solve': 0.005985260009765625, 'unsat': 0.005985260009765625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 9.913293838500977, 'cpu': 15.71875, 'solve': 2.012176513671875, 'unsat': 0.6830463409423828, 'sat': 0.5076560974121094}, 'models': {'enumerated': 44.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 36728.0, 'conflicts': 6419.0, 'conflicts_analyzed': 6134.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5097.0, 'models': 44.0, 'models_level': 15101.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5120.0, 'distributed_sum_lbd': 12536.0, 'integrated': 28893.0, 'lemmas': 41082.0, 'lits_learnt': 4648935.0, 'lemmas_binary': 3653.0, 'lemmas_ternary': 2119.0, 'cpu_time': 7.921875, 'integrated_imps': 8764.0, 'integrated_jumps': 7353.0, 'guiding_paths_lits': 29629.0, 'guiding_paths': 362.0, 'splits': 0.0, 'lemmas_conflict': 6067.0, 'lemmas_loop': 8543.0, 'lemmas_other': 26472.0, 'lits_conflict': 910099.0, 'lits_loop': 72599.0, 'lits_other': 3666237.0, 'jumps': {'jumps': 6134.0, 'jumps_bounded': 930.0, 'levels': 171573.0, 'levels_bounded': 160644.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.274301s.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045806s with result Unsatisfiable.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3201073000000001, Incremental time limit = None
Running cumulative time = 9.948350499999995, Cumulative time limit = 3600
Used memory = (RSS = 397.609375Mb, VMS = 397.128906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=7.433623700000004, solving_time=2.514726799999991, total_time=9.948350499999995, memory=Memory(rss=397.609375, vms=397.12890625), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.27430140000000236, solving_time=0.045805899999997735, total_time=0.3201073000000001, memory=Memory(rss=397.609375, vms=397.12890625), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 107379.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 331256.0, 'bodies_tr': 331256.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5487.0, 'count_bodies_tr': 5487.0, 'sccs': 632.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13450.0, 'rules': 466826.0, 'rules_normal': 460835.0, 'rules_choice': 5613.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 466750.0, 'rules_tr_normal': 460835.0, 'rules_tr_choice': 5613.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 248.0, 'eqs': 245287.0, 'eqs_atom': 51623.0, 'eqs_body': 6961.0, 'eqs_other': 186703.0}, 'lpStep': {'atoms': 3306.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11820.0, 'bodies_tr': 11820.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17241.0, 'rules_normal': 17032.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17239.0, 'rules_tr_normal': 17032.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9083.0, 'eqs_atom': 1551.0, 'eqs_body': 130.0, 'eqs_other': 7402.0}, 'generator': {'vars': 58619.0, 'vars_eliminated': 0.0, 'vars_frozen': 35832.0, 'constraints': 1597.0, 'constraints_binary': 57002.0, 'constraints_ternary': 8683.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 411.0, 'conflicts': 89.0, 'conflicts_analyzed': 80.0, 'restarts': 0.0, 'restarts_last': 18.0, 'extra': {'domain_choices': 78.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 77.0, 'distributed_sum_lbd': 147.0, 'integrated': 363.0, 'lemmas': 587.0, 'lits_learnt': 15417.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 18.0, 'cpu_time': 0.09375, 'integrated_imps': 209.0, 'integrated_jumps': 200.0, 'guiding_paths_lits': 2094.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 79.0, 'lemmas_loop': 184.0, 'lemmas_other': 324.0, 'lits_conflict': 2655.0, 'lits_loop': 1423.0, 'lits_other': 11339.0, 'jumps': {'jumps': 80.0, 'jumps_bounded': 34.0, 'levels': 12462.0, 'levels_bounded': 12259.0, 'max': 842.0, 'max_executed': 842.0, 'max_bounded': 841.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [26.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.32373809814453125, 'cpu': 0.390625, 'solve': 0.008977890014648438, 'unsat': 0.008977890014648438, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 10.237031936645508, 'cpu': 16.109375, 'solve': 2.0211544036865234, 'unsat': 0.6920242309570312, 'sat': 0.5076560974121094}, 'models': {'enumerated': 44.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 37139.0, 'conflicts': 6508.0, 'conflicts_analyzed': 6214.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5175.0, 'models': 44.0, 'models_level': 15101.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5197.0, 'distributed_sum_lbd': 12683.0, 'integrated': 29256.0, 'lemmas': 41669.0, 'lits_learnt': 4664352.0, 'lemmas_binary': 3654.0, 'lemmas_ternary': 2137.0, 'cpu_time': 8.015625, 'integrated_imps': 8973.0, 'integrated_jumps': 7553.0, 'guiding_paths_lits': 31723.0, 'guiding_paths': 371.0, 'splits': 0.0, 'lemmas_conflict': 6146.0, 'lemmas_loop': 8727.0, 'lemmas_other': 26796.0, 'lits_conflict': 912754.0, 'lits_loop': 74022.0, 'lits_other': 3677576.0, 'jumps': {'jumps': 6214.0, 'jumps_bounded': 964.0, 'levels': 184035.0, 'levels_bounded': 172903.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.271366s.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.106126s with result Satisfiable.

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.37749189999999544, Incremental time limit = None
Running cumulative time = 10.32584239999999, Cumulative time limit = 3600
Used memory = (RSS = 404.292969Mb, VMS = 402.628906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 47
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 7.704990s, Solving = 2.620853s, Total = 10.325842s, Memory = (RSS = 404.292969Mb, VMS = 402.628906Mb)), Calls = 28
Final Model :: Total atoms = 17672, Cost = (31, 0), Optimality proven = False, Number = 3, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=7.704989500000002, solving_time=2.6208528999999885, total_time=10.32584239999999, memory=Memory(rss=404.29296875, vms=402.62890625), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2713657999999981, solving_time=0.10612609999999734, total_time=0.37749189999999544, memory=Memory(rss=404.29296875, vms=402.62890625), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 110938.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 343288.0, 'bodies_tr': 343288.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5688.0, 'count_bodies_tr': 5688.0, 'sccs': 657.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 13936.0, 'rules': 484417.0, 'rules_normal': 478217.0, 'rules_choice': 5808.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 484339.0, 'rules_tr_normal': 478217.0, 'rules_tr_choice': 5808.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 258.0, 'eqs': 254702.0, 'eqs_atom': 53199.0, 'eqs_body': 7107.0, 'eqs_other': 194396.0}, 'lpStep': {'atoms': 3559.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12032.0, 'bodies_tr': 12032.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17591.0, 'rules_normal': 17382.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17589.0, 'rules_tr_normal': 17382.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9415.0, 'eqs_atom': 1576.0, 'eqs_body': 146.0, 'eqs_other': 7693.0}, 'generator': {'vars': 60735.0, 'vars_eliminated': 0.0, 'vars_frozen': 37159.0, 'constraints': 1798.0, 'constraints_binary': 63352.0, 'constraints_ternary': 10082.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 2335.0, 'conflicts': 152.0, 'conflicts_analyzed': 145.0, 'restarts': 0.0, 'restarts_last': 29.0, 'extra': {'domain_choices': 44.0, 'models': 3.0, 'models_level': 1705.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 133.0, 'distributed_sum_lbd': 255.0, 'integrated': 553.0, 'lemmas': 908.0, 'lits_learnt': 15769.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 9.0, 'cpu_time': 0.21875, 'integrated_imps': 271.0, 'integrated_jumps': 568.0, 'guiding_paths_lits': 2576.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 144.0, 'lemmas_loop': 244.0, 'lemmas_other': 520.0, 'lits_conflict': 2299.0, 'lits_loop': 1913.0, 'lits_other': 11557.0, 'jumps': {'jumps': 145.0, 'jumps_bounded': 25.0, 'levels': 9189.0, 'levels_bounded': 8933.0, 'max': 454.0, 'max_executed': 454.0, 'max_bounded': 453.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.38497161865234375, 'cpu': 0.515625, 'solve': 0.0797882080078125, 'unsat': 0.01795196533203125, 'sat': 0.010972976684570312}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 10.622003555297852, 'cpu': 16.625, 'solve': 2.100942611694336, 'unsat': 0.7099761962890625, 'sat': 0.5186290740966797}, 'models': {'enumerated': 47.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 39474.0, 'conflicts': 6660.0, 'conflicts_analyzed': 6359.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5219.0, 'models': 47.0, 'models_level': 16806.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5330.0, 'distributed_sum_lbd': 12938.0, 'integrated': 29809.0, 'lemmas': 42577.0, 'lits_learnt': 4680121.0, 'lemmas_binary': 3696.0, 'lemmas_ternary': 2146.0, 'cpu_time': 8.234375, 'integrated_imps': 9244.0, 'integrated_jumps': 8121.0, 'guiding_paths_lits': 34299.0, 'guiding_paths': 385.0, 'splits': 0.0, 'lemmas_conflict': 6290.0, 'lemmas_loop': 8971.0, 'lemmas_other': 27316.0, 'lits_conflict': 915053.0, 'lits_loop': 75935.0, 'lits_other': 3689133.0, 'jumps': {'jumps': 6359.0, 'jumps_bounded': 989.0, 'levels': 193224.0, 'levels_bounded': 181836.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28}

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 4 ( 50.00% solved)

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None)

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 28]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 13)

[13-11-2021_23-39-30] DEBUG :: ASH Planner Main #1 >> Reaction at search length 28:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.329346s.

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(13, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(13,28).

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.310165s with result Satisfiable.

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6395109999999988, Incremental time limit = None
Running cumulative time = 10.965353399999989, Cumulative time limit = 3600
Used memory = (RSS = 418.316406Mb, VMS = 415.492188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 51
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.034335s, Solving = 2.931018s, Total = 10.965353s, Memory = (RSS = 418.316406Mb, VMS = 415.492188Mb)), Calls = 29
Final Model :: Total atoms = 18056, Cost = (32, 0), Optimality proven = False, Number = 4, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-39-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.034335300000004, solving_time=2.931018099999985, total_time=10.965353399999989, memory=Memory(rss=418.31640625, vms=415.4921875), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.32934580000000224, solving_time=0.3101651999999966, total_time=0.6395109999999988, memory=Memory(rss=418.31640625, vms=415.4921875), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 114516.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 355361.0, 'bodies_tr': 355361.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5889.0, 'count_bodies_tr': 5889.0, 'sccs': 682.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14422.0, 'rules': 502188.0, 'rules_normal': 495779.0, 'rules_choice': 6003.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 502108.0, 'rules_tr_normal': 495779.0, 'rules_tr_choice': 6003.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 268.0, 'eqs': 264224.0, 'eqs_atom': 54789.0, 'eqs_body': 7257.0, 'eqs_other': 202178.0}, 'lpStep': {'atoms': 3578.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12073.0, 'bodies_tr': 12073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17771.0, 'rules_normal': 17562.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17769.0, 'rules_tr_normal': 17562.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9522.0, 'eqs_atom': 1590.0, 'eqs_body': 150.0, 'eqs_other': 7782.0}, 'generator': {'vars': 62861.0, 'vars_eliminated': 0.0, 'vars_frozen': 38491.0, 'constraints': 1908.0, 'constraints_binary': 66628.0, 'constraints_ternary': 10418.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 2770.0, 'conflicts': 95.0, 'conflicts_analyzed': 88.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 28.0, 'models': 4.0, 'models_level': 2377.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 88.0, 'distributed_sum_lbd': 102.0, 'integrated': 533.0, 'lemmas': 711.0, 'lits_learnt': 2054.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.5625, 'integrated_imps': 488.0, 'integrated_jumps': 42.0, 'guiding_paths_lits': 3096.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 88.0, 'lemmas_loop': 124.0, 'lemmas_other': 499.0, 'lits_conflict': 168.0, 'lits_loop': 1058.0, 'lits_other': 828.0, 'jumps': {'jumps': 88.0, 'jumps_bounded': 8.0, 'levels': 102.0, 'levels_bounded': 14.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 29.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [32.0, 0.0], 'lower': [32.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.649261474609375, 'cpu': 0.921875, 'solve': 0.27723121643066406, 'unsat': 0.03690147399902344, 'sat': 0.006954193115234375}, 'models': {'enumerated': 4.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 11.271265029907227, 'cpu': 17.546875, 'solve': 2.378173828125, 'unsat': 0.7468776702880859, 'sat': 0.5255832672119141}, 'models': {'enumerated': 51.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 42244.0, 'conflicts': 6755.0, 'conflicts_analyzed': 6447.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5247.0, 'models': 51.0, 'models_level': 19183.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5418.0, 'distributed_sum_lbd': 13040.0, 'integrated': 30342.0, 'lemmas': 43288.0, 'lits_learnt': 4682175.0, 'lemmas_binary': 3703.0, 'lemmas_ternary': 2146.0, 'cpu_time': 8.796875, 'integrated_imps': 9732.0, 'integrated_jumps': 8163.0, 'guiding_paths_lits': 37395.0, 'guiding_paths': 399.0, 'splits': 0.0, 'lemmas_conflict': 6378.0, 'lemmas_loop': 9095.0, 'lemmas_other': 27815.0, 'lits_conflict': 915221.0, 'lits_loop': 76993.0, 'lits_other': 3689961.0, 'jumps': {'jumps': 6447.0, 'jumps_bounded': 997.0, 'levels': 193326.0, 'levels_bounded': 181850.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-31] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29}

[13-11-2021_23-39-31] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 5 ( 62.50% solved)

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None)

[13-11-2021_23-39-31] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 29]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 14)
sub_goal(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 14)

[13-11-2021_23-39-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 29:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.277014s.

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='current_last_sgoals(14, 29)', truth=True, inc_range=None), conversion = current_last_sgoals(14,29).

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.035240s with result Unsatisfiable.

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.31225410000000053, Incremental time limit = None
Running cumulative time = 11.27760749999999, Cumulative time limit = 3600
Used memory = (RSS = 421.738281Mb, VMS = 418.347656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-31] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=8.311349300000005, solving_time=2.9662581999999844, total_time=11.27760749999999, memory=Memory(rss=421.73828125, vms=418.34765625), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2770140000000012, solving_time=0.03524009999999933, total_time=0.31225410000000053, memory=Memory(rss=421.73828125, vms=418.34765625), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 118114.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 367410.0, 'bodies_tr': 367410.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6090.0, 'count_bodies_tr': 6090.0, 'sccs': 707.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 14908.0, 'rules': 520071.0, 'rules_normal': 513453.0, 'rules_choice': 6198.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 519989.0, 'rules_tr_normal': 513453.0, 'rules_tr_choice': 6198.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 278.0, 'eqs': 273792.0, 'eqs_atom': 56388.0, 'eqs_body': 7418.0, 'eqs_other': 209986.0}, 'lpStep': {'atoms': 3598.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12049.0, 'bodies_tr': 12049.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 486.0, 'rules': 17883.0, 'rules_normal': 17674.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17881.0, 'rules_tr_normal': 17674.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 9568.0, 'eqs_atom': 1599.0, 'eqs_body': 161.0, 'eqs_other': 7808.0}, 'generator': {'vars': 64966.0, 'vars_eliminated': 0.0, 'vars_frozen': 39814.0, 'constraints': 2039.0, 'constraints_binary': 70799.0, 'constraints_ternary': 10542.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2436.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 30.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.3197669982910156, 'cpu': 0.3125, 'solve': 0.0069828033447265625, 'unsat': 0.0069828033447265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 11.591032028198242, 'cpu': 17.859375, 'solve': 2.3851566314697266, 'unsat': 0.7538604736328125, 'sat': 0.5255832672119141}, 'models': {'enumerated': 51.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 42244.0, 'conflicts': 6762.0, 'conflicts_analyzed': 6447.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5247.0, 'models': 51.0, 'models_level': 19183.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5418.0, 'distributed_sum_lbd': 13040.0, 'integrated': 30342.0, 'lemmas': 43288.0, 'lits_learnt': 4682175.0, 'lemmas_binary': 3703.0, 'lemmas_ternary': 2146.0, 'cpu_time': 8.796875, 'integrated_imps': 9732.0, 'integrated_jumps': 8163.0, 'guiding_paths_lits': 39831.0, 'guiding_paths': 405.0, 'splits': 0.0, 'lemmas_conflict': 6378.0, 'lemmas_loop': 9095.0, 'lemmas_other': 27815.0, 'lits_conflict': 915221.0, 'lits_loop': 76993.0, 'lits_other': 3689961.0, 'jumps': {'jumps': 6447.0, 'jumps_bounded': 997.0, 'levels': 193326.0, 'levels_bounded': 181850.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-31] DEBUG :: ASH Planner Main #1 >> Reaction at search length 30:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.281154s.

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.084861s with result Satisfiable.

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.36601440000000096, Incremental time limit = None
Running cumulative time = 11.64362189999999, Cumulative time limit = 3600
Used memory = (RSS = 427.890625Mb, VMS = 422.632812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 53
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.592503s, Solving = 3.051119s, Total = 11.643622s, Memory = (RSS = 427.890625Mb, VMS = 422.632812Mb)), Calls = 31
Final Model :: Total atoms = 18824, Cost = (35, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=31, start_step=30, end_step=31, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.592503100000007, solving_time=3.0511187999999834, total_time=11.64362189999999, memory=Memory(rss=427.890625, vms=422.6328125), step_range=range(0, 32), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.281153800000002, solving_time=0.08486059999999895, total_time=0.36601440000000096, memory=Memory(rss=427.890625, vms=422.6328125), step_range=range(31, 32), clingo_stats={'problem': {'lp': {'atoms': 121707.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 379868.0, 'bodies_tr': 379868.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6291.0, 'count_bodies_tr': 6291.0, 'sccs': 732.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15398.0, 'rules': 538672.0, 'rules_normal': 531845.0, 'rules_choice': 6393.0, 'rules_minimize': 62.0, 'rules_acyc': 0.0, 'rules_heuristic': 372.0, 'rules_tr': 538588.0, 'rules_tr_normal': 531845.0, 'rules_tr_choice': 6393.0, 'rules_tr_minimize': 62.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 288.0, 'eqs': 288194.0, 'eqs_atom': 58191.0, 'eqs_body': 7603.0, 'eqs_other': 222400.0}, 'lpStep': {'atoms': 3593.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12458.0, 'bodies_tr': 12458.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 490.0, 'rules': 18601.0, 'rules_normal': 18392.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18599.0, 'rules_tr_normal': 18392.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 14402.0, 'eqs_atom': 1803.0, 'eqs_body': 185.0, 'eqs_other': 12414.0}, 'generator': {'vars': 67236.0, 'vars_eliminated': 0.0, 'vars_frozen': 41197.0, 'constraints': 2561.0, 'constraints_binary': 84329.0, 'constraints_ternary': 13714.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 3044.0, 'conflicts': 135.0, 'conflicts_analyzed': 119.0, 'restarts': 0.0, 'restarts_last': 25.0, 'extra': {'domain_choices': 180.0, 'models': 2.0, 'models_level': 1286.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 99.0, 'distributed_sum_lbd': 225.0, 'integrated': 573.0, 'lemmas': 783.0, 'lits_learnt': 11791.0, 'lemmas_binary': 73.0, 'lemmas_ternary': 48.0, 'cpu_time': 0.234375, 'integrated_imps': 251.0, 'integrated_jumps': 91.0, 'guiding_paths_lits': 2975.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 106.0, 'lemmas_loop': 240.0, 'lemmas_other': 437.0, 'lits_conflict': 3612.0, 'lits_loop': 1732.0, 'lits_other': 6447.0, 'jumps': {'jumps': 119.0, 'jumps_bounded': 32.0, 'levels': 1902.0, 'levels_bounded': 1697.0, 'max': 604.0, 'max_executed': 604.0, 'max_bounded': 603.0}}}}, 'summary': {'call': 31.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [35.0, 0.0], 'lower': [35.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.37116050720214844, 'cpu': 0.53125, 'solve': 0.05185890197753906, 'unsat': 0.020940780639648438, 'sat': 0.012964248657226562}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 11.96219253540039, 'cpu': 18.390625, 'solve': 2.4370155334472656, 'unsat': 0.7748012542724609, 'sat': 0.5385475158691406}, 'models': {'enumerated': 53.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 45288.0, 'conflicts': 6897.0, 'conflicts_analyzed': 6566.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5427.0, 'models': 53.0, 'models_level': 20469.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5517.0, 'distributed_sum_lbd': 13265.0, 'integrated': 30915.0, 'lemmas': 44071.0, 'lits_learnt': 4693966.0, 'lemmas_binary': 3776.0, 'lemmas_ternary': 2194.0, 'cpu_time': 9.03125, 'integrated_imps': 9983.0, 'integrated_jumps': 8254.0, 'guiding_paths_lits': 42806.0, 'guiding_paths': 422.0, 'splits': 0.0, 'lemmas_conflict': 6484.0, 'lemmas_loop': 9335.0, 'lemmas_other': 28252.0, 'lits_conflict': 918833.0, 'lits_loop': 78725.0, 'lits_other': 3696408.0, 'jumps': {'jumps': 6566.0, 'jumps_bounded': 1029.0, 'levels': 195228.0, 'levels_bounded': 183547.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31}

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 6 ( 75.00% solved)

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None)

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 15, step = 31]:
sub_goal(2, talos, release(manipulator_arm_1,(block,6)), grasping(manipulator_arm_1), nothing, 15)

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 31:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [32]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(0)]), ('plan_module', [Number(32), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287695s.

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 32: original = External(symbol='current_last_sgoals(15, 31)', truth=True, inc_range=None), conversion = current_last_sgoals(15,31).

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.112060s with result Satisfiable.

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [32]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.39975439999999907, Incremental time limit = None
Running cumulative time = 12.04337629999999, Cumulative time limit = 3600
Used memory = (RSS = 436.804688Mb, VMS = 430.929688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 56
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.880198s, Solving = 3.163179s, Total = 12.043376s, Memory = (RSS = 436.804688Mb, VMS = 430.929688Mb)), Calls = 32
Final Model :: Total atoms = 19209, Cost = (36, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=32, start_step=31, end_step=32, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=8.880197700000005, solving_time=3.163178599999984, total_time=12.04337629999999, memory=Memory(rss=436.8046875, vms=430.9296875), step_range=range(0, 33), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28769459999999825, solving_time=0.11205980000000082, total_time=0.39975439999999907, memory=Memory(rss=436.8046875, vms=430.9296875), step_range=range(32, 33), clingo_stats={'problem': {'lp': {'atoms': 125335.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 392687.0, 'bodies_tr': 392687.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6492.0, 'count_bodies_tr': 6492.0, 'sccs': 757.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 15992.0, 'rules': 557774.0, 'rules_normal': 550738.0, 'rules_choice': 6588.0, 'rules_minimize': 64.0, 'rules_acyc': 0.0, 'rules_heuristic': 384.0, 'rules_tr': 557690.0, 'rules_tr_normal': 550738.0, 'rules_tr_choice': 6588.0, 'rules_tr_minimize': 64.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 300.0, 'eqs': 296595.0, 'eqs_atom': 59966.0, 'eqs_body': 7676.0, 'eqs_other': 228953.0}, 'lpStep': {'atoms': 3628.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12819.0, 'bodies_tr': 12819.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19102.0, 'rules_normal': 18893.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19102.0, 'rules_tr_normal': 18893.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8401.0, 'eqs_atom': 1775.0, 'eqs_body': 73.0, 'eqs_other': 6553.0}, 'generator': {'vars': 69860.0, 'vars_eliminated': 0.0, 'vars_frozen': 42796.0, 'constraints': 3195.0, 'constraints_binary': 100064.0, 'constraints_ternary': 17461.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 3173.0, 'conflicts': 48.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 6.0, 'extra': {'domain_choices': 54.0, 'models': 3.0, 'models_level': 2047.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 49.0, 'integrated': 125.0, 'lemmas': 205.0, 'lits_learnt': 9156.0, 'lemmas_binary': 7.0, 'lemmas_ternary': 7.0, 'cpu_time': 0.1875, 'integrated_imps': 30.0, 'integrated_jumps': 3.0, 'guiding_paths_lits': 3108.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 27.0, 'lemmas_loop': 108.0, 'lemmas_other': 70.0, 'lits_conflict': 2745.0, 'lits_loop': 1002.0, 'lits_other': 5409.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 10.0, 'levels': 356.0, 'levels_bounded': 320.0, 'max': 265.0, 'max_executed': 265.0, 'max_bounded': 264.0}}}}, 'summary': {'call': 32.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [36.0, 0.0], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.40491676330566406, 'cpu': 0.515625, 'solve': 0.08075904846191406, 'unsat': 0.027898788452148438, 'sat': 0.008951187133789062}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 12.367109298706055, 'cpu': 18.90625, 'solve': 2.5177745819091797, 'unsat': 0.8027000427246094, 'sat': 0.5474987030029297}, 'models': {'enumerated': 56.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 48461.0, 'conflicts': 6945.0, 'conflicts_analyzed': 6598.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5481.0, 'models': 56.0, 'models_level': 22516.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5540.0, 'distributed_sum_lbd': 13314.0, 'integrated': 31040.0, 'lemmas': 44276.0, 'lits_learnt': 4703122.0, 'lemmas_binary': 3783.0, 'lemmas_ternary': 2201.0, 'cpu_time': 9.21875, 'integrated_imps': 10013.0, 'integrated_jumps': 8257.0, 'guiding_paths_lits': 45914.0, 'guiding_paths': 439.0, 'splits': 0.0, 'lemmas_conflict': 6511.0, 'lemmas_loop': 9443.0, 'lemmas_other': 28322.0, 'lits_conflict': 921578.0, 'lits_loop': 79727.0, 'lits_other': 3701817.0, 'jumps': {'jumps': 6598.0, 'jumps_bounded': 1039.0, 'levels': 195584.0, 'levels_bounded': 183867.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32}

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 16 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 7 ( 87.50% solved)

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None)

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 16, step = 32]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 16)
sub_goal(2, talos, put(manipulator_arm_2,(block,5),(block,6)), on((block,5)), (block,6), 16)

[13-11-2021_23-39-32] DEBUG :: ASH Planner Main #1 >> Reaction at search length 32:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [33]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(0)]), ('plan_module', [Number(33), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.276968s.

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 33: original = External(symbol='current_last_sgoals(16, 32)', truth=True, inc_range=None), conversion = current_last_sgoals(16,32).

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054203s with result Unsatisfiable.

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [33]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.33117109999999883, Incremental time limit = None
Running cumulative time = 12.374547399999988, Cumulative time limit = 3600
Used memory = (RSS = 446.699219Mb, VMS = 459.125000Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=33, start_step=32, end_step=33, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=9.157165300000004, solving_time=3.217382099999984, total_time=12.374547399999988, memory=Memory(rss=446.69921875, vms=459.125), step_range=range(0, 34), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.276967599999999, solving_time=0.05420349999999985, total_time=0.33117109999999883, memory=Memory(rss=446.69921875, vms=459.125), step_range=range(33, 34), clingo_stats={'problem': {'lp': {'atoms': 129097.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 405764.0, 'bodies_tr': 405764.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6693.0, 'count_bodies_tr': 6693.0, 'sccs': 782.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 16586.0, 'rules': 577358.0, 'rules_normal': 570113.0, 'rules_choice': 6783.0, 'rules_minimize': 66.0, 'rules_acyc': 0.0, 'rules_heuristic': 396.0, 'rules_tr': 577274.0, 'rules_tr_normal': 570113.0, 'rules_tr_choice': 6783.0, 'rules_tr_minimize': 66.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 312.0, 'eqs': 305373.0, 'eqs_atom': 61855.0, 'eqs_body': 7746.0, 'eqs_other': 235772.0}, 'lpStep': {'atoms': 3762.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13077.0, 'bodies_tr': 13077.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19584.0, 'rules_normal': 19375.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19584.0, 'rules_tr_normal': 19375.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8778.0, 'eqs_atom': 1889.0, 'eqs_body': 70.0, 'eqs_other': 6819.0}, 'generator': {'vars': 72525.0, 'vars_eliminated': 0.0, 'vars_frozen': 44403.0, 'constraints': 3842.0, 'constraints_binary': 116011.0, 'constraints_ternary': 21456.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 4.0, 'conflicts': 17.0, 'conflicts_analyzed': 4.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 4.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 4.0, 'distributed_sum_lbd': 8.0, 'integrated': 1.0, 'lemmas': 19.0, 'lits_learnt': 446.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 1.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 3241.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 4.0, 'lemmas_loop': 14.0, 'lemmas_other': 1.0, 'lits_conflict': 268.0, 'lits_loop': 110.0, 'lits_other': 68.0, 'jumps': {'jumps': 4.0, 'jumps_bounded': 4.0, 'levels': 10.0, 'levels_bounded': 6.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 33.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [28.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.340118408203125, 'cpu': 0.4375, 'solve': 0.0169525146484375, 'unsat': 0.0169525146484375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 12.70722770690918, 'cpu': 19.34375, 'solve': 2.534727096557617, 'unsat': 0.8196525573730469, 'sat': 0.5474987030029297}, 'models': {'enumerated': 56.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 48465.0, 'conflicts': 6962.0, 'conflicts_analyzed': 6602.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5485.0, 'models': 56.0, 'models_level': 22516.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5544.0, 'distributed_sum_lbd': 13322.0, 'integrated': 31041.0, 'lemmas': 44295.0, 'lits_learnt': 4703568.0, 'lemmas_binary': 3783.0, 'lemmas_ternary': 2201.0, 'cpu_time': 9.34375, 'integrated_imps': 10014.0, 'integrated_jumps': 8257.0, 'guiding_paths_lits': 49155.0, 'guiding_paths': 452.0, 'splits': 0.0, 'lemmas_conflict': 6515.0, 'lemmas_loop': 9457.0, 'lemmas_other': 28323.0, 'lits_conflict': 921846.0, 'lits_loop': 79837.0, 'lits_other': 3701885.0, 'jumps': {'jumps': 6602.0, 'jumps_bounded': 1043.0, 'levels': 195594.0, 'levels_bounded': 183873.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 33:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [34]:
Running step bounds   | Previous =     33 : Current =     34
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(34)]), ('state_module', [Number(34), Number(0)]), ('plan_module', [Number(34), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.322576s.

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.348662s with result Satisfiable.

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [34]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.6712374000000025, Incremental time limit = None
Running cumulative time = 13.045784799999991, Cumulative time limit = 3600
Used memory = (RSS = 460.824219Mb, VMS = 471.566406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 59
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.479741s, Solving = 3.566044s, Total = 13.045785s, Memory = (RSS = 460.824219Mb, VMS = 471.566406Mb)), Calls = 34
Final Model :: Total atoms = 19983, Cost = (39, 0), Optimality proven = False, Number = 3, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-33] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=34, start_step=33, end_step=34, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.479740900000005, solving_time=3.566043899999986, total_time=13.045784799999991, memory=Memory(rss=460.82421875, vms=471.56640625), step_range=range(0, 35), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3225756000000004, solving_time=0.34866180000000213, total_time=0.6712374000000025, memory=Memory(rss=460.82421875, vms=471.56640625), step_range=range(34, 35), clingo_stats={'problem': {'lp': {'atoms': 132873.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 418873.0, 'bodies_tr': 418873.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 6894.0, 'count_bodies_tr': 6894.0, 'sccs': 807.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17180.0, 'rules': 597110.0, 'rules_normal': 589656.0, 'rules_choice': 6978.0, 'rules_minimize': 68.0, 'rules_acyc': 0.0, 'rules_heuristic': 408.0, 'rules_tr': 597026.0, 'rules_tr_normal': 589656.0, 'rules_tr_choice': 6978.0, 'rules_tr_minimize': 68.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 324.0, 'eqs': 314229.0, 'eqs_atom': 63758.0, 'eqs_body': 7816.0, 'eqs_other': 242655.0}, 'lpStep': {'atoms': 3776.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13109.0, 'bodies_tr': 13109.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19752.0, 'rules_normal': 19543.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19752.0, 'rules_tr_normal': 19543.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8856.0, 'eqs_atom': 1903.0, 'eqs_body': 70.0, 'eqs_other': 6883.0}, 'generator': {'vars': 75190.0, 'vars_eliminated': 0.0, 'vars_frozen': 46010.0, 'constraints': 4489.0, 'constraints_binary': 132112.0, 'constraints_ternary': 25451.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 3990.0, 'conflicts': 123.0, 'conflicts_analyzed': 113.0, 'restarts': 0.0, 'restarts_last': 66.0, 'extra': {'domain_choices': 153.0, 'models': 3.0, 'models_level': 2166.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 83.0, 'distributed_sum_lbd': 195.0, 'integrated': 325.0, 'lemmas': 1136.0, 'lits_learnt': 28925.0, 'lemmas_binary': 90.0, 'lemmas_ternary': 1.0, 'cpu_time': 0.75, 'integrated_imps': 89.0, 'integrated_jumps': 126.0, 'guiding_paths_lits': 3374.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 113.0, 'lemmas_loop': 699.0, 'lemmas_other': 324.0, 'lits_conflict': 9494.0, 'lits_loop': 5786.0, 'lits_other': 13645.0, 'jumps': {'jumps': 113.0, 'jumps_bounded': 21.0, 'levels': 11365.0, 'levels_bounded': 11216.0, 'max': 1171.0, 'max_executed': 1171.0, 'max_bounded': 1170.0}}}}, 'summary': {'call': 34.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [39.0, 0.0], 'lower': [39.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.6768131256103516, 'cpu': 1.109375, 'solve': 0.3181476593017578, 'unsat': 0.024932861328125, 'sat': 0.008975982666015625}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.384040832519531, 'cpu': 20.453125, 'solve': 2.852874755859375, 'unsat': 0.8445854187011719, 'sat': 0.5564746856689453}, 'models': {'enumerated': 59.0, 'optimal': 16.0}, 'solving': {'solvers': {'choices': 52455.0, 'conflicts': 7085.0, 'conflicts_analyzed': 6715.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5638.0, 'models': 59.0, 'models_level': 24682.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5627.0, 'distributed_sum_lbd': 13517.0, 'integrated': 31366.0, 'lemmas': 45431.0, 'lits_learnt': 4732493.0, 'lemmas_binary': 3873.0, 'lemmas_ternary': 2202.0, 'cpu_time': 10.09375, 'integrated_imps': 10103.0, 'integrated_jumps': 8383.0, 'guiding_paths_lits': 52529.0, 'guiding_paths': 468.0, 'splits': 0.0, 'lemmas_conflict': 6628.0, 'lemmas_loop': 10156.0, 'lemmas_other': 28647.0, 'lits_conflict': 931340.0, 'lits_loop': 85623.0, 'lits_other': 3715530.0, 'jumps': {'jumps': 6715.0, 'jumps_bounded': 1064.0, 'levels': 206959.0, 'levels_bounded': 195089.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-33] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34}

[13-11-2021_23-39-33] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 17 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 8 (100.00% solved)

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None)

[13-11-2021_23-39-33] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 17, step = 34]:
sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 17)
sub_goal(2, talos, release(manipulator_arm_2,(block,5)), grasping(manipulator_arm_2), nothing, 17)

[13-11-2021_23-39-33] DEBUG :: ASH Planner Main #1 >> Reaction at search length 34:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [35]:
Running step bounds   | Previous =     34 : Current =     35
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(35)]), ('state_module', [Number(35), Number(0)]), ('plan_module', [Number(35), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287235s.

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 35: original = External(symbol='current_last_sgoals(17, 34)', truth=True, inc_range=None), conversion = current_last_sgoals(17,34).

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.136167s with result Satisfiable.

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [35]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.42340210000000056, Incremental time limit = None
Running cumulative time = 13.469186899999992, Cumulative time limit = 3600
Used memory = (RSS = 475.968750Mb, VMS = 485.222656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 62
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.766976s, Solving = 3.702211s, Total = 13.469187s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)), Calls = 35
Final Model :: Total atoms = 20373, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-34] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=35, start_step=34, end_step=35, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=9.766976300000005, solving_time=3.7022105999999866, total_time=13.469186899999992, memory=Memory(rss=475.96875, vms=485.22265625), step_range=range(0, 36), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28723540000000014, solving_time=0.13616670000000042, total_time=0.42340210000000056, memory=Memory(rss=475.96875, vms=485.22265625), step_range=range(35, 36), clingo_stats={'problem': {'lp': {'atoms': 136663.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 432014.0, 'bodies_tr': 432014.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7095.0, 'count_bodies_tr': 7095.0, 'sccs': 832.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 17774.0, 'rules': 617030.0, 'rules_normal': 609367.0, 'rules_choice': 7173.0, 'rules_minimize': 70.0, 'rules_acyc': 0.0, 'rules_heuristic': 420.0, 'rules_tr': 616946.0, 'rules_tr_normal': 609367.0, 'rules_tr_choice': 7173.0, 'rules_tr_minimize': 70.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 336.0, 'eqs': 323163.0, 'eqs_atom': 65675.0, 'eqs_body': 7886.0, 'eqs_other': 249602.0}, 'lpStep': {'atoms': 3790.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13141.0, 'bodies_tr': 13141.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 19920.0, 'rules_normal': 19711.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 19920.0, 'rules_tr_normal': 19711.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 8934.0, 'eqs_atom': 1917.0, 'eqs_body': 70.0, 'eqs_other': 6947.0}, 'generator': {'vars': 77855.0, 'vars_eliminated': 0.0, 'vars_frozen': 47617.0, 'constraints': 5136.0, 'constraints_binary': 148206.0, 'constraints_ternary': 29446.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 4371.0, 'conflicts': 230.0, 'conflicts_analyzed': 216.0, 'restarts': 0.0, 'restarts_last': 81.0, 'extra': {'domain_choices': 338.0, 'models': 3.0, 'models_level': 2240.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 104.0, 'distributed_sum_lbd': 290.0, 'integrated': 435.0, 'lemmas': 1006.0, 'lits_learnt': 55132.0, 'lemmas_binary': 76.0, 'lemmas_ternary': 36.0, 'cpu_time': 0.46875, 'integrated_imps': 81.0, 'integrated_jumps': 314.0, 'guiding_paths_lits': 3507.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 215.0, 'lemmas_loop': 398.0, 'lemmas_other': 393.0, 'lits_conflict': 25331.0, 'lits_loop': 3482.0, 'lits_other': 26319.0, 'jumps': {'jumps': 216.0, 'jumps_bounded': 9.0, 'levels': 2283.0, 'levels_bounded': 1856.0, 'max': 674.0, 'max_executed': 674.0, 'max_bounded': 673.0}}}}, 'summary': {'call': 35.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [41.0, 0.0], 'lower': [41.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4328441619873047, 'cpu': 0.78125, 'solve': 0.10871124267578125, 'unsat': 0.03590583801269531, 'sat': 0.016958236694335938}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 13.816884994506836, 'cpu': 21.234375, 'solve': 2.9615859985351562, 'unsat': 0.8804912567138672, 'sat': 0.5734329223632812}, 'models': {'enumerated': 62.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 56826.0, 'conflicts': 7315.0, 'conflicts_analyzed': 6931.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5976.0, 'models': 62.0, 'models_level': 26922.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5731.0, 'distributed_sum_lbd': 13807.0, 'integrated': 31801.0, 'lemmas': 46437.0, 'lits_learnt': 4787625.0, 'lemmas_binary': 3949.0, 'lemmas_ternary': 2238.0, 'cpu_time': 10.5625, 'integrated_imps': 10184.0, 'integrated_jumps': 8697.0, 'guiding_paths_lits': 56036.0, 'guiding_paths': 485.0, 'splits': 0.0, 'lemmas_conflict': 6843.0, 'lemmas_loop': 10554.0, 'lemmas_other': 29040.0, 'lits_conflict': 956671.0, 'lits_loop': 89105.0, 'lits_other': 3741849.0, 'jumps': {'jumps': 6931.0, 'jumps_bounded': 1073.0, 'levels': 209242.0, 'levels_bounded': 196945.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-34] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{10: 23, 11: 25, 12: 28, 13: 29, 14: 31, 15: 32, 16: 34, 17: 35}

[13-11-2021_23-39-34] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 18 achieved :: Progression >> total requested sgoals = 8, current total achieved sgoals = 9 (112.50% solved)

[13-11-2021_23-39-34] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 17 was achieved successfully.

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.354841s, Solving = 0.014656s, Total = 0.369497s, Memory = (RSS = 212.695312Mb, VMS = 203.542969Mb)
2 : Statistics :: Grounding = 0.171898s, Solving = 0.011550s, Total = 0.183448s, Memory = (RSS = 214.488281Mb, VMS = 205.753906Mb)
3 : Statistics :: Grounding = 0.218843s, Solving = 0.011994s, Total = 0.230837s, Memory = (RSS = 216.796875Mb, VMS = 207.828125Mb)
4 : Statistics :: Grounding = 0.242261s, Solving = 0.007012s, Total = 0.249273s, Memory = (RSS = 218.238281Mb, VMS = 209.019531Mb)
5 : Statistics :: Grounding = 0.258064s, Solving = 0.012757s, Total = 0.270821s, Memory = (RSS = 223.519531Mb, VMS = 214.519531Mb)
6 : Statistics :: Grounding = 0.258460s, Solving = 0.015432s, Total = 0.273892s, Memory = (RSS = 228.601562Mb, VMS = 220.160156Mb)
7 : Statistics :: Grounding = 0.244636s, Solving = 0.027616s, Total = 0.272252s, Memory = (RSS = 236.832031Mb, VMS = 229.296875Mb)
8 : Statistics :: Grounding = 0.270229s, Solving = 0.019479s, Total = 0.289708s, Memory = (RSS = 242.281250Mb, VMS = 234.308594Mb)
9 : Statistics :: Grounding = 0.275772s, Solving = 0.026332s, Total = 0.302105s, Memory = (RSS = 250.570312Mb, VMS = 243.796875Mb)
10 : Statistics :: Grounding = 0.275814s, Solving = 0.033745s, Total = 0.309560s, Memory = (RSS = 254.960938Mb, VMS = 247.535156Mb)
11 : Statistics :: Grounding = 0.266745s, Solving = 0.054024s, Total = 0.320770s, Memory = (RSS = 259.937500Mb, VMS = 252.070312Mb)
12 : Statistics :: Grounding = 0.279657s, Solving = 0.065987s, Total = 0.345644s, Memory = (RSS = 270.566406Mb, VMS = 265.093750Mb)
13 : Statistics :: Grounding = 0.270707s, Solving = 0.111081s, Total = 0.381788s, Memory = (RSS = 273.394531Mb, VMS = 266.636719Mb)
14 : Statistics :: Grounding = 0.296313s, Solving = 0.037970s, Total = 0.334283s, Memory = (RSS = 278.074219Mb, VMS = 270.976562Mb)
15 : Statistics :: Grounding = 0.327567s, Solving = 0.322777s, Total = 0.650344s, Memory = (RSS = 294.429688Mb, VMS = 294.078125Mb)
16 : Statistics :: Grounding = 0.276918s, Solving = 0.193113s, Total = 0.470031s, Memory = (RSS = 305.027344Mb, VMS = 303.402344Mb)
17 : Statistics :: Grounding = 0.280480s, Solving = 0.069022s, Total = 0.349502s, Memory = (RSS = 312.875000Mb, VMS = 310.371094Mb)
18 : Statistics :: Grounding = 0.288519s, Solving = 0.268018s, Total = 0.556537s, Memory = (RSS = 326.050781Mb, VMS = 321.941406Mb)
19 : Statistics :: Grounding = 0.299374s, Solving = 0.080286s, Total = 0.379660s, Memory = (RSS = 335.382812Mb, VMS = 330.718750Mb)
20 : Statistics :: Grounding = 0.316110s, Solving = 0.032650s, Total = 0.348760s, Memory = (RSS = 340.617188Mb, VMS = 334.539062Mb)
21 : Statistics :: Grounding = 0.300881s, Solving = 0.169022s, Total = 0.469903s, Memory = (RSS = 352.699219Mb, VMS = 357.703125Mb)
22 : Statistics :: Grounding = 0.306098s, Solving = 0.453395s, Total = 0.759493s, Memory = (RSS = 365.527344Mb, VMS = 369.585938Mb)
23 : Statistics :: Grounding = 0.312556s, Solving = 0.308633s, Total = 0.621189s, Memory = (RSS = 384.101562Mb, VMS = 386.667969Mb)
24 : Statistics :: Grounding = 0.264452s, Solving = 0.027282s, Total = 0.291734s, Memory = (RSS = 386.421875Mb, VMS = 388.714844Mb)
25 : Statistics :: Grounding = 0.245595s, Solving = 0.058659s, Total = 0.304253s, Memory = (RSS = 390.332031Mb, VMS = 391.617188Mb)
26 : Statistics :: Grounding = 0.256532s, Solving = 0.036428s, Total = 0.292959s, Memory = (RSS = 394.734375Mb, VMS = 395.554688Mb)
27 : Statistics :: Grounding = 0.274301s, Solving = 0.045806s, Total = 0.320107s, Memory = (RSS = 397.609375Mb, VMS = 397.128906Mb)
28 : Statistics :: Grounding = 0.271366s, Solving = 0.106126s, Total = 0.377492s, Memory = (RSS = 404.292969Mb, VMS = 402.628906Mb)
29 : Statistics :: Grounding = 0.329346s, Solving = 0.310165s, Total = 0.639511s, Memory = (RSS = 418.316406Mb, VMS = 415.492188Mb)
30 : Statistics :: Grounding = 0.277014s, Solving = 0.035240s, Total = 0.312254s, Memory = (RSS = 421.738281Mb, VMS = 418.347656Mb)
31 : Statistics :: Grounding = 0.281154s, Solving = 0.084861s, Total = 0.366014s, Memory = (RSS = 427.890625Mb, VMS = 422.632812Mb)
32 : Statistics :: Grounding = 0.287695s, Solving = 0.112060s, Total = 0.399754s, Memory = (RSS = 436.804688Mb, VMS = 430.929688Mb)
33 : Statistics :: Grounding = 0.276968s, Solving = 0.054203s, Total = 0.331171s, Memory = (RSS = 446.699219Mb, VMS = 459.125000Mb)
34 : Statistics :: Grounding = 0.322576s, Solving = 0.348662s, Total = 0.671237s, Memory = (RSS = 460.824219Mb, VMS = 471.566406Mb)
35 : Statistics :: Grounding = 0.287235s, Solving = 0.136167s, Total = 0.423402s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 13.469187s due to: External generator exit.

[13-11-2021_23-39-34] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-39-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 17, Last requested goal index = 17 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 9.766976s, Solving = 3.702211s, Total = 13.469187s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)), Calls = 35
Model :: Total atoms = 20373, Cost = (41, 0), Optimality proven = False, Number = 3, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 35 :: Actions = 44                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Online planning increment 2 finished.

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 1 : Total constraining sgoals = 14 : Achieved sgoals = 7 : Unachieved sgoals = 7
Level = 1 : Solved problems = 2 : Total constraining sgoals = 17 : Achieved sgoals = 17 : Unachieved sgoals = 0

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Current valid planning level range: [2-2]

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 3 by method ground-first: [1-2]

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning at level 2 for problem 2:
Divided plan : Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.870s (Gro =   1.541s, Sea =   0.328s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00))
Division points [total=1] : [(Index = 7, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [8-14]

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [8-14], problem number = 2, increment number = 3

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 8)
	('last_sgoals', 14)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 100)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 8
last_sgoals = 14
start_step = 18
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 24

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [2] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [8-14] : Minimum search length bound = disabled with value = 24

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 10})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 14})

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 11 rules into program part base:

sub_goal(3, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 8).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 8).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 9).
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 9).
sub_goal(3, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 10).
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 10).
sub_goal(3, talos, move(store_room), in(talos), store_room, 11).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 14).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 14).

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000027C9B8FE680>

[13-11-2021_23-39-35] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-39-35] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027C9B8FE680> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(2, talos, move(hallway), 1)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 2)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 2)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,puzzle_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), 3)).
fix_action(occurs(2, talos, actuate(manipulator_arm_1,puzzle_room_door), 4)).
fix_action(occurs(2, talos, actuate(manipulator_arm_2,store_room_door), 4)).
fix_action(occurs(2, talos, release(manipulator_arm_1,puzzle_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), 5)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 6)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 6)).
fix_action(occurs(2, talos, move(store_room), 7)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 8)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 8)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,6)), 9)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,5)), 9)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,retracted), 10)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,retracted), 10)).
fix_action(occurs(2, talos, move(hallway), 11)).
fix_action(occurs(2, talos, move(puzzle_room), 12)).
fix_action(occurs(2, talos, configure(manipulator_arm_1,extended), 13)).
fix_action(occurs(2, talos, configure(manipulator_arm_2,extended), 14)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,6),puzzle_room_table), 14)).
fix_action(occurs(2, talos, release(manipulator_arm_1,(block,6)), 15)).
fix_action(occurs(2, talos, grasp(manipulator_arm_1,(block,3)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_2,(block,5),(block,6)), 16)).
fix_action(occurs(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), 17)).
fix_action(occurs(2, talos, release(manipulator_arm_2,(block,5)), 17)).
fix_action(occurs(2, talos, grasp(manipulator_arm_2,(block,2)), 18)).
fix_action(occurs(2, talos, release(manipulator_arm_1,(block,3)), 18)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-39-35] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027C9B8FE680> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(3, complete(blue), false, 0)).
fix_fluent(holds(3, complete(red), false, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(3, in((block,4)), store_room, 0)).
fix_fluent(holds(3, in((block,5)), store_room, 0)).
fix_fluent(holds(3, in((block,6)), store_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(3, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(3, in(talos), starting_room, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(3, on((block,3)), (block,1), 0)).
fix_fluent(holds(3, on((block,4)), nothing, 0)).
fix_fluent(holds(3, on((block,5)), nothing, 0)).
fix_fluent(holds(3, on((block,6)), nothing, 0)).
fix_fluent(holds(3, tower_base((block,1)), true, 0)).
fix_fluent(holds(3, tower_base((block,2)), true, 0)).
fix_fluent(holds(3, tower_base((block,3)), false, 0)).
fix_fluent(holds(3, tower_base((block,4)), false, 0)).
fix_fluent(holds(3, tower_base((block,5)), false, 0)).
fix_fluent(holds(3, tower_base((block,6)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), hallway, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(3, complete(blue), false, 1)).
fix_fluent(holds(3, complete(red), false, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(3, in((block,4)), store_room, 1)).
fix_fluent(holds(3, in((block,5)), store_room, 1)).
fix_fluent(holds(3, in((block,6)), store_room, 1)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 1)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 1)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(3, in(talos), hallway, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(3, on((block,3)), (block,1), 1)).
fix_fluent(holds(3, on((block,4)), nothing, 1)).
fix_fluent(holds(3, on((block,5)), nothing, 1)).
fix_fluent(holds(3, on((block,6)), nothing, 1)).
fix_fluent(holds(3, tower_base((block,1)), true, 1)).
fix_fluent(holds(3, tower_base((block,2)), true, 1)).
fix_fluent(holds(3, tower_base((block,3)), false, 1)).
fix_fluent(holds(3, tower_base((block,4)), false, 1)).
fix_fluent(holds(3, tower_base((block,5)), false, 1)).
fix_fluent(holds(3, tower_base((block,6)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(3, complete(blue), false, 2)).
fix_fluent(holds(3, complete(red), false, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(3, in((block,4)), store_room, 2)).
fix_fluent(holds(3, in((block,5)), store_room, 2)).
fix_fluent(holds(3, in((block,6)), store_room, 2)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(3, in(talos), hallway, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(3, on((block,3)), (block,1), 2)).
fix_fluent(holds(3, on((block,4)), nothing, 2)).
fix_fluent(holds(3, on((block,5)), nothing, 2)).
fix_fluent(holds(3, on((block,6)), nothing, 2)).
fix_fluent(holds(3, tower_base((block,1)), true, 2)).
fix_fluent(holds(3, tower_base((block,2)), true, 2)).
fix_fluent(holds(3, tower_base((block,3)), false, 2)).
fix_fluent(holds(3, tower_base((block,4)), false, 2)).
fix_fluent(holds(3, tower_base((block,5)), false, 2)).
fix_fluent(holds(3, tower_base((block,6)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(3, complete(blue), false, 3)).
fix_fluent(holds(3, complete(red), false, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(3, in((block,4)), store_room, 3)).
fix_fluent(holds(3, in((block,5)), store_room, 3)).
fix_fluent(holds(3, in((block,6)), store_room, 3)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(3, in(talos), hallway, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(3, on((block,3)), (block,1), 3)).
fix_fluent(holds(3, on((block,4)), nothing, 3)).
fix_fluent(holds(3, on((block,5)), nothing, 3)).
fix_fluent(holds(3, on((block,6)), nothing, 3)).
fix_fluent(holds(3, tower_base((block,1)), true, 3)).
fix_fluent(holds(3, tower_base((block,2)), true, 3)).
fix_fluent(holds(3, tower_base((block,3)), false, 3)).
fix_fluent(holds(3, tower_base((block,4)), false, 3)).
fix_fluent(holds(3, tower_base((block,5)), false, 3)).
fix_fluent(holds(3, tower_base((block,6)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), open, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(3, complete(blue), false, 4)).
fix_fluent(holds(3, complete(red), false, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(3, in((block,4)), store_room, 4)).
fix_fluent(holds(3, in((block,5)), store_room, 4)).
fix_fluent(holds(3, in((block,6)), store_room, 4)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(3, in(talos), hallway, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(3, on((block,3)), (block,1), 4)).
fix_fluent(holds(3, on((block,4)), nothing, 4)).
fix_fluent(holds(3, on((block,5)), nothing, 4)).
fix_fluent(holds(3, on((block,6)), nothing, 4)).
fix_fluent(holds(3, tower_base((block,1)), true, 4)).
fix_fluent(holds(3, tower_base((block,2)), true, 4)).
fix_fluent(holds(3, tower_base((block,3)), false, 4)).
fix_fluent(holds(3, tower_base((block,4)), false, 4)).
fix_fluent(holds(3, tower_base((block,5)), false, 4)).
fix_fluent(holds(3, tower_base((block,6)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), open, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(3, complete(blue), false, 5)).
fix_fluent(holds(3, complete(red), false, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(3, in((block,4)), store_room, 5)).
fix_fluent(holds(3, in((block,5)), store_room, 5)).
fix_fluent(holds(3, in((block,6)), store_room, 5)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(3, in(talos), hallway, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(3, on((block,3)), (block,1), 5)).
fix_fluent(holds(3, on((block,4)), nothing, 5)).
fix_fluent(holds(3, on((block,5)), nothing, 5)).
fix_fluent(holds(3, on((block,6)), nothing, 5)).
fix_fluent(holds(3, tower_base((block,1)), true, 5)).
fix_fluent(holds(3, tower_base((block,2)), true, 5)).
fix_fluent(holds(3, tower_base((block,3)), false, 5)).
fix_fluent(holds(3, tower_base((block,4)), false, 5)).
fix_fluent(holds(3, tower_base((block,5)), false, 5)).
fix_fluent(holds(3, tower_base((block,6)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), open, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(3, complete(blue), false, 6)).
fix_fluent(holds(3, complete(red), false, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 6)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(3, in((block,4)), store_room, 6)).
fix_fluent(holds(3, in((block,5)), store_room, 6)).
fix_fluent(holds(3, in((block,6)), store_room, 6)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(3, in(talos), hallway, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(3, on((block,3)), (block,1), 6)).
fix_fluent(holds(3, on((block,4)), nothing, 6)).
fix_fluent(holds(3, on((block,5)), nothing, 6)).
fix_fluent(holds(3, on((block,6)), nothing, 6)).
fix_fluent(holds(3, tower_base((block,1)), true, 6)).
fix_fluent(holds(3, tower_base((block,2)), true, 6)).
fix_fluent(holds(3, tower_base((block,3)), false, 6)).
fix_fluent(holds(3, tower_base((block,4)), false, 6)).
fix_fluent(holds(3, tower_base((block,5)), false, 6)).
fix_fluent(holds(3, tower_base((block,6)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), open, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), store_room, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(3, complete(blue), false, 7)).
fix_fluent(holds(3, complete(red), false, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 7)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(3, in((block,4)), store_room, 7)).
fix_fluent(holds(3, in((block,5)), store_room, 7)).
fix_fluent(holds(3, in((block,6)), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 7)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 7)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(3, in(talos), store_room, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(3, on((block,3)), (block,1), 7)).
fix_fluent(holds(3, on((block,4)), nothing, 7)).
fix_fluent(holds(3, on((block,5)), nothing, 7)).
fix_fluent(holds(3, on((block,6)), nothing, 7)).
fix_fluent(holds(3, tower_base((block,1)), true, 7)).
fix_fluent(holds(3, tower_base((block,2)), true, 7)).
fix_fluent(holds(3, tower_base((block,3)), false, 7)).
fix_fluent(holds(3, tower_base((block,4)), false, 7)).
fix_fluent(holds(3, tower_base((block,5)), false, 7)).
fix_fluent(holds(3, tower_base((block,6)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), open, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), store_room, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(3, complete(blue), false, 8)).
fix_fluent(holds(3, complete(red), false, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(3, in((block,4)), store_room, 8)).
fix_fluent(holds(3, in((block,5)), store_room, 8)).
fix_fluent(holds(3, in((block,6)), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 8)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 8)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(3, in(talos), store_room, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(3, on((block,3)), (block,1), 8)).
fix_fluent(holds(3, on((block,4)), nothing, 8)).
fix_fluent(holds(3, on((block,5)), nothing, 8)).
fix_fluent(holds(3, on((block,6)), nothing, 8)).
fix_fluent(holds(3, tower_base((block,1)), true, 8)).
fix_fluent(holds(3, tower_base((block,2)), true, 8)).
fix_fluent(holds(3, tower_base((block,3)), false, 8)).
fix_fluent(holds(3, tower_base((block,4)), false, 8)).
fix_fluent(holds(3, tower_base((block,5)), false, 8)).
fix_fluent(holds(3, tower_base((block,6)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), open, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), store_room, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(3, complete(blue), false, 9)).
fix_fluent(holds(3, complete(red), false, 9)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 9)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 9)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(3, in((block,4)), store_room, 9)).
fix_fluent(holds(3, in((block,5)), store_room, 9)).
fix_fluent(holds(3, in((block,6)), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 9)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 9)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(3, in(talos), store_room, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(3, on((block,3)), (block,1), 9)).
fix_fluent(holds(3, on((block,4)), nothing, 9)).
fix_fluent(holds(3, on((block,5)), nothing, 9)).
fix_fluent(holds(3, on((block,6)), nothing, 9)).
fix_fluent(holds(3, tower_base((block,1)), true, 9)).
fix_fluent(holds(3, tower_base((block,2)), true, 9)).
fix_fluent(holds(3, tower_base((block,3)), false, 9)).
fix_fluent(holds(3, tower_base((block,4)), false, 9)).
fix_fluent(holds(3, tower_base((block,5)), false, 9)).
fix_fluent(holds(3, tower_base((block,6)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), open, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), store_room, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(3, complete(blue), false, 10)).
fix_fluent(holds(3, complete(red), false, 10)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 10)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 10)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(3, in((block,4)), store_room, 10)).
fix_fluent(holds(3, in((block,5)), store_room, 10)).
fix_fluent(holds(3, in((block,6)), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_1), store_room, 10)).
fix_fluent(holds(3, in(manipulator_arm_2), store_room, 10)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(3, in(talos), store_room, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(3, on((block,3)), (block,1), 10)).
fix_fluent(holds(3, on((block,4)), nothing, 10)).
fix_fluent(holds(3, on((block,5)), nothing, 10)).
fix_fluent(holds(3, on((block,6)), nothing, 10)).
fix_fluent(holds(3, tower_base((block,1)), true, 10)).
fix_fluent(holds(3, tower_base((block,2)), true, 10)).
fix_fluent(holds(3, tower_base((block,3)), false, 10)).
fix_fluent(holds(3, tower_base((block,4)), false, 10)).
fix_fluent(holds(3, tower_base((block,5)), false, 10)).
fix_fluent(holds(3, tower_base((block,6)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), open, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), hallway, 11)).
fix_fluent(holds(2, in((block,6)), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(3, complete(blue), false, 11)).
fix_fluent(holds(3, complete(red), false, 11)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 11)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 11)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(3, in((block,4)), store_room, 11)).
fix_fluent(holds(3, in((block,5)), hallway, 11)).
fix_fluent(holds(3, in((block,6)), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(3, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(3, in(talos), hallway, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(3, on((block,3)), (block,1), 11)).
fix_fluent(holds(3, on((block,4)), nothing, 11)).
fix_fluent(holds(3, on((block,5)), nothing, 11)).
fix_fluent(holds(3, on((block,6)), nothing, 11)).
fix_fluent(holds(3, tower_base((block,1)), true, 11)).
fix_fluent(holds(3, tower_base((block,2)), true, 11)).
fix_fluent(holds(3, tower_base((block,3)), false, 11)).
fix_fluent(holds(3, tower_base((block,4)), false, 11)).
fix_fluent(holds(3, tower_base((block,5)), false, 11)).
fix_fluent(holds(3, tower_base((block,6)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), open, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), puzzle_room, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(3, complete(blue), false, 12)).
fix_fluent(holds(3, complete(red), false, 12)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 12)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 12)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,4)), store_room, 12)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 12)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 12)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 12)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(3, in(talos), puzzle_room, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(3, on((block,3)), (block,1), 12)).
fix_fluent(holds(3, on((block,4)), nothing, 12)).
fix_fluent(holds(3, on((block,5)), nothing, 12)).
fix_fluent(holds(3, on((block,6)), nothing, 12)).
fix_fluent(holds(3, tower_base((block,1)), true, 12)).
fix_fluent(holds(3, tower_base((block,2)), true, 12)).
fix_fluent(holds(3, tower_base((block,3)), false, 12)).
fix_fluent(holds(3, tower_base((block,4)), false, 12)).
fix_fluent(holds(3, tower_base((block,5)), false, 12)).
fix_fluent(holds(3, tower_base((block,6)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), open, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), puzzle_room, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(3, complete(blue), false, 13)).
fix_fluent(holds(3, complete(red), false, 13)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 13)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 13)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,4)), store_room, 13)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 13)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 13)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 13)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(3, in(talos), puzzle_room, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(3, on((block,3)), (block,1), 13)).
fix_fluent(holds(3, on((block,4)), nothing, 13)).
fix_fluent(holds(3, on((block,5)), nothing, 13)).
fix_fluent(holds(3, on((block,6)), nothing, 13)).
fix_fluent(holds(3, tower_base((block,1)), true, 13)).
fix_fluent(holds(3, tower_base((block,2)), true, 13)).
fix_fluent(holds(3, tower_base((block,3)), false, 13)).
fix_fluent(holds(3, tower_base((block,4)), false, 13)).
fix_fluent(holds(3, tower_base((block,5)), false, 13)).
fix_fluent(holds(3, tower_base((block,6)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), open, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), puzzle_room, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(3, complete(blue), false, 14)).
fix_fluent(holds(3, complete(red), false, 14)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,6), 14)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 14)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,4)), store_room, 14)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 14)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 14)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 14)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(3, in(talos), puzzle_room, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 14)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(3, on((block,3)), (block,1), 14)).
fix_fluent(holds(3, on((block,4)), nothing, 14)).
fix_fluent(holds(3, on((block,5)), nothing, 14)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 14)).
fix_fluent(holds(3, tower_base((block,1)), true, 14)).
fix_fluent(holds(3, tower_base((block,2)), true, 14)).
fix_fluent(holds(3, tower_base((block,3)), false, 14)).
fix_fluent(holds(3, tower_base((block,4)), false, 14)).
fix_fluent(holds(3, tower_base((block,5)), false, 14)).
fix_fluent(holds(3, tower_base((block,6)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), puzzle_room, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(3, complete(blue), false, 15)).
fix_fluent(holds(3, complete(red), false, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 15)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,4)), store_room, 15)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 15)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 15)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 15)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(3, in(talos), puzzle_room, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 15)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(3, on((block,3)), (block,1), 15)).
fix_fluent(holds(3, on((block,4)), nothing, 15)).
fix_fluent(holds(3, on((block,5)), nothing, 15)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 15)).
fix_fluent(holds(3, tower_base((block,1)), true, 15)).
fix_fluent(holds(3, tower_base((block,2)), true, 15)).
fix_fluent(holds(3, tower_base((block,3)), false, 15)).
fix_fluent(holds(3, tower_base((block,4)), false, 15)).
fix_fluent(holds(3, tower_base((block,5)), false, 15)).
fix_fluent(holds(3, tower_base((block,6)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), puzzle_room, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), (block,6), 16)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(3, complete(blue), false, 16)).
fix_fluent(holds(3, complete(red), false, 16)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 16)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,5), 16)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,4)), store_room, 16)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 16)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 16)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 16)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(3, in(talos), puzzle_room, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 16)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 16)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(3, on((block,3)), (block,1), 16)).
fix_fluent(holds(3, on((block,4)), nothing, 16)).
fix_fluent(holds(3, on((block,5)), (block,6), 16)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 16)).
fix_fluent(holds(3, tower_base((block,1)), true, 16)).
fix_fluent(holds(3, tower_base((block,2)), true, 16)).
fix_fluent(holds(3, tower_base((block,3)), false, 16)).
fix_fluent(holds(3, tower_base((block,4)), false, 16)).
fix_fluent(holds(3, tower_base((block,5)), false, 16)).
fix_fluent(holds(3, tower_base((block,6)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), puzzle_room, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), (block,6), 17)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), true, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(3, complete(blue), false, 17)).
fix_fluent(holds(3, complete(red), false, 17)).
fix_fluent(holds(3, grasping(manipulator_arm_1), (block,3), 17)).
fix_fluent(holds(3, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,4)), store_room, 17)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 17)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 17)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 17)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(3, in(talos), puzzle_room, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 17)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 17)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 17)).
fix_fluent(holds(3, on((block,4)), nothing, 17)).
fix_fluent(holds(3, on((block,5)), (block,6), 17)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 17)).
fix_fluent(holds(3, tower_base((block,1)), true, 17)).
fix_fluent(holds(3, tower_base((block,2)), true, 17)).
fix_fluent(holds(3, tower_base((block,3)), true, 17)).
fix_fluent(holds(3, tower_base((block,4)), false, 17)).
fix_fluent(holds(3, tower_base((block,5)), false, 17)).
fix_fluent(holds(3, tower_base((block,6)), true, 17)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), puzzle_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), (block,6), 18)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), true, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(3, complete(blue), false, 18)).
fix_fluent(holds(3, complete(red), false, 18)).
fix_fluent(holds(3, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(3, grasping(manipulator_arm_2), (block,2), 18)).
fix_fluent(holds(3, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,4)), store_room, 18)).
fix_fluent(holds(3, in((block,5)), puzzle_room, 18)).
fix_fluent(holds(3, in((block,6)), puzzle_room, 18)).
fix_fluent(holds(3, in(manipulator_arm_1), puzzle_room, 18)).
fix_fluent(holds(3, in(manipulator_arm_2), puzzle_room, 18)).
fix_fluent(holds(3, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(3, in(talos), puzzle_room, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,3)), true, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(3, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,5)), true, 18)).
fix_fluent(holds(3, in_tower((block,6),(block,6)), true, 18)).
fix_fluent(holds(3, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,3)), puzzle_room_table, 18)).
fix_fluent(holds(3, on((block,4)), nothing, 18)).
fix_fluent(holds(3, on((block,5)), (block,6), 18)).
fix_fluent(holds(3, on((block,6)), puzzle_room_table, 18)).
fix_fluent(holds(3, tower_base((block,1)), true, 18)).
fix_fluent(holds(3, tower_base((block,2)), true, 18)).
fix_fluent(holds(3, tower_base((block,3)), true, 18)).
fix_fluent(holds(3, tower_base((block,4)), false, 18)).
fix_fluent(holds(3, tower_base((block,5)), false, 18)).
fix_fluent(holds(3, tower_base((block,6)), true, 18)).
fix_fluent(holds(3, unordered_tower((block,1)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(3, unordered_tower((block,6)), false, 18)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 2)
	('start_step', 18)
	('last_sgoals', 14)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('first_sgoals', 8)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000027C9B8FE680>)

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(8, 19)', truth=True, inc_range=None)

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.184109s.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 19: original = External(symbol='current_last_sgoals(8, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(8,19).

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059215s with result Satisfiable.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.24332379999999887, Incremental time limit = None
Running cumulative time = 3.5263961000000013, Cumulative time limit = 3600
Used memory = (RSS = 482.402344Mb, VMS = 490.683594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 19
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.963381s, Solving = 0.563015s, Total = 3.526396s, Memory = (RSS = 482.402344Mb, VMS = 490.683594Mb)), Calls = 19
Final Model :: Total atoms = 12402, Cost = (29, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=19, start_step=18, end_step=19, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=2.9633807999999995, solving_time=0.5630153000000018, total_time=3.5263961000000013, memory=Memory(rss=482.40234375, vms=490.68359375), step_range=range(0, 20), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1841091999999982, solving_time=0.05921460000000067, total_time=0.24332379999999887, memory=Memory(rss=482.40234375, vms=490.68359375), step_range=range(19, 20), clingo_stats={'problem': {'lp': {'atoms': 53265.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 151662.0, 'bodies_tr': 151662.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3466.0, 'count_bodies_tr': 3466.0, 'sccs': 304.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5579.0, 'rules': 210386.0, 'rules_normal': 207053.0, 'rules_choice': 3067.0, 'rules_minimize': 38.0, 'rules_acyc': 0.0, 'rules_heuristic': 228.0, 'rules_tr': 210317.0, 'rules_tr_normal': 207053.0, 'rules_tr_choice': 3067.0, 'rules_tr_minimize': 38.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 159.0, 'eqs': 105224.0, 'eqs_atom': 21549.0, 'eqs_body': 5744.0, 'eqs_other': 77931.0}, 'lpStep': {'atoms': 5509.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8398.0, 'bodies_tr': 8398.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 14854.0, 'rules_normal': 14688.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 14853.0, 'rules_tr_normal': 14688.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 5897.0, 'eqs_atom': 1215.0, 'eqs_body': 384.0, 'eqs_other': 4298.0}, 'generator': {'vars': 25945.0, 'vars_eliminated': 0.0, 'vars_frozen': 17303.0, 'constraints': 292.0, 'constraints_binary': 16530.0, 'constraints_ternary': 1487.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 1203.0, 'conflicts': 16.0, 'conflicts_analyzed': 16.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 8.0, 'models': 2.0, 'models_level': 725.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 16.0, 'distributed_sum_lbd': 16.0, 'integrated': 16.0, 'lemmas': 32.0, 'lits_learnt': 32.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 16.0, 'integrated_jumps': 32.0, 'guiding_paths_lits': 1656.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 16.0, 'lemmas_loop': 0.0, 'lemmas_other': 16.0, 'lits_conflict': 16.0, 'lits_loop': 0.0, 'lits_other': 16.0, 'jumps': {'jumps': 16.0, 'jumps_bounded': 0.0, 'levels': 16.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 19.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.34906959533691406, 'cpu': 0.359375, 'solve': 0.038898468017578125, 'unsat': 0.018949508666992188, 'sat': 0.0059871673583984375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.703807830810547, 'cpu': 4.484375, 'solve': 0.3964557647705078, 'unsat': 0.21496200561523438, 'sat': 0.07475471496582031}, 'models': {'enumerated': 19.0, 'optimal': 9.0}, 'solving': {'solvers': {'choices': 14496.0, 'conflicts': 1144.0, 'conflicts_analyzed': 978.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 935.0, 'models': 19.0, 'models_level': 4865.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 861.0, 'distributed_sum_lbd': 1812.0, 'integrated': 4448.0, 'lemmas': 6940.0, 'lits_learnt': 122824.0, 'lemmas_binary': 734.0, 'lemmas_ternary': 387.0, 'cpu_time': 1.234375, 'integrated_imps': 2263.0, 'integrated_jumps': 2760.0, 'guiding_paths_lits': 14534.0, 'guiding_paths': 232.0, 'splits': 0.0, 'lemmas_conflict': 891.0, 'lemmas_loop': 2094.0, 'lemmas_other': 3955.0, 'lits_conflict': 20345.0, 'lits_loop': 16365.0, 'lits_other': 86114.0, 'jumps': {'jumps': 978.0, 'jumps_bounded': 349.0, 'levels': 23017.0, 'levels_bounded': 20769.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19}

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 9 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None)

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 9, step = 19]:
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 9)
sub_goal(3, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 9)

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 19:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.125590s.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 20: original = External(symbol='current_last_sgoals(9, 19)', truth=True, inc_range=None), conversion = current_last_sgoals(9,19).

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044699s with result Satisfiable.

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17028970000000143, Incremental time limit = None
Running cumulative time = 3.6966858000000027, Cumulative time limit = 3600
Used memory = (RSS = 485.222656Mb, VMS = 493.269531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 21
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.088971s, Solving = 0.607715s, Total = 3.696686s, Memory = (RSS = 485.222656Mb, VMS = 493.269531Mb)), Calls = 20
Final Model :: Total atoms = 12751, Cost = (29, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=20, start_step=19, end_step=20, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.0889711999999996, solving_time=0.6077146000000031, total_time=3.6966858000000027, memory=Memory(rss=485.22265625, vms=493.26953125), step_range=range(0, 21), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1255904000000001, solving_time=0.04469930000000133, total_time=0.17028970000000143, memory=Memory(rss=485.22265625, vms=493.26953125), step_range=range(20, 21), clingo_stats={'problem': {'lp': {'atoms': 55170.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 158772.0, 'bodies_tr': 158772.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3646.0, 'count_bodies_tr': 3646.0, 'sccs': 317.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5733.0, 'rules': 220168.0, 'rules_normal': 216669.0, 'rules_choice': 3219.0, 'rules_minimize': 40.0, 'rules_acyc': 0.0, 'rules_heuristic': 240.0, 'rules_tr': 220092.0, 'rules_tr_normal': 216669.0, 'rules_tr_choice': 3219.0, 'rules_tr_minimize': 40.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 164.0, 'eqs': 109011.0, 'eqs_atom': 22021.0, 'eqs_body': 6051.0, 'eqs_other': 80939.0}, 'lpStep': {'atoms': 1905.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7110.0, 'bodies_tr': 7110.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 154.0, 'rules': 9782.0, 'rules_normal': 9616.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 9775.0, 'rules_tr_normal': 9616.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 3787.0, 'eqs_atom': 472.0, 'eqs_body': 307.0, 'eqs_other': 3008.0}, 'generator': {'vars': 26689.0, 'vars_eliminated': 0.0, 'vars_frozen': 17837.0, 'constraints': 397.0, 'constraints_binary': 18049.0, 'constraints_ternary': 1559.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 1308.0, 'conflicts': 18.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 35.0, 'models': 2.0, 'models_level': 827.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 14.0, 'distributed_sum_lbd': 24.0, 'integrated': 42.0, 'lemmas': 93.0, 'lits_learnt': 364.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 23.0, 'cpu_time': 0.046875, 'integrated_imps': 19.0, 'integrated_jumps': 10.0, 'guiding_paths_lits': 1784.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 13.0, 'lemmas_loop': 50.0, 'lemmas_other': 30.0, 'lits_conflict': 40.0, 'lits_loop': 232.0, 'lits_other': 92.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 9.0, 'levels': 101.0, 'levels_bounded': 44.0, 'max': 38.0, 'max_executed': 37.0, 'max_bounded': 34.0}}}}, 'summary': {'call': 20.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.1735363006591797, 'cpu': 0.203125, 'solve': 0.034900665283203125, 'unsat': 0.019947052001953125, 'sat': 0.0039844512939453125}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 3.8773441314697266, 'cpu': 4.6875, 'solve': 0.43135643005371094, 'unsat': 0.2349090576171875, 'sat': 0.07873916625976562}, 'models': {'enumerated': 21.0, 'optimal': 10.0}, 'solving': {'solvers': {'choices': 15804.0, 'conflicts': 1162.0, 'conflicts_analyzed': 995.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 970.0, 'models': 21.0, 'models_level': 5692.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 875.0, 'distributed_sum_lbd': 1836.0, 'integrated': 4490.0, 'lemmas': 7033.0, 'lits_learnt': 123188.0, 'lemmas_binary': 738.0, 'lemmas_ternary': 410.0, 'cpu_time': 1.28125, 'integrated_imps': 2282.0, 'integrated_jumps': 2770.0, 'guiding_paths_lits': 16318.0, 'guiding_paths': 240.0, 'splits': 0.0, 'lemmas_conflict': 904.0, 'lemmas_loop': 2144.0, 'lemmas_other': 3985.0, 'lits_conflict': 20385.0, 'lits_loop': 16597.0, 'lits_other': 86206.0, 'jumps': {'jumps': 995.0, 'jumps_bounded': 358.0, 'levels': 23118.0, 'levels_bounded': 20813.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20}

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 10 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(10, 20)', truth=True, inc_range=None)

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 10, step = 20]:
sub_goal(3, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 10)
sub_goal(3, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 10)

[13-11-2021_23-39-35] DEBUG :: ASH Planner Main #1 >> Reaction at search length 20:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.145662s.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 21: original = External(symbol='current_last_sgoals(10, 20)', truth=True, inc_range=None), conversion = current_last_sgoals(10,20).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.028899s with result Satisfiable.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.17456169999999815, Incremental time limit = None
Running cumulative time = 3.871247500000001, Cumulative time limit = 3600
Used memory = (RSS = 487.468750Mb, VMS = 495.031250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 22
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.234634s, Solving = 0.636614s, Total = 3.871248s, Memory = (RSS = 487.468750Mb, VMS = 495.031250Mb)), Calls = 21
Final Model :: Total atoms = 13099, Cost = (29, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=21, start_step=20, end_step=21, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.2346335999999987, solving_time=0.6366139000000022, total_time=3.871247500000001, memory=Memory(rss=487.46875, vms=495.03125), step_range=range(0, 22), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.14566239999999908, solving_time=0.028899299999999073, total_time=0.17456169999999815, memory=Memory(rss=487.46875, vms=495.03125), step_range=range(21, 22), clingo_stats={'problem': {'lp': {'atoms': 57151.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 166317.0, 'bodies_tr': 166317.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 3826.0, 'count_bodies_tr': 3826.0, 'sccs': 333.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 5918.0, 'rules': 230590.0, 'rules_normal': 226925.0, 'rules_choice': 3371.0, 'rules_minimize': 42.0, 'rules_acyc': 0.0, 'rules_heuristic': 252.0, 'rules_tr': 230510.0, 'rules_tr_normal': 226925.0, 'rules_tr_choice': 3371.0, 'rules_tr_minimize': 42.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 172.0, 'eqs': 113998.0, 'eqs_atom': 22782.0, 'eqs_body': 6339.0, 'eqs_other': 84877.0}, 'lpStep': {'atoms': 1981.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 7545.0, 'bodies_tr': 7545.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 16.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 185.0, 'rules': 10422.0, 'rules_normal': 10256.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 10418.0, 'rules_tr_normal': 10256.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 4987.0, 'eqs_atom': 761.0, 'eqs_body': 288.0, 'eqs_other': 3938.0}, 'generator': {'vars': 27733.0, 'vars_eliminated': 0.0, 'vars_frozen': 18536.0, 'constraints': 657.0, 'constraints_binary': 22969.0, 'constraints_ternary': 2612.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 1254.0, 'conflicts': 27.0, 'conflicts_analyzed': 26.0, 'restarts': 0.0, 'restarts_last': 9.0, 'extra': {'domain_choices': 93.0, 'models': 1.0, 'models_level': 546.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 23.0, 'distributed_sum_lbd': 48.0, 'integrated': 115.0, 'lemmas': 142.0, 'lits_learnt': 939.0, 'lemmas_binary': 39.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.09375, 'integrated_imps': 58.0, 'integrated_jumps': 211.0, 'guiding_paths_lits': 1673.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 27.0, 'lemmas_other': 94.0, 'lits_conflict': 145.0, 'lits_loop': 129.0, 'lits_other': 665.0, 'jumps': {'jumps': 26.0, 'jumps_bounded': 14.0, 'levels': 1137.0, 'levels_bounded': 1061.0, 'max': 250.0, 'max_executed': 10.0, 'max_bounded': 240.0}}}}, 'summary': {'call': 21.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [29.0, 0.0], 'lower': [29.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.1765270233154297, 'cpu': 0.25, 'solve': 0.016954421997070312, 'unsat': 0.012964248657226562, 'sat': 0.00399017333984375}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.053871154785156, 'cpu': 4.9375, 'solve': 0.44831085205078125, 'unsat': 0.24787330627441406, 'sat': 0.08272933959960938}, 'models': {'enumerated': 22.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 17058.0, 'conflicts': 1189.0, 'conflicts_analyzed': 1021.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 1063.0, 'models': 22.0, 'models_level': 6238.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 898.0, 'distributed_sum_lbd': 1884.0, 'integrated': 4605.0, 'lemmas': 7175.0, 'lits_learnt': 124127.0, 'lemmas_binary': 777.0, 'lemmas_ternary': 424.0, 'cpu_time': 1.375, 'integrated_imps': 2340.0, 'integrated_jumps': 2981.0, 'guiding_paths_lits': 17991.0, 'guiding_paths': 247.0, 'splits': 0.0, 'lemmas_conflict': 925.0, 'lemmas_loop': 2171.0, 'lemmas_other': 4079.0, 'lits_conflict': 20530.0, 'lits_loop': 16726.0, 'lits_other': 86871.0, 'jumps': {'jumps': 1021.0, 'jumps_bounded': 372.0, 'levels': 24255.0, 'levels_bounded': 21874.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21}

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 11 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(11, 21)', truth=True, inc_range=None)

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 11, step = 21]:
sub_goal(3, talos, move(store_room), in(talos), store_room, 11)

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 21:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.170507s.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 22: original = External(symbol='current_last_sgoals(11, 21)', truth=True, inc_range=None), conversion = current_last_sgoals(11,21).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016649s with result Unsatisfiable.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18715550000000292, Incremental time limit = None
Running cumulative time = 4.058403000000004, Cumulative time limit = 3600
Used memory = (RSS = 488.628906Mb, VMS = 495.636719Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=22, start_step=21, end_step=22, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.4051404000000005, solving_time=0.6532626000000032, total_time=4.058403000000004, memory=Memory(rss=488.62890625, vms=495.63671875), step_range=range(0, 23), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.17050680000000185, solving_time=0.01664870000000107, total_time=0.18715550000000292, memory=Memory(rss=488.62890625, vms=495.63671875), step_range=range(22, 23), clingo_stats={'problem': {'lp': {'atoms': 59452.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 174348.0, 'bodies_tr': 174348.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4006.0, 'count_bodies_tr': 4006.0, 'sccs': 351.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6194.0, 'rules': 241845.0, 'rules_normal': 238014.0, 'rules_choice': 3523.0, 'rules_minimize': 44.0, 'rules_acyc': 0.0, 'rules_heuristic': 264.0, 'rules_tr': 241763.0, 'rules_tr_normal': 238014.0, 'rules_tr_choice': 3523.0, 'rules_tr_minimize': 44.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 182.0, 'eqs': 118989.0, 'eqs_atom': 23806.0, 'eqs_body': 6561.0, 'eqs_other': 88622.0}, 'lpStep': {'atoms': 2301.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8031.0, 'bodies_tr': 8031.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 18.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 276.0, 'rules': 11255.0, 'rules_normal': 11089.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11253.0, 'rules_tr_normal': 11089.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 4991.0, 'eqs_atom': 1024.0, 'eqs_body': 222.0, 'eqs_other': 3745.0}, 'generator': {'vars': 29137.0, 'vars_eliminated': 0.0, 'vars_frozen': 19472.0, 'constraints': 996.0, 'constraints_binary': 30203.0, 'constraints_ternary': 4165.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 35.0, 'conflicts': 26.0, 'conflicts_analyzed': 21.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 35.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 21.0, 'distributed_sum_lbd': 48.0, 'integrated': 58.0, 'lemmas': 136.0, 'lits_learnt': 1046.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.0, 'integrated_imps': 51.0, 'integrated_jumps': 11.0, 'guiding_paths_lits': 1530.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 21.0, 'lemmas_loop': 62.0, 'lemmas_other': 53.0, 'lits_conflict': 243.0, 'lits_loop': 381.0, 'lits_other': 422.0, 'jumps': {'jumps': 21.0, 'jumps_bounded': 13.0, 'levels': 41.0, 'levels_bounded': 20.0, 'max': 3.0, 'max_executed': 3.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 22.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [11.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.1900005340576172, 'cpu': 0.1875, 'solve': 0.00399017333984375, 'unsat': 0.00399017333984375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.243871688842773, 'cpu': 5.125, 'solve': 0.452301025390625, 'unsat': 0.2518634796142578, 'sat': 0.08272933959960938}, 'models': {'enumerated': 22.0, 'optimal': 11.0}, 'solving': {'solvers': {'choices': 17093.0, 'conflicts': 1215.0, 'conflicts_analyzed': 1042.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 1098.0, 'models': 22.0, 'models_level': 6238.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 919.0, 'distributed_sum_lbd': 1932.0, 'integrated': 4663.0, 'lemmas': 7311.0, 'lits_learnt': 125173.0, 'lemmas_binary': 777.0, 'lemmas_ternary': 430.0, 'cpu_time': 1.375, 'integrated_imps': 2391.0, 'integrated_jumps': 2992.0, 'guiding_paths_lits': 19521.0, 'guiding_paths': 253.0, 'splits': 0.0, 'lemmas_conflict': 946.0, 'lemmas_loop': 2233.0, 'lemmas_other': 4132.0, 'lits_conflict': 20773.0, 'lits_loop': 17107.0, 'lits_other': 87293.0, 'jumps': {'jumps': 1042.0, 'jumps_bounded': 385.0, 'levels': 24296.0, 'levels_bounded': 21894.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 22:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164073s.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037768s with result Satisfiable.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.20184090000000054, Incremental time limit = None
Running cumulative time = 4.260243900000004, Cumulative time limit = 3600
Used memory = (RSS = 491.996094Mb, VMS = 498.933594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 23
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.569214s, Solving = 0.691030s, Total = 4.260244s, Memory = (RSS = 491.996094Mb, VMS = 498.933594Mb)), Calls = 23
Final Model :: Total atoms = 13788, Cost = (31, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=23, start_step=22, end_step=23, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.569213699999999, solving_time=0.6910302000000055, total_time=4.260243900000004, memory=Memory(rss=491.99609375, vms=498.93359375), step_range=range(0, 24), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1640732999999983, solving_time=0.03776760000000223, total_time=0.20184090000000054, memory=Memory(rss=491.99609375, vms=498.93359375), step_range=range(23, 24), clingo_stats={'problem': {'lp': {'atoms': 61867.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 182742.0, 'bodies_tr': 182742.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4186.0, 'count_bodies_tr': 4186.0, 'sccs': 371.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 6625.0, 'rules': 253615.0, 'rules_normal': 249618.0, 'rules_choice': 3675.0, 'rules_minimize': 46.0, 'rules_acyc': 0.0, 'rules_heuristic': 276.0, 'rules_tr': 253533.0, 'rules_tr_normal': 249618.0, 'rules_tr_choice': 3675.0, 'rules_tr_minimize': 46.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 194.0, 'eqs': 124403.0, 'eqs_atom': 24880.0, 'eqs_body': 6686.0, 'eqs_other': 92837.0}, 'lpStep': {'atoms': 2415.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8394.0, 'bodies_tr': 8394.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 431.0, 'rules': 11770.0, 'rules_normal': 11604.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11770.0, 'rules_tr_normal': 11604.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5414.0, 'eqs_atom': 1074.0, 'eqs_body': 125.0, 'eqs_other': 4215.0}, 'generator': {'vars': 31008.0, 'vars_eliminated': 0.0, 'vars_frozen': 20706.0, 'constraints': 1473.0, 'constraints_binary': 40305.0, 'constraints_ternary': 6521.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 1576.0, 'conflicts': 166.0, 'conflicts_analyzed': 161.0, 'restarts': 0.0, 'restarts_last': 31.0, 'extra': {'domain_choices': 219.0, 'models': 1.0, 'models_level': 541.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 156.0, 'distributed_sum_lbd': 383.0, 'integrated': 924.0, 'lemmas': 1233.0, 'lits_learnt': 14135.0, 'lemmas_binary': 113.0, 'lemmas_ternary': 45.0, 'cpu_time': 0.109375, 'integrated_imps': 264.0, 'integrated_jumps': 151.0, 'guiding_paths_lits': 1897.0, 'guiding_paths': 9.0, 'splits': 0.0, 'lemmas_conflict': 159.0, 'lemmas_loop': 322.0, 'lemmas_other': 752.0, 'lits_conflict': 2255.0, 'lits_loop': 2220.0, 'lits_other': 9660.0, 'jumps': {'jumps': 161.0, 'jumps_bounded': 25.0, 'levels': 3467.0, 'levels_bounded': 3233.0, 'max': 578.0, 'max_executed': 578.0, 'max_bounded': 577.0}}}}, 'summary': {'call': 23.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [31.0, 0.0], 'lower': [31.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.20345687866210938, 'cpu': 0.28125, 'solve': 0.020944595336914062, 'unsat': 0.012964248657226562, 'sat': 0.0079803466796875}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.447328567504883, 'cpu': 5.40625, 'solve': 0.47324562072753906, 'unsat': 0.2648277282714844, 'sat': 0.09070968627929688}, 'models': {'enumerated': 23.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 18669.0, 'conflicts': 1381.0, 'conflicts_analyzed': 1203.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 1317.0, 'models': 23.0, 'models_level': 6779.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1075.0, 'distributed_sum_lbd': 2315.0, 'integrated': 5587.0, 'lemmas': 8544.0, 'lits_learnt': 139308.0, 'lemmas_binary': 890.0, 'lemmas_ternary': 475.0, 'cpu_time': 1.484375, 'integrated_imps': 2655.0, 'integrated_jumps': 3143.0, 'guiding_paths_lits': 21418.0, 'guiding_paths': 262.0, 'splits': 0.0, 'lemmas_conflict': 1105.0, 'lemmas_loop': 2555.0, 'lemmas_other': 4884.0, 'lits_conflict': 23028.0, 'lits_loop': 19327.0, 'lits_other': 96953.0, 'jumps': {'jumps': 1203.0, 'jumps_bounded': 410.0, 'levels': 27763.0, 'levels_bounded': 25127.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23}

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 12 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None)

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 12, step = 23]:
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 12)

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 23:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164078s.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 24: original = External(symbol='current_last_sgoals(12, 23)', truth=True, inc_range=None), conversion = current_last_sgoals(12,23).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022175s with result Unsatisfiable.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18625270000000071, Incremental time limit = None
Running cumulative time = 4.446496600000005, Cumulative time limit = 3600
Used memory = (RSS = 498.394531Mb, VMS = 512.347656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=24, start_step=23, end_step=24, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=3.7332916999999988, solving_time=0.7132049000000062, total_time=4.446496600000005, memory=Memory(rss=498.39453125, vms=512.34765625), step_range=range(0, 25), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.16407799999999995, solving_time=0.02217470000000077, total_time=0.18625270000000071, memory=Memory(rss=498.39453125, vms=512.34765625), step_range=range(24, 25), clingo_stats={'problem': {'lp': {'atoms': 64320.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 191191.0, 'bodies_tr': 191191.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4366.0, 'count_bodies_tr': 4366.0, 'sccs': 391.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7056.0, 'rules': 265534.0, 'rules_normal': 261371.0, 'rules_choice': 3827.0, 'rules_minimize': 48.0, 'rules_acyc': 0.0, 'rules_heuristic': 288.0, 'rules_tr': 265452.0, 'rules_tr_normal': 261371.0, 'rules_tr_choice': 3827.0, 'rules_tr_minimize': 48.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 206.0, 'eqs': 129965.0, 'eqs_atom': 25979.0, 'eqs_body': 6829.0, 'eqs_other': 97157.0}, 'lpStep': {'atoms': 2453.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8449.0, 'bodies_tr': 8449.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 431.0, 'rules': 11919.0, 'rules_normal': 11753.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 11919.0, 'rules_tr_normal': 11753.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5562.0, 'eqs_atom': 1099.0, 'eqs_body': 143.0, 'eqs_other': 4320.0}, 'generator': {'vars': 32885.0, 'vars_eliminated': 0.0, 'vars_frozen': 21943.0, 'constraints': 1824.0, 'constraints_binary': 48178.0, 'constraints_ternary': 8332.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 6.0, 'conflicts': 10.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 6.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 4.0, 'lemmas': 6.0, 'lits_learnt': 17.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 4.0, 'integrated_jumps': 4.0, 'guiding_paths_lits': 2009.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 1.0, 'lemmas_other': 4.0, 'lits_conflict': 2.0, 'lits_loop': 7.0, 'lits_other': 8.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 2.0, 'levels': 4.0, 'levels_bounded': 2.0, 'max': 2.0, 'max_executed': 1.0, 'max_bounded': 1.0}}}}, 'summary': {'call': 24.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [30.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.19049072265625, 'cpu': 0.1875, 'solve': 0.00698089599609375, 'unsat': 0.00698089599609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 4.637819290161133, 'cpu': 5.59375, 'solve': 0.4802265167236328, 'unsat': 0.2718086242675781, 'sat': 0.09070968627929688}, 'models': {'enumerated': 23.0, 'optimal': 12.0}, 'solving': {'solvers': {'choices': 18675.0, 'conflicts': 1391.0, 'conflicts_analyzed': 1205.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 1323.0, 'models': 23.0, 'models_level': 6779.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1076.0, 'distributed_sum_lbd': 2317.0, 'integrated': 5591.0, 'lemmas': 8550.0, 'lits_learnt': 139325.0, 'lemmas_binary': 895.0, 'lemmas_ternary': 475.0, 'cpu_time': 1.484375, 'integrated_imps': 2659.0, 'integrated_jumps': 3147.0, 'guiding_paths_lits': 23427.0, 'guiding_paths': 269.0, 'splits': 0.0, 'lemmas_conflict': 1106.0, 'lemmas_loop': 2556.0, 'lemmas_other': 4888.0, 'lits_conflict': 23030.0, 'lits_loop': 19334.0, 'lits_other': 96961.0, 'jumps': {'jumps': 1205.0, 'jumps_bounded': 412.0, 'levels': 27767.0, 'levels_bounded': 25129.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 24:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159584s.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059629s with result Satisfiable.

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.21921279999999754, Incremental time limit = None
Running cumulative time = 4.665709400000003, Cumulative time limit = 3600
Used memory = (RSS = 502.828125Mb, VMS = 515.816406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 25
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.892876s, Solving = 0.772834s, Total = 4.665709s, Memory = (RSS = 502.828125Mb, VMS = 515.816406Mb)), Calls = 25
Final Model :: Total atoms = 14475, Cost = (33, 0), Optimality proven = False, Number = 2, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=25, start_step=24, end_step=25, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=3.8928758999999964, solving_time=0.7728335000000062, total_time=4.665709400000003, memory=Memory(rss=502.828125, vms=515.81640625), step_range=range(0, 26), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15958419999999762, solving_time=0.05962859999999992, total_time=0.21921279999999754, memory=Memory(rss=502.828125, vms=515.81640625), step_range=range(25, 26), clingo_stats={'problem': {'lp': {'atoms': 66782.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 199807.0, 'bodies_tr': 199807.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4546.0, 'count_bodies_tr': 4546.0, 'sccs': 411.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7492.0, 'rules': 277712.0, 'rules_normal': 273383.0, 'rules_choice': 3979.0, 'rules_minimize': 50.0, 'rules_acyc': 0.0, 'rules_heuristic': 300.0, 'rules_tr': 277630.0, 'rules_tr_normal': 273383.0, 'rules_tr_choice': 3979.0, 'rules_tr_minimize': 50.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 218.0, 'eqs': 135557.0, 'eqs_atom': 27062.0, 'eqs_body': 6941.0, 'eqs_other': 101554.0}, 'lpStep': {'atoms': 2462.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8616.0, 'bodies_tr': 8616.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12178.0, 'rules_normal': 12012.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12178.0, 'rules_tr_normal': 12012.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5592.0, 'eqs_atom': 1083.0, 'eqs_body': 112.0, 'eqs_other': 4397.0}, 'generator': {'vars': 34810.0, 'vars_eliminated': 0.0, 'vars_frozen': 23199.0, 'constraints': 2316.0, 'constraints_binary': 58747.0, 'constraints_ternary': 10729.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 2554.0, 'conflicts': 199.0, 'conflicts_analyzed': 194.0, 'restarts': 0.0, 'restarts_last': 16.0, 'extra': {'domain_choices': 316.0, 'models': 2.0, 'models_level': 1028.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 190.0, 'distributed_sum_lbd': 463.0, 'integrated': 1140.0, 'lemmas': 1850.0, 'lits_learnt': 27668.0, 'lemmas_binary': 120.0, 'lemmas_ternary': 40.0, 'cpu_time': 0.125, 'integrated_imps': 417.0, 'integrated_jumps': 134.0, 'guiding_paths_lits': 2121.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 190.0, 'lemmas_loop': 676.0, 'lemmas_other': 984.0, 'lits_conflict': 3877.0, 'lits_loop': 4983.0, 'lits_other': 18808.0, 'jumps': {'jumps': 194.0, 'jumps_bounded': 43.0, 'levels': 5027.0, 'levels_bounded': 4783.0, 'max': 535.0, 'max_executed': 535.0, 'max_bounded': 533.0}}}}, 'summary': {'call': 25.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [33.0, 0.0], 'lower': [33.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.2224750518798828, 'cpu': 0.296875, 'solve': 0.04385566711425781, 'unsat': 0.013963699340820312, 'sat': 0.013936996459960938}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 4.860294342041016, 'cpu': 5.890625, 'solve': 0.5240821838378906, 'unsat': 0.28577232360839844, 'sat': 0.10464668273925781}, 'models': {'enumerated': 25.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 21229.0, 'conflicts': 1590.0, 'conflicts_analyzed': 1399.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 1639.0, 'models': 25.0, 'models_level': 7807.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1266.0, 'distributed_sum_lbd': 2780.0, 'integrated': 6731.0, 'lemmas': 10400.0, 'lits_learnt': 166993.0, 'lemmas_binary': 1015.0, 'lemmas_ternary': 515.0, 'cpu_time': 1.609375, 'integrated_imps': 3076.0, 'integrated_jumps': 3281.0, 'guiding_paths_lits': 25548.0, 'guiding_paths': 280.0, 'splits': 0.0, 'lemmas_conflict': 1296.0, 'lemmas_loop': 3232.0, 'lemmas_other': 5872.0, 'lits_conflict': 26907.0, 'lits_loop': 24317.0, 'lits_other': 115769.0, 'jumps': {'jumps': 1399.0, 'jumps_bounded': 455.0, 'levels': 32794.0, 'levels_bounded': 29912.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25}

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 13 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None)

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 13, step = 25]:
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 13)

[13-11-2021_23-39-36] DEBUG :: ASH Planner Main #1 >> Reaction at search length 25:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.159899s.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 26: original = External(symbol='current_last_sgoals(13, 25)', truth=True, inc_range=None), conversion = current_last_sgoals(13,25).

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020939s with result Unsatisfiable.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.18083760000000026, Incremental time limit = None
Running cumulative time = 4.846547000000003, Cumulative time limit = 3600
Used memory = (RSS = 504.296875Mb, VMS = 516.027344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=26, start_step=25, end_step=26, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.052774699999997, solving_time=0.7937723000000059, total_time=4.846547000000003, memory=Memory(rss=504.296875, vms=516.02734375), step_range=range(0, 27), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.15989880000000056, solving_time=0.020938799999999702, total_time=0.18083760000000026, memory=Memory(rss=504.296875, vms=516.02734375), step_range=range(26, 27), clingo_stats={'problem': {'lp': {'atoms': 69253.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 208447.0, 'bodies_tr': 208447.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4726.0, 'count_bodies_tr': 4726.0, 'sccs': 431.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 7928.0, 'rules': 290005.0, 'rules_normal': 285510.0, 'rules_choice': 4131.0, 'rules_minimize': 52.0, 'rules_acyc': 0.0, 'rules_heuristic': 312.0, 'rules_tr': 289923.0, 'rules_tr_normal': 285510.0, 'rules_tr_choice': 4131.0, 'rules_tr_minimize': 52.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 230.0, 'eqs': 141205.0, 'eqs_atom': 28154.0, 'eqs_body': 7052.0, 'eqs_other': 105999.0}, 'lpStep': {'atoms': 2471.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8640.0, 'bodies_tr': 8640.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12293.0, 'rules_normal': 12127.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12293.0, 'rules_tr_normal': 12127.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5648.0, 'eqs_atom': 1092.0, 'eqs_body': 111.0, 'eqs_other': 4445.0}, 'generator': {'vars': 36735.0, 'vars_eliminated': 0.0, 'vars_frozen': 24455.0, 'constraints': 2808.0, 'constraints_binary': 69422.0, 'constraints_ternary': 13126.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 7.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 3.0, 'lemmas': 4.0, 'lits_learnt': 8.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 3.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 2233.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 0.0, 'lemmas_other': 3.0, 'lits_conflict': 2.0, 'lits_loop': 0.0, 'lits_other': 6.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 26.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [11.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.184478759765625, 'cpu': 0.1875, 'solve': 0.0059566497802734375, 'unsat': 0.0059566497802734375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.044773101806641, 'cpu': 6.078125, 'solve': 0.5300388336181641, 'unsat': 0.2917289733886719, 'sat': 0.10464668273925781}, 'models': {'enumerated': 25.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 21230.0, 'conflicts': 1597.0, 'conflicts_analyzed': 1400.0, 'restarts': 2.0, 'restarts_last': 60.0, 'extra': {'domain_choices': 1640.0, 'models': 25.0, 'models_level': 7807.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1267.0, 'distributed_sum_lbd': 2782.0, 'integrated': 6734.0, 'lemmas': 10404.0, 'lits_learnt': 167001.0, 'lemmas_binary': 1019.0, 'lemmas_ternary': 515.0, 'cpu_time': 1.609375, 'integrated_imps': 3079.0, 'integrated_jumps': 3281.0, 'guiding_paths_lits': 27781.0, 'guiding_paths': 287.0, 'splits': 0.0, 'lemmas_conflict': 1297.0, 'lemmas_loop': 3232.0, 'lemmas_other': 5875.0, 'lits_conflict': 26909.0, 'lits_loop': 24317.0, 'lits_other': 115775.0, 'jumps': {'jumps': 1400.0, 'jumps_bounded': 456.0, 'levels': 32797.0, 'levels_bounded': 29914.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 26:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.203951s.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055415s with result Unsatisfiable.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.25936619999999877, Incremental time limit = None
Running cumulative time = 5.105913200000002, Cumulative time limit = 3600
Used memory = (RSS = 506.285156Mb, VMS = 517.179688Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=27, start_step=26, end_step=27, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.256725899999996, solving_time=0.8491873000000059, total_time=5.105913200000002, memory=Memory(rss=506.28515625, vms=517.1796875), step_range=range(0, 28), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.20395119999999878, solving_time=0.05541499999999999, total_time=0.25936619999999877, memory=Memory(rss=506.28515625, vms=517.1796875), step_range=range(27, 28), clingo_stats={'problem': {'lp': {'atoms': 71733.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 217111.0, 'bodies_tr': 217111.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 4906.0, 'count_bodies_tr': 4906.0, 'sccs': 451.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8364.0, 'rules': 302413.0, 'rules_normal': 297752.0, 'rules_choice': 4283.0, 'rules_minimize': 54.0, 'rules_acyc': 0.0, 'rules_heuristic': 324.0, 'rules_tr': 302331.0, 'rules_tr_normal': 297752.0, 'rules_tr_choice': 4283.0, 'rules_tr_minimize': 54.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 242.0, 'eqs': 146911.0, 'eqs_atom': 29255.0, 'eqs_body': 7164.0, 'eqs_other': 110492.0}, 'lpStep': {'atoms': 2480.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8664.0, 'bodies_tr': 8664.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12408.0, 'rules_normal': 12242.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12408.0, 'rules_tr_normal': 12242.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5706.0, 'eqs_atom': 1101.0, 'eqs_body': 112.0, 'eqs_other': 4493.0}, 'generator': {'vars': 38660.0, 'vars_eliminated': 0.0, 'vars_frozen': 25711.0, 'constraints': 3300.0, 'constraints_binary': 80203.0, 'constraints_ternary': 15523.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 1041.0, 'conflicts': 488.0, 'conflicts_analyzed': 481.0, 'restarts': 1.0, 'restarts_last': 73.0, 'extra': {'domain_choices': 935.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 463.0, 'distributed_sum_lbd': 1218.0, 'integrated': 2769.0, 'lemmas': 3946.0, 'lits_learnt': 90832.0, 'lemmas_binary': 426.0, 'lemmas_ternary': 75.0, 'cpu_time': 0.109375, 'integrated_imps': 720.0, 'integrated_jumps': 436.0, 'guiding_paths_lits': 2345.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 479.0, 'lemmas_loop': 1029.0, 'lemmas_other': 2438.0, 'lits_conflict': 14432.0, 'lits_loop': 8453.0, 'lits_other': 67947.0, 'jumps': {'jumps': 481.0, 'jumps_bounded': 39.0, 'levels': 2342.0, 'levels_bounded': 1739.0, 'max': 585.0, 'max_executed': 585.0, 'max_bounded': 584.0}}}}, 'summary': {'call': 27.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [34.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.262298583984375, 'cpu': 0.3125, 'solve': 0.03490638732910156, 'unsat': 0.03490638732910156, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.307071685791016, 'cpu': 6.390625, 'solve': 0.5649452209472656, 'unsat': 0.32663536071777344, 'sat': 0.10464668273925781}, 'models': {'enumerated': 25.0, 'optimal': 13.0}, 'solving': {'solvers': {'choices': 22271.0, 'conflicts': 2085.0, 'conflicts_analyzed': 1881.0, 'restarts': 3.0, 'restarts_last': 73.0, 'extra': {'domain_choices': 2575.0, 'models': 25.0, 'models_level': 7807.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1730.0, 'distributed_sum_lbd': 4000.0, 'integrated': 9503.0, 'lemmas': 14350.0, 'lits_learnt': 257833.0, 'lemmas_binary': 1445.0, 'lemmas_ternary': 590.0, 'cpu_time': 1.71875, 'integrated_imps': 3799.0, 'integrated_jumps': 3717.0, 'guiding_paths_lits': 30126.0, 'guiding_paths': 299.0, 'splits': 0.0, 'lemmas_conflict': 1776.0, 'lemmas_loop': 4261.0, 'lemmas_other': 8313.0, 'lits_conflict': 41341.0, 'lits_loop': 32770.0, 'lits_other': 183722.0, 'jumps': {'jumps': 1881.0, 'jumps_bounded': 495.0, 'levels': 35139.0, 'levels_bounded': 31653.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Reaction at search length 27:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.199810s.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.160365s with result Satisfiable.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.3601749000000005, Incremental time limit = None
Running cumulative time = 5.466088100000002, Cumulative time limit = 3600
Used memory = (RSS = 514.710938Mb, VMS = 525.218750Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 28
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.456535s, Solving = 1.009553s, Total = 5.466088s, Memory = (RSS = 514.710938Mb, VMS = 525.218750Mb)), Calls = 28
Final Model :: Total atoms = 15508, Cost = (36, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=28, start_step=27, end_step=28, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.456535399999996, solving_time=1.0095527000000057, total_time=5.466088100000002, memory=Memory(rss=514.7109375, vms=525.21875), step_range=range(0, 29), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19980950000000064, solving_time=0.16036539999999988, total_time=0.3601749000000005, memory=Memory(rss=514.7109375, vms=525.21875), step_range=range(28, 29), clingo_stats={'problem': {'lp': {'atoms': 74222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 225799.0, 'bodies_tr': 225799.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5086.0, 'count_bodies_tr': 5086.0, 'sccs': 471.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 8800.0, 'rules': 314936.0, 'rules_normal': 310109.0, 'rules_choice': 4435.0, 'rules_minimize': 56.0, 'rules_acyc': 0.0, 'rules_heuristic': 336.0, 'rules_tr': 314854.0, 'rules_tr_normal': 310109.0, 'rules_tr_choice': 4435.0, 'rules_tr_minimize': 56.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 254.0, 'eqs': 152673.0, 'eqs_atom': 30365.0, 'eqs_body': 7275.0, 'eqs_other': 115033.0}, 'lpStep': {'atoms': 2489.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8688.0, 'bodies_tr': 8688.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12523.0, 'rules_normal': 12357.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12523.0, 'rules_tr_normal': 12357.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5762.0, 'eqs_atom': 1110.0, 'eqs_body': 111.0, 'eqs_other': 4541.0}, 'generator': {'vars': 40585.0, 'vars_eliminated': 0.0, 'vars_frozen': 26967.0, 'constraints': 3792.0, 'constraints_binary': 91089.0, 'constraints_ternary': 17917.0, 'acyc_edges': 0.0, 'complexity': 123552.0}}, 'solving': {'solvers': {'choices': 4500.0, 'conflicts': 1000.0, 'conflicts_analyzed': 989.0, 'restarts': 6.0, 'restarts_last': 142.0, 'extra': {'domain_choices': 1675.0, 'models': 3.0, 'models_level': 1750.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 847.0, 'distributed_sum_lbd': 2628.0, 'integrated': 5086.0, 'lemmas': 6985.0, 'lits_learnt': 218393.0, 'lemmas_binary': 617.0, 'lemmas_ternary': 245.0, 'cpu_time': 0.703125, 'integrated_imps': 827.0, 'integrated_jumps': 841.0, 'guiding_paths_lits': 2457.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 988.0, 'lemmas_loop': 1091.0, 'lemmas_other': 4906.0, 'lits_conflict': 37030.0, 'lits_loop': 8698.0, 'lits_other': 172665.0, 'jumps': {'jumps': 989.0, 'jumps_bounded': 22.0, 'levels': 1834.0, 'levels_bounded': 275.0, 'max': 144.0, 'max_executed': 144.0, 'max_bounded': 143.0}}}}, 'summary': {'call': 28.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [36.0, 0.0], 'lower': [36.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.36602020263671875, 'cpu': 0.921875, 'solve': 0.14162063598632812, 'unsat': 0.020944595336914062, 'sat': 0.08577156066894531}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 5.673091888427734, 'cpu': 7.3125, 'solve': 0.7065658569335938, 'unsat': 0.3475799560546875, 'sat': 0.19041824340820312}, 'models': {'enumerated': 28.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 26771.0, 'conflicts': 3085.0, 'conflicts_analyzed': 2870.0, 'restarts': 9.0, 'restarts_last': 142.0, 'extra': {'domain_choices': 4250.0, 'models': 28.0, 'models_level': 9557.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2577.0, 'distributed_sum_lbd': 6628.0, 'integrated': 14589.0, 'lemmas': 21335.0, 'lits_learnt': 476226.0, 'lemmas_binary': 2062.0, 'lemmas_ternary': 835.0, 'cpu_time': 2.421875, 'integrated_imps': 4626.0, 'integrated_jumps': 4558.0, 'guiding_paths_lits': 32583.0, 'guiding_paths': 313.0, 'splits': 0.0, 'lemmas_conflict': 2764.0, 'lemmas_loop': 5352.0, 'lemmas_other': 13219.0, 'lits_conflict': 78371.0, 'lits_loop': 41468.0, 'lits_other': 356387.0, 'jumps': {'jumps': 2870.0, 'jumps_bounded': 517.0, 'levels': 36973.0, 'levels_bounded': 31928.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25, 13: 28}

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 14 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None)

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 14, step = 28]:
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 14)
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 14)

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[13-11-2021_23-39-37] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(2, complete(blue), false, false)
final_goal(2, complete(blue), true, true)
final_goal(2, complete(red), false, false)
final_goal(2, complete(red), true, true)
final_goal(2, in_tower((block,1),(block,1)), false, true)
final_goal(2, in_tower((block,1),(block,1)), true, false)
final_goal(2, in_tower((block,1),(block,2)), false, true)
final_goal(2, in_tower((block,1),(block,2)), true, false)
final_goal(2, in_tower((block,1),(block,3)), false, true)
final_goal(2, in_tower((block,1),(block,3)), true, false)
final_goal(2, in_tower((block,1),(block,4)), false, true)
final_goal(2, in_tower((block,1),(block,4)), true, false)
final_goal(2, in_tower((block,1),(block,5)), false, true)
final_goal(2, in_tower((block,1),(block,5)), true, false)
final_goal(2, in_tower((block,1),(block,6)), false, true)
final_goal(2, in_tower((block,1),(block,6)), true, false)
final_goal(2, in_tower((block,2),(block,1)), false, true)
final_goal(2, in_tower((block,2),(block,1)), true, false)
final_goal(2, in_tower((block,2),(block,2)), false, true)
final_goal(2, in_tower((block,2),(block,2)), true, false)
final_goal(2, in_tower((block,2),(block,3)), false, true)
final_goal(2, in_tower((block,2),(block,3)), true, false)
final_goal(2, in_tower((block,2),(block,4)), false, true)
final_goal(2, in_tower((block,2),(block,4)), true, false)
final_goal(2, in_tower((block,2),(block,5)), false, true)
final_goal(2, in_tower((block,2),(block,5)), true, false)
final_goal(2, in_tower((block,2),(block,6)), false, true)
final_goal(2, in_tower((block,2),(block,6)), true, false)
final_goal(2, in_tower((block,3),(block,1)), false, false)
final_goal(2, in_tower((block,3),(block,1)), true, true)
final_goal(2, in_tower((block,3),(block,2)), false, false)
final_goal(2, in_tower((block,3),(block,2)), true, true)
final_goal(2, in_tower((block,3),(block,3)), false, false)
final_goal(2, in_tower((block,3),(block,3)), true, true)
final_goal(2, in_tower((block,3),(block,4)), false, true)
final_goal(2, in_tower((block,3),(block,4)), true, false)
final_goal(2, in_tower((block,3),(block,5)), false, true)
final_goal(2, in_tower((block,3),(block,5)), true, false)
final_goal(2, in_tower((block,3),(block,6)), false, true)
final_goal(2, in_tower((block,3),(block,6)), true, false)
final_goal(2, in_tower((block,4),(block,1)), false, true)
final_goal(2, in_tower((block,4),(block,1)), true, false)
final_goal(2, in_tower((block,4),(block,2)), false, true)
final_goal(2, in_tower((block,4),(block,2)), true, false)
final_goal(2, in_tower((block,4),(block,3)), false, true)
final_goal(2, in_tower((block,4),(block,3)), true, false)
final_goal(2, in_tower((block,4),(block,4)), false, true)
final_goal(2, in_tower((block,4),(block,4)), true, false)
final_goal(2, in_tower((block,4),(block,5)), false, true)
final_goal(2, in_tower((block,4),(block,5)), true, false)
final_goal(2, in_tower((block,4),(block,6)), false, true)
final_goal(2, in_tower((block,4),(block,6)), true, false)
final_goal(2, in_tower((block,5),(block,1)), false, true)
final_goal(2, in_tower((block,5),(block,1)), true, false)
final_goal(2, in_tower((block,5),(block,2)), false, true)
final_goal(2, in_tower((block,5),(block,2)), true, false)
final_goal(2, in_tower((block,5),(block,3)), false, true)
final_goal(2, in_tower((block,5),(block,3)), true, false)
final_goal(2, in_tower((block,5),(block,4)), false, true)
final_goal(2, in_tower((block,5),(block,4)), true, false)
final_goal(2, in_tower((block,5),(block,5)), false, true)
final_goal(2, in_tower((block,5),(block,5)), true, false)
final_goal(2, in_tower((block,5),(block,6)), false, true)
final_goal(2, in_tower((block,5),(block,6)), true, false)
final_goal(2, in_tower((block,6),(block,1)), false, true)
final_goal(2, in_tower((block,6),(block,1)), true, false)
final_goal(2, in_tower((block,6),(block,2)), false, true)
final_goal(2, in_tower((block,6),(block,2)), true, false)
final_goal(2, in_tower((block,6),(block,3)), false, true)
final_goal(2, in_tower((block,6),(block,3)), true, false)
final_goal(2, in_tower((block,6),(block,4)), false, false)
final_goal(2, in_tower((block,6),(block,4)), true, true)
final_goal(2, in_tower((block,6),(block,5)), false, false)
final_goal(2, in_tower((block,6),(block,5)), true, true)
final_goal(2, in_tower((block,6),(block,6)), false, false)
final_goal(2, in_tower((block,6),(block,6)), true, true)
final_goal(2, on((block,1)), (block,2), true)
final_goal(2, on((block,1)), (block,3), false)
final_goal(2, on((block,1)), (block,4), false)
final_goal(2, on((block,1)), (block,5), false)
final_goal(2, on((block,1)), (block,6), false)
final_goal(2, on((block,1)), nothing, false)
final_goal(2, on((block,1)), puzzle_room_table, false)
final_goal(2, on((block,2)), (block,1), false)
final_goal(2, on((block,2)), (block,3), true)
final_goal(2, on((block,2)), (block,4), false)
final_goal(2, on((block,2)), (block,5), false)
final_goal(2, on((block,2)), (block,6), false)
final_goal(2, on((block,2)), nothing, false)
final_goal(2, on((block,2)), puzzle_room_table, false)
final_goal(2, on((block,3)), (block,1), false)
final_goal(2, on((block,3)), (block,2), false)
final_goal(2, on((block,3)), (block,4), false)
final_goal(2, on((block,3)), (block,5), false)
final_goal(2, on((block,3)), (block,6), false)
final_goal(2, on((block,3)), nothing, false)
final_goal(2, on((block,3)), puzzle_room_table, true)
final_goal(2, on((block,4)), (block,1), false)
final_goal(2, on((block,4)), (block,2), false)
final_goal(2, on((block,4)), (block,3), false)
final_goal(2, on((block,4)), (block,5), true)
final_goal(2, on((block,4)), (block,6), false)
final_goal(2, on((block,4)), nothing, false)
final_goal(2, on((block,4)), puzzle_room_table, false)
final_goal(2, on((block,5)), (block,1), false)
final_goal(2, on((block,5)), (block,2), false)
final_goal(2, on((block,5)), (block,3), false)
final_goal(2, on((block,5)), (block,4), false)
final_goal(2, on((block,5)), (block,6), true)
final_goal(2, on((block,5)), nothing, false)
final_goal(2, on((block,5)), puzzle_room_table, false)
final_goal(2, on((block,6)), (block,1), false)
final_goal(2, on((block,6)), (block,2), false)
final_goal(2, on((block,6)), (block,3), false)
final_goal(2, on((block,6)), (block,4), false)
final_goal(2, on((block,6)), (block,5), false)
final_goal(2, on((block,6)), nothing, false)
final_goal(2, on((block,6)), puzzle_room_table, true)
final_goal(2, tower_base((block,1)), false, true)
final_goal(2, tower_base((block,1)), true, false)
final_goal(2, tower_base((block,2)), false, true)
final_goal(2, tower_base((block,2)), true, false)
final_goal(2, tower_base((block,3)), false, false)
final_goal(2, tower_base((block,3)), true, true)
final_goal(2, tower_base((block,4)), false, true)
final_goal(2, tower_base((block,4)), true, false)
final_goal(2, tower_base((block,5)), false, true)
final_goal(2, tower_base((block,5)), true, false)
final_goal(2, tower_base((block,6)), false, false)
final_goal(2, tower_base((block,6)), true, true)
final_goal(2, unordered_tower((block,1)), false, true)
final_goal(2, unordered_tower((block,1)), true, false)
final_goal(2, unordered_tower((block,2)), false, true)
final_goal(2, unordered_tower((block,2)), true, false)
final_goal(2, unordered_tower((block,3)), false, true)
final_goal(2, unordered_tower((block,3)), true, false)
final_goal(2, unordered_tower((block,4)), false, true)
final_goal(2, unordered_tower((block,4)), true, false)
final_goal(2, unordered_tower((block,5)), false, true)
final_goal(2, unordered_tower((block,5)), true, false)
final_goal(2, unordered_tower((block,6)), false, true)
final_goal(2, unordered_tower((block,6)), true, false)

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.196053s.

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='current_last_sgoals(14, 28)', truth=True, inc_range=None), conversion = current_last_sgoals(14,28).

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 29: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[13-11-2021_23-39-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027641s with result Unsatisfiable.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.22369360000000071, Incremental time limit = None
Running cumulative time = 5.689781700000003, Cumulative time limit = 3600
Used memory = (RSS = 516.476562Mb, VMS = 525.781250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=29, start_step=28, end_step=29, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=4.652587899999997, solving_time=1.037193800000006, total_time=5.689781700000003, memory=Memory(rss=516.4765625, vms=525.78125), step_range=range(0, 30), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.1960525000000004, solving_time=0.027641100000000307, total_time=0.22369360000000071, memory=Memory(rss=516.4765625, vms=525.78125), step_range=range(29, 30), clingo_stats={'problem': {'lp': {'atoms': 76719.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 234508.0, 'bodies_tr': 234508.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5266.0, 'count_bodies_tr': 5266.0, 'sccs': 491.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9236.0, 'rules': 327570.0, 'rules_normal': 322577.0, 'rules_choice': 4587.0, 'rules_minimize': 58.0, 'rules_acyc': 0.0, 'rules_heuristic': 348.0, 'rules_tr': 327488.0, 'rules_tr_normal': 322577.0, 'rules_tr_choice': 4587.0, 'rules_tr_minimize': 58.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 266.0, 'eqs': 158482.0, 'eqs_atom': 31480.0, 'eqs_body': 7387.0, 'eqs_other': 119615.0}, 'lpStep': {'atoms': 2497.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8709.0, 'bodies_tr': 8709.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12634.0, 'rules_normal': 12468.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12634.0, 'rules_tr_normal': 12468.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5809.0, 'eqs_atom': 1115.0, 'eqs_body': 112.0, 'eqs_other': 4582.0}, 'generator': {'vars': 42510.0, 'vars_eliminated': 0.0, 'vars_frozen': 28223.0, 'constraints': 4266.0, 'constraints_binary': 99895.0, 'constraints_ternary': 19967.0, 'acyc_edges': 0.0, 'complexity': 124748.0}}, 'solving': {'solvers': {'choices': 10.0, 'conflicts': 15.0, 'conflicts_analyzed': 5.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 10.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5.0, 'distributed_sum_lbd': 10.0, 'integrated': 6.0, 'lemmas': 10.0, 'lits_learnt': 32.0, 'lemmas_binary': 5.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.046875, 'integrated_imps': 5.0, 'integrated_jumps': 4.0, 'guiding_paths_lits': 2569.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 5.0, 'lemmas_loop': 0.0, 'lemmas_other': 5.0, 'lits_conflict': 19.0, 'lits_loop': 0.0, 'lits_other': 13.0, 'jumps': {'jumps': 5.0, 'jumps_bounded': 1.0, 'levels': 8.0, 'levels_bounded': 2.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 29.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [30.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.22896575927734375, 'cpu': 0.25, 'solve': 0.00698089599609375, 'unsat': 0.00698089599609375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 5.902057647705078, 'cpu': 7.5625, 'solve': 0.7135467529296875, 'unsat': 0.35456085205078125, 'sat': 0.19041824340820312}, 'models': {'enumerated': 28.0, 'optimal': 14.0}, 'solving': {'solvers': {'choices': 26781.0, 'conflicts': 3100.0, 'conflicts_analyzed': 2875.0, 'restarts': 9.0, 'restarts_last': 142.0, 'extra': {'domain_choices': 4260.0, 'models': 28.0, 'models_level': 9557.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2582.0, 'distributed_sum_lbd': 6638.0, 'integrated': 14595.0, 'lemmas': 21345.0, 'lits_learnt': 476258.0, 'lemmas_binary': 2067.0, 'lemmas_ternary': 835.0, 'cpu_time': 2.46875, 'integrated_imps': 4631.0, 'integrated_jumps': 4562.0, 'guiding_paths_lits': 35152.0, 'guiding_paths': 321.0, 'splits': 0.0, 'lemmas_conflict': 2769.0, 'lemmas_loop': 5352.0, 'lemmas_other': 13224.0, 'lits_conflict': 78390.0, 'lits_loop': 41468.0, 'lits_other': 356400.0, 'jumps': {'jumps': 2875.0, 'jumps_bounded': 518.0, 'levels': 36981.0, 'levels_bounded': 31930.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =   None : Maximum =    100

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.233408s.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 30: original = External(symbol='seq_achieve_fgoals(28)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(28).

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.556781s with result Satisfiable.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.7901894000000027, Incremental time limit = None
Running cumulative time = 6.4799711000000055, Cumulative time limit = 3600
Used memory = (RSS = 524.738281Mb, VMS = 533.328125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 31
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.885996s, Solving = 1.593975s, Total = 6.479971s, Memory = (RSS = 524.738281Mb, VMS = 533.328125Mb)), Calls = 30
Final Model :: Total atoms = 16612, Cost = (40, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-38] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=30, start_step=29, end_step=30, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=4.8859961999999975, solving_time=1.593974900000008, total_time=6.4799711000000055, memory=Memory(rss=524.73828125, vms=533.328125), step_range=range(0, 31), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.23340830000000068, solving_time=0.556781100000002, total_time=0.7901894000000027, memory=Memory(rss=524.73828125, vms=533.328125), step_range=range(30, 31), clingo_stats={'problem': {'lp': {'atoms': 79222.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 243241.0, 'bodies_tr': 243241.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 5446.0, 'count_bodies_tr': 5446.0, 'sccs': 511.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 9672.0, 'rules': 340319.0, 'rules_normal': 335160.0, 'rules_choice': 4739.0, 'rules_minimize': 60.0, 'rules_acyc': 0.0, 'rules_heuristic': 360.0, 'rules_tr': 340237.0, 'rules_tr_normal': 335160.0, 'rules_tr_choice': 4739.0, 'rules_tr_minimize': 60.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 278.0, 'eqs': 164347.0, 'eqs_atom': 32604.0, 'eqs_body': 7498.0, 'eqs_other': 124245.0}, 'lpStep': {'atoms': 2503.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 8733.0, 'bodies_tr': 8733.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 180.0, 'count_bodies_tr': 180.0, 'sccs': 20.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 436.0, 'rules': 12749.0, 'rules_normal': 12583.0, 'rules_choice': 152.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 12749.0, 'rules_tr_normal': 12583.0, 'rules_tr_choice': 152.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 5865.0, 'eqs_atom': 1124.0, 'eqs_body': 111.0, 'eqs_other': 4630.0}, 'generator': {'vars': 44435.0, 'vars_eliminated': 0.0, 'vars_frozen': 29479.0, 'constraints': 4758.0, 'constraints_binary': 110994.0, 'constraints_ternary': 22415.0, 'acyc_edges': 0.0, 'complexity': 138855.0}}, 'solving': {'solvers': {'choices': 5421.0, 'conflicts': 1295.0, 'conflicts_analyzed': 1284.0, 'restarts': 5.0, 'restarts_last': 128.0, 'extra': {'domain_choices': 2381.0, 'models': 3.0, 'models_level': 1847.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1024.0, 'distributed_sum_lbd': 3181.0, 'integrated': 6132.0, 'lemmas': 9138.0, 'lits_learnt': 228577.0, 'lemmas_binary': 466.0, 'lemmas_ternary': 381.0, 'cpu_time': 1.53125, 'integrated_imps': 1045.0, 'integrated_jumps': 878.0, 'guiding_paths_lits': 2681.0, 'guiding_paths': 16.0, 'splits': 0.0, 'lemmas_conflict': 1283.0, 'lemmas_loop': 1892.0, 'lemmas_other': 5963.0, 'lits_conflict': 44235.0, 'lits_loop': 15626.0, 'lits_other': 168716.0, 'jumps': {'jumps': 1284.0, 'jumps_bounded': 12.0, 'levels': 2775.0, 'levels_bounded': 542.0, 'max': 215.0, 'max_executed': 215.0, 'max_bounded': 211.0}}}}, 'summary': {'call': 30.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [40.0, 0.0], 'lower': [40.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.7939376831054688, 'cpu': 1.78125, 'solve': 0.5366249084472656, 'unsat': 0.020940780639648438, 'sat': 0.13515281677246094}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 6.695995330810547, 'cpu': 9.34375, 'solve': 1.2501716613769531, 'unsat': 0.3755016326904297, 'sat': 0.32557106018066406}, 'models': {'enumerated': 31.0, 'optimal': 15.0}, 'solving': {'solvers': {'choices': 32202.0, 'conflicts': 4395.0, 'conflicts_analyzed': 4159.0, 'restarts': 14.0, 'restarts_last': 142.0, 'extra': {'domain_choices': 6641.0, 'models': 31.0, 'models_level': 11404.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 3606.0, 'distributed_sum_lbd': 9819.0, 'integrated': 20727.0, 'lemmas': 30483.0, 'lits_learnt': 704835.0, 'lemmas_binary': 2533.0, 'lemmas_ternary': 1216.0, 'cpu_time': 4.0, 'integrated_imps': 5676.0, 'integrated_jumps': 5440.0, 'guiding_paths_lits': 37833.0, 'guiding_paths': 337.0, 'splits': 0.0, 'lemmas_conflict': 4052.0, 'lemmas_loop': 7244.0, 'lemmas_other': 19187.0, 'lits_conflict': 122625.0, 'lits_loop': 57094.0, 'lits_other': 525116.0, 'jumps': {'jumps': 4159.0, 'jumps_bounded': 530.0, 'levels': 39756.0, 'levels_bounded': 32472.0, 'max': 653.0, 'max_executed': 653.0, 'max_bounded': 652.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-38] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{8: 19, 9: 20, 10: 21, 11: 23, 12: 25, 13: 28, 14: 30}

[13-11-2021_23-39-38] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 15 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[13-11-2021_23-39-38] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 14 was achieved successfully.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.154991s, Solving = 0.010858s, Total = 0.165849s, Memory = (RSS = 127.007812Mb, VMS = 114.789062Mb)
2 : Statistics :: Grounding = 0.168120s, Solving = 0.004367s, Total = 0.172487s, Memory = (RSS = 129.320312Mb, VMS = 117.980469Mb)
3 : Statistics :: Grounding = 0.146883s, Solving = 0.005220s, Total = 0.152104s, Memory = (RSS = 130.117188Mb, VMS = 118.230469Mb)
4 : Statistics :: Grounding = 0.134755s, Solving = 0.005940s, Total = 0.140694s, Memory = (RSS = 132.773438Mb, VMS = 122.027344Mb)
5 : Statistics :: Grounding = 0.147935s, Solving = 0.007046s, Total = 0.154981s, Memory = (RSS = 135.031250Mb, VMS = 124.128906Mb)
6 : Statistics :: Grounding = 0.131206s, Solving = 0.008216s, Total = 0.139422s, Memory = (RSS = 137.960938Mb, VMS = 126.074219Mb)
7 : Statistics :: Grounding = 0.126280s, Solving = 0.051589s, Total = 0.177869s, Memory = (RSS = 140.597656Mb, VMS = 128.792969Mb)
8 : Statistics :: Grounding = 0.148998s, Solving = 0.008540s, Total = 0.157538s, Memory = (RSS = 143.218750Mb, VMS = 130.707031Mb)
9 : Statistics :: Grounding = 0.153129s, Solving = 0.023768s, Total = 0.176897s, Memory = (RSS = 147.066406Mb, VMS = 135.027344Mb)
10 : Statistics :: Grounding = 0.146642s, Solving = 0.011354s, Total = 0.157996s, Memory = (RSS = 149.335938Mb, VMS = 136.753906Mb)
11 : Statistics :: Grounding = 0.147638s, Solving = 0.016987s, Total = 0.164625s, Memory = (RSS = 154.515625Mb, VMS = 142.714844Mb)
12 : Statistics :: Grounding = 0.171712s, Solving = 0.043588s, Total = 0.215300s, Memory = (RSS = 160.316406Mb, VMS = 148.664062Mb)
13 : Statistics :: Grounding = 0.164524s, Solving = 0.015040s, Total = 0.179563s, Memory = (RSS = 169.574219Mb, VMS = 160.292969Mb)
14 : Statistics :: Grounding = 0.169856s, Solving = 0.044132s, Total = 0.213988s, Memory = (RSS = 173.214844Mb, VMS = 162.851562Mb)
15 : Statistics :: Grounding = 0.168876s, Solving = 0.052225s, Total = 0.221101s, Memory = (RSS = 180.800781Mb, VMS = 170.242188Mb)
16 : Statistics :: Grounding = 0.159344s, Solving = 0.041931s, Total = 0.201275s, Memory = (RSS = 186.597656Mb, VMS = 175.218750Mb)
17 : Statistics :: Grounding = 0.172732s, Solving = 0.098540s, Total = 0.271272s, Memory = (RSS = 197.160156Mb, VMS = 188.519531Mb)
18 : Statistics :: Grounding = 0.165651s, Solving = 0.054461s, Total = 0.220111s, Memory = (RSS = 202.269531Mb, VMS = 192.921875Mb)
19 : Statistics :: Grounding = 0.184109s, Solving = 0.059215s, Total = 0.243324s, Memory = (RSS = 482.402344Mb, VMS = 490.683594Mb)
20 : Statistics :: Grounding = 0.125590s, Solving = 0.044699s, Total = 0.170290s, Memory = (RSS = 485.222656Mb, VMS = 493.269531Mb)
21 : Statistics :: Grounding = 0.145662s, Solving = 0.028899s, Total = 0.174562s, Memory = (RSS = 487.468750Mb, VMS = 495.031250Mb)
22 : Statistics :: Grounding = 0.170507s, Solving = 0.016649s, Total = 0.187156s, Memory = (RSS = 488.628906Mb, VMS = 495.636719Mb)
23 : Statistics :: Grounding = 0.164073s, Solving = 0.037768s, Total = 0.201841s, Memory = (RSS = 491.996094Mb, VMS = 498.933594Mb)
24 : Statistics :: Grounding = 0.164078s, Solving = 0.022175s, Total = 0.186253s, Memory = (RSS = 498.394531Mb, VMS = 512.347656Mb)
25 : Statistics :: Grounding = 0.159584s, Solving = 0.059629s, Total = 0.219213s, Memory = (RSS = 502.828125Mb, VMS = 515.816406Mb)
26 : Statistics :: Grounding = 0.159899s, Solving = 0.020939s, Total = 0.180838s, Memory = (RSS = 504.296875Mb, VMS = 516.027344Mb)
27 : Statistics :: Grounding = 0.203951s, Solving = 0.055415s, Total = 0.259366s, Memory = (RSS = 506.285156Mb, VMS = 517.179688Mb)
28 : Statistics :: Grounding = 0.199810s, Solving = 0.160365s, Total = 0.360175s, Memory = (RSS = 514.710938Mb, VMS = 525.218750Mb)
29 : Statistics :: Grounding = 0.196053s, Solving = 0.027641s, Total = 0.223694s, Memory = (RSS = 516.476562Mb, VMS = 525.781250Mb)
30 : Statistics :: Grounding = 0.233408s, Solving = 0.556781s, Total = 0.790189s, Memory = (RSS = 524.738281Mb, VMS = 533.328125Mb)

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 6.479971s due to: External generator exit.

[13-11-2021_23-39-38] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 2.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 14, Last requested goal index = 14 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.885996s, Solving = 1.593975s, Total = 6.479971s, Memory = (RSS = 524.738281Mb, VMS = 533.328125Mb)), Calls = 30
Model :: Total atoms = 16612, Cost = (40, 0), Optimality proven = False, Number = 3, Thread ID = 2, Model type = ModelType.StableModel

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 30 :: Actions = 49                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_1,puzzle_room_door)
        talos : actuate(manipulator_arm_2,store_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_1,puzzle_room_door_handle_outer)
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 8:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 9:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 2] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,6))
        talos : grasp(manipulator_arm_2,(block,5))
Step 10:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
Step 11:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 12:
    Current Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 3] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 13:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 14:
    Current Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 4] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : put(manipulator_arm_1,(block,6),puzzle_room_table)
Step 15:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,6))
Step 16:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 6] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
        talos : put(manipulator_arm_2,(block,5),(block,6))
Step 17:
    Current Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 7] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 7] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
        talos : release(manipulator_arm_2,(block,5))
Step 18:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 8] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,2))
        talos : release(manipulator_arm_1,(block,3))
Step 19:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 9] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 9] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
        talos : put(manipulator_arm_2,(block,2),(block,3))
Step 20:
    Current Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 10] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 10] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
        talos : lift(manipulator_arm_1,(block,1))
        talos : release(manipulator_arm_2,(block,2))
Step 21:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
        talos : configure(manipulator_arm_2,retracted)
        talos : lift(manipulator_arm_1,(block,1))
Step 22:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 23:
    Current Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 11] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 24:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 25:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 26:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 27:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 28:
    Current Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 13] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 29:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
        talos : configure(manipulator_arm_2,extended)
Step 30:
    Current Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 14] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 14] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))
        talos : put(manipulator_arm_2,(block,4),(block,5))

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=17, total_plan_length=30, step_range=range(17, 31)

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 35, Actions = 44
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Dividing abstract plan:
Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.517s (Gro =   4.918s, Sea =   1.600s), Expan (1.86, 1.91) (Dev = (0.90, 1.41), Bal = (0.48, 0.74))

[13-11-2021_23-39-39] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=13, start_step=17, blend=Blend(left=0, right=0.2)

[13-11-2021_23-39-39] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=1, small_group_size=6, large_group_size=7

[13-11-2021_23-39-39] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=23, blend=Blend(left=0, right=1), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Division scenario generated:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.517s (Gro =   4.918s, Sea =   1.600s), Expan (1.86, 1.91) (Dev = (0.90, 1.41), Bal = (0.48, 0.74))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 3:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.517s (Gro =   4.918s, Sea =   1.600s), Expan (1.86, 1.91) (Dev = (0.90, 1.41), Bal = (0.48, 0.74))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [18-24]

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [18-24], problem number = 3, increment number = 3

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 18)
	('last_sgoals', 24)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 18
last_sgoals = 24
start_step = 35
is_initial = False
is_final = False
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 41

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [18-24] : Minimum search length bound = disabled with value = 41

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = True, chosen = True

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,2)', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,2))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 20})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'lift(manipulator_arm_1,(block,1))', 'F': 'on((block,1))', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 24})

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 13 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), (block,2), 18).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19).
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 19).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 20).
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 20).
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 20).
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 21).
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 21).
sub_goal(2, talos, move(hallway), in(talos), hallway, 22).
sub_goal(2, talos, move(store_room), in(talos), store_room, 23).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24).

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000027CAA599D10>

[13-11-2021_23-39-39] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-39-39] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027CAA599D10> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 30)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 32)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 35)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,5)), 35)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-39-39] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027CAA599D10> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), (block,6), 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), (block,6), 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-39-39] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 35)
	('last_sgoals', 24)
	('finalise', False)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('first_sgoals', 18)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000027CAA599D10>)

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None)

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [36]:
Running step bounds   | Previous =     35 : Current =     36
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(36)]), ('state_module', [Number(36), Number(0)]), ('plan_module', [Number(36), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.298932s.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 36: original = External(symbol='current_last_sgoals(18, 36)', truth=True, inc_range=None), conversion = current_last_sgoals(18,36).

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055622s with result Unsatisfiable.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [36]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.35455429999999666, Incremental time limit = None
Running cumulative time = 13.823741199999988, Cumulative time limit = 3600
Used memory = (RSS = 444.945312Mb, VMS = 452.570312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=36, start_step=35, end_step=36, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=10.065908800000004, solving_time=3.757832399999984, total_time=13.823741199999988, memory=Memory(rss=475.96875, vms=485.22265625), step_range=range(0, 37), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2989324999999994, solving_time=0.05562179999999728, total_time=0.35455429999999666, memory=Memory(rss=444.9453125, vms=452.5703125), step_range=range(36, 37), clingo_stats={'problem': {'lp': {'atoms': 143333.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 444885.0, 'bodies_tr': 444885.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7296.0, 'count_bodies_tr': 7296.0, 'sccs': 857.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18361.0, 'rules': 639987.0, 'rules_normal': 632115.0, 'rules_choice': 7368.0, 'rules_minimize': 72.0, 'rules_acyc': 0.0, 'rules_heuristic': 432.0, 'rules_tr': 639902.0, 'rules_tr_normal': 632115.0, 'rules_tr_choice': 7368.0, 'rules_tr_minimize': 72.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 347.0, 'eqs': 333122.0, 'eqs_atom': 67898.0, 'eqs_body': 8429.0, 'eqs_other': 256795.0}, 'lpStep': {'atoms': 6670.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12871.0, 'bodies_tr': 12871.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 587.0, 'rules': 22957.0, 'rules_normal': 22748.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22956.0, 'rules_tr_normal': 22748.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 11.0, 'eqs': 9959.0, 'eqs_atom': 2223.0, 'eqs_body': 543.0, 'eqs_other': 7193.0}, 'generator': {'vars': 80498.0, 'vars_eliminated': 0.0, 'vars_frozen': 49234.0, 'constraints': 707.0, 'constraints_binary': 64538.0, 'constraints_ternary': 3564.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 0.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 527.0, 'guiding_paths': 1.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 36.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.5371189117431641, 'cpu': 0.515625, 'solve': 0.0109710693359375, 'unsat': 0.0109710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 14.35400390625, 'cpu': 21.75, 'solve': 2.9725570678710938, 'unsat': 0.8914623260498047, 'sat': 0.5734329223632812}, 'models': {'enumerated': 62.0, 'optimal': 17.0}, 'solving': {'solvers': {'choices': 56826.0, 'conflicts': 7315.0, 'conflicts_analyzed': 6931.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 5976.0, 'models': 62.0, 'models_level': 26922.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5731.0, 'distributed_sum_lbd': 13807.0, 'integrated': 31801.0, 'lemmas': 46437.0, 'lits_learnt': 4787625.0, 'lemmas_binary': 3949.0, 'lemmas_ternary': 2238.0, 'cpu_time': 10.5625, 'integrated_imps': 10184.0, 'integrated_jumps': 8697.0, 'guiding_paths_lits': 56563.0, 'guiding_paths': 486.0, 'splits': 0.0, 'lemmas_conflict': 6843.0, 'lemmas_loop': 10554.0, 'lemmas_other': 29040.0, 'lits_conflict': 956671.0, 'lits_loop': 89105.0, 'lits_other': 3741849.0, 'jumps': {'jumps': 6931.0, 'jumps_bounded': 1073.0, 'levels': 209242.0, 'levels_bounded': 196945.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [37]:
Running step bounds   | Previous =     36 : Current =     37
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(37), Number(0)]), ('plan_module', [Number(37), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.196085s.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.089393s with result Satisfiable.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [37]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.28547710000000137, Incremental time limit = None
Running cumulative time = 14.10921829999999, Cumulative time limit = 3600
Used memory = (RSS = 453.613281Mb, VMS = 460.878906Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 64
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.261993s, Solving = 3.847225s, Total = 14.109218s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)), Calls = 37
Final Model :: Total atoms = 23532, Cost = (42, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=37, start_step=36, end_step=37, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.261993300000006, solving_time=3.847224999999984, total_time=14.10921829999999, memory=Memory(rss=475.96875, vms=485.22265625), step_range=range(0, 38), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19608450000000133, solving_time=0.08939260000000004, total_time=0.28547710000000137, memory=Memory(rss=453.61328125, vms=460.87890625), step_range=range(37, 38), clingo_stats={'problem': {'lp': {'atoms': 145554.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 455312.0, 'bodies_tr': 455312.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7497.0, 'count_bodies_tr': 7497.0, 'sccs': 859.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18398.0, 'rules': 656481.0, 'rules_normal': 648400.0, 'rules_choice': 7563.0, 'rules_minimize': 74.0, 'rules_acyc': 0.0, 'rules_heuristic': 444.0, 'rules_tr': 656385.0, 'rules_tr_normal': 648400.0, 'rules_tr_choice': 7563.0, 'rules_tr_minimize': 74.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 348.0, 'eqs': 338562.0, 'eqs_atom': 68665.0, 'eqs_body': 8883.0, 'eqs_other': 261014.0}, 'lpStep': {'atoms': 2221.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10427.0, 'bodies_tr': 10427.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 2.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 37.0, 'rules': 16494.0, 'rules_normal': 16285.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 16483.0, 'rules_tr_normal': 16285.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 5440.0, 'eqs_atom': 767.0, 'eqs_body': 454.0, 'eqs_other': 4219.0}, 'generator': {'vars': 80980.0, 'vars_eliminated': 0.0, 'vars_frozen': 49581.0, 'constraints': 784.0, 'constraints_binary': 69372.0, 'constraints_ternary': 4071.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 6135.0, 'conflicts': 52.0, 'conflicts_analyzed': 51.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 118.0, 'models': 2.0, 'models_level': 1689.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 50.0, 'distributed_sum_lbd': 55.0, 'integrated': 122.0, 'lemmas': 172.0, 'lits_learnt': 236.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 21.0, 'cpu_time': 0.09375, 'integrated_imps': 116.0, 'integrated_jumps': 1728.0, 'guiding_paths_lits': 3871.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 49.0, 'lemmas_loop': 1.0, 'lemmas_other': 122.0, 'lits_conflict': 58.0, 'lits_loop': 2.0, 'lits_other': 176.0, 'jumps': {'jumps': 51.0, 'jumps_bounded': 13.0, 'levels': 5592.0, 'levels_bounded': 4011.0, 'max': 827.0, 'max_executed': 262.0, 'max_bounded': 619.0}}}}, 'summary': {'call': 37.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [42.0, 0.0], 'lower': [42.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.29309844970703125, 'cpu': 0.328125, 'solve': 0.06083869934082031, 'unsat': 0.027923583984375, 'sat': 0.0049896240234375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 14.647102355957031, 'cpu': 22.078125, 'solve': 3.033395767211914, 'unsat': 0.9193859100341797, 'sat': 0.5784225463867188}, 'models': {'enumerated': 64.0, 'optimal': 18.0}, 'solving': {'solvers': {'choices': 62961.0, 'conflicts': 7367.0, 'conflicts_analyzed': 6982.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 6094.0, 'models': 64.0, 'models_level': 28611.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5781.0, 'distributed_sum_lbd': 13862.0, 'integrated': 31923.0, 'lemmas': 46609.0, 'lits_learnt': 4787861.0, 'lemmas_binary': 3950.0, 'lemmas_ternary': 2259.0, 'cpu_time': 10.65625, 'integrated_imps': 10300.0, 'integrated_jumps': 10425.0, 'guiding_paths_lits': 60434.0, 'guiding_paths': 493.0, 'splits': 0.0, 'lemmas_conflict': 6892.0, 'lemmas_loop': 10555.0, 'lemmas_other': 29162.0, 'lits_conflict': 956729.0, 'lits_loop': 89107.0, 'lits_other': 3742025.0, 'jumps': {'jumps': 6982.0, 'jumps_bounded': 1086.0, 'levels': 214834.0, 'levels_bounded': 200956.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37}

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 19 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 2 ( 28.57% solved)

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None)

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 19, step = 37]:
sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19)
sub_goal(2, talos, put(manipulator_arm_2,(block,2),(block,3)), on((block,2)), (block,3), 19)

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 37:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [38]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(0)]), ('plan_module', [Number(38), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.193223s.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 38: original = External(symbol='current_last_sgoals(19, 37)', truth=True, inc_range=None), conversion = current_last_sgoals(19,37).

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.088434s with result Satisfiable.

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [38]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.28165759999999906, Incremental time limit = None
Running cumulative time = 14.390875899999989, Cumulative time limit = 3600
Used memory = (RSS = 458.750000Mb, VMS = 465.125000Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 66
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.455217s, Solving = 3.935659s, Total = 14.390876s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)), Calls = 38
Final Model :: Total atoms = 23926, Cost = (45, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=38, start_step=37, end_step=38, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.455216600000005, solving_time=3.9356592999999833, total_time=14.390875899999989, memory=Memory(rss=475.96875, vms=485.22265625), step_range=range(0, 39), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.19322329999999965, solving_time=0.08843429999999941, total_time=0.28165759999999906, memory=Memory(rss=458.75, vms=465.125), step_range=range(38, 39), clingo_stats={'problem': {'lp': {'atoms': 147950.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 465885.0, 'bodies_tr': 465885.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7698.0, 'count_bodies_tr': 7698.0, 'sccs': 882.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 18704.0, 'rules': 673490.0, 'rules_normal': 665200.0, 'rules_choice': 7758.0, 'rules_minimize': 76.0, 'rules_acyc': 0.0, 'rules_heuristic': 456.0, 'rules_tr': 673387.0, 'rules_tr_normal': 665200.0, 'rules_tr_choice': 7758.0, 'rules_tr_minimize': 76.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 353.0, 'eqs': 344840.0, 'eqs_atom': 69354.0, 'eqs_body': 9212.0, 'eqs_other': 266274.0}, 'lpStep': {'atoms': 2396.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10573.0, 'bodies_tr': 10573.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 306.0, 'rules': 17009.0, 'rules_normal': 16800.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 17002.0, 'rules_tr_normal': 16800.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 6278.0, 'eqs_atom': 689.0, 'eqs_body': 329.0, 'eqs_other': 5260.0}, 'generator': {'vars': 82183.0, 'vars_eliminated': 0.0, 'vars_frozen': 50382.0, 'constraints': 951.0, 'constraints_binary': 73708.0, 'constraints_ternary': 3733.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 2636.0, 'conflicts': 26.0, 'conflicts_analyzed': 25.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 24.0, 'models': 2.0, 'models_level': 1739.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 34.0, 'distributed_sum_lbd': 43.0, 'integrated': 0.0, 'lemmas': 61.0, 'lits_learnt': 178.0, 'lemmas_binary': 9.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4053.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 25.0, 'lemmas_loop': 36.0, 'lemmas_other': 0.0, 'lits_conflict': 25.0, 'lits_loop': 153.0, 'lits_other': 0.0, 'jumps': {'jumps': 25.0, 'jumps_bounded': 0.0, 'levels': 25.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 38.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [45.0, 0.0], 'lower': [45.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.2892284393310547, 'cpu': 0.359375, 'solve': 0.0578460693359375, 'unsat': 0.023912429809570312, 'sat': 0.0049877166748046875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 14.936330795288086, 'cpu': 22.4375, 'solve': 3.0912418365478516, 'unsat': 0.94329833984375, 'sat': 0.5834102630615234}, 'models': {'enumerated': 66.0, 'optimal': 19.0}, 'solving': {'solvers': {'choices': 65597.0, 'conflicts': 7393.0, 'conflicts_analyzed': 7007.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 6118.0, 'models': 66.0, 'models_level': 30350.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5815.0, 'distributed_sum_lbd': 13905.0, 'integrated': 31923.0, 'lemmas': 46670.0, 'lits_learnt': 4788039.0, 'lemmas_binary': 3959.0, 'lemmas_ternary': 2259.0, 'cpu_time': 10.78125, 'integrated_imps': 10300.0, 'integrated_jumps': 10425.0, 'guiding_paths_lits': 64487.0, 'guiding_paths': 500.0, 'splits': 0.0, 'lemmas_conflict': 6917.0, 'lemmas_loop': 10591.0, 'lemmas_other': 29162.0, 'lits_conflict': 956754.0, 'lits_loop': 89260.0, 'lits_other': 3742025.0, 'jumps': {'jumps': 7007.0, 'jumps_bounded': 1086.0, 'levels': 214859.0, 'levels_bounded': 200956.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38}

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 20 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 3 ( 42.86% solved)

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None)

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 20, step = 38]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 20)
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 20)
sub_goal(2, talos, release(manipulator_arm_2,(block,2)), grasping(manipulator_arm_2), nothing, 20)

[13-11-2021_23-39-40] DEBUG :: ASH Planner Main #1 >> Reaction at search length 38:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [39]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(0)]), ('plan_module', [Number(39), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.262832s.

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 39: original = External(symbol='current_last_sgoals(20, 38)', truth=True, inc_range=None), conversion = current_last_sgoals(20,38).

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.073584s with result Satisfiable.

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [39]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.33641550000000464, Incremental time limit = None
Running cumulative time = 14.727291399999993, Cumulative time limit = 3600
Used memory = (RSS = 466.332031Mb, VMS = 472.316406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 67
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.718048s, Solving = 4.009243s, Total = 14.727291s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)), Calls = 39
Final Model :: Total atoms = 24321, Cost = (47, 0), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=39, start_step=38, end_step=39, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.718048200000007, solving_time=4.009243199999986, total_time=14.727291399999993, memory=Memory(rss=475.96875, vms=485.22265625), step_range=range(0, 40), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26283160000000194, solving_time=0.0735839000000027, total_time=0.33641550000000464, memory=Memory(rss=466.33203125, vms=472.31640625), step_range=range(39, 40), clingo_stats={'problem': {'lp': {'atoms': 151328.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 477547.0, 'bodies_tr': 477547.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 7899.0, 'count_bodies_tr': 7899.0, 'sccs': 905.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19023.0, 'rules': 692023.0, 'rules_normal': 683524.0, 'rules_choice': 7953.0, 'rules_minimize': 78.0, 'rules_acyc': 0.0, 'rules_heuristic': 468.0, 'rules_tr': 691916.0, 'rules_tr_normal': 683524.0, 'rules_tr_choice': 7953.0, 'rules_tr_minimize': 78.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 361.0, 'eqs': 356201.0, 'eqs_atom': 70243.0, 'eqs_body': 9490.0, 'eqs_other': 276468.0}, 'lpStep': {'atoms': 3378.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11662.0, 'bodies_tr': 11662.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 319.0, 'rules': 18533.0, 'rules_normal': 18324.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 18529.0, 'rules_tr_normal': 18324.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 11361.0, 'eqs_atom': 889.0, 'eqs_body': 278.0, 'eqs_other': 10194.0}, 'generator': {'vars': 83682.0, 'vars_eliminated': 0.0, 'vars_frozen': 51326.0, 'constraints': 1241.0, 'constraints_binary': 82451.0, 'constraints_ternary': 4926.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 1443.0, 'conflicts': 1.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 22.0, 'models': 1.0, 'models_level': 906.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 15.0, 'distributed_sum_lbd': 30.0, 'integrated': 60.0, 'lemmas': 27.0, 'lits_learnt': 138.0, 'lemmas_binary': 15.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4235.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 27.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 138.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 39.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [47.0, 0.0], 'lower': [47.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.3420867919921875, 'cpu': 0.40625, 'solve': 0.029893875122070312, 'unsat': 0.023935317993164062, 'sat': 0.00595855712890625}, 'models': {'enumerated': 1.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.278417587280273, 'cpu': 22.84375, 'solve': 3.121135711669922, 'unsat': 0.9672336578369141, 'sat': 0.5893688201904297}, 'models': {'enumerated': 67.0, 'optimal': 20.0}, 'solving': {'solvers': {'choices': 67040.0, 'conflicts': 7394.0, 'conflicts_analyzed': 7007.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 6140.0, 'models': 67.0, 'models_level': 31256.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5830.0, 'distributed_sum_lbd': 13935.0, 'integrated': 31983.0, 'lemmas': 46697.0, 'lits_learnt': 4788177.0, 'lemmas_binary': 3974.0, 'lemmas_ternary': 2259.0, 'cpu_time': 10.890625, 'integrated_imps': 10300.0, 'integrated_jumps': 10425.0, 'guiding_paths_lits': 68722.0, 'guiding_paths': 507.0, 'splits': 0.0, 'lemmas_conflict': 6917.0, 'lemmas_loop': 10618.0, 'lemmas_other': 29162.0, 'lits_conflict': 956754.0, 'lits_loop': 89398.0, 'lits_other': 3742025.0, 'jumps': {'jumps': 7007.0, 'jumps_bounded': 1086.0, 'levels': 214859.0, 'levels_bounded': 200956.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39}

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 21 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 4 ( 57.14% solved)

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None)

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 21, step = 39]:
sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 21)
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 21)
sub_goal(2, talos, lift(manipulator_arm_1,(block,1)), on((block,1)), nothing, 21)

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 39:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [40]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(0)]), ('plan_module', [Number(40), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267634s.

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 40: original = External(symbol='current_last_sgoals(21, 39)', truth=True, inc_range=None), conversion = current_last_sgoals(21,39).

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.099588s with result Satisfiable.

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [40]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.36722180000000293, Incremental time limit = None
Running cumulative time = 15.094513199999996, Cumulative time limit = 3600
Used memory = (RSS = 475.867188Mb, VMS = 480.472656Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 69
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 10.985682s, Solving = 4.108831s, Total = 15.094513s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)), Calls = 40
Final Model :: Total atoms = 24718, Cost = (49, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=40, start_step=39, end_step=40, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=10.98568200000001, solving_time=4.108831199999987, total_time=15.094513199999996, memory=Memory(rss=475.96875, vms=485.22265625), step_range=range(0, 41), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.26763380000000225, solving_time=0.09958800000000068, total_time=0.36722180000000293, memory=Memory(rss=475.8671875, vms=480.47265625), step_range=range(40, 41), clingo_stats={'problem': {'lp': {'atoms': 154742.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 489876.0, 'bodies_tr': 489876.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8100.0, 'count_bodies_tr': 8100.0, 'sccs': 928.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19457.0, 'rules': 712336.0, 'rules_normal': 703628.0, 'rules_choice': 8148.0, 'rules_minimize': 80.0, 'rules_acyc': 0.0, 'rules_heuristic': 480.0, 'rules_tr': 712227.0, 'rules_tr_normal': 703628.0, 'rules_tr_choice': 8148.0, 'rules_tr_minimize': 80.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 371.0, 'eqs': 364377.0, 'eqs_atom': 71980.0, 'eqs_body': 9734.0, 'eqs_other': 282663.0}, 'lpStep': {'atoms': 3414.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12329.0, 'bodies_tr': 12329.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 20313.0, 'rules_normal': 20104.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 20311.0, 'rules_tr_normal': 20104.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8176.0, 'eqs_atom': 1737.0, 'eqs_body': 244.0, 'eqs_other': 6195.0}, 'generator': {'vars': 85713.0, 'vars_eliminated': 0.0, 'vars_frozen': 52575.0, 'constraints': 1724.0, 'constraints_binary': 96350.0, 'constraints_ternary': 7761.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 3166.0, 'conflicts': 22.0, 'conflicts_analyzed': 17.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 24.0, 'models': 2.0, 'models_level': 1891.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 19.0, 'integrated': 2.0, 'lemmas': 172.0, 'lits_learnt': 1291.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 2.0, 'integrated_jumps': 369.0, 'guiding_paths_lits': 4417.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 17.0, 'lemmas_loop': 153.0, 'lemmas_other': 2.0, 'lits_conflict': 70.0, 'lits_loop': 1113.0, 'lits_other': 108.0, 'jumps': {'jumps': 17.0, 'jumps_bounded': 0.0, 'levels': 25.0, 'levels_bounded': 0.0, 'max': 9.0, 'max_executed': 9.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 40.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [49.0, 0.0], 'lower': [49.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.37351036071777344, 'cpu': 0.4375, 'solve': 0.068817138671875, 'unsat': 0.030918121337890625, 'sat': 0.005985260009765625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 15.651927947998047, 'cpu': 23.28125, 'solve': 3.189952850341797, 'unsat': 0.9981517791748047, 'sat': 0.5953540802001953}, 'models': {'enumerated': 69.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 70206.0, 'conflicts': 7416.0, 'conflicts_analyzed': 7024.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 6164.0, 'models': 69.0, 'models_level': 33147.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5847.0, 'distributed_sum_lbd': 13954.0, 'integrated': 31985.0, 'lemmas': 46869.0, 'lits_learnt': 4789468.0, 'lemmas_binary': 3974.0, 'lemmas_ternary': 2259.0, 'cpu_time': 11.015625, 'integrated_imps': 10302.0, 'integrated_jumps': 10794.0, 'guiding_paths_lits': 73139.0, 'guiding_paths': 515.0, 'splits': 0.0, 'lemmas_conflict': 6934.0, 'lemmas_loop': 10771.0, 'lemmas_other': 29164.0, 'lits_conflict': 956824.0, 'lits_loop': 90511.0, 'lits_other': 3742133.0, 'jumps': {'jumps': 7024.0, 'jumps_bounded': 1086.0, 'levels': 214884.0, 'levels_bounded': 200956.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40}

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 22 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 5 ( 71.43% solved)

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None)

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 22, step = 40]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 22)

[13-11-2021_23-39-41] DEBUG :: ASH Planner Main #1 >> Reaction at search length 40:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [41]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(0)]), ('plan_module', [Number(41), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.289562s.

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 41: original = External(symbol='current_last_sgoals(22, 40)', truth=True, inc_range=None), conversion = current_last_sgoals(22,40).

[13-11-2021_23-39-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039220s with result Unsatisfiable.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [41]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3287824999999991, Incremental time limit = None
Running cumulative time = 15.423295699999995, Cumulative time limit = 3600
Used memory = (RSS = 479.109375Mb, VMS = 482.339844Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=41, start_step=40, end_step=41, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=11.27524430000001, solving_time=4.148051399999986, total_time=15.423295699999995, memory=Memory(rss=479.109375, vms=485.22265625), step_range=range(0, 42), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.28956230000000005, solving_time=0.03922019999999904, total_time=0.3287824999999991, memory=Memory(rss=479.109375, vms=482.33984375), step_range=range(41, 42), clingo_stats={'problem': {'lp': {'atoms': 158432.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 502590.0, 'bodies_tr': 502590.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8301.0, 'count_bodies_tr': 8301.0, 'sccs': 951.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 19891.0, 'rules': 733399.0, 'rules_normal': 724482.0, 'rules_choice': 8343.0, 'rules_minimize': 82.0, 'rules_acyc': 0.0, 'rules_heuristic': 492.0, 'rules_tr': 733288.0, 'rules_tr_normal': 724482.0, 'rules_tr_choice': 8343.0, 'rules_tr_minimize': 82.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 381.0, 'eqs': 373120.0, 'eqs_atom': 73842.0, 'eqs_body': 9988.0, 'eqs_other': 289290.0}, 'lpStep': {'atoms': 3690.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12714.0, 'bodies_tr': 12714.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 23.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 434.0, 'rules': 21063.0, 'rules_normal': 20854.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21061.0, 'rules_tr_normal': 20854.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 10.0, 'eqs': 8743.0, 'eqs_atom': 1862.0, 'eqs_body': 254.0, 'eqs_other': 6627.0}, 'generator': {'vars': 87808.0, 'vars_eliminated': 0.0, 'vars_frozen': 53846.0, 'constraints': 2211.0, 'constraints_binary': 109312.0, 'constraints_ternary': 10426.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 13.0, 'lits_learnt': 117.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4599.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 13.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 117.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 41.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.3348274230957031, 'cpu': 0.4375, 'solve': 0.007955551147460938, 'unsat': 0.007955551147460938, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 15.98675537109375, 'cpu': 23.71875, 'solve': 3.197908401489258, 'unsat': 1.0061073303222656, 'sat': 0.5953540802001953}, 'models': {'enumerated': 69.0, 'optimal': 21.0}, 'solving': {'solvers': {'choices': 70206.0, 'conflicts': 7423.0, 'conflicts_analyzed': 7024.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 6164.0, 'models': 69.0, 'models_level': 33147.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5847.0, 'distributed_sum_lbd': 13954.0, 'integrated': 31985.0, 'lemmas': 46882.0, 'lits_learnt': 4789585.0, 'lemmas_binary': 3974.0, 'lemmas_ternary': 2259.0, 'cpu_time': 11.125, 'integrated_imps': 10302.0, 'integrated_jumps': 10794.0, 'guiding_paths_lits': 77738.0, 'guiding_paths': 522.0, 'splits': 0.0, 'lemmas_conflict': 6934.0, 'lemmas_loop': 10784.0, 'lemmas_other': 29164.0, 'lits_conflict': 956824.0, 'lits_loop': 90628.0, 'lits_other': 3742133.0, 'jumps': {'jumps': 7024.0, 'jumps_bounded': 1086.0, 'levels': 214884.0, 'levels_bounded': 200956.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 41:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [42]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(0)]), ('plan_module', [Number(42), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310618s.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122120s with result Satisfiable.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [42]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4327380000000005, Incremental time limit = None
Running cumulative time = 15.856033699999996, Cumulative time limit = 3600
Used memory = (RSS = 490.343750Mb, VMS = 492.781250Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 71
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.585862s, Solving = 4.270171s, Total = 15.856034s, Memory = (RSS = 490.343750Mb, VMS = 492.781250Mb)), Calls = 42
Final Model :: Total atoms = 25502, Cost = (51, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=42, start_step=41, end_step=42, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=11.58586220000001, solving_time=4.270171499999986, total_time=15.856033699999996, memory=Memory(rss=490.34375, vms=492.78125), step_range=range(0, 43), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.31061790000000045, solving_time=0.12212010000000006, total_time=0.4327380000000005, memory=Memory(rss=490.34375, vms=492.78125), step_range=range(42, 43), clingo_stats={'problem': {'lp': {'atoms': 162138.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 515661.0, 'bodies_tr': 515661.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8502.0, 'count_bodies_tr': 8502.0, 'sccs': 976.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 20485.0, 'rules': 755183.0, 'rules_normal': 746057.0, 'rules_choice': 8538.0, 'rules_minimize': 84.0, 'rules_acyc': 0.0, 'rules_heuristic': 504.0, 'rules_tr': 755072.0, 'rules_tr_normal': 746057.0, 'rules_tr_choice': 8538.0, 'rules_tr_minimize': 84.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 393.0, 'eqs': 382128.0, 'eqs_atom': 75702.0, 'eqs_body': 10063.0, 'eqs_other': 296363.0}, 'lpStep': {'atoms': 3706.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13071.0, 'bodies_tr': 13071.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 21784.0, 'rules_normal': 21575.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21784.0, 'rules_tr_normal': 21575.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9008.0, 'eqs_atom': 1860.0, 'eqs_body': 75.0, 'eqs_other': 7073.0}, 'generator': {'vars': 90436.0, 'vars_eliminated': 0.0, 'vars_frozen': 55448.0, 'constraints': 2852.0, 'constraints_binary': 127442.0, 'constraints_ternary': 14398.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 3522.0, 'conflicts': 176.0, 'conflicts_analyzed': 164.0, 'restarts': 0.0, 'restarts_last': 32.0, 'extra': {'domain_choices': 324.0, 'models': 2.0, 'models_level': 2057.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 139.0, 'distributed_sum_lbd': 351.0, 'integrated': 802.0, 'lemmas': 1216.0, 'lits_learnt': 21016.0, 'lemmas_binary': 64.0, 'lemmas_ternary': 41.0, 'cpu_time': 0.234375, 'integrated_imps': 316.0, 'integrated_jumps': 337.0, 'guiding_paths_lits': 4781.0, 'guiding_paths': 12.0, 'splits': 0.0, 'lemmas_conflict': 152.0, 'lemmas_loop': 382.0, 'lemmas_other': 682.0, 'lits_conflict': 4898.0, 'lits_loop': 2777.0, 'lits_other': 13341.0, 'jumps': {'jumps': 164.0, 'jumps_bounded': 39.0, 'levels': 3085.0, 'levels_bounded': 2830.0, 'max': 755.0, 'max_executed': 755.0, 'max_bounded': 754.0}}}}, 'summary': {'call': 42.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [51.0, 0.0], 'lower': [51.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.43848419189453125, 'cpu': 0.578125, 'solve': 0.08428955078125, 'unsat': 0.037899017333984375, 'sat': 0.018466949462890625}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 16.42523956298828, 'cpu': 24.296875, 'solve': 3.282197952270508, 'unsat': 1.04400634765625, 'sat': 0.6138210296630859}, 'models': {'enumerated': 71.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 73728.0, 'conflicts': 7599.0, 'conflicts_analyzed': 7188.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 6488.0, 'models': 71.0, 'models_level': 35204.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5986.0, 'distributed_sum_lbd': 14305.0, 'integrated': 32787.0, 'lemmas': 48098.0, 'lits_learnt': 4810601.0, 'lemmas_binary': 4038.0, 'lemmas_ternary': 2300.0, 'cpu_time': 11.359375, 'integrated_imps': 10618.0, 'integrated_jumps': 11131.0, 'guiding_paths_lits': 82519.0, 'guiding_paths': 534.0, 'splits': 0.0, 'lemmas_conflict': 7086.0, 'lemmas_loop': 11166.0, 'lemmas_other': 29846.0, 'lits_conflict': 961722.0, 'lits_loop': 93405.0, 'lits_other': 3755474.0, 'jumps': {'jumps': 7188.0, 'jumps_bounded': 1125.0, 'levels': 217969.0, 'levels_bounded': 203786.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42}

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 23 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 6 ( 85.71% solved)

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None)

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 23, step = 42]:
sub_goal(2, talos, move(store_room), in(talos), store_room, 23)

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 42:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [43]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(0)]), ('plan_module', [Number(43), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279074s.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 43: original = External(symbol='current_last_sgoals(23, 42)', truth=True, inc_range=None), conversion = current_last_sgoals(23,42).

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046040s with result Unsatisfiable.

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [43]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.32511349999999695, Incremental time limit = None
Running cumulative time = 16.18114719999999, Cumulative time limit = 3600
Used memory = (RSS = 492.800781Mb, VMS = 493.933594Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=43, start_step=42, end_step=43, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=11.864935900000011, solving_time=4.316211299999981, total_time=16.18114719999999, memory=Memory(rss=492.80078125, vms=493.93359375), step_range=range(0, 44), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2790737000000014, solving_time=0.04603979999999552, total_time=0.32511349999999695, memory=Memory(rss=492.80078125, vms=493.93359375), step_range=range(43, 44), clingo_stats={'problem': {'lp': {'atoms': 165883.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 528941.0, 'bodies_tr': 528941.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8703.0, 'count_bodies_tr': 8703.0, 'sccs': 1001.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21079.0, 'rules': 777453.0, 'rules_normal': 768118.0, 'rules_choice': 8733.0, 'rules_minimize': 86.0, 'rules_acyc': 0.0, 'rules_heuristic': 516.0, 'rules_tr': 777342.0, 'rules_tr_normal': 768118.0, 'rules_tr_choice': 8733.0, 'rules_tr_minimize': 86.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 405.0, 'eqs': 391296.0, 'eqs_atom': 77565.0, 'eqs_body': 10132.0, 'eqs_other': 303599.0}, 'lpStep': {'atoms': 3745.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13280.0, 'bodies_tr': 13280.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22270.0, 'rules_normal': 22061.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22270.0, 'rules_tr_normal': 22061.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9168.0, 'eqs_atom': 1863.0, 'eqs_body': 69.0, 'eqs_other': 7236.0}, 'generator': {'vars': 93105.0, 'vars_eliminated': 0.0, 'vars_frozen': 57064.0, 'constraints': 3508.0, 'constraints_binary': 146086.0, 'constraints_ternary': 18381.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 16.0, 'conflicts': 16.0, 'conflicts_analyzed': 9.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 16.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7.0, 'distributed_sum_lbd': 14.0, 'integrated': 21.0, 'lemmas': 41.0, 'lits_learnt': 357.0, 'lemmas_binary': 4.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 9.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 4963.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 25.0, 'lemmas_other': 9.0, 'lits_conflict': 56.0, 'lits_loop': 241.0, 'lits_other': 60.0, 'jumps': {'jumps': 9.0, 'jumps_bounded': 5.0, 'levels': 25.0, 'levels_bounded': 9.0, 'max': 4.0, 'max_executed': 4.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 43.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [46.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.33211517333984375, 'cpu': 0.328125, 'solve': 0.0109710693359375, 'unsat': 0.0109710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 16.757354736328125, 'cpu': 24.625, 'solve': 3.2931690216064453, 'unsat': 1.0549774169921875, 'sat': 0.6138210296630859}, 'models': {'enumerated': 71.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 73744.0, 'conflicts': 7615.0, 'conflicts_analyzed': 7197.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 6504.0, 'models': 71.0, 'models_level': 35204.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 5993.0, 'distributed_sum_lbd': 14319.0, 'integrated': 32808.0, 'lemmas': 48139.0, 'lits_learnt': 4810958.0, 'lemmas_binary': 4042.0, 'lemmas_ternary': 2300.0, 'cpu_time': 11.359375, 'integrated_imps': 10627.0, 'integrated_jumps': 11131.0, 'guiding_paths_lits': 87482.0, 'guiding_paths': 542.0, 'splits': 0.0, 'lemmas_conflict': 7093.0, 'lemmas_loop': 11191.0, 'lemmas_other': 29855.0, 'lits_conflict': 961778.0, 'lits_loop': 93646.0, 'lits_other': 3755534.0, 'jumps': {'jumps': 7197.0, 'jumps_bounded': 1130.0, 'levels': 217994.0, 'levels_bounded': 203795.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-42] DEBUG :: ASH Planner Main #1 >> Reaction at search length 43:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [44]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(0)]), ('plan_module', [Number(44), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.294740s.

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.097442s with result Unsatisfiable.

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [44]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3921816000000007, Incremental time limit = None
Running cumulative time = 16.57332879999999, Cumulative time limit = 3600
Used memory = (RSS = 495.035156Mb, VMS = 494.519531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-43] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=44, start_step=43, end_step=44, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=12.159675900000016, solving_time=4.413652899999978, total_time=16.57332879999999, memory=Memory(rss=495.03515625, vms=494.51953125), step_range=range(0, 45), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.29474000000000444, solving_time=0.09744159999999624, total_time=0.3921816000000007, memory=Memory(rss=495.03515625, vms=494.51953125), step_range=range(44, 45), clingo_stats={'problem': {'lp': {'atoms': 169639.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 542258.0, 'bodies_tr': 542258.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 8904.0, 'count_bodies_tr': 8904.0, 'sccs': 1026.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 21673.0, 'rules': 800036.0, 'rules_normal': 790492.0, 'rules_choice': 8928.0, 'rules_minimize': 88.0, 'rules_acyc': 0.0, 'rules_heuristic': 528.0, 'rules_tr': 799925.0, 'rules_tr_normal': 790492.0, 'rules_tr_choice': 8928.0, 'rules_tr_minimize': 88.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 417.0, 'eqs': 400545.0, 'eqs_atom': 79439.0, 'eqs_body': 10201.0, 'eqs_other': 310905.0}, 'lpStep': {'atoms': 3756.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13317.0, 'bodies_tr': 13317.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22583.0, 'rules_normal': 22374.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22583.0, 'rules_tr_normal': 22374.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9249.0, 'eqs_atom': 1874.0, 'eqs_body': 69.0, 'eqs_other': 7306.0}, 'generator': {'vars': 95776.0, 'vars_eliminated': 0.0, 'vars_frozen': 58680.0, 'constraints': 4164.0, 'constraints_binary': 165035.0, 'constraints_ternary': 22366.0, 'acyc_edges': 0.0, 'complexity': 212534.0}}, 'solving': {'solvers': {'choices': 1174.0, 'conflicts': 431.0, 'conflicts_analyzed': 419.0, 'restarts': 0.0, 'restarts_last': 82.0, 'extra': {'domain_choices': 929.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 376.0, 'distributed_sum_lbd': 1077.0, 'integrated': 2132.0, 'lemmas': 3232.0, 'lits_learnt': 153958.0, 'lemmas_binary': 272.0, 'lemmas_ternary': 14.0, 'cpu_time': 0.265625, 'integrated_imps': 487.0, 'integrated_jumps': 438.0, 'guiding_paths_lits': 5145.0, 'guiding_paths': 13.0, 'splits': 0.0, 'lemmas_conflict': 413.0, 'lemmas_loop': 745.0, 'lemmas_other': 2074.0, 'lits_conflict': 26897.0, 'lits_loop': 6212.0, 'lits_other': 120849.0, 'jumps': {'jumps': 419.0, 'jumps_bounded': 30.0, 'levels': 9278.0, 'levels_bounded': 8548.0, 'max': 909.0, 'max_executed': 909.0, 'max_bounded': 908.0}}}}, 'summary': {'call': 44.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [47.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.39893150329589844, 'cpu': 0.609375, 'solve': 0.05784416198730469, 'unsat': 0.05784416198730469, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 17.156286239624023, 'cpu': 25.234375, 'solve': 3.35101318359375, 'unsat': 1.1128215789794922, 'sat': 0.6138210296630859}, 'models': {'enumerated': 71.0, 'optimal': 22.0}, 'solving': {'solvers': {'choices': 74918.0, 'conflicts': 8046.0, 'conflicts_analyzed': 7616.0, 'restarts': 12.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 7433.0, 'models': 71.0, 'models_level': 35204.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6369.0, 'distributed_sum_lbd': 15396.0, 'integrated': 34940.0, 'lemmas': 51371.0, 'lits_learnt': 4964916.0, 'lemmas_binary': 4314.0, 'lemmas_ternary': 2314.0, 'cpu_time': 11.625, 'integrated_imps': 11114.0, 'integrated_jumps': 11569.0, 'guiding_paths_lits': 92627.0, 'guiding_paths': 555.0, 'splits': 0.0, 'lemmas_conflict': 7506.0, 'lemmas_loop': 11936.0, 'lemmas_other': 31929.0, 'lits_conflict': 988675.0, 'lits_loop': 99858.0, 'lits_other': 3876383.0, 'jumps': {'jumps': 7616.0, 'jumps_bounded': 1160.0, 'levels': 227272.0, 'levels_bounded': 212343.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-43] DEBUG :: ASH Planner Main #1 >> Reaction at search length 44:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [45]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(0)]), ('plan_module', [Number(45), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.315378s.

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.450861s with result Satisfiable.

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [45]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.7662388000000036, Incremental time limit = None
Running cumulative time = 17.339567599999995, Cumulative time limit = 3600
Used memory = (RSS = 505.777344Mb, VMS = 503.312500Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 73
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.475054s, Solving = 4.864514s, Total = 17.339568s, Memory = (RSS = 505.777344Mb, VMS = 503.312500Mb)), Calls = 45
Final Model :: Total atoms = 26680, Cost = (54, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=45, start_step=44, end_step=45, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=12.475053800000017, solving_time=4.86451379999998, total_time=17.339567599999995, memory=Memory(rss=505.77734375, vms=503.3125), step_range=range(0, 46), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.31537790000000143, solving_time=0.4508609000000021, total_time=0.7662388000000036, memory=Memory(rss=505.77734375, vms=503.3125), step_range=range(45, 46), clingo_stats={'problem': {'lp': {'atoms': 173406.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 555611.0, 'bodies_tr': 555611.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9105.0, 'count_bodies_tr': 9105.0, 'sccs': 1051.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22267.0, 'rules': 822931.0, 'rules_normal': 813178.0, 'rules_choice': 9123.0, 'rules_minimize': 90.0, 'rules_acyc': 0.0, 'rules_heuristic': 540.0, 'rules_tr': 822820.0, 'rules_tr_normal': 813178.0, 'rules_tr_choice': 9123.0, 'rules_tr_minimize': 90.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 429.0, 'eqs': 409877.0, 'eqs_atom': 81324.0, 'eqs_body': 10270.0, 'eqs_other': 318283.0}, 'lpStep': {'atoms': 3767.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13353.0, 'bodies_tr': 13353.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 22895.0, 'rules_normal': 22686.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22895.0, 'rules_tr_normal': 22686.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9332.0, 'eqs_atom': 1885.0, 'eqs_body': 69.0, 'eqs_other': 7378.0}, 'generator': {'vars': 98447.0, 'vars_eliminated': 0.0, 'vars_frozen': 60296.0, 'constraints': 4771.0, 'constraints_binary': 183352.0, 'constraints_ternary': 26019.0, 'acyc_edges': 0.0, 'complexity': 214798.0}}, 'solving': {'solvers': {'choices': 5470.0, 'conflicts': 720.0, 'conflicts_analyzed': 712.0, 'restarts': 3.0, 'restarts_last': 96.0, 'extra': {'domain_choices': 1480.0, 'models': 2.0, 'models_level': 2274.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 560.0, 'distributed_sum_lbd': 1772.0, 'integrated': 3282.0, 'lemmas': 4555.0, 'lits_learnt': 353059.0, 'lemmas_binary': 347.0, 'lemmas_ternary': 56.0, 'cpu_time': 0.78125, 'integrated_imps': 855.0, 'integrated_jumps': 1055.0, 'guiding_paths_lits': 5327.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 711.0, 'lemmas_loop': 621.0, 'lemmas_other': 3223.0, 'lits_conflict': 66648.0, 'lits_loop': 5196.0, 'lits_other': 281215.0, 'jumps': {'jumps': 712.0, 'jumps_bounded': 20.0, 'levels': 5887.0, 'levels_bounded': 4611.0, 'max': 767.0, 'max_executed': 767.0, 'max_bounded': 762.0}}}}, 'summary': {'call': 45.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [54.0, 0.0], 'lower': [54.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.7755565643310547, 'cpu': 1.140625, 'solve': 0.4084186553955078, 'unsat': 0.29321861267089844, 'sat': 0.08477592468261719}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 17.931842803955078, 'cpu': 26.375, 'solve': 3.759431838989258, 'unsat': 1.4060401916503906, 'sat': 0.6985969543457031}, 'models': {'enumerated': 73.0, 'optimal': 23.0}, 'solving': {'solvers': {'choices': 80388.0, 'conflicts': 8766.0, 'conflicts_analyzed': 8328.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 8913.0, 'models': 73.0, 'models_level': 37478.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6929.0, 'distributed_sum_lbd': 17168.0, 'integrated': 38222.0, 'lemmas': 55926.0, 'lits_learnt': 5317975.0, 'lemmas_binary': 4661.0, 'lemmas_ternary': 2370.0, 'cpu_time': 12.40625, 'integrated_imps': 11969.0, 'integrated_jumps': 12624.0, 'guiding_paths_lits': 97954.0, 'guiding_paths': 569.0, 'splits': 0.0, 'lemmas_conflict': 8217.0, 'lemmas_loop': 12557.0, 'lemmas_other': 35152.0, 'lits_conflict': 1055323.0, 'lits_loop': 105054.0, 'lits_other': 4157598.0, 'jumps': {'jumps': 8328.0, 'jumps_bounded': 1180.0, 'levels': 233159.0, 'levels_bounded': 216954.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45}

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 24 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 7 (100.00% solved)

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None)

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 24, step = 45]:
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 24)

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Reaction at search length 45:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [46]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(0)]), ('plan_module', [Number(46), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.306908s.

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 46: original = External(symbol='current_last_sgoals(24, 45)', truth=True, inc_range=None), conversion = current_last_sgoals(24,45).

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.124887s with result Satisfiable.

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [46]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.43179430000000707, Incremental time limit = None
Running cumulative time = 17.771361900000002, Cumulative time limit = 3600
Used memory = (RSS = 514.296875Mb, VMS = 510.101562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 75
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.781962s, Solving = 4.989400s, Total = 17.771362s, Memory = (RSS = 514.296875Mb, VMS = 510.101562Mb)), Calls = 46
Final Model :: Total atoms = 27076, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=46, start_step=45, end_step=46, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=12.781961600000022, solving_time=4.989400299999982, total_time=17.771361900000002, memory=Memory(rss=514.296875, vms=510.1015625), step_range=range(0, 47), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3069078000000047, solving_time=0.12488650000000234, total_time=0.43179430000000707, memory=Memory(rss=514.296875, vms=510.1015625), step_range=range(46, 47), clingo_stats={'problem': {'lp': {'atoms': 177184.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 569000.0, 'bodies_tr': 569000.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9306.0, 'count_bodies_tr': 9306.0, 'sccs': 1076.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 22861.0, 'rules': 846138.0, 'rules_normal': 836176.0, 'rules_choice': 9318.0, 'rules_minimize': 92.0, 'rules_acyc': 0.0, 'rules_heuristic': 552.0, 'rules_tr': 846027.0, 'rules_tr_normal': 836176.0, 'rules_tr_choice': 9318.0, 'rules_tr_minimize': 92.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 441.0, 'eqs': 419292.0, 'eqs_atom': 83220.0, 'eqs_body': 10339.0, 'eqs_other': 325733.0}, 'lpStep': {'atoms': 3778.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13389.0, 'bodies_tr': 13389.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 23207.0, 'rules_normal': 22998.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23207.0, 'rules_tr_normal': 22998.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9415.0, 'eqs_atom': 1896.0, 'eqs_body': 69.0, 'eqs_other': 7450.0}, 'generator': {'vars': 101118.0, 'vars_eliminated': 0.0, 'vars_frozen': 61912.0, 'constraints': 5369.0, 'constraints_binary': 200635.0, 'constraints_ternary': 29157.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 3332.0, 'conflicts': 35.0, 'conflicts_analyzed': 23.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 35.0, 'models': 2.0, 'models_level': 2215.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 17.0, 'distributed_sum_lbd': 44.0, 'integrated': 51.0, 'lemmas': 150.0, 'lits_learnt': 9595.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.1875, 'integrated_imps': 5.0, 'integrated_jumps': 2.0, 'guiding_paths_lits': 5509.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 23.0, 'lemmas_loop': 91.0, 'lemmas_other': 36.0, 'lits_conflict': 3178.0, 'lits_loop': 709.0, 'lits_other': 5708.0, 'jumps': {'jumps': 23.0, 'jumps_bounded': 4.0, 'levels': 456.0, 'levels_bounded': 361.0, 'max': 356.0, 'max_executed': 71.0, 'max_bounded': 355.0}}}}, 'summary': {'call': 46.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4418449401855469, 'cpu': 0.546875, 'solve': 0.08479690551757812, 'unsat': 0.041912078857421875, 'sat': 0.011968612670898438}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 18.373687744140625, 'cpu': 26.921875, 'solve': 3.844228744506836, 'unsat': 1.4479522705078125, 'sat': 0.7105655670166016}, 'models': {'enumerated': 75.0, 'optimal': 24.0}, 'solving': {'solvers': {'choices': 83720.0, 'conflicts': 8801.0, 'conflicts_analyzed': 8351.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 8948.0, 'models': 75.0, 'models_level': 39693.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6946.0, 'distributed_sum_lbd': 17212.0, 'integrated': 38273.0, 'lemmas': 56076.0, 'lits_learnt': 5327570.0, 'lemmas_binary': 4662.0, 'lemmas_ternary': 2370.0, 'cpu_time': 12.59375, 'integrated_imps': 11974.0, 'integrated_jumps': 12626.0, 'guiding_paths_lits': 103463.0, 'guiding_paths': 583.0, 'splits': 0.0, 'lemmas_conflict': 8240.0, 'lemmas_loop': 12648.0, 'lemmas_other': 35188.0, 'lits_conflict': 1058501.0, 'lits_loop': 105763.0, 'lits_other': 4163306.0, 'jumps': {'jumps': 8351.0, 'jumps_bounded': 1184.0, 'levels': 233615.0, 'levels_bounded': 217315.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 25 achieved :: Progression >> total requested sgoals = 7, current total achieved sgoals = 8 (114.29% solved)

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 24 was achieved successfully.

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.354841s, Solving = 0.014656s, Total = 0.369497s, Memory = (RSS = 212.695312Mb, VMS = 203.542969Mb)
2 : Statistics :: Grounding = 0.171898s, Solving = 0.011550s, Total = 0.183448s, Memory = (RSS = 214.488281Mb, VMS = 205.753906Mb)
3 : Statistics :: Grounding = 0.218843s, Solving = 0.011994s, Total = 0.230837s, Memory = (RSS = 216.796875Mb, VMS = 207.828125Mb)
4 : Statistics :: Grounding = 0.242261s, Solving = 0.007012s, Total = 0.249273s, Memory = (RSS = 218.238281Mb, VMS = 209.019531Mb)
5 : Statistics :: Grounding = 0.258064s, Solving = 0.012757s, Total = 0.270821s, Memory = (RSS = 223.519531Mb, VMS = 214.519531Mb)
6 : Statistics :: Grounding = 0.258460s, Solving = 0.015432s, Total = 0.273892s, Memory = (RSS = 228.601562Mb, VMS = 220.160156Mb)
7 : Statistics :: Grounding = 0.244636s, Solving = 0.027616s, Total = 0.272252s, Memory = (RSS = 236.832031Mb, VMS = 229.296875Mb)
8 : Statistics :: Grounding = 0.270229s, Solving = 0.019479s, Total = 0.289708s, Memory = (RSS = 242.281250Mb, VMS = 234.308594Mb)
9 : Statistics :: Grounding = 0.275772s, Solving = 0.026332s, Total = 0.302105s, Memory = (RSS = 250.570312Mb, VMS = 243.796875Mb)
10 : Statistics :: Grounding = 0.275814s, Solving = 0.033745s, Total = 0.309560s, Memory = (RSS = 254.960938Mb, VMS = 247.535156Mb)
11 : Statistics :: Grounding = 0.266745s, Solving = 0.054024s, Total = 0.320770s, Memory = (RSS = 259.937500Mb, VMS = 252.070312Mb)
12 : Statistics :: Grounding = 0.279657s, Solving = 0.065987s, Total = 0.345644s, Memory = (RSS = 270.566406Mb, VMS = 265.093750Mb)
13 : Statistics :: Grounding = 0.270707s, Solving = 0.111081s, Total = 0.381788s, Memory = (RSS = 273.394531Mb, VMS = 266.636719Mb)
14 : Statistics :: Grounding = 0.296313s, Solving = 0.037970s, Total = 0.334283s, Memory = (RSS = 278.074219Mb, VMS = 270.976562Mb)
15 : Statistics :: Grounding = 0.327567s, Solving = 0.322777s, Total = 0.650344s, Memory = (RSS = 294.429688Mb, VMS = 294.078125Mb)
16 : Statistics :: Grounding = 0.276918s, Solving = 0.193113s, Total = 0.470031s, Memory = (RSS = 305.027344Mb, VMS = 303.402344Mb)
17 : Statistics :: Grounding = 0.280480s, Solving = 0.069022s, Total = 0.349502s, Memory = (RSS = 312.875000Mb, VMS = 310.371094Mb)
18 : Statistics :: Grounding = 0.288519s, Solving = 0.268018s, Total = 0.556537s, Memory = (RSS = 326.050781Mb, VMS = 321.941406Mb)
19 : Statistics :: Grounding = 0.299374s, Solving = 0.080286s, Total = 0.379660s, Memory = (RSS = 335.382812Mb, VMS = 330.718750Mb)
20 : Statistics :: Grounding = 0.316110s, Solving = 0.032650s, Total = 0.348760s, Memory = (RSS = 340.617188Mb, VMS = 334.539062Mb)
21 : Statistics :: Grounding = 0.300881s, Solving = 0.169022s, Total = 0.469903s, Memory = (RSS = 352.699219Mb, VMS = 357.703125Mb)
22 : Statistics :: Grounding = 0.306098s, Solving = 0.453395s, Total = 0.759493s, Memory = (RSS = 365.527344Mb, VMS = 369.585938Mb)
23 : Statistics :: Grounding = 0.312556s, Solving = 0.308633s, Total = 0.621189s, Memory = (RSS = 384.101562Mb, VMS = 386.667969Mb)
24 : Statistics :: Grounding = 0.264452s, Solving = 0.027282s, Total = 0.291734s, Memory = (RSS = 386.421875Mb, VMS = 388.714844Mb)
25 : Statistics :: Grounding = 0.245595s, Solving = 0.058659s, Total = 0.304253s, Memory = (RSS = 390.332031Mb, VMS = 391.617188Mb)
26 : Statistics :: Grounding = 0.256532s, Solving = 0.036428s, Total = 0.292959s, Memory = (RSS = 394.734375Mb, VMS = 395.554688Mb)
27 : Statistics :: Grounding = 0.274301s, Solving = 0.045806s, Total = 0.320107s, Memory = (RSS = 397.609375Mb, VMS = 397.128906Mb)
28 : Statistics :: Grounding = 0.271366s, Solving = 0.106126s, Total = 0.377492s, Memory = (RSS = 404.292969Mb, VMS = 402.628906Mb)
29 : Statistics :: Grounding = 0.329346s, Solving = 0.310165s, Total = 0.639511s, Memory = (RSS = 418.316406Mb, VMS = 415.492188Mb)
30 : Statistics :: Grounding = 0.277014s, Solving = 0.035240s, Total = 0.312254s, Memory = (RSS = 421.738281Mb, VMS = 418.347656Mb)
31 : Statistics :: Grounding = 0.281154s, Solving = 0.084861s, Total = 0.366014s, Memory = (RSS = 427.890625Mb, VMS = 422.632812Mb)
32 : Statistics :: Grounding = 0.287695s, Solving = 0.112060s, Total = 0.399754s, Memory = (RSS = 436.804688Mb, VMS = 430.929688Mb)
33 : Statistics :: Grounding = 0.276968s, Solving = 0.054203s, Total = 0.331171s, Memory = (RSS = 446.699219Mb, VMS = 459.125000Mb)
34 : Statistics :: Grounding = 0.322576s, Solving = 0.348662s, Total = 0.671237s, Memory = (RSS = 460.824219Mb, VMS = 471.566406Mb)
35 : Statistics :: Grounding = 0.287235s, Solving = 0.136167s, Total = 0.423402s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)
36 : Statistics :: Grounding = 0.298932s, Solving = 0.055622s, Total = 0.354554s, Memory = (RSS = 444.945312Mb, VMS = 452.570312Mb)
37 : Statistics :: Grounding = 0.196085s, Solving = 0.089393s, Total = 0.285477s, Memory = (RSS = 453.613281Mb, VMS = 460.878906Mb)
38 : Statistics :: Grounding = 0.193223s, Solving = 0.088434s, Total = 0.281658s, Memory = (RSS = 458.750000Mb, VMS = 465.125000Mb)
39 : Statistics :: Grounding = 0.262832s, Solving = 0.073584s, Total = 0.336416s, Memory = (RSS = 466.332031Mb, VMS = 472.316406Mb)
40 : Statistics :: Grounding = 0.267634s, Solving = 0.099588s, Total = 0.367222s, Memory = (RSS = 475.867188Mb, VMS = 480.472656Mb)
41 : Statistics :: Grounding = 0.289562s, Solving = 0.039220s, Total = 0.328782s, Memory = (RSS = 479.109375Mb, VMS = 482.339844Mb)
42 : Statistics :: Grounding = 0.310618s, Solving = 0.122120s, Total = 0.432738s, Memory = (RSS = 490.343750Mb, VMS = 492.781250Mb)
43 : Statistics :: Grounding = 0.279074s, Solving = 0.046040s, Total = 0.325113s, Memory = (RSS = 492.800781Mb, VMS = 493.933594Mb)
44 : Statistics :: Grounding = 0.294740s, Solving = 0.097442s, Total = 0.392182s, Memory = (RSS = 495.035156Mb, VMS = 494.519531Mb)
45 : Statistics :: Grounding = 0.315378s, Solving = 0.450861s, Total = 0.766239s, Memory = (RSS = 505.777344Mb, VMS = 503.312500Mb)
46 : Statistics :: Grounding = 0.306908s, Solving = 0.124887s, Total = 0.431794s, Memory = (RSS = 514.296875Mb, VMS = 510.101562Mb)

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 17.771362s due to: External generator exit.

[13-11-2021_23-39-44] DEBUG :: ASH Planner Main #1 >> Saving program grounding at level 1.

[13-11-2021_23-39-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Pausing incremental solve call.

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 32, 15: 33, 16: 34, 17: 35}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 32, 15: 33, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 24, Last requested goal index = 24 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 12.781962s, Solving = 4.989400s, Total = 17.771362s, Memory = (RSS = 514.296875Mb, VMS = 510.101562Mb)), Calls = 46
Model :: Total atoms = 27076, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 5, Model type = ModelType.StableModel

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 46 :: Actions = 61                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
        talos : grasp(manipulator_end_2,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : lift(manipulator_end_1,(block,1))
        talos : release(manipulator_end_2,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Online planning increment 3 finished.

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sgoals = 0 : Achieved sgoals = 0 : Unachieved sgoals = 0
Level = 2 : Solved problems = 2 : Total constraining sgoals = 14 : Achieved sgoals = 14 : Unachieved sgoals = 0
Level = 1 : Solved problems = 3 : Total constraining sgoals = 30 : Achieved sgoals = 24 : Unachieved sgoals = 6

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Current valid planning level range: [1-1]

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Chosen level range for planning increment 4 by method ground-first: [1-1]

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning at level 1 for problem 4:
Divided plan : Level =  2 (par-ref), Length =  13, Actions =  21 (Com = 0.62), Sgs = 21, Time =   6.517s (Gro =   4.918s, Sea =   1.600s), Expan (1.86, 1.91) (Dev = (0.90, 1.41), Bal = (0.48, 0.74))
Division points [total=1] : [(Index = 23, Blend = (Left = 0, Right = 1), Inherited = False, Type = proactive)]

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Proactively chosen sgoals range = [24-30]

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [24-30], problem number = 4, increment number = 4

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', True)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 24)
	('last_sgoals', 30)
	('sequential_yield', True)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('save_grounding', True)
	('use_saved_grounding', True)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('preempt_pos_fgoals', None)
	('preempt_neg_fgoals', None)
	('order_fgoals_achievement', None)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 3600)
	('length_limit', 150)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = True
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 24
last_sgoals = 30
start_step = 45
is_initial = False
is_final = True
complete_planning = False
sequential_yield = True
reactive_divisions = True
use_search_length_bound = False
search_length_bound = 51

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Generating monolevel plan :: Level [1] : Concurrency enabled : Problem type = partial conformance refinement (sequential) with sgoals range [24-30] : Minimum search length bound = disabled with value = 51

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = True
Positive final goal preemptive achievement = True
Negative final goal preemptive achievement = None
Final goal intermediate achievement ordering preferences = None

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = True, available = True, chosen = TrueSave current grounding on completion: requested = True, possible = False, chosen = False

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Using saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=8,compete', '--warn=none', '--opt-mode=opt']

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 25})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 30})

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program online, this change will not persist across solve calls.

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 8 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 25).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26).
sub_goal(2, talos, move(hallway), in(talos), hallway, 27).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 30).
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 30).

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Resuming saved grounding: Logic Program Main #1 :: Generate monolevel plan #1

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resuming controllable incremental solve call with held grounding.

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x0000027CAA599D10>

[13-11-2021_23-39-45] INFO :: ASH Planner Main #1 >> Adding existing plan to saved grounding...

[13-11-2021_23-39-45] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027CAA599D10> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_action(occurs(1, talos, move((starting_room,1)), 1)).
fix_action(occurs(1, talos, move((hallway,1)), 2)).
fix_action(occurs(1, talos, move((hallway,2)), 3)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 4)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer)), 5)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 5)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,puzzle_room_door_handle_outer), 6)).
fix_action(occurs(1, talos, actuate(manipulator_end_1,puzzle_room_door), 7)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 8)).
fix_action(occurs(1, talos, release(manipulator_end_1,puzzle_room_door_handle_outer), 8)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 9)).
fix_action(occurs(1, talos, move((hallway,1)), 10)).
fix_action(occurs(1, talos, move((hallway,0)), 11)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 12)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with(store_room_door_handle_outer)), 13)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,store_room_door_handle_outer), 14)).
fix_action(occurs(1, talos, actuate(manipulator_end_2,store_room_door), 15)).
fix_action(occurs(1, talos, release(manipulator_end_2,store_room_door_handle_outer), 16)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 17)).
fix_action(occurs(1, talos, move((store_room,1)), 18)).
fix_action(occurs(1, talos, move((store_room,0)), 19)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 20)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,6))), 21)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,5))), 21)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,6)), 22)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,5)), 22)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 23)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 23)).
fix_action(occurs(1, talos, move((store_room,1)), 24)).
fix_action(occurs(1, talos, move((hallway,0)), 25)).
fix_action(occurs(1, talos, move((hallway,1)), 26)).
fix_action(occurs(1, talos, move((hallway,2)), 27)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 28)).
fix_action(occurs(1, talos, move((puzzle_room,1)), 29)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,extended), 30)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,6),puzzle_room_table_right), 31)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 32)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,6)), 32)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,3))), 33)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,5),(block,6)), 33)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,3)), 34)).
fix_action(occurs(1, talos, put(manipulator_end_1,(block,3),puzzle_room_table_left), 35)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,5)), 35)).
fix_action(occurs(1, talos, configure(manipulator_end_2,aligned_with((block,2))), 36)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,extended), 36)).
fix_action(occurs(1, talos, release(manipulator_end_1,(block,3)), 36)).
fix_action(occurs(1, talos, configure(manipulator_end_1,aligned_with((block,1))), 37)).
fix_action(occurs(1, talos, grasp(manipulator_end_2,(block,2)), 37)).
fix_action(occurs(1, talos, grasp(manipulator_end_1,(block,1)), 38)).
fix_action(occurs(1, talos, put(manipulator_end_2,(block,2),(block,3)), 38)).
fix_action(occurs(1, talos, lift(manipulator_end_1,(block,1)), 39)).
fix_action(occurs(1, talos, release(manipulator_end_2,(block,2)), 39)).
fix_action(occurs(1, talos, configure(manipulator_limb_1,retracted), 40)).
fix_action(occurs(1, talos, configure(manipulator_limb_2,retracted), 40)).
fix_action(occurs(1, talos, move((puzzle_room,0)), 41)).
fix_action(occurs(1, talos, move((hallway,2)), 42)).
fix_action(occurs(1, talos, move((hallway,1)), 43)).
fix_action(occurs(1, talos, move((hallway,0)), 44)).
fix_action(occurs(1, talos, move((store_room,1)), 45)).
:- not occurs(L, R, A, S), fix_action(occurs(L, R, A, S)), pl(L).

[13-11-2021_23-39-45] DEBUG :: ASP_Parser >> Solve signal <ASP_Parser.SolveSignal object at 0x0000027CAA599D10> => Extending logic program Logic Program Main #1 :: Generate monolevel plan #1 to part #program base(). with:
fix_fluent(holds(1, complete(blue), false, 0)).
fix_fluent(holds(1, complete(red), false, 0)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 0)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 0)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(1, configuration(store_room_door), closed, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 0)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 0)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 0)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 0)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,0), 0)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,0), 0)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 0)).
fix_fluent(holds(1, in(talos), (starting_room,0), 0)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 0)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 0)).
fix_fluent(holds(1, on((block,3)), (block,1), 0)).
fix_fluent(holds(1, on((block,4)), nothing, 0)).
fix_fluent(holds(1, on((block,5)), nothing, 0)).
fix_fluent(holds(1, on((block,6)), nothing, 0)).
fix_fluent(holds(1, tower_base((block,1)), true, 0)).
fix_fluent(holds(1, tower_base((block,2)), true, 0)).
fix_fluent(holds(1, tower_base((block,3)), false, 0)).
fix_fluent(holds(1, tower_base((block,4)), false, 0)).
fix_fluent(holds(1, tower_base((block,5)), false, 0)).
fix_fluent(holds(1, tower_base((block,6)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(2, complete(blue), false, 0)).
fix_fluent(holds(2, complete(red), false, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 0)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 0)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 0)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 0)).
fix_fluent(holds(2, configuration(store_room_door), closed, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 0)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 0)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 0)).
fix_fluent(holds(2, in((block,4)), store_room, 0)).
fix_fluent(holds(2, in((block,5)), store_room, 0)).
fix_fluent(holds(2, in((block,6)), store_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 0)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 0)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 0)).
fix_fluent(holds(2, in(talos), starting_room, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 0)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 0)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 0)).
fix_fluent(holds(2, on((block,3)), (block,1), 0)).
fix_fluent(holds(2, on((block,4)), nothing, 0)).
fix_fluent(holds(2, on((block,5)), nothing, 0)).
fix_fluent(holds(2, on((block,6)), nothing, 0)).
fix_fluent(holds(2, tower_base((block,1)), true, 0)).
fix_fluent(holds(2, tower_base((block,2)), true, 0)).
fix_fluent(holds(2, tower_base((block,3)), false, 0)).
fix_fluent(holds(2, tower_base((block,4)), false, 0)).
fix_fluent(holds(2, tower_base((block,5)), false, 0)).
fix_fluent(holds(2, tower_base((block,6)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 0)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 0)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 0)).
fix_fluent(holds(1, complete(blue), false, 1)).
fix_fluent(holds(1, complete(red), false, 1)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 1)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 1)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 1)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(1, configuration(store_room_door), closed, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 1)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 1)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 1)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 1)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 1)).
fix_fluent(holds(1, in(manipulator_arm_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_arm_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_end_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_1), (starting_room,1), 1)).
fix_fluent(holds(1, in(manipulator_limb_2), (starting_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 1)).
fix_fluent(holds(1, in(talos), (starting_room,1), 1)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 1)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 1)).
fix_fluent(holds(1, on((block,3)), (block,1), 1)).
fix_fluent(holds(1, on((block,4)), nothing, 1)).
fix_fluent(holds(1, on((block,5)), nothing, 1)).
fix_fluent(holds(1, on((block,6)), nothing, 1)).
fix_fluent(holds(1, tower_base((block,1)), true, 1)).
fix_fluent(holds(1, tower_base((block,2)), true, 1)).
fix_fluent(holds(1, tower_base((block,3)), false, 1)).
fix_fluent(holds(1, tower_base((block,4)), false, 1)).
fix_fluent(holds(1, tower_base((block,5)), false, 1)).
fix_fluent(holds(1, tower_base((block,6)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(2, complete(blue), false, 1)).
fix_fluent(holds(2, complete(red), false, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 1)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 1)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 1)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 1)).
fix_fluent(holds(2, configuration(store_room_door), closed, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 1)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 1)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 1)).
fix_fluent(holds(2, in((block,4)), store_room, 1)).
fix_fluent(holds(2, in((block,5)), store_room, 1)).
fix_fluent(holds(2, in((block,6)), store_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_1), starting_room, 1)).
fix_fluent(holds(2, in(manipulator_arm_2), starting_room, 1)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 1)).
fix_fluent(holds(2, in(talos), starting_room, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 1)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 1)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 1)).
fix_fluent(holds(2, on((block,3)), (block,1), 1)).
fix_fluent(holds(2, on((block,4)), nothing, 1)).
fix_fluent(holds(2, on((block,5)), nothing, 1)).
fix_fluent(holds(2, on((block,6)), nothing, 1)).
fix_fluent(holds(2, tower_base((block,1)), true, 1)).
fix_fluent(holds(2, tower_base((block,2)), true, 1)).
fix_fluent(holds(2, tower_base((block,3)), false, 1)).
fix_fluent(holds(2, tower_base((block,4)), false, 1)).
fix_fluent(holds(2, tower_base((block,5)), false, 1)).
fix_fluent(holds(2, tower_base((block,6)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 1)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 1)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 1)).
fix_fluent(holds(1, complete(blue), false, 2)).
fix_fluent(holds(1, complete(red), false, 2)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 2)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 2)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 2)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(1, configuration(store_room_door), closed, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 2)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 2)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 2)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 2)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 2)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 2)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 2)).
fix_fluent(holds(1, in(talos), (hallway,1), 2)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 2)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 2)).
fix_fluent(holds(1, on((block,3)), (block,1), 2)).
fix_fluent(holds(1, on((block,4)), nothing, 2)).
fix_fluent(holds(1, on((block,5)), nothing, 2)).
fix_fluent(holds(1, on((block,6)), nothing, 2)).
fix_fluent(holds(1, tower_base((block,1)), true, 2)).
fix_fluent(holds(1, tower_base((block,2)), true, 2)).
fix_fluent(holds(1, tower_base((block,3)), false, 2)).
fix_fluent(holds(1, tower_base((block,4)), false, 2)).
fix_fluent(holds(1, tower_base((block,5)), false, 2)).
fix_fluent(holds(1, tower_base((block,6)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(2, complete(blue), false, 2)).
fix_fluent(holds(2, complete(red), false, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 2)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 2)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 2)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 2)).
fix_fluent(holds(2, configuration(store_room_door), closed, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 2)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 2)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 2)).
fix_fluent(holds(2, in((block,4)), store_room, 2)).
fix_fluent(holds(2, in((block,5)), store_room, 2)).
fix_fluent(holds(2, in((block,6)), store_room, 2)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 2)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 2)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 2)).
fix_fluent(holds(2, in(talos), hallway, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 2)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 2)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 2)).
fix_fluent(holds(2, on((block,3)), (block,1), 2)).
fix_fluent(holds(2, on((block,4)), nothing, 2)).
fix_fluent(holds(2, on((block,5)), nothing, 2)).
fix_fluent(holds(2, on((block,6)), nothing, 2)).
fix_fluent(holds(2, tower_base((block,1)), true, 2)).
fix_fluent(holds(2, tower_base((block,2)), true, 2)).
fix_fluent(holds(2, tower_base((block,3)), false, 2)).
fix_fluent(holds(2, tower_base((block,4)), false, 2)).
fix_fluent(holds(2, tower_base((block,5)), false, 2)).
fix_fluent(holds(2, tower_base((block,6)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 2)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 2)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 2)).
fix_fluent(holds(1, complete(blue), false, 3)).
fix_fluent(holds(1, complete(red), false, 3)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 3)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 3)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 3)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(1, configuration(store_room_door), closed, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 3)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 3)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 3)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 3)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 3)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 3)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 3)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 3)).
fix_fluent(holds(1, in(talos), (hallway,2), 3)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 3)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 3)).
fix_fluent(holds(1, on((block,3)), (block,1), 3)).
fix_fluent(holds(1, on((block,4)), nothing, 3)).
fix_fluent(holds(1, on((block,5)), nothing, 3)).
fix_fluent(holds(1, on((block,6)), nothing, 3)).
fix_fluent(holds(1, tower_base((block,1)), true, 3)).
fix_fluent(holds(1, tower_base((block,2)), true, 3)).
fix_fluent(holds(1, tower_base((block,3)), false, 3)).
fix_fluent(holds(1, tower_base((block,4)), false, 3)).
fix_fluent(holds(1, tower_base((block,5)), false, 3)).
fix_fluent(holds(1, tower_base((block,6)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(2, complete(blue), false, 3)).
fix_fluent(holds(2, complete(red), false, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 3)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 3)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 3)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 3)).
fix_fluent(holds(2, configuration(store_room_door), closed, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 3)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 3)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 3)).
fix_fluent(holds(2, in((block,4)), store_room, 3)).
fix_fluent(holds(2, in((block,5)), store_room, 3)).
fix_fluent(holds(2, in((block,6)), store_room, 3)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 3)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 3)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 3)).
fix_fluent(holds(2, in(talos), hallway, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 3)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 3)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 3)).
fix_fluent(holds(2, on((block,3)), (block,1), 3)).
fix_fluent(holds(2, on((block,4)), nothing, 3)).
fix_fluent(holds(2, on((block,5)), nothing, 3)).
fix_fluent(holds(2, on((block,6)), nothing, 3)).
fix_fluent(holds(2, tower_base((block,1)), true, 3)).
fix_fluent(holds(2, tower_base((block,2)), true, 3)).
fix_fluent(holds(2, tower_base((block,3)), false, 3)).
fix_fluent(holds(2, tower_base((block,4)), false, 3)).
fix_fluent(holds(2, tower_base((block,5)), false, 3)).
fix_fluent(holds(2, tower_base((block,6)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 3)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 3)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 3)).
fix_fluent(holds(1, complete(blue), false, 4)).
fix_fluent(holds(1, complete(red), false, 4)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 4)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 4)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 4)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(1, configuration(store_room_door), closed, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 4)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 4)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 4)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 4)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 4)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 4)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 4)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 4)).
fix_fluent(holds(1, in(talos), (hallway,2), 4)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 4)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 4)).
fix_fluent(holds(1, on((block,3)), (block,1), 4)).
fix_fluent(holds(1, on((block,4)), nothing, 4)).
fix_fluent(holds(1, on((block,5)), nothing, 4)).
fix_fluent(holds(1, on((block,6)), nothing, 4)).
fix_fluent(holds(1, tower_base((block,1)), true, 4)).
fix_fluent(holds(1, tower_base((block,2)), true, 4)).
fix_fluent(holds(1, tower_base((block,3)), false, 4)).
fix_fluent(holds(1, tower_base((block,4)), false, 4)).
fix_fluent(holds(1, tower_base((block,5)), false, 4)).
fix_fluent(holds(1, tower_base((block,6)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(2, complete(blue), false, 4)).
fix_fluent(holds(2, complete(red), false, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 4)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 4)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 4)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 4)).
fix_fluent(holds(2, configuration(store_room_door), closed, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 4)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 4)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 4)).
fix_fluent(holds(2, in((block,4)), store_room, 4)).
fix_fluent(holds(2, in((block,5)), store_room, 4)).
fix_fluent(holds(2, in((block,6)), store_room, 4)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 4)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 4)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 4)).
fix_fluent(holds(2, in(talos), hallway, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 4)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 4)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 4)).
fix_fluent(holds(2, on((block,3)), (block,1), 4)).
fix_fluent(holds(2, on((block,4)), nothing, 4)).
fix_fluent(holds(2, on((block,5)), nothing, 4)).
fix_fluent(holds(2, on((block,6)), nothing, 4)).
fix_fluent(holds(2, tower_base((block,1)), true, 4)).
fix_fluent(holds(2, tower_base((block,2)), true, 4)).
fix_fluent(holds(2, tower_base((block,3)), false, 4)).
fix_fluent(holds(2, tower_base((block,4)), false, 4)).
fix_fluent(holds(2, tower_base((block,5)), false, 4)).
fix_fluent(holds(2, tower_base((block,6)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 4)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 4)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 4)).
fix_fluent(holds(1, complete(blue), false, 5)).
fix_fluent(holds(1, complete(red), false, 5)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 5)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 5)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 5)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 5)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(1, configuration(store_room_door), closed, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 5)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 5)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 5)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 5)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 5)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 5)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 5)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 5)).
fix_fluent(holds(1, in(talos), (hallway,2), 5)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 5)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 5)).
fix_fluent(holds(1, on((block,3)), (block,1), 5)).
fix_fluent(holds(1, on((block,4)), nothing, 5)).
fix_fluent(holds(1, on((block,5)), nothing, 5)).
fix_fluent(holds(1, on((block,6)), nothing, 5)).
fix_fluent(holds(1, tower_base((block,1)), true, 5)).
fix_fluent(holds(1, tower_base((block,2)), true, 5)).
fix_fluent(holds(1, tower_base((block,3)), false, 5)).
fix_fluent(holds(1, tower_base((block,4)), false, 5)).
fix_fluent(holds(1, tower_base((block,5)), false, 5)).
fix_fluent(holds(1, tower_base((block,6)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(2, complete(blue), false, 5)).
fix_fluent(holds(2, complete(red), false, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 5)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 5)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 5)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 5)).
fix_fluent(holds(2, configuration(store_room_door), closed, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 5)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 5)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 5)).
fix_fluent(holds(2, in((block,4)), store_room, 5)).
fix_fluent(holds(2, in((block,5)), store_room, 5)).
fix_fluent(holds(2, in((block,6)), store_room, 5)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 5)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 5)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 5)).
fix_fluent(holds(2, in(talos), hallway, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 5)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 5)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 5)).
fix_fluent(holds(2, on((block,3)), (block,1), 5)).
fix_fluent(holds(2, on((block,4)), nothing, 5)).
fix_fluent(holds(2, on((block,5)), nothing, 5)).
fix_fluent(holds(2, on((block,6)), nothing, 5)).
fix_fluent(holds(2, tower_base((block,1)), true, 5)).
fix_fluent(holds(2, tower_base((block,2)), true, 5)).
fix_fluent(holds(2, tower_base((block,3)), false, 5)).
fix_fluent(holds(2, tower_base((block,4)), false, 5)).
fix_fluent(holds(2, tower_base((block,5)), false, 5)).
fix_fluent(holds(2, tower_base((block,6)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 5)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 5)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 5)).
fix_fluent(holds(1, complete(blue), false, 6)).
fix_fluent(holds(1, complete(red), false, 6)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 6)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 6)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 6)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 6)).
fix_fluent(holds(1, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(1, configuration(store_room_door), closed, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 6)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 6)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 6)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 6)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 6)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 6)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 6)).
fix_fluent(holds(1, in(talos), (hallway,2), 6)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 6)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 6)).
fix_fluent(holds(1, on((block,3)), (block,1), 6)).
fix_fluent(holds(1, on((block,4)), nothing, 6)).
fix_fluent(holds(1, on((block,5)), nothing, 6)).
fix_fluent(holds(1, on((block,6)), nothing, 6)).
fix_fluent(holds(1, tower_base((block,1)), true, 6)).
fix_fluent(holds(1, tower_base((block,2)), true, 6)).
fix_fluent(holds(1, tower_base((block,3)), false, 6)).
fix_fluent(holds(1, tower_base((block,4)), false, 6)).
fix_fluent(holds(1, tower_base((block,5)), false, 6)).
fix_fluent(holds(1, tower_base((block,6)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(2, complete(blue), false, 6)).
fix_fluent(holds(2, complete(red), false, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 6)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 6)).
fix_fluent(holds(2, configuration(puzzle_room_door), closed, 6)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 6)).
fix_fluent(holds(2, configuration(store_room_door), closed, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 6)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 6)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 6)).
fix_fluent(holds(2, in((block,4)), store_room, 6)).
fix_fluent(holds(2, in((block,5)), store_room, 6)).
fix_fluent(holds(2, in((block,6)), store_room, 6)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 6)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 6)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 6)).
fix_fluent(holds(2, in(talos), hallway, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 6)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 6)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 6)).
fix_fluent(holds(2, on((block,3)), (block,1), 6)).
fix_fluent(holds(2, on((block,4)), nothing, 6)).
fix_fluent(holds(2, on((block,5)), nothing, 6)).
fix_fluent(holds(2, on((block,6)), nothing, 6)).
fix_fluent(holds(2, tower_base((block,1)), true, 6)).
fix_fluent(holds(2, tower_base((block,2)), true, 6)).
fix_fluent(holds(2, tower_base((block,3)), false, 6)).
fix_fluent(holds(2, tower_base((block,4)), false, 6)).
fix_fluent(holds(2, tower_base((block,5)), false, 6)).
fix_fluent(holds(2, tower_base((block,6)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 6)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 6)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 6)).
fix_fluent(holds(1, complete(blue), false, 7)).
fix_fluent(holds(1, complete(red), false, 7)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(puzzle_room_door_handle_outer), 7)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 7)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 7)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 7)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(1, configuration(store_room_door), closed, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(1, grasping(manipulator_end_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 7)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 7)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 7)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 7)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 7)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 7)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 7)).
fix_fluent(holds(1, in(talos), (hallway,2), 7)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 7)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 7)).
fix_fluent(holds(1, on((block,3)), (block,1), 7)).
fix_fluent(holds(1, on((block,4)), nothing, 7)).
fix_fluent(holds(1, on((block,5)), nothing, 7)).
fix_fluent(holds(1, on((block,6)), nothing, 7)).
fix_fluent(holds(1, tower_base((block,1)), true, 7)).
fix_fluent(holds(1, tower_base((block,2)), true, 7)).
fix_fluent(holds(1, tower_base((block,3)), false, 7)).
fix_fluent(holds(1, tower_base((block,4)), false, 7)).
fix_fluent(holds(1, tower_base((block,5)), false, 7)).
fix_fluent(holds(1, tower_base((block,6)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(2, complete(blue), false, 7)).
fix_fluent(holds(2, complete(red), false, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 7)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 7)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 7)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 7)).
fix_fluent(holds(2, configuration(store_room_door), closed, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_1), puzzle_room_door_handle_outer, 7)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 7)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 7)).
fix_fluent(holds(2, in((block,4)), store_room, 7)).
fix_fluent(holds(2, in((block,5)), store_room, 7)).
fix_fluent(holds(2, in((block,6)), store_room, 7)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 7)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 7)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 7)).
fix_fluent(holds(2, in(talos), hallway, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 7)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 7)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 7)).
fix_fluent(holds(2, on((block,3)), (block,1), 7)).
fix_fluent(holds(2, on((block,4)), nothing, 7)).
fix_fluent(holds(2, on((block,5)), nothing, 7)).
fix_fluent(holds(2, on((block,6)), nothing, 7)).
fix_fluent(holds(2, tower_base((block,1)), true, 7)).
fix_fluent(holds(2, tower_base((block,2)), true, 7)).
fix_fluent(holds(2, tower_base((block,3)), false, 7)).
fix_fluent(holds(2, tower_base((block,4)), false, 7)).
fix_fluent(holds(2, tower_base((block,5)), false, 7)).
fix_fluent(holds(2, tower_base((block,6)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 7)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 7)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 7)).
fix_fluent(holds(1, complete(blue), false, 8)).
fix_fluent(holds(1, complete(red), false, 8)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 8)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 8)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 8)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(1, configuration(store_room_door), closed, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 8)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 8)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 8)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 8)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 8)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 8)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 8)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 8)).
fix_fluent(holds(1, in(talos), (hallway,2), 8)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 8)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 8)).
fix_fluent(holds(1, on((block,3)), (block,1), 8)).
fix_fluent(holds(1, on((block,4)), nothing, 8)).
fix_fluent(holds(1, on((block,5)), nothing, 8)).
fix_fluent(holds(1, on((block,6)), nothing, 8)).
fix_fluent(holds(1, tower_base((block,1)), true, 8)).
fix_fluent(holds(1, tower_base((block,2)), true, 8)).
fix_fluent(holds(1, tower_base((block,3)), false, 8)).
fix_fluent(holds(1, tower_base((block,4)), false, 8)).
fix_fluent(holds(1, tower_base((block,5)), false, 8)).
fix_fluent(holds(1, tower_base((block,6)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(2, complete(blue), false, 8)).
fix_fluent(holds(2, complete(red), false, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 8)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 8)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 8)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 8)).
fix_fluent(holds(2, configuration(store_room_door), closed, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 8)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 8)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 8)).
fix_fluent(holds(2, in((block,4)), store_room, 8)).
fix_fluent(holds(2, in((block,5)), store_room, 8)).
fix_fluent(holds(2, in((block,6)), store_room, 8)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 8)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 8)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 8)).
fix_fluent(holds(2, in(talos), hallway, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 8)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 8)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 8)).
fix_fluent(holds(2, on((block,3)), (block,1), 8)).
fix_fluent(holds(2, on((block,4)), nothing, 8)).
fix_fluent(holds(2, on((block,5)), nothing, 8)).
fix_fluent(holds(2, on((block,6)), nothing, 8)).
fix_fluent(holds(2, tower_base((block,1)), true, 8)).
fix_fluent(holds(2, tower_base((block,2)), true, 8)).
fix_fluent(holds(2, tower_base((block,3)), false, 8)).
fix_fluent(holds(2, tower_base((block,4)), false, 8)).
fix_fluent(holds(2, tower_base((block,5)), false, 8)).
fix_fluent(holds(2, tower_base((block,6)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 8)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 8)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 8)).
fix_fluent(holds(1, complete(blue), false, 9)).
fix_fluent(holds(1, complete(red), false, 9)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 9)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 9)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 9)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(1, configuration(store_room_door), closed, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 9)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 9)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 9)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 9)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 9)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 9)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 9)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 9)).
fix_fluent(holds(1, in(talos), (hallway,2), 9)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 9)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 9)).
fix_fluent(holds(1, on((block,3)), (block,1), 9)).
fix_fluent(holds(1, on((block,4)), nothing, 9)).
fix_fluent(holds(1, on((block,5)), nothing, 9)).
fix_fluent(holds(1, on((block,6)), nothing, 9)).
fix_fluent(holds(1, tower_base((block,1)), true, 9)).
fix_fluent(holds(1, tower_base((block,2)), true, 9)).
fix_fluent(holds(1, tower_base((block,3)), false, 9)).
fix_fluent(holds(1, tower_base((block,4)), false, 9)).
fix_fluent(holds(1, tower_base((block,5)), false, 9)).
fix_fluent(holds(1, tower_base((block,6)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(2, complete(blue), false, 9)).
fix_fluent(holds(2, complete(red), false, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 9)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 9)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 9)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 9)).
fix_fluent(holds(2, configuration(store_room_door), closed, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 9)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 9)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 9)).
fix_fluent(holds(2, in((block,4)), store_room, 9)).
fix_fluent(holds(2, in((block,5)), store_room, 9)).
fix_fluent(holds(2, in((block,6)), store_room, 9)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 9)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 9)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 9)).
fix_fluent(holds(2, in(talos), hallway, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 9)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 9)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 9)).
fix_fluent(holds(2, on((block,3)), (block,1), 9)).
fix_fluent(holds(2, on((block,4)), nothing, 9)).
fix_fluent(holds(2, on((block,5)), nothing, 9)).
fix_fluent(holds(2, on((block,6)), nothing, 9)).
fix_fluent(holds(2, tower_base((block,1)), true, 9)).
fix_fluent(holds(2, tower_base((block,2)), true, 9)).
fix_fluent(holds(2, tower_base((block,3)), false, 9)).
fix_fluent(holds(2, tower_base((block,4)), false, 9)).
fix_fluent(holds(2, tower_base((block,5)), false, 9)).
fix_fluent(holds(2, tower_base((block,6)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 9)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 9)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 9)).
fix_fluent(holds(1, complete(blue), false, 10)).
fix_fluent(holds(1, complete(red), false, 10)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 10)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 10)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 10)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(1, configuration(store_room_door), closed, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 10)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 10)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 10)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 10)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 10)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 10)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 10)).
fix_fluent(holds(1, in(talos), (hallway,1), 10)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 10)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 10)).
fix_fluent(holds(1, on((block,3)), (block,1), 10)).
fix_fluent(holds(1, on((block,4)), nothing, 10)).
fix_fluent(holds(1, on((block,5)), nothing, 10)).
fix_fluent(holds(1, on((block,6)), nothing, 10)).
fix_fluent(holds(1, tower_base((block,1)), true, 10)).
fix_fluent(holds(1, tower_base((block,2)), true, 10)).
fix_fluent(holds(1, tower_base((block,3)), false, 10)).
fix_fluent(holds(1, tower_base((block,4)), false, 10)).
fix_fluent(holds(1, tower_base((block,5)), false, 10)).
fix_fluent(holds(1, tower_base((block,6)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(2, complete(blue), false, 10)).
fix_fluent(holds(2, complete(red), false, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 10)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 10)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 10)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 10)).
fix_fluent(holds(2, configuration(store_room_door), closed, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 10)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 10)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 10)).
fix_fluent(holds(2, in((block,4)), store_room, 10)).
fix_fluent(holds(2, in((block,5)), store_room, 10)).
fix_fluent(holds(2, in((block,6)), store_room, 10)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 10)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 10)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 10)).
fix_fluent(holds(2, in(talos), hallway, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 10)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 10)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 10)).
fix_fluent(holds(2, on((block,3)), (block,1), 10)).
fix_fluent(holds(2, on((block,4)), nothing, 10)).
fix_fluent(holds(2, on((block,5)), nothing, 10)).
fix_fluent(holds(2, on((block,6)), nothing, 10)).
fix_fluent(holds(2, tower_base((block,1)), true, 10)).
fix_fluent(holds(2, tower_base((block,2)), true, 10)).
fix_fluent(holds(2, tower_base((block,3)), false, 10)).
fix_fluent(holds(2, tower_base((block,4)), false, 10)).
fix_fluent(holds(2, tower_base((block,5)), false, 10)).
fix_fluent(holds(2, tower_base((block,6)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 10)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 10)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 10)).
fix_fluent(holds(1, complete(blue), false, 11)).
fix_fluent(holds(1, complete(red), false, 11)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 11)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 11)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 11)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(1, configuration(store_room_door), closed, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 11)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 11)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 11)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 11)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 11)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 11)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 11)).
fix_fluent(holds(1, in(talos), (hallway,0), 11)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 11)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 11)).
fix_fluent(holds(1, on((block,3)), (block,1), 11)).
fix_fluent(holds(1, on((block,4)), nothing, 11)).
fix_fluent(holds(1, on((block,5)), nothing, 11)).
fix_fluent(holds(1, on((block,6)), nothing, 11)).
fix_fluent(holds(1, tower_base((block,1)), true, 11)).
fix_fluent(holds(1, tower_base((block,2)), true, 11)).
fix_fluent(holds(1, tower_base((block,3)), false, 11)).
fix_fluent(holds(1, tower_base((block,4)), false, 11)).
fix_fluent(holds(1, tower_base((block,5)), false, 11)).
fix_fluent(holds(1, tower_base((block,6)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(2, complete(blue), false, 11)).
fix_fluent(holds(2, complete(red), false, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 11)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 11)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 11)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 11)).
fix_fluent(holds(2, configuration(store_room_door), closed, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 11)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 11)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 11)).
fix_fluent(holds(2, in((block,4)), store_room, 11)).
fix_fluent(holds(2, in((block,5)), store_room, 11)).
fix_fluent(holds(2, in((block,6)), store_room, 11)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 11)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 11)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 11)).
fix_fluent(holds(2, in(talos), hallway, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 11)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 11)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 11)).
fix_fluent(holds(2, on((block,3)), (block,1), 11)).
fix_fluent(holds(2, on((block,4)), nothing, 11)).
fix_fluent(holds(2, on((block,5)), nothing, 11)).
fix_fluent(holds(2, on((block,6)), nothing, 11)).
fix_fluent(holds(2, tower_base((block,1)), true, 11)).
fix_fluent(holds(2, tower_base((block,2)), true, 11)).
fix_fluent(holds(2, tower_base((block,3)), false, 11)).
fix_fluent(holds(2, tower_base((block,4)), false, 11)).
fix_fluent(holds(2, tower_base((block,5)), false, 11)).
fix_fluent(holds(2, tower_base((block,6)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 11)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 11)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 11)).
fix_fluent(holds(1, complete(blue), false, 12)).
fix_fluent(holds(1, complete(red), false, 12)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 12)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 12)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 12)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(1, configuration(store_room_door), closed, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 12)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 12)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 12)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 12)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 12)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 12)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 12)).
fix_fluent(holds(1, in(talos), (hallway,0), 12)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 12)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 12)).
fix_fluent(holds(1, on((block,3)), (block,1), 12)).
fix_fluent(holds(1, on((block,4)), nothing, 12)).
fix_fluent(holds(1, on((block,5)), nothing, 12)).
fix_fluent(holds(1, on((block,6)), nothing, 12)).
fix_fluent(holds(1, tower_base((block,1)), true, 12)).
fix_fluent(holds(1, tower_base((block,2)), true, 12)).
fix_fluent(holds(1, tower_base((block,3)), false, 12)).
fix_fluent(holds(1, tower_base((block,4)), false, 12)).
fix_fluent(holds(1, tower_base((block,5)), false, 12)).
fix_fluent(holds(1, tower_base((block,6)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(2, complete(blue), false, 12)).
fix_fluent(holds(2, complete(red), false, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 12)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 12)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 12)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 12)).
fix_fluent(holds(2, configuration(store_room_door), closed, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 12)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 12)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 12)).
fix_fluent(holds(2, in((block,4)), store_room, 12)).
fix_fluent(holds(2, in((block,5)), store_room, 12)).
fix_fluent(holds(2, in((block,6)), store_room, 12)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 12)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 12)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 12)).
fix_fluent(holds(2, in(talos), hallway, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 12)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 12)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 12)).
fix_fluent(holds(2, on((block,3)), (block,1), 12)).
fix_fluent(holds(2, on((block,4)), nothing, 12)).
fix_fluent(holds(2, on((block,5)), nothing, 12)).
fix_fluent(holds(2, on((block,6)), nothing, 12)).
fix_fluent(holds(2, tower_base((block,1)), true, 12)).
fix_fluent(holds(2, tower_base((block,2)), true, 12)).
fix_fluent(holds(2, tower_base((block,3)), false, 12)).
fix_fluent(holds(2, tower_base((block,4)), false, 12)).
fix_fluent(holds(2, tower_base((block,5)), false, 12)).
fix_fluent(holds(2, tower_base((block,6)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 12)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 12)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 12)).
fix_fluent(holds(1, complete(blue), false, 13)).
fix_fluent(holds(1, complete(red), false, 13)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 13)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 13)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 13)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 13)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(1, configuration(store_room_door), closed, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 13)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 13)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 13)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 13)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 13)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 13)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 13)).
fix_fluent(holds(1, in(talos), (hallway,0), 13)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 13)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 13)).
fix_fluent(holds(1, on((block,3)), (block,1), 13)).
fix_fluent(holds(1, on((block,4)), nothing, 13)).
fix_fluent(holds(1, on((block,5)), nothing, 13)).
fix_fluent(holds(1, on((block,6)), nothing, 13)).
fix_fluent(holds(1, tower_base((block,1)), true, 13)).
fix_fluent(holds(1, tower_base((block,2)), true, 13)).
fix_fluent(holds(1, tower_base((block,3)), false, 13)).
fix_fluent(holds(1, tower_base((block,4)), false, 13)).
fix_fluent(holds(1, tower_base((block,5)), false, 13)).
fix_fluent(holds(1, tower_base((block,6)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(2, complete(blue), false, 13)).
fix_fluent(holds(2, complete(red), false, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 13)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 13)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 13)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 13)).
fix_fluent(holds(2, configuration(store_room_door), closed, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 13)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 13)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 13)).
fix_fluent(holds(2, in((block,4)), store_room, 13)).
fix_fluent(holds(2, in((block,5)), store_room, 13)).
fix_fluent(holds(2, in((block,6)), store_room, 13)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 13)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 13)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 13)).
fix_fluent(holds(2, in(talos), hallway, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 13)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 13)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 13)).
fix_fluent(holds(2, on((block,3)), (block,1), 13)).
fix_fluent(holds(2, on((block,4)), nothing, 13)).
fix_fluent(holds(2, on((block,5)), nothing, 13)).
fix_fluent(holds(2, on((block,6)), nothing, 13)).
fix_fluent(holds(2, tower_base((block,1)), true, 13)).
fix_fluent(holds(2, tower_base((block,2)), true, 13)).
fix_fluent(holds(2, tower_base((block,3)), false, 13)).
fix_fluent(holds(2, tower_base((block,4)), false, 13)).
fix_fluent(holds(2, tower_base((block,5)), false, 13)).
fix_fluent(holds(2, tower_base((block,6)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 13)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 13)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 13)).
fix_fluent(holds(1, complete(blue), false, 14)).
fix_fluent(holds(1, complete(red), false, 14)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 14)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 14)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 14)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 14)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(1, configuration(store_room_door), closed, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 14)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 14)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 14)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 14)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 14)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 14)).
fix_fluent(holds(1, in(talos), (hallway,0), 14)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 14)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 14)).
fix_fluent(holds(1, on((block,3)), (block,1), 14)).
fix_fluent(holds(1, on((block,4)), nothing, 14)).
fix_fluent(holds(1, on((block,5)), nothing, 14)).
fix_fluent(holds(1, on((block,6)), nothing, 14)).
fix_fluent(holds(1, tower_base((block,1)), true, 14)).
fix_fluent(holds(1, tower_base((block,2)), true, 14)).
fix_fluent(holds(1, tower_base((block,3)), false, 14)).
fix_fluent(holds(1, tower_base((block,4)), false, 14)).
fix_fluent(holds(1, tower_base((block,5)), false, 14)).
fix_fluent(holds(1, tower_base((block,6)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(2, complete(blue), false, 14)).
fix_fluent(holds(2, complete(red), false, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 14)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 14)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 14)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 14)).
fix_fluent(holds(2, configuration(store_room_door), closed, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 14)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 14)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 14)).
fix_fluent(holds(2, in((block,4)), store_room, 14)).
fix_fluent(holds(2, in((block,5)), store_room, 14)).
fix_fluent(holds(2, in((block,6)), store_room, 14)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 14)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 14)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 14)).
fix_fluent(holds(2, in(talos), hallway, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 14)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 14)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 14)).
fix_fluent(holds(2, on((block,3)), (block,1), 14)).
fix_fluent(holds(2, on((block,4)), nothing, 14)).
fix_fluent(holds(2, on((block,5)), nothing, 14)).
fix_fluent(holds(2, on((block,6)), nothing, 14)).
fix_fluent(holds(2, tower_base((block,1)), true, 14)).
fix_fluent(holds(2, tower_base((block,2)), true, 14)).
fix_fluent(holds(2, tower_base((block,3)), false, 14)).
fix_fluent(holds(2, tower_base((block,4)), false, 14)).
fix_fluent(holds(2, tower_base((block,5)), false, 14)).
fix_fluent(holds(2, tower_base((block,6)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 14)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 14)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 14)).
fix_fluent(holds(1, complete(blue), false, 15)).
fix_fluent(holds(1, complete(red), false, 15)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 15)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(store_room_door_handle_outer), 15)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 15)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 15)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(1, configuration(store_room_door), open, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 15)).
fix_fluent(holds(1, grasping(manipulator_end_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 15)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 15)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 15)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 15)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 15)).
fix_fluent(holds(1, in(talos), (hallway,0), 15)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 15)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 15)).
fix_fluent(holds(1, on((block,3)), (block,1), 15)).
fix_fluent(holds(1, on((block,4)), nothing, 15)).
fix_fluent(holds(1, on((block,5)), nothing, 15)).
fix_fluent(holds(1, on((block,6)), nothing, 15)).
fix_fluent(holds(1, tower_base((block,1)), true, 15)).
fix_fluent(holds(1, tower_base((block,2)), true, 15)).
fix_fluent(holds(1, tower_base((block,3)), false, 15)).
fix_fluent(holds(1, tower_base((block,4)), false, 15)).
fix_fluent(holds(1, tower_base((block,5)), false, 15)).
fix_fluent(holds(1, tower_base((block,6)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(2, complete(blue), false, 15)).
fix_fluent(holds(2, complete(red), false, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 15)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 15)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 15)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 15)).
fix_fluent(holds(2, configuration(store_room_door), open, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 15)).
fix_fluent(holds(2, grasping(manipulator_arm_2), store_room_door_handle_outer, 15)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 15)).
fix_fluent(holds(2, in((block,4)), store_room, 15)).
fix_fluent(holds(2, in((block,5)), store_room, 15)).
fix_fluent(holds(2, in((block,6)), store_room, 15)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 15)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 15)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 15)).
fix_fluent(holds(2, in(talos), hallway, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 15)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 15)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 15)).
fix_fluent(holds(2, on((block,3)), (block,1), 15)).
fix_fluent(holds(2, on((block,4)), nothing, 15)).
fix_fluent(holds(2, on((block,5)), nothing, 15)).
fix_fluent(holds(2, on((block,6)), nothing, 15)).
fix_fluent(holds(2, tower_base((block,1)), true, 15)).
fix_fluent(holds(2, tower_base((block,2)), true, 15)).
fix_fluent(holds(2, tower_base((block,3)), false, 15)).
fix_fluent(holds(2, tower_base((block,4)), false, 15)).
fix_fluent(holds(2, tower_base((block,5)), false, 15)).
fix_fluent(holds(2, tower_base((block,6)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 15)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 15)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 15)).
fix_fluent(holds(1, complete(blue), false, 16)).
fix_fluent(holds(1, complete(red), false, 16)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 16)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 16)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 16)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(1, configuration(store_room_door), open, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 16)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 16)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 16)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 16)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 16)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 16)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 16)).
fix_fluent(holds(1, in(talos), (hallway,0), 16)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 16)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 16)).
fix_fluent(holds(1, on((block,3)), (block,1), 16)).
fix_fluent(holds(1, on((block,4)), nothing, 16)).
fix_fluent(holds(1, on((block,5)), nothing, 16)).
fix_fluent(holds(1, on((block,6)), nothing, 16)).
fix_fluent(holds(1, tower_base((block,1)), true, 16)).
fix_fluent(holds(1, tower_base((block,2)), true, 16)).
fix_fluent(holds(1, tower_base((block,3)), false, 16)).
fix_fluent(holds(1, tower_base((block,4)), false, 16)).
fix_fluent(holds(1, tower_base((block,5)), false, 16)).
fix_fluent(holds(1, tower_base((block,6)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(2, complete(blue), false, 16)).
fix_fluent(holds(2, complete(red), false, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 16)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 16)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 16)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 16)).
fix_fluent(holds(2, configuration(store_room_door), open, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 16)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 16)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 16)).
fix_fluent(holds(2, in((block,4)), store_room, 16)).
fix_fluent(holds(2, in((block,5)), store_room, 16)).
fix_fluent(holds(2, in((block,6)), store_room, 16)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 16)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 16)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 16)).
fix_fluent(holds(2, in(talos), hallway, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 16)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 16)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 16)).
fix_fluent(holds(2, on((block,3)), (block,1), 16)).
fix_fluent(holds(2, on((block,4)), nothing, 16)).
fix_fluent(holds(2, on((block,5)), nothing, 16)).
fix_fluent(holds(2, on((block,6)), nothing, 16)).
fix_fluent(holds(2, tower_base((block,1)), true, 16)).
fix_fluent(holds(2, tower_base((block,2)), true, 16)).
fix_fluent(holds(2, tower_base((block,3)), false, 16)).
fix_fluent(holds(2, tower_base((block,4)), false, 16)).
fix_fluent(holds(2, tower_base((block,5)), false, 16)).
fix_fluent(holds(2, tower_base((block,6)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 16)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 16)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 16)).
fix_fluent(holds(1, complete(blue), false, 17)).
fix_fluent(holds(1, complete(red), false, 17)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 17)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 17)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(1, configuration(store_room_door), open, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 17)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 17)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 17)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 17)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 17)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 17)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 17)).
fix_fluent(holds(1, in(talos), (hallway,0), 17)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 17)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 17)).
fix_fluent(holds(1, on((block,3)), (block,1), 17)).
fix_fluent(holds(1, on((block,4)), nothing, 17)).
fix_fluent(holds(1, on((block,5)), nothing, 17)).
fix_fluent(holds(1, on((block,6)), nothing, 17)).
fix_fluent(holds(1, tower_base((block,1)), true, 17)).
fix_fluent(holds(1, tower_base((block,2)), true, 17)).
fix_fluent(holds(1, tower_base((block,3)), false, 17)).
fix_fluent(holds(1, tower_base((block,4)), false, 17)).
fix_fluent(holds(1, tower_base((block,5)), false, 17)).
fix_fluent(holds(1, tower_base((block,6)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(2, complete(blue), false, 17)).
fix_fluent(holds(2, complete(red), false, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 17)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 17)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 17)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 17)).
fix_fluent(holds(2, configuration(store_room_door), open, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 17)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 17)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 17)).
fix_fluent(holds(2, in((block,4)), store_room, 17)).
fix_fluent(holds(2, in((block,5)), store_room, 17)).
fix_fluent(holds(2, in((block,6)), store_room, 17)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 17)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 17)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 17)).
fix_fluent(holds(2, in(talos), hallway, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 17)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 17)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 17)).
fix_fluent(holds(2, on((block,3)), (block,1), 17)).
fix_fluent(holds(2, on((block,4)), nothing, 17)).
fix_fluent(holds(2, on((block,5)), nothing, 17)).
fix_fluent(holds(2, on((block,6)), nothing, 17)).
fix_fluent(holds(2, tower_base((block,1)), true, 17)).
fix_fluent(holds(2, tower_base((block,2)), true, 17)).
fix_fluent(holds(2, tower_base((block,3)), false, 17)).
fix_fluent(holds(2, tower_base((block,4)), false, 17)).
fix_fluent(holds(2, tower_base((block,5)), false, 17)).
fix_fluent(holds(2, tower_base((block,6)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 17)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 17)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 17)).
fix_fluent(holds(1, complete(blue), false, 18)).
fix_fluent(holds(1, complete(red), false, 18)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 18)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 18)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 18)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(1, configuration(store_room_door), open, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 18)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 18)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 18)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 18)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 18)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 18)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 18)).
fix_fluent(holds(1, in(talos), (store_room,1), 18)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 18)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 18)).
fix_fluent(holds(1, on((block,3)), (block,1), 18)).
fix_fluent(holds(1, on((block,4)), nothing, 18)).
fix_fluent(holds(1, on((block,5)), nothing, 18)).
fix_fluent(holds(1, on((block,6)), nothing, 18)).
fix_fluent(holds(1, tower_base((block,1)), true, 18)).
fix_fluent(holds(1, tower_base((block,2)), true, 18)).
fix_fluent(holds(1, tower_base((block,3)), false, 18)).
fix_fluent(holds(1, tower_base((block,4)), false, 18)).
fix_fluent(holds(1, tower_base((block,5)), false, 18)).
fix_fluent(holds(1, tower_base((block,6)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(2, complete(blue), false, 18)).
fix_fluent(holds(2, complete(red), false, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 18)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 18)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 18)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 18)).
fix_fluent(holds(2, configuration(store_room_door), open, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 18)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 18)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 18)).
fix_fluent(holds(2, in((block,4)), store_room, 18)).
fix_fluent(holds(2, in((block,5)), store_room, 18)).
fix_fluent(holds(2, in((block,6)), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 18)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 18)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 18)).
fix_fluent(holds(2, in(talos), store_room, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 18)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 18)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 18)).
fix_fluent(holds(2, on((block,3)), (block,1), 18)).
fix_fluent(holds(2, on((block,4)), nothing, 18)).
fix_fluent(holds(2, on((block,5)), nothing, 18)).
fix_fluent(holds(2, on((block,6)), nothing, 18)).
fix_fluent(holds(2, tower_base((block,1)), true, 18)).
fix_fluent(holds(2, tower_base((block,2)), true, 18)).
fix_fluent(holds(2, tower_base((block,3)), false, 18)).
fix_fluent(holds(2, tower_base((block,4)), false, 18)).
fix_fluent(holds(2, tower_base((block,5)), false, 18)).
fix_fluent(holds(2, tower_base((block,6)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 18)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 18)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 18)).
fix_fluent(holds(1, complete(blue), false, 19)).
fix_fluent(holds(1, complete(red), false, 19)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 19)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 19)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 19)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(1, configuration(store_room_door), open, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 19)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 19)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 19)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 19)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 19)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 19)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 19)).
fix_fluent(holds(1, in(talos), (store_room,0), 19)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 19)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 19)).
fix_fluent(holds(1, on((block,3)), (block,1), 19)).
fix_fluent(holds(1, on((block,4)), nothing, 19)).
fix_fluent(holds(1, on((block,5)), nothing, 19)).
fix_fluent(holds(1, on((block,6)), nothing, 19)).
fix_fluent(holds(1, tower_base((block,1)), true, 19)).
fix_fluent(holds(1, tower_base((block,2)), true, 19)).
fix_fluent(holds(1, tower_base((block,3)), false, 19)).
fix_fluent(holds(1, tower_base((block,4)), false, 19)).
fix_fluent(holds(1, tower_base((block,5)), false, 19)).
fix_fluent(holds(1, tower_base((block,6)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(2, complete(blue), false, 19)).
fix_fluent(holds(2, complete(red), false, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 19)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 19)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 19)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 19)).
fix_fluent(holds(2, configuration(store_room_door), open, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 19)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 19)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 19)).
fix_fluent(holds(2, in((block,4)), store_room, 19)).
fix_fluent(holds(2, in((block,5)), store_room, 19)).
fix_fluent(holds(2, in((block,6)), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 19)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 19)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 19)).
fix_fluent(holds(2, in(talos), store_room, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 19)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 19)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 19)).
fix_fluent(holds(2, on((block,3)), (block,1), 19)).
fix_fluent(holds(2, on((block,4)), nothing, 19)).
fix_fluent(holds(2, on((block,5)), nothing, 19)).
fix_fluent(holds(2, on((block,6)), nothing, 19)).
fix_fluent(holds(2, tower_base((block,1)), true, 19)).
fix_fluent(holds(2, tower_base((block,2)), true, 19)).
fix_fluent(holds(2, tower_base((block,3)), false, 19)).
fix_fluent(holds(2, tower_base((block,4)), false, 19)).
fix_fluent(holds(2, tower_base((block,5)), false, 19)).
fix_fluent(holds(2, tower_base((block,6)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 19)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 19)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 19)).
fix_fluent(holds(1, complete(blue), false, 20)).
fix_fluent(holds(1, complete(red), false, 20)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 20)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 20)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 20)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(1, configuration(store_room_door), open, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 20)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 20)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 20)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 20)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 20)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 20)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 20)).
fix_fluent(holds(1, in(talos), (store_room,0), 20)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 20)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 20)).
fix_fluent(holds(1, on((block,3)), (block,1), 20)).
fix_fluent(holds(1, on((block,4)), nothing, 20)).
fix_fluent(holds(1, on((block,5)), nothing, 20)).
fix_fluent(holds(1, on((block,6)), nothing, 20)).
fix_fluent(holds(1, tower_base((block,1)), true, 20)).
fix_fluent(holds(1, tower_base((block,2)), true, 20)).
fix_fluent(holds(1, tower_base((block,3)), false, 20)).
fix_fluent(holds(1, tower_base((block,4)), false, 20)).
fix_fluent(holds(1, tower_base((block,5)), false, 20)).
fix_fluent(holds(1, tower_base((block,6)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(2, complete(blue), false, 20)).
fix_fluent(holds(2, complete(red), false, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 20)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 20)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 20)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 20)).
fix_fluent(holds(2, configuration(store_room_door), open, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 20)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 20)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 20)).
fix_fluent(holds(2, in((block,4)), store_room, 20)).
fix_fluent(holds(2, in((block,5)), store_room, 20)).
fix_fluent(holds(2, in((block,6)), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 20)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 20)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 20)).
fix_fluent(holds(2, in(talos), store_room, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 20)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 20)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 20)).
fix_fluent(holds(2, on((block,3)), (block,1), 20)).
fix_fluent(holds(2, on((block,4)), nothing, 20)).
fix_fluent(holds(2, on((block,5)), nothing, 20)).
fix_fluent(holds(2, on((block,6)), nothing, 20)).
fix_fluent(holds(2, tower_base((block,1)), true, 20)).
fix_fluent(holds(2, tower_base((block,2)), true, 20)).
fix_fluent(holds(2, tower_base((block,3)), false, 20)).
fix_fluent(holds(2, tower_base((block,4)), false, 20)).
fix_fluent(holds(2, tower_base((block,5)), false, 20)).
fix_fluent(holds(2, tower_base((block,6)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 20)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 20)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 20)).
fix_fluent(holds(1, complete(blue), false, 21)).
fix_fluent(holds(1, complete(red), false, 21)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 21)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 21)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 21)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 21)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(1, configuration(store_room_door), open, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 21)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 21)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 21)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 21)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 21)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 21)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 21)).
fix_fluent(holds(1, in(talos), (store_room,0), 21)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 21)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 21)).
fix_fluent(holds(1, on((block,3)), (block,1), 21)).
fix_fluent(holds(1, on((block,4)), nothing, 21)).
fix_fluent(holds(1, on((block,5)), nothing, 21)).
fix_fluent(holds(1, on((block,6)), nothing, 21)).
fix_fluent(holds(1, tower_base((block,1)), true, 21)).
fix_fluent(holds(1, tower_base((block,2)), true, 21)).
fix_fluent(holds(1, tower_base((block,3)), false, 21)).
fix_fluent(holds(1, tower_base((block,4)), false, 21)).
fix_fluent(holds(1, tower_base((block,5)), false, 21)).
fix_fluent(holds(1, tower_base((block,6)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(2, complete(blue), false, 21)).
fix_fluent(holds(2, complete(red), false, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 21)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 21)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 21)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 21)).
fix_fluent(holds(2, configuration(store_room_door), open, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 21)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 21)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 21)).
fix_fluent(holds(2, in((block,4)), store_room, 21)).
fix_fluent(holds(2, in((block,5)), store_room, 21)).
fix_fluent(holds(2, in((block,6)), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 21)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 21)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 21)).
fix_fluent(holds(2, in(talos), store_room, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 21)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 21)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 21)).
fix_fluent(holds(2, on((block,3)), (block,1), 21)).
fix_fluent(holds(2, on((block,4)), nothing, 21)).
fix_fluent(holds(2, on((block,5)), nothing, 21)).
fix_fluent(holds(2, on((block,6)), nothing, 21)).
fix_fluent(holds(2, tower_base((block,1)), true, 21)).
fix_fluent(holds(2, tower_base((block,2)), true, 21)).
fix_fluent(holds(2, tower_base((block,3)), false, 21)).
fix_fluent(holds(2, tower_base((block,4)), false, 21)).
fix_fluent(holds(2, tower_base((block,5)), false, 21)).
fix_fluent(holds(2, tower_base((block,6)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 21)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 21)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 21)).
fix_fluent(holds(1, complete(blue), false, 22)).
fix_fluent(holds(1, complete(red), false, 22)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 22)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 22)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 22)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 22)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(1, configuration(store_room_door), open, 22)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 22)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 22)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 22)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 22)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 22)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 22)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 22)).
fix_fluent(holds(1, in(talos), (store_room,0), 22)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 22)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 22)).
fix_fluent(holds(1, on((block,3)), (block,1), 22)).
fix_fluent(holds(1, on((block,4)), nothing, 22)).
fix_fluent(holds(1, on((block,5)), nothing, 22)).
fix_fluent(holds(1, on((block,6)), nothing, 22)).
fix_fluent(holds(1, tower_base((block,1)), true, 22)).
fix_fluent(holds(1, tower_base((block,2)), true, 22)).
fix_fluent(holds(1, tower_base((block,3)), false, 22)).
fix_fluent(holds(1, tower_base((block,4)), false, 22)).
fix_fluent(holds(1, tower_base((block,5)), false, 22)).
fix_fluent(holds(1, tower_base((block,6)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(2, complete(blue), false, 22)).
fix_fluent(holds(2, complete(red), false, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 22)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 22)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 22)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 22)).
fix_fluent(holds(2, configuration(store_room_door), open, 22)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 22)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 22)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 22)).
fix_fluent(holds(2, in((block,4)), store_room, 22)).
fix_fluent(holds(2, in((block,5)), store_room, 22)).
fix_fluent(holds(2, in((block,6)), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 22)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 22)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 22)).
fix_fluent(holds(2, in(talos), store_room, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 22)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 22)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 22)).
fix_fluent(holds(2, on((block,3)), (block,1), 22)).
fix_fluent(holds(2, on((block,4)), nothing, 22)).
fix_fluent(holds(2, on((block,5)), nothing, 22)).
fix_fluent(holds(2, on((block,6)), nothing, 22)).
fix_fluent(holds(2, tower_base((block,1)), true, 22)).
fix_fluent(holds(2, tower_base((block,2)), true, 22)).
fix_fluent(holds(2, tower_base((block,3)), false, 22)).
fix_fluent(holds(2, tower_base((block,4)), false, 22)).
fix_fluent(holds(2, tower_base((block,5)), false, 22)).
fix_fluent(holds(2, tower_base((block,6)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 22)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 22)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 22)).
fix_fluent(holds(1, complete(blue), false, 23)).
fix_fluent(holds(1, complete(red), false, 23)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 23)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 23)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 23)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 23)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(1, configuration(store_room_door), open, 23)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 23)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 23)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 23)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,5)), (store_room,0), 23)).
fix_fluent(holds(1, in((block,6)), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,0), 23)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,0), 23)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 23)).
fix_fluent(holds(1, in(talos), (store_room,0), 23)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 23)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 23)).
fix_fluent(holds(1, on((block,3)), (block,1), 23)).
fix_fluent(holds(1, on((block,4)), nothing, 23)).
fix_fluent(holds(1, on((block,5)), nothing, 23)).
fix_fluent(holds(1, on((block,6)), nothing, 23)).
fix_fluent(holds(1, tower_base((block,1)), true, 23)).
fix_fluent(holds(1, tower_base((block,2)), true, 23)).
fix_fluent(holds(1, tower_base((block,3)), false, 23)).
fix_fluent(holds(1, tower_base((block,4)), false, 23)).
fix_fluent(holds(1, tower_base((block,5)), false, 23)).
fix_fluent(holds(1, tower_base((block,6)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(2, complete(blue), false, 23)).
fix_fluent(holds(2, complete(red), false, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 23)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 23)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 23)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 23)).
fix_fluent(holds(2, configuration(store_room_door), open, 23)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 23)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 23)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 23)).
fix_fluent(holds(2, in((block,4)), store_room, 23)).
fix_fluent(holds(2, in((block,5)), store_room, 23)).
fix_fluent(holds(2, in((block,6)), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 23)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 23)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 23)).
fix_fluent(holds(2, in(talos), store_room, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 23)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 23)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 23)).
fix_fluent(holds(2, on((block,3)), (block,1), 23)).
fix_fluent(holds(2, on((block,4)), nothing, 23)).
fix_fluent(holds(2, on((block,5)), nothing, 23)).
fix_fluent(holds(2, on((block,6)), nothing, 23)).
fix_fluent(holds(2, tower_base((block,1)), true, 23)).
fix_fluent(holds(2, tower_base((block,2)), true, 23)).
fix_fluent(holds(2, tower_base((block,3)), false, 23)).
fix_fluent(holds(2, tower_base((block,4)), false, 23)).
fix_fluent(holds(2, tower_base((block,5)), false, 23)).
fix_fluent(holds(2, tower_base((block,6)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 23)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 23)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 23)).
fix_fluent(holds(1, complete(blue), false, 24)).
fix_fluent(holds(1, complete(red), false, 24)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 24)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 24)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 24)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 24)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(1, configuration(store_room_door), open, 24)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 24)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 24)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 24)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 24)).
fix_fluent(holds(1, in((block,5)), (store_room,1), 24)).
fix_fluent(holds(1, in((block,6)), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 24)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 24)).
fix_fluent(holds(1, in(talos), (store_room,1), 24)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 24)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 24)).
fix_fluent(holds(1, on((block,3)), (block,1), 24)).
fix_fluent(holds(1, on((block,4)), nothing, 24)).
fix_fluent(holds(1, on((block,5)), nothing, 24)).
fix_fluent(holds(1, on((block,6)), nothing, 24)).
fix_fluent(holds(1, tower_base((block,1)), true, 24)).
fix_fluent(holds(1, tower_base((block,2)), true, 24)).
fix_fluent(holds(1, tower_base((block,3)), false, 24)).
fix_fluent(holds(1, tower_base((block,4)), false, 24)).
fix_fluent(holds(1, tower_base((block,5)), false, 24)).
fix_fluent(holds(1, tower_base((block,6)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(2, complete(blue), false, 24)).
fix_fluent(holds(2, complete(red), false, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 24)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 24)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 24)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 24)).
fix_fluent(holds(2, configuration(store_room_door), open, 24)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 24)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 24)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 24)).
fix_fluent(holds(2, in((block,4)), store_room, 24)).
fix_fluent(holds(2, in((block,5)), store_room, 24)).
fix_fluent(holds(2, in((block,6)), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 24)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 24)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 24)).
fix_fluent(holds(2, in(talos), store_room, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 24)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 24)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 24)).
fix_fluent(holds(2, on((block,3)), (block,1), 24)).
fix_fluent(holds(2, on((block,4)), nothing, 24)).
fix_fluent(holds(2, on((block,5)), nothing, 24)).
fix_fluent(holds(2, on((block,6)), nothing, 24)).
fix_fluent(holds(2, tower_base((block,1)), true, 24)).
fix_fluent(holds(2, tower_base((block,2)), true, 24)).
fix_fluent(holds(2, tower_base((block,3)), false, 24)).
fix_fluent(holds(2, tower_base((block,4)), false, 24)).
fix_fluent(holds(2, tower_base((block,5)), false, 24)).
fix_fluent(holds(2, tower_base((block,6)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 24)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 24)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 24)).
fix_fluent(holds(1, complete(blue), false, 25)).
fix_fluent(holds(1, complete(red), false, 25)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 25)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 25)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 25)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 25)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(1, configuration(store_room_door), open, 25)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 25)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 25)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 25)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 25)).
fix_fluent(holds(1, in((block,5)), (hallway,0), 25)).
fix_fluent(holds(1, in((block,6)), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 25)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 25)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 25)).
fix_fluent(holds(1, in(talos), (hallway,0), 25)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 25)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 25)).
fix_fluent(holds(1, on((block,3)), (block,1), 25)).
fix_fluent(holds(1, on((block,4)), nothing, 25)).
fix_fluent(holds(1, on((block,5)), nothing, 25)).
fix_fluent(holds(1, on((block,6)), nothing, 25)).
fix_fluent(holds(1, tower_base((block,1)), true, 25)).
fix_fluent(holds(1, tower_base((block,2)), true, 25)).
fix_fluent(holds(1, tower_base((block,3)), false, 25)).
fix_fluent(holds(1, tower_base((block,4)), false, 25)).
fix_fluent(holds(1, tower_base((block,5)), false, 25)).
fix_fluent(holds(1, tower_base((block,6)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(2, complete(blue), false, 25)).
fix_fluent(holds(2, complete(red), false, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 25)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 25)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 25)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 25)).
fix_fluent(holds(2, configuration(store_room_door), open, 25)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 25)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 25)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 25)).
fix_fluent(holds(2, in((block,4)), store_room, 25)).
fix_fluent(holds(2, in((block,5)), hallway, 25)).
fix_fluent(holds(2, in((block,6)), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 25)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 25)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 25)).
fix_fluent(holds(2, in(talos), hallway, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 25)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 25)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 25)).
fix_fluent(holds(2, on((block,3)), (block,1), 25)).
fix_fluent(holds(2, on((block,4)), nothing, 25)).
fix_fluent(holds(2, on((block,5)), nothing, 25)).
fix_fluent(holds(2, on((block,6)), nothing, 25)).
fix_fluent(holds(2, tower_base((block,1)), true, 25)).
fix_fluent(holds(2, tower_base((block,2)), true, 25)).
fix_fluent(holds(2, tower_base((block,3)), false, 25)).
fix_fluent(holds(2, tower_base((block,4)), false, 25)).
fix_fluent(holds(2, tower_base((block,5)), false, 25)).
fix_fluent(holds(2, tower_base((block,6)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 25)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 25)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 25)).
fix_fluent(holds(1, complete(blue), false, 26)).
fix_fluent(holds(1, complete(red), false, 26)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 26)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 26)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 26)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 26)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(1, configuration(store_room_door), open, 26)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 26)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 26)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 26)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 26)).
fix_fluent(holds(1, in((block,5)), (hallway,1), 26)).
fix_fluent(holds(1, in((block,6)), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 26)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 26)).
fix_fluent(holds(1, in(talos), (hallway,1), 26)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 26)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 26)).
fix_fluent(holds(1, on((block,3)), (block,1), 26)).
fix_fluent(holds(1, on((block,4)), nothing, 26)).
fix_fluent(holds(1, on((block,5)), nothing, 26)).
fix_fluent(holds(1, on((block,6)), nothing, 26)).
fix_fluent(holds(1, tower_base((block,1)), true, 26)).
fix_fluent(holds(1, tower_base((block,2)), true, 26)).
fix_fluent(holds(1, tower_base((block,3)), false, 26)).
fix_fluent(holds(1, tower_base((block,4)), false, 26)).
fix_fluent(holds(1, tower_base((block,5)), false, 26)).
fix_fluent(holds(1, tower_base((block,6)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(2, complete(blue), false, 26)).
fix_fluent(holds(2, complete(red), false, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 26)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 26)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 26)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 26)).
fix_fluent(holds(2, configuration(store_room_door), open, 26)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 26)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 26)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 26)).
fix_fluent(holds(2, in((block,4)), store_room, 26)).
fix_fluent(holds(2, in((block,5)), hallway, 26)).
fix_fluent(holds(2, in((block,6)), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 26)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 26)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 26)).
fix_fluent(holds(2, in(talos), hallway, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 26)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 26)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 26)).
fix_fluent(holds(2, on((block,3)), (block,1), 26)).
fix_fluent(holds(2, on((block,4)), nothing, 26)).
fix_fluent(holds(2, on((block,5)), nothing, 26)).
fix_fluent(holds(2, on((block,6)), nothing, 26)).
fix_fluent(holds(2, tower_base((block,1)), true, 26)).
fix_fluent(holds(2, tower_base((block,2)), true, 26)).
fix_fluent(holds(2, tower_base((block,3)), false, 26)).
fix_fluent(holds(2, tower_base((block,4)), false, 26)).
fix_fluent(holds(2, tower_base((block,5)), false, 26)).
fix_fluent(holds(2, tower_base((block,6)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 26)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 26)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 26)).
fix_fluent(holds(1, complete(blue), false, 27)).
fix_fluent(holds(1, complete(red), false, 27)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 27)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 27)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 27)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 27)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(1, configuration(store_room_door), open, 27)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 27)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 27)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 27)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 27)).
fix_fluent(holds(1, in((block,5)), (hallway,2), 27)).
fix_fluent(holds(1, in((block,6)), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 27)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 27)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 27)).
fix_fluent(holds(1, in(talos), (hallway,2), 27)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 27)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 27)).
fix_fluent(holds(1, on((block,3)), (block,1), 27)).
fix_fluent(holds(1, on((block,4)), nothing, 27)).
fix_fluent(holds(1, on((block,5)), nothing, 27)).
fix_fluent(holds(1, on((block,6)), nothing, 27)).
fix_fluent(holds(1, tower_base((block,1)), true, 27)).
fix_fluent(holds(1, tower_base((block,2)), true, 27)).
fix_fluent(holds(1, tower_base((block,3)), false, 27)).
fix_fluent(holds(1, tower_base((block,4)), false, 27)).
fix_fluent(holds(1, tower_base((block,5)), false, 27)).
fix_fluent(holds(1, tower_base((block,6)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(2, complete(blue), false, 27)).
fix_fluent(holds(2, complete(red), false, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 27)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 27)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 27)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 27)).
fix_fluent(holds(2, configuration(store_room_door), open, 27)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 27)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 27)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 27)).
fix_fluent(holds(2, in((block,4)), store_room, 27)).
fix_fluent(holds(2, in((block,5)), hallway, 27)).
fix_fluent(holds(2, in((block,6)), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 27)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 27)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 27)).
fix_fluent(holds(2, in(talos), hallway, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 27)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 27)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 27)).
fix_fluent(holds(2, on((block,3)), (block,1), 27)).
fix_fluent(holds(2, on((block,4)), nothing, 27)).
fix_fluent(holds(2, on((block,5)), nothing, 27)).
fix_fluent(holds(2, on((block,6)), nothing, 27)).
fix_fluent(holds(2, tower_base((block,1)), true, 27)).
fix_fluent(holds(2, tower_base((block,2)), true, 27)).
fix_fluent(holds(2, tower_base((block,3)), false, 27)).
fix_fluent(holds(2, tower_base((block,4)), false, 27)).
fix_fluent(holds(2, tower_base((block,5)), false, 27)).
fix_fluent(holds(2, tower_base((block,6)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 27)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 27)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 27)).
fix_fluent(holds(1, complete(blue), false, 28)).
fix_fluent(holds(1, complete(red), false, 28)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 28)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 28)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 28)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 28)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(1, configuration(store_room_door), open, 28)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 28)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 28)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 28)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 28)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 28)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 28)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 28)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 28)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 28)).
fix_fluent(holds(1, on((block,3)), (block,1), 28)).
fix_fluent(holds(1, on((block,4)), nothing, 28)).
fix_fluent(holds(1, on((block,5)), nothing, 28)).
fix_fluent(holds(1, on((block,6)), nothing, 28)).
fix_fluent(holds(1, tower_base((block,1)), true, 28)).
fix_fluent(holds(1, tower_base((block,2)), true, 28)).
fix_fluent(holds(1, tower_base((block,3)), false, 28)).
fix_fluent(holds(1, tower_base((block,4)), false, 28)).
fix_fluent(holds(1, tower_base((block,5)), false, 28)).
fix_fluent(holds(1, tower_base((block,6)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(2, complete(blue), false, 28)).
fix_fluent(holds(2, complete(red), false, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 28)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 28)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 28)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 28)).
fix_fluent(holds(2, configuration(store_room_door), open, 28)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 28)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 28)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,4)), store_room, 28)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 28)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 28)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 28)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 28)).
fix_fluent(holds(2, in(talos), puzzle_room, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 28)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 28)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 28)).
fix_fluent(holds(2, on((block,3)), (block,1), 28)).
fix_fluent(holds(2, on((block,4)), nothing, 28)).
fix_fluent(holds(2, on((block,5)), nothing, 28)).
fix_fluent(holds(2, on((block,6)), nothing, 28)).
fix_fluent(holds(2, tower_base((block,1)), true, 28)).
fix_fluent(holds(2, tower_base((block,2)), true, 28)).
fix_fluent(holds(2, tower_base((block,3)), false, 28)).
fix_fluent(holds(2, tower_base((block,4)), false, 28)).
fix_fluent(holds(2, tower_base((block,5)), false, 28)).
fix_fluent(holds(2, tower_base((block,6)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 28)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 28)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 28)).
fix_fluent(holds(1, complete(blue), false, 29)).
fix_fluent(holds(1, complete(red), false, 29)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 29)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 29)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 29)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 29)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(1, configuration(store_room_door), open, 29)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 29)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 29)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 29)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 29)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 29)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 29)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 29)).
fix_fluent(holds(1, on((block,3)), (block,1), 29)).
fix_fluent(holds(1, on((block,4)), nothing, 29)).
fix_fluent(holds(1, on((block,5)), nothing, 29)).
fix_fluent(holds(1, on((block,6)), nothing, 29)).
fix_fluent(holds(1, tower_base((block,1)), true, 29)).
fix_fluent(holds(1, tower_base((block,2)), true, 29)).
fix_fluent(holds(1, tower_base((block,3)), false, 29)).
fix_fluent(holds(1, tower_base((block,4)), false, 29)).
fix_fluent(holds(1, tower_base((block,5)), false, 29)).
fix_fluent(holds(1, tower_base((block,6)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(2, complete(blue), false, 29)).
fix_fluent(holds(2, complete(red), false, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 29)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 29)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 29)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 29)).
fix_fluent(holds(2, configuration(store_room_door), open, 29)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 29)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 29)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,4)), store_room, 29)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 29)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 29)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 29)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 29)).
fix_fluent(holds(2, in(talos), puzzle_room, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 29)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 29)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 29)).
fix_fluent(holds(2, on((block,3)), (block,1), 29)).
fix_fluent(holds(2, on((block,4)), nothing, 29)).
fix_fluent(holds(2, on((block,5)), nothing, 29)).
fix_fluent(holds(2, on((block,6)), nothing, 29)).
fix_fluent(holds(2, tower_base((block,1)), true, 29)).
fix_fluent(holds(2, tower_base((block,2)), true, 29)).
fix_fluent(holds(2, tower_base((block,3)), false, 29)).
fix_fluent(holds(2, tower_base((block,4)), false, 29)).
fix_fluent(holds(2, tower_base((block,5)), false, 29)).
fix_fluent(holds(2, tower_base((block,6)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 29)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 29)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 29)).
fix_fluent(holds(1, complete(blue), false, 30)).
fix_fluent(holds(1, complete(red), false, 30)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 30)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 30)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 30)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 30)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(1, configuration(store_room_door), open, 30)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 30)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 30)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 30)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 30)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 30)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 30)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 30)).
fix_fluent(holds(1, on((block,3)), (block,1), 30)).
fix_fluent(holds(1, on((block,4)), nothing, 30)).
fix_fluent(holds(1, on((block,5)), nothing, 30)).
fix_fluent(holds(1, on((block,6)), nothing, 30)).
fix_fluent(holds(1, tower_base((block,1)), true, 30)).
fix_fluent(holds(1, tower_base((block,2)), true, 30)).
fix_fluent(holds(1, tower_base((block,3)), false, 30)).
fix_fluent(holds(1, tower_base((block,4)), false, 30)).
fix_fluent(holds(1, tower_base((block,5)), false, 30)).
fix_fluent(holds(1, tower_base((block,6)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(2, complete(blue), false, 30)).
fix_fluent(holds(2, complete(red), false, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 30)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 30)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 30)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 30)).
fix_fluent(holds(2, configuration(store_room_door), open, 30)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 30)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 30)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,4)), store_room, 30)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 30)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 30)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 30)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 30)).
fix_fluent(holds(2, in(talos), puzzle_room, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 30)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), false, 30)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 30)).
fix_fluent(holds(2, on((block,3)), (block,1), 30)).
fix_fluent(holds(2, on((block,4)), nothing, 30)).
fix_fluent(holds(2, on((block,5)), nothing, 30)).
fix_fluent(holds(2, on((block,6)), nothing, 30)).
fix_fluent(holds(2, tower_base((block,1)), true, 30)).
fix_fluent(holds(2, tower_base((block,2)), true, 30)).
fix_fluent(holds(2, tower_base((block,3)), false, 30)).
fix_fluent(holds(2, tower_base((block,4)), false, 30)).
fix_fluent(holds(2, tower_base((block,5)), false, 30)).
fix_fluent(holds(2, tower_base((block,6)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 30)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 30)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 30)).
fix_fluent(holds(1, complete(blue), false, 31)).
fix_fluent(holds(1, complete(red), false, 31)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,6)), 31)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 31)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 31)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 31)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(1, configuration(store_room_door), open, 31)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,6), 31)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 31)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 31)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 31)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 31)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 31)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, on((block,3)), (block,1), 31)).
fix_fluent(holds(1, on((block,4)), nothing, 31)).
fix_fluent(holds(1, on((block,5)), nothing, 31)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 31)).
fix_fluent(holds(1, tower_base((block,1)), true, 31)).
fix_fluent(holds(1, tower_base((block,2)), true, 31)).
fix_fluent(holds(1, tower_base((block,3)), false, 31)).
fix_fluent(holds(1, tower_base((block,4)), false, 31)).
fix_fluent(holds(1, tower_base((block,5)), false, 31)).
fix_fluent(holds(1, tower_base((block,6)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(2, complete(blue), false, 31)).
fix_fluent(holds(2, complete(red), false, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 31)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 31)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 31)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 31)).
fix_fluent(holds(2, configuration(store_room_door), open, 31)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,6), 31)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 31)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,4)), store_room, 31)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 31)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 31)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 31)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 31)).
fix_fluent(holds(2, in(talos), puzzle_room, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 31)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 31)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 31)).
fix_fluent(holds(2, on((block,3)), (block,1), 31)).
fix_fluent(holds(2, on((block,4)), nothing, 31)).
fix_fluent(holds(2, on((block,5)), nothing, 31)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 31)).
fix_fluent(holds(2, tower_base((block,1)), true, 31)).
fix_fluent(holds(2, tower_base((block,2)), true, 31)).
fix_fluent(holds(2, tower_base((block,3)), false, 31)).
fix_fluent(holds(2, tower_base((block,4)), false, 31)).
fix_fluent(holds(2, tower_base((block,5)), false, 31)).
fix_fluent(holds(2, tower_base((block,6)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 31)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 31)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 31)).
fix_fluent(holds(1, complete(blue), false, 32)).
fix_fluent(holds(1, complete(red), false, 32)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 32)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 32)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 32)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 32)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(1, configuration(store_room_door), open, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 32)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 32)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 32)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 32)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 32)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 32)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, on((block,3)), (block,1), 32)).
fix_fluent(holds(1, on((block,4)), nothing, 32)).
fix_fluent(holds(1, on((block,5)), nothing, 32)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 32)).
fix_fluent(holds(1, tower_base((block,1)), true, 32)).
fix_fluent(holds(1, tower_base((block,2)), true, 32)).
fix_fluent(holds(1, tower_base((block,3)), false, 32)).
fix_fluent(holds(1, tower_base((block,4)), false, 32)).
fix_fluent(holds(1, tower_base((block,5)), false, 32)).
fix_fluent(holds(1, tower_base((block,6)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(2, complete(blue), false, 32)).
fix_fluent(holds(2, complete(red), false, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 32)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 32)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 32)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 32)).
fix_fluent(holds(2, configuration(store_room_door), open, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 32)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 32)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,4)), store_room, 32)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 32)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 32)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 32)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 32)).
fix_fluent(holds(2, in(talos), puzzle_room, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), false, 32)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 32)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 32)).
fix_fluent(holds(2, on((block,3)), (block,1), 32)).
fix_fluent(holds(2, on((block,4)), nothing, 32)).
fix_fluent(holds(2, on((block,5)), nothing, 32)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 32)).
fix_fluent(holds(2, tower_base((block,1)), true, 32)).
fix_fluent(holds(2, tower_base((block,2)), true, 32)).
fix_fluent(holds(2, tower_base((block,3)), false, 32)).
fix_fluent(holds(2, tower_base((block,4)), false, 32)).
fix_fluent(holds(2, tower_base((block,5)), false, 32)).
fix_fluent(holds(2, tower_base((block,6)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 32)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 32)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 32)).
fix_fluent(holds(1, complete(blue), false, 33)).
fix_fluent(holds(1, complete(red), false, 33)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 33)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 33)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 33)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 33)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(1, configuration(store_room_door), open, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 33)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 33)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 33)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 33)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 33)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 33)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, on((block,3)), (block,1), 33)).
fix_fluent(holds(1, on((block,4)), nothing, 33)).
fix_fluent(holds(1, on((block,5)), (block,6), 33)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 33)).
fix_fluent(holds(1, tower_base((block,1)), true, 33)).
fix_fluent(holds(1, tower_base((block,2)), true, 33)).
fix_fluent(holds(1, tower_base((block,3)), false, 33)).
fix_fluent(holds(1, tower_base((block,4)), false, 33)).
fix_fluent(holds(1, tower_base((block,5)), false, 33)).
fix_fluent(holds(1, tower_base((block,6)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(2, complete(blue), false, 33)).
fix_fluent(holds(2, complete(red), false, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 33)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 33)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 33)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 33)).
fix_fluent(holds(2, configuration(store_room_door), open, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 33)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 33)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,4)), store_room, 33)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 33)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 33)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 33)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 33)).
fix_fluent(holds(2, in(talos), puzzle_room, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 33)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 33)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 33)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 33)).
fix_fluent(holds(2, on((block,3)), (block,1), 33)).
fix_fluent(holds(2, on((block,4)), nothing, 33)).
fix_fluent(holds(2, on((block,5)), (block,6), 33)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 33)).
fix_fluent(holds(2, tower_base((block,1)), true, 33)).
fix_fluent(holds(2, tower_base((block,2)), true, 33)).
fix_fluent(holds(2, tower_base((block,3)), false, 33)).
fix_fluent(holds(2, tower_base((block,4)), false, 33)).
fix_fluent(holds(2, tower_base((block,5)), false, 33)).
fix_fluent(holds(2, tower_base((block,6)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 33)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 33)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 33)).
fix_fluent(holds(1, complete(blue), false, 34)).
fix_fluent(holds(1, complete(red), false, 34)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 34)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,5)), 34)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 34)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 34)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(1, configuration(store_room_door), open, 34)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 34)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,5), 34)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 34)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 34)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 34)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 34)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, on((block,3)), (block,1), 34)).
fix_fluent(holds(1, on((block,4)), nothing, 34)).
fix_fluent(holds(1, on((block,5)), (block,6), 34)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 34)).
fix_fluent(holds(1, tower_base((block,1)), true, 34)).
fix_fluent(holds(1, tower_base((block,2)), true, 34)).
fix_fluent(holds(1, tower_base((block,3)), false, 34)).
fix_fluent(holds(1, tower_base((block,4)), false, 34)).
fix_fluent(holds(1, tower_base((block,5)), false, 34)).
fix_fluent(holds(1, tower_base((block,6)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(2, complete(blue), false, 34)).
fix_fluent(holds(2, complete(red), false, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 34)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 34)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 34)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 34)).
fix_fluent(holds(2, configuration(store_room_door), open, 34)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 34)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,5), 34)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,4)), store_room, 34)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 34)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 34)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 34)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 34)).
fix_fluent(holds(2, in(talos), puzzle_room, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), true, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 34)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 34)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 34)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 34)).
fix_fluent(holds(2, on((block,3)), (block,1), 34)).
fix_fluent(holds(2, on((block,4)), nothing, 34)).
fix_fluent(holds(2, on((block,5)), (block,6), 34)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 34)).
fix_fluent(holds(2, tower_base((block,1)), true, 34)).
fix_fluent(holds(2, tower_base((block,2)), true, 34)).
fix_fluent(holds(2, tower_base((block,3)), false, 34)).
fix_fluent(holds(2, tower_base((block,4)), false, 34)).
fix_fluent(holds(2, tower_base((block,5)), false, 34)).
fix_fluent(holds(2, tower_base((block,6)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,1)), true, 34)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 34)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 34)).
fix_fluent(holds(1, complete(blue), false, 35)).
fix_fluent(holds(1, complete(red), false, 35)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 35)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 35)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 35)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 35)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(1, configuration(store_room_door), open, 35)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,3), 35)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 35)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 35)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 35)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 35)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 35)).
fix_fluent(holds(1, on((block,4)), nothing, 35)).
fix_fluent(holds(1, on((block,5)), (block,6), 35)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 35)).
fix_fluent(holds(1, tower_base((block,1)), true, 35)).
fix_fluent(holds(1, tower_base((block,2)), true, 35)).
fix_fluent(holds(1, tower_base((block,3)), true, 35)).
fix_fluent(holds(1, tower_base((block,4)), false, 35)).
fix_fluent(holds(1, tower_base((block,5)), false, 35)).
fix_fluent(holds(1, tower_base((block,6)), true, 35)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(2, complete(blue), false, 35)).
fix_fluent(holds(2, complete(red), false, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 35)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 35)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 35)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 35)).
fix_fluent(holds(2, configuration(store_room_door), open, 35)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,3), 35)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 35)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,4)), store_room, 35)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 35)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 35)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 35)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 35)).
fix_fluent(holds(2, in(talos), puzzle_room, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 35)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 35)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 35)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 35)).
fix_fluent(holds(2, on((block,4)), nothing, 35)).
fix_fluent(holds(2, on((block,5)), (block,6), 35)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 35)).
fix_fluent(holds(2, tower_base((block,1)), true, 35)).
fix_fluent(holds(2, tower_base((block,2)), true, 35)).
fix_fluent(holds(2, tower_base((block,3)), true, 35)).
fix_fluent(holds(2, tower_base((block,4)), false, 35)).
fix_fluent(holds(2, tower_base((block,5)), false, 35)).
fix_fluent(holds(2, tower_base((block,6)), true, 35)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 35)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 35)).
fix_fluent(holds(1, complete(blue), false, 36)).
fix_fluent(holds(1, complete(red), false, 36)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with(nothing), 36)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 36)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 36)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 36)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(1, configuration(store_room_door), open, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 36)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 36)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 36)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 36)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 36)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 36)).
fix_fluent(holds(1, on((block,4)), nothing, 36)).
fix_fluent(holds(1, on((block,5)), (block,6), 36)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 36)).
fix_fluent(holds(1, tower_base((block,1)), true, 36)).
fix_fluent(holds(1, tower_base((block,2)), true, 36)).
fix_fluent(holds(1, tower_base((block,3)), true, 36)).
fix_fluent(holds(1, tower_base((block,4)), false, 36)).
fix_fluent(holds(1, tower_base((block,5)), false, 36)).
fix_fluent(holds(1, tower_base((block,6)), true, 36)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(2, complete(blue), false, 36)).
fix_fluent(holds(2, complete(red), false, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 36)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 36)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 36)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 36)).
fix_fluent(holds(2, configuration(store_room_door), open, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 36)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 36)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,4)), store_room, 36)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 36)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 36)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 36)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 36)).
fix_fluent(holds(2, in(talos), puzzle_room, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 36)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 36)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 36)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 36)).
fix_fluent(holds(2, on((block,4)), nothing, 36)).
fix_fluent(holds(2, on((block,5)), (block,6), 36)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 36)).
fix_fluent(holds(2, tower_base((block,1)), true, 36)).
fix_fluent(holds(2, tower_base((block,2)), true, 36)).
fix_fluent(holds(2, tower_base((block,3)), true, 36)).
fix_fluent(holds(2, tower_base((block,4)), false, 36)).
fix_fluent(holds(2, tower_base((block,5)), false, 36)).
fix_fluent(holds(2, tower_base((block,6)), true, 36)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 36)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 36)).
fix_fluent(holds(1, complete(blue), false, 37)).
fix_fluent(holds(1, complete(red), false, 37)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 37)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 37)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 37)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 37)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(1, configuration(store_room_door), open, 37)).
fix_fluent(holds(1, grasping(manipulator_arm_1), nothing, 37)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,2), 37)).
fix_fluent(holds(1, grasping(manipulator_end_1), nothing, 37)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,2), 37)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 37)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 37)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 37)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,2)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 37)).
fix_fluent(holds(1, on((block,4)), nothing, 37)).
fix_fluent(holds(1, on((block,5)), (block,6), 37)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 37)).
fix_fluent(holds(1, tower_base((block,1)), true, 37)).
fix_fluent(holds(1, tower_base((block,2)), true, 37)).
fix_fluent(holds(1, tower_base((block,3)), true, 37)).
fix_fluent(holds(1, tower_base((block,4)), false, 37)).
fix_fluent(holds(1, tower_base((block,5)), false, 37)).
fix_fluent(holds(1, tower_base((block,6)), true, 37)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(2, complete(blue), false, 37)).
fix_fluent(holds(2, complete(red), false, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 37)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 37)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 37)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 37)).
fix_fluent(holds(2, configuration(store_room_door), open, 37)).
fix_fluent(holds(2, grasping(manipulator_arm_1), nothing, 37)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 37)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,4)), store_room, 37)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 37)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 37)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 37)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 37)).
fix_fluent(holds(2, in(talos), puzzle_room, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), true, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 37)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 37)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 37)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,2)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 37)).
fix_fluent(holds(2, on((block,4)), nothing, 37)).
fix_fluent(holds(2, on((block,5)), (block,6), 37)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 37)).
fix_fluent(holds(2, tower_base((block,1)), true, 37)).
fix_fluent(holds(2, tower_base((block,2)), true, 37)).
fix_fluent(holds(2, tower_base((block,3)), true, 37)).
fix_fluent(holds(2, tower_base((block,4)), false, 37)).
fix_fluent(holds(2, tower_base((block,5)), false, 37)).
fix_fluent(holds(2, tower_base((block,6)), true, 37)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 37)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 37)).
fix_fluent(holds(1, complete(blue), false, 38)).
fix_fluent(holds(1, complete(red), false, 38)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 38)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with((block,2)), 38)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 38)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 38)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(1, configuration(store_room_door), open, 38)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 38)).
fix_fluent(holds(1, grasping(manipulator_arm_2), (block,2), 38)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 38)).
fix_fluent(holds(1, grasping(manipulator_end_2), (block,2), 38)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 38)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 38)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 38)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(1, on((block,1)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,2)), (block,3), 38)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 38)).
fix_fluent(holds(1, on((block,4)), nothing, 38)).
fix_fluent(holds(1, on((block,5)), (block,6), 38)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 38)).
fix_fluent(holds(1, tower_base((block,1)), true, 38)).
fix_fluent(holds(1, tower_base((block,2)), false, 38)).
fix_fluent(holds(1, tower_base((block,3)), true, 38)).
fix_fluent(holds(1, tower_base((block,4)), false, 38)).
fix_fluent(holds(1, tower_base((block,5)), false, 38)).
fix_fluent(holds(1, tower_base((block,6)), true, 38)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(2, complete(blue), false, 38)).
fix_fluent(holds(2, complete(red), false, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 38)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 38)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 38)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 38)).
fix_fluent(holds(2, configuration(store_room_door), open, 38)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 38)).
fix_fluent(holds(2, grasping(manipulator_arm_2), (block,2), 38)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,4)), store_room, 38)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 38)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 38)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 38)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 38)).
fix_fluent(holds(2, in(talos), puzzle_room, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), true, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 38)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 38)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 38)).
fix_fluent(holds(2, on((block,1)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,2)), (block,3), 38)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 38)).
fix_fluent(holds(2, on((block,4)), nothing, 38)).
fix_fluent(holds(2, on((block,5)), (block,6), 38)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 38)).
fix_fluent(holds(2, tower_base((block,1)), true, 38)).
fix_fluent(holds(2, tower_base((block,2)), false, 38)).
fix_fluent(holds(2, tower_base((block,3)), true, 38)).
fix_fluent(holds(2, tower_base((block,4)), false, 38)).
fix_fluent(holds(2, tower_base((block,5)), false, 38)).
fix_fluent(holds(2, tower_base((block,6)), true, 38)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 38)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 38)).
fix_fluent(holds(1, complete(blue), false, 39)).
fix_fluent(holds(1, complete(red), false, 39)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 39)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 39)).
fix_fluent(holds(1, configuration(manipulator_limb_1), extended, 39)).
fix_fluent(holds(1, configuration(manipulator_limb_2), extended, 39)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(1, configuration(store_room_door), open, 39)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 39)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 39)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 39)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 39)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 39)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 39)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 39)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(1, on((block,1)), nothing, 39)).
fix_fluent(holds(1, on((block,2)), (block,3), 39)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 39)).
fix_fluent(holds(1, on((block,4)), nothing, 39)).
fix_fluent(holds(1, on((block,5)), (block,6), 39)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 39)).
fix_fluent(holds(1, tower_base((block,1)), false, 39)).
fix_fluent(holds(1, tower_base((block,2)), false, 39)).
fix_fluent(holds(1, tower_base((block,3)), true, 39)).
fix_fluent(holds(1, tower_base((block,4)), false, 39)).
fix_fluent(holds(1, tower_base((block,5)), false, 39)).
fix_fluent(holds(1, tower_base((block,6)), true, 39)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(2, complete(blue), false, 39)).
fix_fluent(holds(2, complete(red), false, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_1), extended, 39)).
fix_fluent(holds(2, configuration(manipulator_arm_2), extended, 39)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 39)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 39)).
fix_fluent(holds(2, configuration(store_room_door), open, 39)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 39)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 39)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,4)), store_room, 39)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 39)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 39)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 39)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 39)).
fix_fluent(holds(2, in(talos), puzzle_room, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 39)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 39)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 39)).
fix_fluent(holds(2, on((block,1)), nothing, 39)).
fix_fluent(holds(2, on((block,2)), (block,3), 39)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 39)).
fix_fluent(holds(2, on((block,4)), nothing, 39)).
fix_fluent(holds(2, on((block,5)), (block,6), 39)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 39)).
fix_fluent(holds(2, tower_base((block,1)), false, 39)).
fix_fluent(holds(2, tower_base((block,2)), false, 39)).
fix_fluent(holds(2, tower_base((block,3)), true, 39)).
fix_fluent(holds(2, tower_base((block,4)), false, 39)).
fix_fluent(holds(2, tower_base((block,5)), false, 39)).
fix_fluent(holds(2, tower_base((block,6)), true, 39)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 39)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 39)).
fix_fluent(holds(1, complete(blue), false, 40)).
fix_fluent(holds(1, complete(red), false, 40)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 40)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 40)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 40)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 40)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(1, configuration(store_room_door), open, 40)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 40)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 40)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 40)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 40)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 40)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 40)).
fix_fluent(holds(1, in(talos), (puzzle_room,1), 40)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(1, on((block,1)), nothing, 40)).
fix_fluent(holds(1, on((block,2)), (block,3), 40)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 40)).
fix_fluent(holds(1, on((block,4)), nothing, 40)).
fix_fluent(holds(1, on((block,5)), (block,6), 40)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 40)).
fix_fluent(holds(1, tower_base((block,1)), false, 40)).
fix_fluent(holds(1, tower_base((block,2)), false, 40)).
fix_fluent(holds(1, tower_base((block,3)), true, 40)).
fix_fluent(holds(1, tower_base((block,4)), false, 40)).
fix_fluent(holds(1, tower_base((block,5)), false, 40)).
fix_fluent(holds(1, tower_base((block,6)), true, 40)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(2, complete(blue), false, 40)).
fix_fluent(holds(2, complete(red), false, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 40)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 40)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 40)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 40)).
fix_fluent(holds(2, configuration(store_room_door), open, 40)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 40)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 40)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,4)), store_room, 40)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 40)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 40)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 40)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 40)).
fix_fluent(holds(2, in(talos), puzzle_room, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 40)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 40)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 40)).
fix_fluent(holds(2, on((block,1)), nothing, 40)).
fix_fluent(holds(2, on((block,2)), (block,3), 40)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 40)).
fix_fluent(holds(2, on((block,4)), nothing, 40)).
fix_fluent(holds(2, on((block,5)), (block,6), 40)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 40)).
fix_fluent(holds(2, tower_base((block,1)), false, 40)).
fix_fluent(holds(2, tower_base((block,2)), false, 40)).
fix_fluent(holds(2, tower_base((block,3)), true, 40)).
fix_fluent(holds(2, tower_base((block,4)), false, 40)).
fix_fluent(holds(2, tower_base((block,5)), false, 40)).
fix_fluent(holds(2, tower_base((block,6)), true, 40)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 40)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 40)).
fix_fluent(holds(1, complete(blue), false, 41)).
fix_fluent(holds(1, complete(red), false, 41)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 41)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 41)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 41)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 41)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(1, configuration(store_room_door), open, 41)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 41)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 41)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 41)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 41)).
fix_fluent(holds(1, in((block,1)), (puzzle_room,0), 41)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 41)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(manipulator_arm_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_arm_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_end_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_1), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(manipulator_limb_2), (puzzle_room,0), 41)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 41)).
fix_fluent(holds(1, in(talos), (puzzle_room,0), 41)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(1, on((block,1)), nothing, 41)).
fix_fluent(holds(1, on((block,2)), (block,3), 41)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 41)).
fix_fluent(holds(1, on((block,4)), nothing, 41)).
fix_fluent(holds(1, on((block,5)), (block,6), 41)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 41)).
fix_fluent(holds(1, tower_base((block,1)), false, 41)).
fix_fluent(holds(1, tower_base((block,2)), false, 41)).
fix_fluent(holds(1, tower_base((block,3)), true, 41)).
fix_fluent(holds(1, tower_base((block,4)), false, 41)).
fix_fluent(holds(1, tower_base((block,5)), false, 41)).
fix_fluent(holds(1, tower_base((block,6)), true, 41)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(2, complete(blue), false, 41)).
fix_fluent(holds(2, complete(red), false, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 41)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 41)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 41)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 41)).
fix_fluent(holds(2, configuration(store_room_door), open, 41)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 41)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 41)).
fix_fluent(holds(2, in((block,1)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,4)), store_room, 41)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 41)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_1), puzzle_room, 41)).
fix_fluent(holds(2, in(manipulator_arm_2), puzzle_room, 41)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 41)).
fix_fluent(holds(2, in(talos), puzzle_room, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 41)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 41)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 41)).
fix_fluent(holds(2, on((block,1)), nothing, 41)).
fix_fluent(holds(2, on((block,2)), (block,3), 41)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 41)).
fix_fluent(holds(2, on((block,4)), nothing, 41)).
fix_fluent(holds(2, on((block,5)), (block,6), 41)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 41)).
fix_fluent(holds(2, tower_base((block,1)), false, 41)).
fix_fluent(holds(2, tower_base((block,2)), false, 41)).
fix_fluent(holds(2, tower_base((block,3)), true, 41)).
fix_fluent(holds(2, tower_base((block,4)), false, 41)).
fix_fluent(holds(2, tower_base((block,5)), false, 41)).
fix_fluent(holds(2, tower_base((block,6)), true, 41)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 41)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 41)).
fix_fluent(holds(1, complete(blue), false, 42)).
fix_fluent(holds(1, complete(red), false, 42)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 42)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 42)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 42)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 42)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(1, configuration(store_room_door), open, 42)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 42)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 42)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 42)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 42)).
fix_fluent(holds(1, in((block,1)), (hallway,2), 42)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 42)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,2), 42)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,2), 42)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 42)).
fix_fluent(holds(1, in(talos), (hallway,2), 42)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(1, on((block,1)), nothing, 42)).
fix_fluent(holds(1, on((block,2)), (block,3), 42)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 42)).
fix_fluent(holds(1, on((block,4)), nothing, 42)).
fix_fluent(holds(1, on((block,5)), (block,6), 42)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 42)).
fix_fluent(holds(1, tower_base((block,1)), false, 42)).
fix_fluent(holds(1, tower_base((block,2)), false, 42)).
fix_fluent(holds(1, tower_base((block,3)), true, 42)).
fix_fluent(holds(1, tower_base((block,4)), false, 42)).
fix_fluent(holds(1, tower_base((block,5)), false, 42)).
fix_fluent(holds(1, tower_base((block,6)), true, 42)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(2, complete(blue), false, 42)).
fix_fluent(holds(2, complete(red), false, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 42)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 42)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 42)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 42)).
fix_fluent(holds(2, configuration(store_room_door), open, 42)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 42)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 42)).
fix_fluent(holds(2, in((block,1)), hallway, 42)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,4)), store_room, 42)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 42)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 42)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 42)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 42)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 42)).
fix_fluent(holds(2, in(talos), hallway, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 42)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 42)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 42)).
fix_fluent(holds(2, on((block,1)), nothing, 42)).
fix_fluent(holds(2, on((block,2)), (block,3), 42)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 42)).
fix_fluent(holds(2, on((block,4)), nothing, 42)).
fix_fluent(holds(2, on((block,5)), (block,6), 42)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 42)).
fix_fluent(holds(2, tower_base((block,1)), false, 42)).
fix_fluent(holds(2, tower_base((block,2)), false, 42)).
fix_fluent(holds(2, tower_base((block,3)), true, 42)).
fix_fluent(holds(2, tower_base((block,4)), false, 42)).
fix_fluent(holds(2, tower_base((block,5)), false, 42)).
fix_fluent(holds(2, tower_base((block,6)), true, 42)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 42)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 42)).
fix_fluent(holds(1, complete(blue), false, 43)).
fix_fluent(holds(1, complete(red), false, 43)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 43)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 43)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 43)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 43)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(1, configuration(store_room_door), open, 43)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 43)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 43)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 43)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 43)).
fix_fluent(holds(1, in((block,1)), (hallway,1), 43)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 43)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,1), 43)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 43)).
fix_fluent(holds(1, in(talos), (hallway,1), 43)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(1, on((block,1)), nothing, 43)).
fix_fluent(holds(1, on((block,2)), (block,3), 43)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 43)).
fix_fluent(holds(1, on((block,4)), nothing, 43)).
fix_fluent(holds(1, on((block,5)), (block,6), 43)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 43)).
fix_fluent(holds(1, tower_base((block,1)), false, 43)).
fix_fluent(holds(1, tower_base((block,2)), false, 43)).
fix_fluent(holds(1, tower_base((block,3)), true, 43)).
fix_fluent(holds(1, tower_base((block,4)), false, 43)).
fix_fluent(holds(1, tower_base((block,5)), false, 43)).
fix_fluent(holds(1, tower_base((block,6)), true, 43)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(2, complete(blue), false, 43)).
fix_fluent(holds(2, complete(red), false, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 43)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 43)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 43)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 43)).
fix_fluent(holds(2, configuration(store_room_door), open, 43)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 43)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 43)).
fix_fluent(holds(2, in((block,1)), hallway, 43)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,4)), store_room, 43)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 43)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 43)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 43)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 43)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 43)).
fix_fluent(holds(2, in(talos), hallway, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 43)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 43)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 43)).
fix_fluent(holds(2, on((block,1)), nothing, 43)).
fix_fluent(holds(2, on((block,2)), (block,3), 43)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 43)).
fix_fluent(holds(2, on((block,4)), nothing, 43)).
fix_fluent(holds(2, on((block,5)), (block,6), 43)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 43)).
fix_fluent(holds(2, tower_base((block,1)), false, 43)).
fix_fluent(holds(2, tower_base((block,2)), false, 43)).
fix_fluent(holds(2, tower_base((block,3)), true, 43)).
fix_fluent(holds(2, tower_base((block,4)), false, 43)).
fix_fluent(holds(2, tower_base((block,5)), false, 43)).
fix_fluent(holds(2, tower_base((block,6)), true, 43)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 43)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 43)).
fix_fluent(holds(1, complete(blue), false, 44)).
fix_fluent(holds(1, complete(red), false, 44)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 44)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 44)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 44)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 44)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(1, configuration(store_room_door), open, 44)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 44)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 44)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 44)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 44)).
fix_fluent(holds(1, in((block,1)), (hallway,0), 44)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 44)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(manipulator_arm_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_arm_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_end_2), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_1), (hallway,0), 44)).
fix_fluent(holds(1, in(manipulator_limb_2), (hallway,0), 44)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 44)).
fix_fluent(holds(1, in(talos), (hallway,0), 44)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(1, on((block,1)), nothing, 44)).
fix_fluent(holds(1, on((block,2)), (block,3), 44)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 44)).
fix_fluent(holds(1, on((block,4)), nothing, 44)).
fix_fluent(holds(1, on((block,5)), (block,6), 44)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 44)).
fix_fluent(holds(1, tower_base((block,1)), false, 44)).
fix_fluent(holds(1, tower_base((block,2)), false, 44)).
fix_fluent(holds(1, tower_base((block,3)), true, 44)).
fix_fluent(holds(1, tower_base((block,4)), false, 44)).
fix_fluent(holds(1, tower_base((block,5)), false, 44)).
fix_fluent(holds(1, tower_base((block,6)), true, 44)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(2, complete(blue), false, 44)).
fix_fluent(holds(2, complete(red), false, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 44)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 44)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 44)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 44)).
fix_fluent(holds(2, configuration(store_room_door), open, 44)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 44)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 44)).
fix_fluent(holds(2, in((block,1)), hallway, 44)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,4)), store_room, 44)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 44)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 44)).
fix_fluent(holds(2, in(manipulator_arm_1), hallway, 44)).
fix_fluent(holds(2, in(manipulator_arm_2), hallway, 44)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 44)).
fix_fluent(holds(2, in(talos), hallway, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 44)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 44)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 44)).
fix_fluent(holds(2, on((block,1)), nothing, 44)).
fix_fluent(holds(2, on((block,2)), (block,3), 44)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 44)).
fix_fluent(holds(2, on((block,4)), nothing, 44)).
fix_fluent(holds(2, on((block,5)), (block,6), 44)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 44)).
fix_fluent(holds(2, tower_base((block,1)), false, 44)).
fix_fluent(holds(2, tower_base((block,2)), false, 44)).
fix_fluent(holds(2, tower_base((block,3)), true, 44)).
fix_fluent(holds(2, tower_base((block,4)), false, 44)).
fix_fluent(holds(2, tower_base((block,5)), false, 44)).
fix_fluent(holds(2, tower_base((block,6)), true, 44)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 44)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 44)).
fix_fluent(holds(1, complete(blue), false, 45)).
fix_fluent(holds(1, complete(red), false, 45)).
fix_fluent(holds(1, configuration(manipulator_end_1), aligned_with((block,1)), 45)).
fix_fluent(holds(1, configuration(manipulator_end_2), aligned_with(nothing), 45)).
fix_fluent(holds(1, configuration(manipulator_limb_1), retracted, 45)).
fix_fluent(holds(1, configuration(manipulator_limb_2), retracted, 45)).
fix_fluent(holds(1, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(1, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(1, configuration(store_room_door), open, 45)).
fix_fluent(holds(1, grasping(manipulator_arm_1), (block,1), 45)).
fix_fluent(holds(1, grasping(manipulator_arm_2), nothing, 45)).
fix_fluent(holds(1, grasping(manipulator_end_1), (block,1), 45)).
fix_fluent(holds(1, grasping(manipulator_end_2), nothing, 45)).
fix_fluent(holds(1, in((block,1)), (store_room,1), 45)).
fix_fluent(holds(1, in((block,2)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,3)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,4)), (store_room,0), 45)).
fix_fluent(holds(1, in((block,5)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in((block,6)), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_arm_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_end_2), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_1), (store_room,1), 45)).
fix_fluent(holds(1, in(manipulator_limb_2), (store_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_left), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(puzzle_room_table_right), (puzzle_room,1), 45)).
fix_fluent(holds(1, in(talos), (store_room,1), 45)).
fix_fluent(holds(1, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(1, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(1, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(1, on((block,1)), nothing, 45)).
fix_fluent(holds(1, on((block,2)), (block,3), 45)).
fix_fluent(holds(1, on((block,3)), puzzle_room_table_left, 45)).
fix_fluent(holds(1, on((block,4)), nothing, 45)).
fix_fluent(holds(1, on((block,5)), (block,6), 45)).
fix_fluent(holds(1, on((block,6)), puzzle_room_table_right, 45)).
fix_fluent(holds(1, tower_base((block,1)), false, 45)).
fix_fluent(holds(1, tower_base((block,2)), false, 45)).
fix_fluent(holds(1, tower_base((block,3)), true, 45)).
fix_fluent(holds(1, tower_base((block,4)), false, 45)).
fix_fluent(holds(1, tower_base((block,5)), false, 45)).
fix_fluent(holds(1, tower_base((block,6)), true, 45)).
fix_fluent(holds(1, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(1, unordered_tower((block,6)), false, 45)).
fix_fluent(holds(2, complete(blue), false, 45)).
fix_fluent(holds(2, complete(red), false, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_1), retracted, 45)).
fix_fluent(holds(2, configuration(manipulator_arm_2), retracted, 45)).
fix_fluent(holds(2, configuration(puzzle_room_door), open, 45)).
fix_fluent(holds(2, configuration(starting_room_door), closed, 45)).
fix_fluent(holds(2, configuration(store_room_door), open, 45)).
fix_fluent(holds(2, grasping(manipulator_arm_1), (block,1), 45)).
fix_fluent(holds(2, grasping(manipulator_arm_2), nothing, 45)).
fix_fluent(holds(2, in((block,1)), store_room, 45)).
fix_fluent(holds(2, in((block,2)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,3)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,4)), store_room, 45)).
fix_fluent(holds(2, in((block,5)), puzzle_room, 45)).
fix_fluent(holds(2, in((block,6)), puzzle_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_1), store_room, 45)).
fix_fluent(holds(2, in(manipulator_arm_2), store_room, 45)).
fix_fluent(holds(2, in(puzzle_room_table), puzzle_room, 45)).
fix_fluent(holds(2, in(talos), store_room, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,1),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,2),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,2)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,3)), true, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,3),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,4),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,5)), false, 45)).
fix_fluent(holds(2, in_tower((block,5),(block,6)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,1)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,2)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,3)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,4)), false, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,5)), true, 45)).
fix_fluent(holds(2, in_tower((block,6),(block,6)), true, 45)).
fix_fluent(holds(2, on((block,1)), nothing, 45)).
fix_fluent(holds(2, on((block,2)), (block,3), 45)).
fix_fluent(holds(2, on((block,3)), puzzle_room_table, 45)).
fix_fluent(holds(2, on((block,4)), nothing, 45)).
fix_fluent(holds(2, on((block,5)), (block,6), 45)).
fix_fluent(holds(2, on((block,6)), puzzle_room_table, 45)).
fix_fluent(holds(2, tower_base((block,1)), false, 45)).
fix_fluent(holds(2, tower_base((block,2)), false, 45)).
fix_fluent(holds(2, tower_base((block,3)), true, 45)).
fix_fluent(holds(2, tower_base((block,4)), false, 45)).
fix_fluent(holds(2, tower_base((block,5)), false, 45)).
fix_fluent(holds(2, tower_base((block,6)), true, 45)).
fix_fluent(holds(2, unordered_tower((block,1)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,2)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,3)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,4)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,5)), false, 45)).
fix_fluent(holds(2, unordered_tower((block,6)), false, 45)).
:- not holds(L, F, V, S), fix_fluent(holds(L, F, V, S)), pl(L).

[13-11-2021_23-39-45] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./test_problems/blocks_world_plus/BWP_system_laws.lp', './test_problems/blocks_world_plus/BWP_problem_small_3.lp'], Anon #1), Main #1, 8, Verbosity.Verbose, True))
	('level', 1)
	('start_step', 45)
	('last_sgoals', 30)
	('finalise', True)
	('sequential_yield', True)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x0000027C95BCD130>)
	('first_sgoals', 25)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x0000027CAA599D10>)

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None)

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, true, false). %* None *%
#program optimisation_module(#inc, 0, true, true, none, none). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, none, sequential, true). %* None *%

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [47]:
Running step bounds   | Previous =     46 : Current =     47
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(47)]), ('state_module', [Number(47), Number(0)]), ('plan_module', [Number(47), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.308872s.

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 47: original = External(symbol='current_last_sgoals(25, 46)', truth=True, inc_range=None), conversion = current_last_sgoals(25,46).

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.124630s with result Satisfiable.

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [47]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.43350269999999114, Incremental time limit = None
Running cumulative time = 18.204864599999993, Cumulative time limit = 3600
Used memory = (RSS = 532.378906Mb, VMS = 526.570312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 77
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 13.090834s, Solving = 5.114031s, Total = 18.204865s, Memory = (RSS = 532.378906Mb, VMS = 526.570312Mb)), Calls = 47
Final Model :: Total atoms = 29055, Cost = (55, 0), Optimality proven = False, Number = 2, Thread ID = 3, Model type = ModelType.StableModel

[13-11-2021_23-39-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=47, start_step=46, end_step=47, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=13.090833800000018, solving_time=5.114030799999977, total_time=18.204864599999993, memory=Memory(rss=532.37890625, vms=526.5703125), step_range=range(0, 48), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30887219999999616, solving_time=0.12463049999999498, total_time=0.43350269999999114, memory=Memory(rss=532.37890625, vms=526.5703125), step_range=range(47, 48), clingo_stats={'problem': {'lp': {'atoms': 182989.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 582847.0, 'bodies_tr': 582847.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9507.0, 'count_bodies_tr': 9507.0, 'sccs': 1101.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23455.0, 'rules': 872386.0, 'rules_normal': 862215.0, 'rules_choice': 9513.0, 'rules_minimize': 94.0, 'rules_acyc': 0.0, 'rules_heuristic': 564.0, 'rules_tr': 872275.0, 'rules_tr_normal': 862215.0, 'rules_tr_choice': 9513.0, 'rules_tr_minimize': 94.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 453.0, 'eqs': 430042.0, 'eqs_atom': 85538.0, 'eqs_body': 10817.0, 'eqs_other': 333687.0}, 'lpStep': {'atoms': 5805.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13847.0, 'bodies_tr': 13847.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26248.0, 'rules_normal': 26039.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26248.0, 'rules_tr_normal': 26039.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10750.0, 'eqs_atom': 2318.0, 'eqs_body': 478.0, 'eqs_other': 7954.0}, 'generator': {'vars': 103806.0, 'vars_eliminated': 0.0, 'vars_frozen': 63543.0, 'constraints': 1121.0, 'constraints_binary': 127043.0, 'constraints_ternary': 4187.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 2502.0, 'conflicts': 9.0, 'conflicts_analyzed': 7.0, 'restarts': 0.0, 'restarts_last': 2.0, 'extra': {'domain_choices': 6.0, 'models': 2.0, 'models_level': 2307.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 9.0, 'distributed_sum_lbd': 18.0, 'integrated': 54.0, 'lemmas': 83.0, 'lits_learnt': 6300.0, 'lemmas_binary': 42.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.125, 'integrated_imps': 15.0, 'integrated_jumps': 5.0, 'guiding_paths_lits': 5733.0, 'guiding_paths': 8.0, 'splits': 0.0, 'lemmas_conflict': 7.0, 'lemmas_loop': 25.0, 'lemmas_other': 51.0, 'lits_conflict': 2192.0, 'lits_loop': 178.0, 'lits_other': 3930.0, 'jumps': {'jumps': 7.0, 'jumps_bounded': 0.0, 'levels': 7.0, 'levels_bounded': 0.0, 'max': 1.0, 'max_executed': 1.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 47.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [55.0, 0.0], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.6273231506347656, 'cpu': 0.6875, 'solve': 0.06781959533691406, 'unsat': 0.028903961181640625, 'sat': 0.008977890014648438}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 19.00101089477539, 'cpu': 27.609375, 'solve': 3.91204833984375, 'unsat': 1.4768562316894531, 'sat': 0.71954345703125}, 'models': {'enumerated': 77.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 86222.0, 'conflicts': 8810.0, 'conflicts_analyzed': 8358.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 8954.0, 'models': 77.0, 'models_level': 42000.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6955.0, 'distributed_sum_lbd': 17230.0, 'integrated': 38327.0, 'lemmas': 56159.0, 'lits_learnt': 5333870.0, 'lemmas_binary': 4704.0, 'lemmas_ternary': 2370.0, 'cpu_time': 12.71875, 'integrated_imps': 11989.0, 'integrated_jumps': 12631.0, 'guiding_paths_lits': 109196.0, 'guiding_paths': 591.0, 'splits': 0.0, 'lemmas_conflict': 8247.0, 'lemmas_loop': 12673.0, 'lemmas_other': 35239.0, 'lits_conflict': 1060693.0, 'lits_loop': 105941.0, 'lits_other': 4167236.0, 'jumps': {'jumps': 8358.0, 'jumps_bounded': 1184.0, 'levels': 233622.0, 'levels_bounded': 217315.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-46] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47}

[13-11-2021_23-39-46] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 26 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 2 ( 33.33% solved)

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None)

[13-11-2021_23-39-46] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 26, step = 47]:
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 26)

[13-11-2021_23-39-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 47:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [48]:
Running step bounds   | Previous =     47 : Current =     48
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(48)]), ('state_module', [Number(48), Number(0)]), ('plan_module', [Number(48), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245912s.

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 48: original = External(symbol='current_last_sgoals(26, 47)', truth=True, inc_range=None), conversion = current_last_sgoals(26,47).

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055463s with result Unsatisfiable.

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [48]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.301374899999999, Incremental time limit = None
Running cumulative time = 18.506239499999992, Cumulative time limit = 3600
Used memory = (RSS = 535.445312Mb, VMS = 529.144531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-46] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=48, start_step=47, end_step=48, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.336746000000018, solving_time=5.169493499999977, total_time=18.506239499999992, memory=Memory(rss=535.4453125, vms=529.14453125), step_range=range(0, 49), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.24591219999999936, solving_time=0.05546269999999964, total_time=0.301374899999999, memory=Memory(rss=535.4453125, vms=529.14453125), step_range=range(48, 49), clingo_stats={'problem': {'lp': {'atoms': 186082.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 593790.0, 'bodies_tr': 593790.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9708.0, 'count_bodies_tr': 9708.0, 'sccs': 1114.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 23689.0, 'rules': 893594.0, 'rules_normal': 883214.0, 'rules_choice': 9708.0, 'rules_minimize': 96.0, 'rules_acyc': 0.0, 'rules_heuristic': 576.0, 'rules_tr': 893472.0, 'rules_tr_normal': 883214.0, 'rules_tr_choice': 9708.0, 'rules_tr_minimize': 96.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 454.0, 'eqs': 441942.0, 'eqs_atom': 87241.0, 'eqs_body': 11325.0, 'eqs_other': 343376.0}, 'lpStep': {'atoms': 3093.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 10943.0, 'bodies_tr': 10943.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 13.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 234.0, 'rules': 21208.0, 'rules_normal': 20999.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 21197.0, 'rules_tr_normal': 20999.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 1.0, 'eqs': 11900.0, 'eqs_atom': 1703.0, 'eqs_body': 508.0, 'eqs_other': 9689.0}, 'generator': {'vars': 104534.0, 'vars_eliminated': 0.0, 'vars_frozen': 64100.0, 'constraints': 1316.0, 'constraints_binary': 137041.0, 'constraints_ternary': 4954.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 2.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5957.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 48.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3110065460205078, 'cpu': 0.40625, 'solve': 0.0069828033447265625, 'unsat': 0.0069828033447265625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 19.3120174407959, 'cpu': 28.015625, 'solve': 3.9190311431884766, 'unsat': 1.4838390350341797, 'sat': 0.71954345703125}, 'models': {'enumerated': 77.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 86222.0, 'conflicts': 8812.0, 'conflicts_analyzed': 8358.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 8954.0, 'models': 77.0, 'models_level': 42000.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6955.0, 'distributed_sum_lbd': 17230.0, 'integrated': 38327.0, 'lemmas': 56159.0, 'lits_learnt': 5333870.0, 'lemmas_binary': 4704.0, 'lemmas_ternary': 2370.0, 'cpu_time': 12.828125, 'integrated_imps': 11989.0, 'integrated_jumps': 12631.0, 'guiding_paths_lits': 115153.0, 'guiding_paths': 598.0, 'splits': 0.0, 'lemmas_conflict': 8247.0, 'lemmas_loop': 12673.0, 'lemmas_other': 35239.0, 'lits_conflict': 1060693.0, 'lits_loop': 105941.0, 'lits_other': 4167236.0, 'jumps': {'jumps': 8358.0, 'jumps_bounded': 1184.0, 'levels': 233622.0, 'levels_bounded': 217315.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-46] DEBUG :: ASH Planner Main #1 >> Reaction at search length 48:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [49]:
Running step bounds   | Previous =     48 : Current =     49
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(49)]), ('state_module', [Number(49), Number(0)]), ('plan_module', [Number(49), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.250527s.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052886s with result Unsatisfiable.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [49]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3034128000000038, Incremental time limit = None
Running cumulative time = 18.809652299999996, Cumulative time limit = 3600
Used memory = (RSS = 538.238281Mb, VMS = 544.777344Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=49, start_step=48, end_step=49, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=13.587273200000018, solving_time=5.22237909999998, total_time=18.809652299999996, memory=Memory(rss=538.23828125, vms=544.77734375), step_range=range(0, 50), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.2505272000000005, solving_time=0.05288560000000331, total_time=0.3034128000000038, memory=Memory(rss=538.23828125, vms=544.77734375), step_range=range(49, 50), clingo_stats={'problem': {'lp': {'atoms': 189343.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 605363.0, 'bodies_tr': 605363.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 9909.0, 'count_bodies_tr': 9909.0, 'sccs': 1139.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24087.0, 'rules': 915941.0, 'rules_normal': 905352.0, 'rules_choice': 9903.0, 'rules_minimize': 98.0, 'rules_acyc': 0.0, 'rules_heuristic': 588.0, 'rules_tr': 915812.0, 'rules_tr_normal': 905352.0, 'rules_tr_choice': 9903.0, 'rules_tr_minimize': 98.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 459.0, 'eqs': 451936.0, 'eqs_atom': 88856.0, 'eqs_body': 11621.0, 'eqs_other': 351459.0}, 'lpStep': {'atoms': 3261.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 11573.0, 'bodies_tr': 11573.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 22347.0, 'rules_normal': 22138.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 22340.0, 'rules_tr_normal': 22138.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 5.0, 'eqs': 9994.0, 'eqs_atom': 1615.0, 'eqs_body': 296.0, 'eqs_other': 8083.0}, 'generator': {'vars': 106114.0, 'vars_eliminated': 0.0, 'vars_frozen': 65147.0, 'constraints': 1712.0, 'constraints_binary': 151160.0, 'constraints_ternary': 6656.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 12.0, 'conflicts': 14.0, 'conflicts_analyzed': 6.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 12.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6.0, 'distributed_sum_lbd': 11.0, 'integrated': 13.0, 'lemmas': 27.0, 'lits_learnt': 136.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.109375, 'integrated_imps': 13.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 5298.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 6.0, 'lemmas_loop': 8.0, 'lemmas_other': 13.0, 'lits_conflict': 38.0, 'lits_loop': 24.0, 'lits_other': 74.0, 'jumps': {'jumps': 6.0, 'jumps_bounded': 6.0, 'levels': 904.0, 'levels_bounded': 892.0, 'max': 886.0, 'max_executed': 2.0, 'max_bounded': 884.0}}}}, 'summary': {'call': 49.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [55.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.3109149932861328, 'cpu': 0.40625, 'solve': 0.011995315551757812, 'unsat': 0.011995315551757812, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 19.62293243408203, 'cpu': 28.421875, 'solve': 3.9310264587402344, 'unsat': 1.4958343505859375, 'sat': 0.71954345703125}, 'models': {'enumerated': 77.0, 'optimal': 25.0}, 'solving': {'solvers': {'choices': 86234.0, 'conflicts': 8826.0, 'conflicts_analyzed': 8364.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 8966.0, 'models': 77.0, 'models_level': 42000.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6961.0, 'distributed_sum_lbd': 17241.0, 'integrated': 38340.0, 'lemmas': 56186.0, 'lits_learnt': 5334006.0, 'lemmas_binary': 4704.0, 'lemmas_ternary': 2370.0, 'cpu_time': 12.9375, 'integrated_imps': 12002.0, 'integrated_jumps': 12631.0, 'guiding_paths_lits': 120451.0, 'guiding_paths': 605.0, 'splits': 0.0, 'lemmas_conflict': 8253.0, 'lemmas_loop': 12681.0, 'lemmas_other': 35252.0, 'lits_conflict': 1060731.0, 'lits_loop': 105965.0, 'lits_other': 4167310.0, 'jumps': {'jumps': 8364.0, 'jumps_bounded': 1190.0, 'levels': 234526.0, 'levels_bounded': 218207.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 49:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [50]:
Running step bounds   | Previous =     49 : Current =     50
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(50), Number(0)]), ('plan_module', [Number(50), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.308813s.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.145810s with result Satisfiable.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [50]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.45462260000000754, Incremental time limit = None
Running cumulative time = 19.264274900000004, Cumulative time limit = 3600
Used memory = (RSS = 549.078125Mb, VMS = 571.453125Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 79
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 13.896086s, Solving = 5.368189s, Total = 19.264275s, Memory = (RSS = 549.078125Mb, VMS = 571.453125Mb)), Calls = 50
Final Model :: Total atoms = 30244, Cost = (59, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=50, start_step=49, end_step=50, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=13.896086000000023, solving_time=5.368188899999982, total_time=19.264274900000004, memory=Memory(rss=549.078125, vms=571.453125), step_range=range(0, 51), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.30881280000000544, solving_time=0.1458098000000021, total_time=0.45462260000000754, memory=Memory(rss=549.078125, vms=571.453125), step_range=range(50, 51), clingo_stats={'problem': {'lp': {'atoms': 192893.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 617522.0, 'bodies_tr': 617522.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10110.0, 'count_bodies_tr': 10110.0, 'sccs': 1164.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24485.0, 'rules': 939310.0, 'rules_normal': 928512.0, 'rules_choice': 10098.0, 'rules_minimize': 100.0, 'rules_acyc': 0.0, 'rules_heuristic': 600.0, 'rules_tr': 939177.0, 'rules_tr_normal': 928512.0, 'rules_tr_choice': 10098.0, 'rules_tr_minimize': 100.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 467.0, 'eqs': 462567.0, 'eqs_atom': 90448.0, 'eqs_body': 11815.0, 'eqs_other': 360304.0}, 'lpStep': {'atoms': 3550.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12159.0, 'bodies_tr': 12159.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 398.0, 'rules': 23369.0, 'rules_normal': 23160.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 23365.0, 'rules_tr_normal': 23160.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 10631.0, 'eqs_atom': 1592.0, 'eqs_body': 194.0, 'eqs_other': 8845.0}, 'generator': {'vars': 107898.0, 'vars_eliminated': 0.0, 'vars_frozen': 66301.0, 'constraints': 1951.0, 'constraints_binary': 165610.0, 'constraints_ternary': 8135.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 7375.0, 'conflicts': 38.0, 'conflicts_analyzed': 32.0, 'restarts': 0.0, 'restarts_last': 3.0, 'extra': {'domain_choices': 232.0, 'models': 2.0, 'models_level': 2628.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 26.0, 'distributed_sum_lbd': 42.0, 'integrated': 96.0, 'lemmas': 237.0, 'lits_learnt': 2365.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 22.0, 'cpu_time': 0.234375, 'integrated_imps': 74.0, 'integrated_jumps': 2576.0, 'guiding_paths_lits': 6405.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 31.0, 'lemmas_loop': 122.0, 'lemmas_other': 84.0, 'lits_conflict': 546.0, 'lits_loop': 1063.0, 'lits_other': 756.0, 'jumps': {'jumps': 32.0, 'jumps_bounded': 10.0, 'levels': 5432.0, 'levels_bounded': 4586.0, 'max': 1097.0, 'max_executed': 1097.0, 'max_bounded': 916.0}}}}, 'summary': {'call': 50.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [59.0, 0.0], 'lower': [59.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.4637584686279297, 'cpu': 0.578125, 'solve': 0.09272575378417969, 'unsat': 0.03291130065917969, 'sat': 0.01692962646484375}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 20.08669090270996, 'cpu': 29.0, 'solve': 4.023752212524414, 'unsat': 1.5287456512451172, 'sat': 0.7364730834960938}, 'models': {'enumerated': 79.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 93609.0, 'conflicts': 8864.0, 'conflicts_analyzed': 8396.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 9198.0, 'models': 79.0, 'models_level': 44628.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6987.0, 'distributed_sum_lbd': 17283.0, 'integrated': 38436.0, 'lemmas': 56423.0, 'lits_learnt': 5336371.0, 'lemmas_binary': 4704.0, 'lemmas_ternary': 2392.0, 'cpu_time': 13.171875, 'integrated_imps': 12076.0, 'integrated_jumps': 15207.0, 'guiding_paths_lits': 126856.0, 'guiding_paths': 616.0, 'splits': 0.0, 'lemmas_conflict': 8284.0, 'lemmas_loop': 12803.0, 'lemmas_other': 35336.0, 'lits_conflict': 1061277.0, 'lits_loop': 107028.0, 'lits_other': 4168066.0, 'jumps': {'jumps': 8396.0, 'jumps_bounded': 1200.0, 'levels': 239958.0, 'levels_bounded': 222793.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50}

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 27 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 3 ( 50.00% solved)

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None)

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 27, step = 50]:
sub_goal(2, talos, move(hallway), in(talos), hallway, 27)

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 50:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [51]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(0)]), ('plan_module', [Number(51), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.337438s.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 51: original = External(symbol='current_last_sgoals(27, 50)', truth=True, inc_range=None), conversion = current_last_sgoals(27,50).

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065109s with result Unsatisfiable.

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [51]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.4025474000000031, Incremental time limit = None
Running cumulative time = 19.666822300000007, Cumulative time limit = 3600
Used memory = (RSS = 554.265625Mb, VMS = 576.066406Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=51, start_step=50, end_step=51, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=14.233524300000026, solving_time=5.433297999999983, total_time=19.666822300000007, memory=Memory(rss=554.265625, vms=576.06640625), step_range=range(0, 52), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3374383000000023, solving_time=0.06510910000000081, total_time=0.4025474000000031, memory=Memory(rss=554.265625, vms=576.06640625), step_range=range(51, 52), clingo_stats={'problem': {'lp': {'atoms': 196461.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 630017.0, 'bodies_tr': 630017.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10311.0, 'count_bodies_tr': 10311.0, 'sccs': 1189.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 24889.0, 'rules': 963623.0, 'rules_normal': 952616.0, 'rules_choice': 10293.0, 'rules_minimize': 102.0, 'rules_acyc': 0.0, 'rules_heuristic': 612.0, 'rules_tr': 963486.0, 'rules_tr_normal': 952616.0, 'rules_tr_choice': 10293.0, 'rules_tr_minimize': 102.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 475.0, 'eqs': 478549.0, 'eqs_atom': 92198.0, 'eqs_body': 12101.0, 'eqs_other': 374250.0}, 'lpStep': {'atoms': 3568.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 12495.0, 'bodies_tr': 12495.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 404.0, 'rules': 24313.0, 'rules_normal': 24104.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 24309.0, 'rules_tr_normal': 24104.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 8.0, 'eqs': 15982.0, 'eqs_atom': 1750.0, 'eqs_body': 286.0, 'eqs_other': 13946.0}, 'generator': {'vars': 109811.0, 'vars_eliminated': 0.0, 'vars_frozen': 67505.0, 'constraints': 2184.0, 'constraints_binary': 180374.0, 'constraints_ternary': 9458.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 6.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 10.0, 'lits_learnt': 90.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6629.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 10.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 90.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 51.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 7.0, 'times': {'total': 0.41289710998535156, 'cpu': 0.359375, 'solve': 0.0109710693359375, 'unsat': 0.0109710693359375, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 20.499588012695312, 'cpu': 29.359375, 'solve': 4.034723281860352, 'unsat': 1.5397167205810547, 'sat': 0.7364730834960938}, 'models': {'enumerated': 79.0, 'optimal': 26.0}, 'solving': {'solvers': {'choices': 93609.0, 'conflicts': 8870.0, 'conflicts_analyzed': 8396.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 9198.0, 'models': 79.0, 'models_level': 44628.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 6987.0, 'distributed_sum_lbd': 17283.0, 'integrated': 38436.0, 'lemmas': 56433.0, 'lits_learnt': 5336461.0, 'lemmas_binary': 4704.0, 'lemmas_ternary': 2392.0, 'cpu_time': 13.171875, 'integrated_imps': 12076.0, 'integrated_jumps': 15207.0, 'guiding_paths_lits': 133485.0, 'guiding_paths': 623.0, 'splits': 0.0, 'lemmas_conflict': 8284.0, 'lemmas_loop': 12813.0, 'lemmas_other': 35336.0, 'lits_conflict': 1061277.0, 'lits_loop': 107118.0, 'lits_other': 4168066.0, 'jumps': {'jumps': 8396.0, 'jumps_bounded': 1200.0, 'levels': 239958.0, 'levels_bounded': 222793.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-47] DEBUG :: ASH Planner Main #1 >> Reaction at search length 51:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [52]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(0)]), ('plan_module', [Number(52), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.301233s.

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.171073s with result Satisfiable.

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [52]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.4723062999999996, Incremental time limit = None
Running cumulative time = 20.139128600000006, Cumulative time limit = 3600
Used memory = (RSS = 573.109375Mb, VMS = 593.117188Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 82
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 14.534757s, Solving = 5.604371s, Total = 20.139129s, Memory = (RSS = 573.109375Mb, VMS = 593.117188Mb)), Calls = 52
Final Model :: Total atoms = 31036, Cost = (61, 0), Optimality proven = False, Number = 3, Thread ID = 7, Model type = ModelType.StableModel

[13-11-2021_23-39-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=52, start_step=51, end_step=52, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=14.53475730000003, solving_time=5.604371299999979, total_time=20.139128600000006, memory=Memory(rss=573.109375, vms=593.1171875), step_range=range(0, 53), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3012330000000034, solving_time=0.1710732999999962, total_time=0.4723062999999996, memory=Memory(rss=573.109375, vms=593.1171875), step_range=range(52, 53), clingo_stats={'problem': {'lp': {'atoms': 199973.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 643090.0, 'bodies_tr': 643090.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10512.0, 'count_bodies_tr': 10512.0, 'sccs': 1214.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 25483.0, 'rules': 988944.0, 'rules_normal': 977728.0, 'rules_choice': 10488.0, 'rules_minimize': 104.0, 'rules_acyc': 0.0, 'rules_heuristic': 624.0, 'rules_tr': 988807.0, 'rules_tr_normal': 977728.0, 'rules_tr_choice': 10488.0, 'rules_tr_minimize': 104.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 487.0, 'eqs': 487635.0, 'eqs_atom': 93861.0, 'eqs_body': 12181.0, 'eqs_other': 381593.0}, 'lpStep': {'atoms': 3512.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13073.0, 'bodies_tr': 13073.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 25321.0, 'rules_normal': 25112.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 25321.0, 'rules_tr_normal': 25112.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9086.0, 'eqs_atom': 1663.0, 'eqs_body': 80.0, 'eqs_other': 7343.0}, 'generator': {'vars': 112395.0, 'vars_eliminated': 0.0, 'vars_frozen': 69112.0, 'constraints': 2813.0, 'constraints_binary': 202555.0, 'constraints_ternary': 12993.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 5214.0, 'conflicts': 235.0, 'conflicts_analyzed': 228.0, 'restarts': 0.0, 'restarts_last': 5.0, 'extra': {'domain_choices': 370.0, 'models': 3.0, 'models_level': 4068.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 227.0, 'distributed_sum_lbd': 446.0, 'integrated': 1321.0, 'lemmas': 1849.0, 'lits_learnt': 25200.0, 'lemmas_binary': 61.0, 'lemmas_ternary': 53.0, 'cpu_time': 0.28125, 'integrated_imps': 903.0, 'integrated_jumps': 159.0, 'guiding_paths_lits': 6853.0, 'guiding_paths': 14.0, 'splits': 0.0, 'lemmas_conflict': 224.0, 'lemmas_loop': 457.0, 'lemmas_other': 1168.0, 'lits_conflict': 4010.0, 'lits_loop': 3647.0, 'lits_other': 17543.0, 'jumps': {'jumps': 228.0, 'jumps_bounded': 125.0, 'levels': 14744.0, 'levels_bounded': 14348.0, 'max': 984.0, 'max_executed': 984.0, 'max_bounded': 980.0}}}}, 'summary': {'call': 52.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [61.0, 0.0], 'lower': [61.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.48184967041015625, 'cpu': 0.640625, 'solve': 0.1271686553955078, 'unsat': 0.028921127319335938, 'sat': 0.019947052001953125}, 'models': {'enumerated': 3.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 20.98143768310547, 'cpu': 30.0, 'solve': 4.161891937255859, 'unsat': 1.5686378479003906, 'sat': 0.7564201354980469}, 'models': {'enumerated': 82.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 98823.0, 'conflicts': 9105.0, 'conflicts_analyzed': 8624.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 9568.0, 'models': 82.0, 'models_level': 48696.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7214.0, 'distributed_sum_lbd': 17729.0, 'integrated': 39757.0, 'lemmas': 58282.0, 'lits_learnt': 5361661.0, 'lemmas_binary': 4765.0, 'lemmas_ternary': 2445.0, 'cpu_time': 13.453125, 'integrated_imps': 12979.0, 'integrated_jumps': 15366.0, 'guiding_paths_lits': 140338.0, 'guiding_paths': 637.0, 'splits': 0.0, 'lemmas_conflict': 8508.0, 'lemmas_loop': 13270.0, 'lemmas_other': 36504.0, 'lits_conflict': 1065287.0, 'lits_loop': 110765.0, 'lits_other': 4185609.0, 'jumps': {'jumps': 8624.0, 'jumps_bounded': 1325.0, 'levels': 254702.0, 'levels_bounded': 237141.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-48] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52}

[13-11-2021_23-39-48] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 28 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 4 ( 66.67% solved)

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None)

[13-11-2021_23-39-48] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 28, step = 52]:
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 28)

[13-11-2021_23-39-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 52:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [53]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(0)]), ('plan_module', [Number(53), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.321005s.

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 53: original = External(symbol='current_last_sgoals(28, 52)', truth=True, inc_range=None), conversion = current_last_sgoals(28,52).

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051902s with result Unsatisfiable.

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [53]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.37290770000000606, Incremental time limit = None
Running cumulative time = 20.512036300000013, Cumulative time limit = 3600
Used memory = (RSS = 572.261719Mb, VMS = 590.351562Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-48] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=53, start_step=52, end_step=53, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=14.855762700000033, solving_time=5.656273599999981, total_time=20.512036300000013, memory=Memory(rss=573.109375, vms=593.1171875), step_range=range(0, 54), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3210054000000042, solving_time=0.051902300000001844, total_time=0.37290770000000606, memory=Memory(rss=572.26171875, vms=590.3515625), step_range=range(53, 54), clingo_stats={'problem': {'lp': {'atoms': 203734.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 656433.0, 'bodies_tr': 656433.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10713.0, 'count_bodies_tr': 10713.0, 'sccs': 1239.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26077.0, 'rules': 1014971.0, 'rules_normal': 1003546.0, 'rules_choice': 10683.0, 'rules_minimize': 106.0, 'rules_acyc': 0.0, 'rules_heuristic': 636.0, 'rules_tr': 1014834.0, 'rules_tr_normal': 1003546.0, 'rules_tr_choice': 10683.0, 'rules_tr_minimize': 106.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 499.0, 'eqs': 496942.0, 'eqs_atom': 95532.0, 'eqs_body': 12269.0, 'eqs_other': 389141.0}, 'lpStep': {'atoms': 3761.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13343.0, 'bodies_tr': 13343.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26027.0, 'rules_normal': 25818.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26027.0, 'rules_tr_normal': 25818.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9307.0, 'eqs_atom': 1671.0, 'eqs_body': 88.0, 'eqs_other': 7548.0}, 'generator': {'vars': 114979.0, 'vars_eliminated': 0.0, 'vars_frozen': 70717.0, 'constraints': 2898.0, 'constraints_binary': 211748.0, 'constraints_ternary': 12962.0, 'acyc_edges': 0.0, 'complexity': 235901.0}}, 'solving': {'solvers': {'choices': 1.0, 'conflicts': 7.0, 'conflicts_analyzed': 1.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 1.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 1.0, 'distributed_sum_lbd': 2.0, 'integrated': 0.0, 'lemmas': 6.0, 'lits_learnt': 47.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.0625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6066.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 1.0, 'lemmas_loop': 5.0, 'lemmas_other': 0.0, 'lits_conflict': 2.0, 'lits_loop': 45.0, 'lits_other': 0.0, 'jumps': {'jumps': 1.0, 'jumps_bounded': 1.0, 'levels': 3.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 1.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 53.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 3.0, 'times': {'total': 0.38846588134765625, 'cpu': 0.4375, 'solve': 0.012964248657226562, 'unsat': 0.012964248657226562, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 21.369903564453125, 'cpu': 30.4375, 'solve': 4.174856185913086, 'unsat': 1.5816020965576172, 'sat': 0.7564201354980469}, 'models': {'enumerated': 82.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 98824.0, 'conflicts': 9112.0, 'conflicts_analyzed': 8625.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 9569.0, 'models': 82.0, 'models_level': 48696.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7215.0, 'distributed_sum_lbd': 17731.0, 'integrated': 39757.0, 'lemmas': 58288.0, 'lits_learnt': 5361708.0, 'lemmas_binary': 4766.0, 'lemmas_ternary': 2445.0, 'cpu_time': 13.515625, 'integrated_imps': 12979.0, 'integrated_jumps': 15366.0, 'guiding_paths_lits': 146404.0, 'guiding_paths': 643.0, 'splits': 0.0, 'lemmas_conflict': 8509.0, 'lemmas_loop': 13275.0, 'lemmas_other': 36504.0, 'lits_conflict': 1065289.0, 'lits_loop': 110810.0, 'lits_other': 4185609.0, 'jumps': {'jumps': 8625.0, 'jumps_bounded': 1326.0, 'levels': 254705.0, 'levels_bounded': 237143.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-48] DEBUG :: ASH Planner Main #1 >> Reaction at search length 53:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [54]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(0)]), ('plan_module', [Number(54), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.313517s.

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.070523s with result Unsatisfiable.

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [54]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.38404030000000233, Incremental time limit = None
Running cumulative time = 20.896076600000015, Cumulative time limit = 3600
Used memory = (RSS = 577.359375Mb, VMS = 595.445312Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-49] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=54, start_step=53, end_step=54, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=15.169279700000038, solving_time=5.726796899999979, total_time=20.896076600000015, memory=Memory(rss=577.359375, vms=595.4453125), step_range=range(0, 55), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3135170000000045, solving_time=0.07052329999999785, total_time=0.38404030000000233, memory=Memory(rss=577.359375, vms=595.4453125), step_range=range(54, 55), clingo_stats={'problem': {'lp': {'atoms': 207488.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 670019.0, 'bodies_tr': 670019.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 10914.0, 'count_bodies_tr': 10914.0, 'sccs': 1264.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 26671.0, 'rules': 1041849.0, 'rules_normal': 1030215.0, 'rules_choice': 10878.0, 'rules_minimize': 108.0, 'rules_acyc': 0.0, 'rules_heuristic': 648.0, 'rules_tr': 1041712.0, 'rules_tr_normal': 1030215.0, 'rules_tr_choice': 10878.0, 'rules_tr_minimize': 108.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 511.0, 'eqs': 506763.0, 'eqs_atom': 97403.0, 'eqs_body': 12339.0, 'eqs_other': 397021.0}, 'lpStep': {'atoms': 3754.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13586.0, 'bodies_tr': 13586.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26878.0, 'rules_normal': 26669.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26878.0, 'rules_tr_normal': 26669.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9821.0, 'eqs_atom': 1871.0, 'eqs_body': 70.0, 'eqs_other': 7880.0}, 'generator': {'vars': 117631.0, 'vars_eliminated': 0.0, 'vars_frozen': 72334.0, 'constraints': 3550.0, 'constraints_binary': 235012.0, 'constraints_ternary': 17214.0, 'acyc_edges': 0.0, 'complexity': 256264.0}}, 'solving': {'solvers': {'choices': 364.0, 'conflicts': 150.0, 'conflicts_analyzed': 135.0, 'restarts': 0.0, 'restarts_last': 41.0, 'extra': {'domain_choices': 142.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 117.0, 'distributed_sum_lbd': 263.0, 'integrated': 350.0, 'lemmas': 620.0, 'lits_learnt': 11477.0, 'lemmas_binary': 38.0, 'lemmas_ternary': 19.0, 'cpu_time': 0.171875, 'integrated_imps': 165.0, 'integrated_jumps': 90.0, 'guiding_paths_lits': 4172.0, 'guiding_paths': 11.0, 'splits': 0.0, 'lemmas_conflict': 127.0, 'lemmas_loop': 185.0, 'lemmas_other': 308.0, 'lits_conflict': 2878.0, 'lits_loop': 1696.0, 'lits_other': 6903.0, 'jumps': {'jumps': 135.0, 'jumps_bounded': 46.0, 'levels': 15630.0, 'levels_bounded': 15356.0, 'max': 1148.0, 'max_executed': 1148.0, 'max_bounded': 1145.0}}}}, 'summary': {'call': 54.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [61.0, 0.0], 'concurrency': 8.0, 'winner': 5.0, 'times': {'total': 0.396942138671875, 'cpu': 0.53125, 'solve': 0.027927398681640625, 'unsat': 0.027927398681640625, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 21.766845703125, 'cpu': 30.96875, 'solve': 4.202783584594727, 'unsat': 1.6095294952392578, 'sat': 0.7564201354980469}, 'models': {'enumerated': 82.0, 'optimal': 27.0}, 'solving': {'solvers': {'choices': 99188.0, 'conflicts': 9262.0, 'conflicts_analyzed': 8760.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 9711.0, 'models': 82.0, 'models_level': 48696.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7332.0, 'distributed_sum_lbd': 17994.0, 'integrated': 40107.0, 'lemmas': 58908.0, 'lits_learnt': 5373185.0, 'lemmas_binary': 4804.0, 'lemmas_ternary': 2464.0, 'cpu_time': 13.6875, 'integrated_imps': 13144.0, 'integrated_jumps': 15456.0, 'guiding_paths_lits': 150576.0, 'guiding_paths': 654.0, 'splits': 0.0, 'lemmas_conflict': 8636.0, 'lemmas_loop': 13460.0, 'lemmas_other': 36812.0, 'lits_conflict': 1068167.0, 'lits_loop': 112506.0, 'lits_other': 4192512.0, 'jumps': {'jumps': 8760.0, 'jumps_bounded': 1372.0, 'levels': 270335.0, 'levels_bounded': 252499.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-49] DEBUG :: ASH Planner Main #1 >> Reaction at search length 54:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [55]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(0)]), ('plan_module', [Number(55), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.341143s.

[13-11-2021_23-39-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.497821s with result Satisfiable.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [55]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.8389634999999984, Incremental time limit = None
Running cumulative time = 21.735040100000013, Cumulative time limit = 3600
Used memory = (RSS = 587.347656Mb, VMS = 602.800781Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 84
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 15.510423s, Solving = 6.224618s, Total = 21.735040s, Memory = (RSS = 587.347656Mb, VMS = 602.800781Mb)), Calls = 55
Final Model :: Total atoms = 32226, Cost = (64, 0), Optimality proven = False, Number = 2, Thread ID = 4, Model type = ModelType.StableModel

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=55, start_step=54, end_step=55, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=15.510422500000038, solving_time=6.224617599999977, total_time=21.735040100000013, memory=Memory(rss=587.34765625, vms=602.80078125), step_range=range(0, 56), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3411428000000001, solving_time=0.49782069999999834, total_time=0.8389634999999984, memory=Memory(rss=587.34765625, vms=602.80078125), step_range=range(55, 56), clingo_stats={'problem': {'lp': {'atoms': 211250.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 683429.0, 'bodies_tr': 683429.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11115.0, 'count_bodies_tr': 11115.0, 'sccs': 1289.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 27265.0, 'rules': 1068811.0, 'rules_normal': 1056968.0, 'rules_choice': 11073.0, 'rules_minimize': 110.0, 'rules_acyc': 0.0, 'rules_heuristic': 660.0, 'rules_tr': 1068674.0, 'rules_tr_normal': 1056968.0, 'rules_tr_choice': 11073.0, 'rules_tr_minimize': 110.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 523.0, 'eqs': 516225.0, 'eqs_atom': 99084.0, 'eqs_body': 12427.0, 'eqs_other': 404714.0}, 'lpStep': {'atoms': 3762.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13410.0, 'bodies_tr': 13410.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 26962.0, 'rules_normal': 26753.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 26962.0, 'rules_tr_normal': 26753.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9462.0, 'eqs_atom': 1681.0, 'eqs_body': 88.0, 'eqs_other': 7693.0}, 'generator': {'vars': 120215.0, 'vars_eliminated': 0.0, 'vars_frozen': 73939.0, 'constraints': 3374.0, 'constraints_binary': 243410.0, 'constraints_ternary': 15814.0, 'acyc_edges': 0.0, 'complexity': 263106.0}}, 'solving': {'solvers': {'choices': 3817.0, 'conflicts': 340.0, 'conflicts_analyzed': 329.0, 'restarts': 0.0, 'restarts_last': 68.0, 'extra': {'domain_choices': 272.0, 'models': 2.0, 'models_level': 2908.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 307.0, 'distributed_sum_lbd': 684.0, 'integrated': 1536.0, 'lemmas': 2439.0, 'lits_learnt': 62404.0, 'lemmas_binary': 158.0, 'lemmas_ternary': 70.0, 'cpu_time': 0.96875, 'integrated_imps': 544.0, 'integrated_jumps': 744.0, 'guiding_paths_lits': 7525.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 325.0, 'lemmas_loop': 653.0, 'lemmas_other': 1461.0, 'lits_conflict': 10611.0, 'lits_loop': 4952.0, 'lits_other': 46841.0, 'jumps': {'jumps': 329.0, 'jumps_bounded': 74.0, 'levels': 9386.0, 'levels_bounded': 8911.0, 'max': 1079.0, 'max_executed': 1079.0, 'max_bounded': 1076.0}}}}, 'summary': {'call': 55.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [64.0, 0.0], 'lower': [64.0, 0.0], 'concurrency': 8.0, 'winner': 1.0, 'times': {'total': 0.8554477691650391, 'cpu': 1.390625, 'solve': 0.44751739501953125, 'unsat': 0.036083221435546875, 'sat': 0.020946502685546875}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 22.62229347229004, 'cpu': 32.359375, 'solve': 4.650300979614258, 'unsat': 1.6456127166748047, 'sat': 0.7773666381835938}, 'models': {'enumerated': 84.0, 'optimal': 28.0}, 'solving': {'solvers': {'choices': 103005.0, 'conflicts': 9602.0, 'conflicts_analyzed': 9089.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 9983.0, 'models': 84.0, 'models_level': 51604.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7639.0, 'distributed_sum_lbd': 18678.0, 'integrated': 41643.0, 'lemmas': 61347.0, 'lits_learnt': 5435589.0, 'lemmas_binary': 4962.0, 'lemmas_ternary': 2534.0, 'cpu_time': 14.65625, 'integrated_imps': 13688.0, 'integrated_jumps': 16200.0, 'guiding_paths_lits': 158101.0, 'guiding_paths': 671.0, 'splits': 0.0, 'lemmas_conflict': 8961.0, 'lemmas_loop': 14113.0, 'lemmas_other': 38273.0, 'lits_conflict': 1078778.0, 'lits_loop': 117458.0, 'lits_other': 4239353.0, 'jumps': {'jumps': 9089.0, 'jumps_bounded': 1446.0, 'levels': 279721.0, 'levels_bounded': 261410.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55}

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 29 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 5 ( 83.33% solved)

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None)

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 29, step = 55]:
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 29)
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 29)

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Reaction at search length 55:
(Divide = False, Interrupt = False, Backwards Horizon = 0, Rationale = None).

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [56]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(0)]), ('plan_module', [Number(56), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.322526s.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 56: original = External(symbol='current_last_sgoals(29, 55)', truth=True, inc_range=None), conversion = current_last_sgoals(29,55).

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.122205s with result Satisfiable.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [56]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.44473059999999975, Incremental time limit = None
Running cumulative time = 22.179770700000013, Cumulative time limit = 3600
Used memory = (RSS = 599.613281Mb, VMS = 614.019531Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 86
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 15.832948s, Solving = 6.346822s, Total = 22.179771s, Memory = (RSS = 599.613281Mb, VMS = 614.019531Mb)), Calls = 56
Final Model :: Total atoms = 32629, Cost = (66, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=56, start_step=55, end_step=56, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=15.832948200000038, solving_time=6.346822499999977, total_time=22.179770700000013, memory=Memory(rss=599.61328125, vms=614.01953125), step_range=range(0, 57), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3225256999999999, solving_time=0.12220489999999984, total_time=0.44473059999999975, memory=Memory(rss=599.61328125, vms=614.01953125), step_range=range(56, 57), clingo_stats={'problem': {'lp': {'atoms': 215014.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 696868.0, 'bodies_tr': 696868.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11316.0, 'count_bodies_tr': 11316.0, 'sccs': 1314.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 27859.0, 'rules': 1096237.0, 'rules_normal': 1084185.0, 'rules_choice': 11268.0, 'rules_minimize': 112.0, 'rules_acyc': 0.0, 'rules_heuristic': 672.0, 'rules_tr': 1096100.0, 'rules_tr_normal': 1084185.0, 'rules_tr_choice': 11268.0, 'rules_tr_minimize': 112.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 535.0, 'eqs': 525743.0, 'eqs_atom': 100763.0, 'eqs_body': 12515.0, 'eqs_other': 412465.0}, 'lpStep': {'atoms': 3764.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13439.0, 'bodies_tr': 13439.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 27426.0, 'rules_normal': 27217.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 27426.0, 'rules_tr_normal': 27217.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 9518.0, 'eqs_atom': 1679.0, 'eqs_body': 88.0, 'eqs_other': 7751.0}, 'generator': {'vars': 122799.0, 'vars_eliminated': 0.0, 'vars_frozen': 75544.0, 'constraints': 3550.0, 'constraints_binary': 255222.0, 'constraints_ternary': 15781.0, 'acyc_edges': 0.0, 'complexity': 275097.0}}, 'solving': {'solvers': {'choices': 3916.0, 'conflicts': 3.0, 'conflicts_analyzed': 2.0, 'restarts': 0.0, 'restarts_last': 1.0, 'extra': {'domain_choices': 30.0, 'models': 2.0, 'models_level': 3056.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 2.0, 'distributed_sum_lbd': 5.0, 'integrated': 12.0, 'lemmas': 63.0, 'lits_learnt': 524.0, 'lemmas_binary': 1.0, 'lemmas_ternary': 6.0, 'cpu_time': 0.21875, 'integrated_imps': 2.0, 'integrated_jumps': 12.0, 'guiding_paths_lits': 7749.0, 'guiding_paths': 7.0, 'splits': 0.0, 'lemmas_conflict': 2.0, 'lemmas_loop': 56.0, 'lemmas_other': 5.0, 'lits_conflict': 5.0, 'lits_loop': 504.0, 'lits_other': 15.0, 'jumps': {'jumps': 2.0, 'jumps_bounded': 1.0, 'levels': 5.0, 'levels_bounded': 2.0, 'max': 3.0, 'max_executed': 2.0, 'max_bounded': 2.0}}}}, 'summary': {'call': 56.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [66.0, 0.0], 'lower': [66.0, 0.0], 'concurrency': 8.0, 'winner': 4.0, 'times': {'total': 0.4582862854003906, 'cpu': 0.59375, 'solve': 0.08178138732910156, 'unsat': 0.03391075134277344, 'sat': 0.010969161987304688}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 23.08057975769043, 'cpu': 32.953125, 'solve': 4.732082366943359, 'unsat': 1.6795234680175781, 'sat': 0.7883358001708984}, 'models': {'enumerated': 86.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 106921.0, 'conflicts': 9605.0, 'conflicts_analyzed': 9091.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 10013.0, 'models': 86.0, 'models_level': 54660.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7641.0, 'distributed_sum_lbd': 18683.0, 'integrated': 41655.0, 'lemmas': 61410.0, 'lits_learnt': 5436113.0, 'lemmas_binary': 4963.0, 'lemmas_ternary': 2540.0, 'cpu_time': 14.875, 'integrated_imps': 13690.0, 'integrated_jumps': 16212.0, 'guiding_paths_lits': 165850.0, 'guiding_paths': 678.0, 'splits': 0.0, 'lemmas_conflict': 8963.0, 'lemmas_loop': 14169.0, 'lemmas_other': 38278.0, 'lits_conflict': 1078783.0, 'lits_loop': 117962.0, 'lits_other': 4239368.0, 'jumps': {'jumps': 9091.0, 'jumps_bounded': 1447.0, 'levels': 279726.0, 'levels_bounded': 261412.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56}

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 30 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 6 (100.00% solved)

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None)

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Setting current sequential sub-goal stage [index = 30, step = 56]:
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 30)
sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 30)

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Queueing external: External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1))

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Enforcing achievement of final-goal:
final_goal(1, complete(blue), false, false)
final_goal(1, complete(blue), true, true)
final_goal(1, complete(red), false, false)
final_goal(1, complete(red), true, true)
final_goal(1, in_tower((block,1),(block,1)), false, true)
final_goal(1, in_tower((block,1),(block,1)), true, false)
final_goal(1, in_tower((block,1),(block,2)), false, true)
final_goal(1, in_tower((block,1),(block,2)), true, false)
final_goal(1, in_tower((block,1),(block,3)), false, true)
final_goal(1, in_tower((block,1),(block,3)), true, false)
final_goal(1, in_tower((block,1),(block,4)), false, true)
final_goal(1, in_tower((block,1),(block,4)), true, false)
final_goal(1, in_tower((block,1),(block,5)), false, true)
final_goal(1, in_tower((block,1),(block,5)), true, false)
final_goal(1, in_tower((block,1),(block,6)), false, true)
final_goal(1, in_tower((block,1),(block,6)), true, false)
final_goal(1, in_tower((block,2),(block,1)), false, true)
final_goal(1, in_tower((block,2),(block,1)), true, false)
final_goal(1, in_tower((block,2),(block,2)), false, true)
final_goal(1, in_tower((block,2),(block,2)), true, false)
final_goal(1, in_tower((block,2),(block,3)), false, true)
final_goal(1, in_tower((block,2),(block,3)), true, false)
final_goal(1, in_tower((block,2),(block,4)), false, true)
final_goal(1, in_tower((block,2),(block,4)), true, false)
final_goal(1, in_tower((block,2),(block,5)), false, true)
final_goal(1, in_tower((block,2),(block,5)), true, false)
final_goal(1, in_tower((block,2),(block,6)), false, true)
final_goal(1, in_tower((block,2),(block,6)), true, false)
final_goal(1, in_tower((block,3),(block,1)), false, false)
final_goal(1, in_tower((block,3),(block,1)), true, true)
final_goal(1, in_tower((block,3),(block,2)), false, false)
final_goal(1, in_tower((block,3),(block,2)), true, true)
final_goal(1, in_tower((block,3),(block,3)), false, false)
final_goal(1, in_tower((block,3),(block,3)), true, true)
final_goal(1, in_tower((block,3),(block,4)), false, true)
final_goal(1, in_tower((block,3),(block,4)), true, false)
final_goal(1, in_tower((block,3),(block,5)), false, true)
final_goal(1, in_tower((block,3),(block,5)), true, false)
final_goal(1, in_tower((block,3),(block,6)), false, true)
final_goal(1, in_tower((block,3),(block,6)), true, false)
final_goal(1, in_tower((block,4),(block,1)), false, true)
final_goal(1, in_tower((block,4),(block,1)), true, false)
final_goal(1, in_tower((block,4),(block,2)), false, true)
final_goal(1, in_tower((block,4),(block,2)), true, false)
final_goal(1, in_tower((block,4),(block,3)), false, true)
final_goal(1, in_tower((block,4),(block,3)), true, false)
final_goal(1, in_tower((block,4),(block,4)), false, true)
final_goal(1, in_tower((block,4),(block,4)), true, false)
final_goal(1, in_tower((block,4),(block,5)), false, true)
final_goal(1, in_tower((block,4),(block,5)), true, false)
final_goal(1, in_tower((block,4),(block,6)), false, true)
final_goal(1, in_tower((block,4),(block,6)), true, false)
final_goal(1, in_tower((block,5),(block,1)), false, true)
final_goal(1, in_tower((block,5),(block,1)), true, false)
final_goal(1, in_tower((block,5),(block,2)), false, true)
final_goal(1, in_tower((block,5),(block,2)), true, false)
final_goal(1, in_tower((block,5),(block,3)), false, true)
final_goal(1, in_tower((block,5),(block,3)), true, false)
final_goal(1, in_tower((block,5),(block,4)), false, true)
final_goal(1, in_tower((block,5),(block,4)), true, false)
final_goal(1, in_tower((block,5),(block,5)), false, true)
final_goal(1, in_tower((block,5),(block,5)), true, false)
final_goal(1, in_tower((block,5),(block,6)), false, true)
final_goal(1, in_tower((block,5),(block,6)), true, false)
final_goal(1, in_tower((block,6),(block,1)), false, true)
final_goal(1, in_tower((block,6),(block,1)), true, false)
final_goal(1, in_tower((block,6),(block,2)), false, true)
final_goal(1, in_tower((block,6),(block,2)), true, false)
final_goal(1, in_tower((block,6),(block,3)), false, true)
final_goal(1, in_tower((block,6),(block,3)), true, false)
final_goal(1, in_tower((block,6),(block,4)), false, false)
final_goal(1, in_tower((block,6),(block,4)), true, true)
final_goal(1, in_tower((block,6),(block,5)), false, false)
final_goal(1, in_tower((block,6),(block,5)), true, true)
final_goal(1, in_tower((block,6),(block,6)), false, false)
final_goal(1, in_tower((block,6),(block,6)), true, true)
final_goal(1, on((block,1)), (block,2), true)
final_goal(1, on((block,1)), (block,3), false)
final_goal(1, on((block,1)), (block,4), false)
final_goal(1, on((block,1)), (block,5), false)
final_goal(1, on((block,1)), (block,6), false)
final_goal(1, on((block,1)), nothing, false)
final_goal(1, on((block,1)), puzzle_room_table_left, false)
final_goal(1, on((block,1)), puzzle_room_table_right, false)
final_goal(1, on((block,2)), (block,1), false)
final_goal(1, on((block,2)), (block,3), true)
final_goal(1, on((block,2)), (block,4), false)
final_goal(1, on((block,2)), (block,5), false)
final_goal(1, on((block,2)), (block,6), false)
final_goal(1, on((block,2)), nothing, false)
final_goal(1, on((block,2)), puzzle_room_table_left, false)
final_goal(1, on((block,2)), puzzle_room_table_right, false)
final_goal(1, on((block,3)), (block,1), false)
final_goal(1, on((block,3)), (block,2), false)
final_goal(1, on((block,3)), (block,4), false)
final_goal(1, on((block,3)), (block,5), false)
final_goal(1, on((block,3)), (block,6), false)
final_goal(1, on((block,3)), nothing, false)
final_goal(1, on((block,3)), puzzle_room_table_left, true)
final_goal(1, on((block,3)), puzzle_room_table_right, false)
final_goal(1, on((block,4)), (block,1), false)
final_goal(1, on((block,4)), (block,2), false)
final_goal(1, on((block,4)), (block,3), false)
final_goal(1, on((block,4)), (block,5), true)
final_goal(1, on((block,4)), (block,6), false)
final_goal(1, on((block,4)), nothing, false)
final_goal(1, on((block,4)), puzzle_room_table_left, false)
final_goal(1, on((block,4)), puzzle_room_table_right, false)
final_goal(1, on((block,5)), (block,1), false)
final_goal(1, on((block,5)), (block,2), false)
final_goal(1, on((block,5)), (block,3), false)
final_goal(1, on((block,5)), (block,4), false)
final_goal(1, on((block,5)), (block,6), true)
final_goal(1, on((block,5)), nothing, false)
final_goal(1, on((block,5)), puzzle_room_table_left, false)
final_goal(1, on((block,5)), puzzle_room_table_right, false)
final_goal(1, on((block,6)), (block,1), false)
final_goal(1, on((block,6)), (block,2), false)
final_goal(1, on((block,6)), (block,3), false)
final_goal(1, on((block,6)), (block,4), false)
final_goal(1, on((block,6)), (block,5), false)
final_goal(1, on((block,6)), nothing, false)
final_goal(1, on((block,6)), puzzle_room_table_left, false)
final_goal(1, on((block,6)), puzzle_room_table_right, true)
final_goal(1, tower_base((block,1)), false, true)
final_goal(1, tower_base((block,1)), true, false)
final_goal(1, tower_base((block,2)), false, true)
final_goal(1, tower_base((block,2)), true, false)
final_goal(1, tower_base((block,3)), false, false)
final_goal(1, tower_base((block,3)), true, true)
final_goal(1, tower_base((block,4)), false, true)
final_goal(1, tower_base((block,4)), true, false)
final_goal(1, tower_base((block,5)), false, true)
final_goal(1, tower_base((block,5)), true, false)
final_goal(1, tower_base((block,6)), false, false)
final_goal(1, tower_base((block,6)), true, true)
final_goal(1, unordered_tower((block,1)), false, true)
final_goal(1, unordered_tower((block,1)), true, false)
final_goal(1, unordered_tower((block,2)), false, true)
final_goal(1, unordered_tower((block,2)), true, false)
final_goal(1, unordered_tower((block,3)), false, true)
final_goal(1, unordered_tower((block,3)), true, false)
final_goal(1, unordered_tower((block,4)), false, true)
final_goal(1, unordered_tower((block,4)), true, false)
final_goal(1, unordered_tower((block,5)), false, true)
final_goal(1, unordered_tower((block,5)), true, false)
final_goal(1, unordered_tower((block,6)), false, true)
final_goal(1, unordered_tower((block,6)), true, false)

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [57]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(0)]), ('plan_module', [Number(57), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.302396s.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='current_last_sgoals(30, 56)', truth=True, inc_range=None), conversion = current_last_sgoals(30,56).

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 57: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.054102s with result Unsatisfiable.

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [57]:
Result = SolveResult.Unsatisfiable, Stop condition = None
Increment time = 0.3564979000000008, Incremental time limit = None
Running cumulative time = 22.536268600000017, Cumulative time limit = 3600
Used memory = (RSS = 602.695312Mb, VMS = 615.457031Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-50] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=57, start_step=56, end_step=57, solve_result=<SolveResult.Unsatisfiable: 'UNSAT'>, cumulative_statistics=Statistics(grounding_time=16.135343800000044, solving_time=6.400924799999974, total_time=22.536268600000017, memory=Memory(rss=602.6953125, vms=615.45703125), step_range=range(0, 58), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3023956000000041, solving_time=0.05410229999999672, total_time=0.3564979000000008, memory=Memory(rss=602.6953125, vms=615.45703125), step_range=range(57, 58), clingo_stats={'problem': {'lp': {'atoms': 218776.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 710556.0, 'bodies_tr': 710556.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11517.0, 'count_bodies_tr': 11517.0, 'sccs': 1339.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 28453.0, 'rules': 1124521.0, 'rules_normal': 1112260.0, 'rules_choice': 11463.0, 'rules_minimize': 114.0, 'rules_acyc': 0.0, 'rules_heuristic': 684.0, 'rules_tr': 1124384.0, 'rules_tr_normal': 1112260.0, 'rules_tr_choice': 11463.0, 'rules_tr_minimize': 114.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 547.0, 'eqs': 535775.0, 'eqs_atom': 102642.0, 'eqs_body': 12585.0, 'eqs_other': 420548.0}, 'lpStep': {'atoms': 3762.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13688.0, 'bodies_tr': 13688.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28284.0, 'rules_normal': 28075.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28284.0, 'rules_tr_normal': 28075.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10032.0, 'eqs_atom': 1879.0, 'eqs_body': 70.0, 'eqs_other': 8083.0}, 'generator': {'vars': 125451.0, 'vars_eliminated': 0.0, 'vars_frozen': 77161.0, 'constraints': 4202.0, 'constraints_binary': 279905.0, 'constraints_ternary': 20068.0, 'acyc_edges': 0.0, 'complexity': 304803.0}}, 'solving': {'solvers': {'choices': 0.0, 'conflicts': 7.0, 'conflicts_analyzed': 0.0, 'restarts': 0.0, 'restarts_last': 0.0, 'extra': {'domain_choices': 0.0, 'models': 0.0, 'models_level': 0.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 0.0, 'distributed_sum_lbd': 0.0, 'integrated': 0.0, 'lemmas': 0.0, 'lits_learnt': 0.0, 'lemmas_binary': 0.0, 'lemmas_ternary': 0.0, 'cpu_time': 0.015625, 'integrated_imps': 0.0, 'integrated_jumps': 0.0, 'guiding_paths_lits': 6834.0, 'guiding_paths': 6.0, 'splits': 0.0, 'lemmas_conflict': 0.0, 'lemmas_loop': 0.0, 'lemmas_other': 0.0, 'lits_conflict': 0.0, 'lits_loop': 0.0, 'lits_other': 0.0, 'jumps': {'jumps': 0.0, 'jumps_bounded': 0.0, 'levels': 0.0, 'levels_bounded': 0.0, 'max': 0.0, 'max_executed': 0.0, 'max_bounded': 0.0}}}}, 'summary': {'call': 57.0, 'result': 2.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [inf, inf], 'lower': [1.0, 0.0], 'concurrency': 8.0, 'winner': 0.0, 'times': {'total': 0.3670196533203125, 'cpu': 0.359375, 'solve': 0.013963699340820312, 'unsat': 0.013963699340820312, 'sat': 0.0}, 'models': {'enumerated': 0.0, 'optimal': 0.0}}, 'accu': {'times': {'total': 23.447599411010742, 'cpu': 33.3125, 'solve': 4.74604606628418, 'unsat': 1.6934871673583984, 'sat': 0.7883358001708984}, 'models': {'enumerated': 86.0, 'optimal': 29.0}, 'solving': {'solvers': {'choices': 106921.0, 'conflicts': 9612.0, 'conflicts_analyzed': 9091.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 10013.0, 'models': 86.0, 'models_level': 54660.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7641.0, 'distributed_sum_lbd': 18683.0, 'integrated': 41655.0, 'lemmas': 61410.0, 'lits_learnt': 5436113.0, 'lemmas_binary': 4963.0, 'lemmas_ternary': 2540.0, 'cpu_time': 14.890625, 'integrated_imps': 13690.0, 'integrated_jumps': 16212.0, 'guiding_paths_lits': 172684.0, 'guiding_paths': 684.0, 'splits': 0.0, 'lemmas_conflict': 8963.0, 'lemmas_loop': 14169.0, 'lemmas_other': 38278.0, 'lits_conflict': 1078783.0, 'lits_loop': 117962.0, 'lits_other': 4239368.0, 'jumps': {'jumps': 9091.0, 'jumps_bounded': 1447.0, 'levels': 279726.0, 'levels_bounded': 261412.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [58]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =   None : Maximum =    150

[13-11-2021_23-39-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(0)]), ('plan_module', [Number(58), Number(0), Function('true', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(0), Function('true', [], True), Function('true', [], True), Function('none', [], True), Function('none', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(0), Number(1), Function('none', [], True), Function('sequential', [], True), Function('true', [], True)])]

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.324562s.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Assigning queued external for step 58: original = External(symbol='seq_achieve_fgoals(56)', truth=True, inc_range=IncRange(start=None, end=None, step=1)), conversion = seq_achieve_fgoals(56).

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.164313s with result Satisfiable.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [58]:
Result = SolveResult.Satisfiable, Stop condition = None
Increment time = 0.48887409999999676, Incremental time limit = None
Running cumulative time = 23.025142700000014, Cumulative time limit = 3600
Used memory = (RSS = 613.304688Mb, VMS = 623.382812Mb), Total system virtual memory = 16324.18359375Mb

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH EXHAUSTED : Total models = 88
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 16.459905s, Solving = 6.565237s, Total = 23.025143s, Memory = (RSS = 613.304688Mb, VMS = 623.382812Mb)), Calls = 58
Final Model :: Total atoms = 33854, Cost = (69, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-51] DEBUG :: ASH Planner Main #1 >> Increment feedback: Feedback(increment=58, start_step=57, end_step=58, solve_result=<SolveResult.Satisfiable: 'SAT'>, cumulative_statistics=Statistics(grounding_time=16.459905300000045, solving_time=6.565237399999969, total_time=23.025142700000014, memory=Memory(rss=613.3046875, vms=623.3828125), step_range=range(0, 59), clingo_stats={}), increment_statistics=Statistics(grounding_time=0.3245615000000015, solving_time=0.16431259999999526, total_time=0.48887409999999676, memory=Memory(rss=613.3046875, vms=623.3828125), step_range=range(58, 59), clingo_stats={'problem': {'lp': {'atoms': 222546.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 724283.0, 'bodies_tr': 724283.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 11718.0, 'count_bodies_tr': 11718.0, 'sccs': 1364.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 29047.0, 'rules': 1153279.0, 'rules_normal': 1140809.0, 'rules_choice': 11658.0, 'rules_minimize': 116.0, 'rules_acyc': 0.0, 'rules_heuristic': 696.0, 'rules_tr': 1153142.0, 'rules_tr_normal': 1140809.0, 'rules_tr_choice': 11658.0, 'rules_tr_minimize': 116.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 559.0, 'eqs': 545893.0, 'eqs_atom': 104529.0, 'eqs_body': 12655.0, 'eqs_other': 428709.0}, 'lpStep': {'atoms': 3770.0, 'atoms_aux': 0.0, 'disjunctions': 0.0, 'disjunctions_non_hcf': 0.0, 'bodies': 13727.0, 'bodies_tr': 13727.0, 'sum_bodies': 0.0, 'sum_bodies_tr': 0.0, 'count_bodies': 201.0, 'count_bodies_tr': 201.0, 'sccs': 25.0, 'sccs_non_hcf': 0.0, 'gammas': 0.0, 'ufs_nodes': 594.0, 'rules': 28758.0, 'rules_normal': 28549.0, 'rules_choice': 195.0, 'rules_minimize': 2.0, 'rules_acyc': 0.0, 'rules_heuristic': 12.0, 'rules_tr': 28758.0, 'rules_tr_normal': 28549.0, 'rules_tr_choice': 195.0, 'rules_tr_minimize': 2.0, 'rules_tr_acyc': 0.0, 'rules_tr_heuristic': 12.0, 'eqs': 10118.0, 'eqs_atom': 1887.0, 'eqs_body': 70.0, 'eqs_other': 8161.0}, 'generator': {'vars': 128103.0, 'vars_eliminated': 0.0, 'vars_frozen': 78778.0, 'constraints': 4854.0, 'constraints_binary': 304967.0, 'constraints_ternary': 24032.0, 'acyc_edges': 0.0, 'complexity': 334565.0}}, 'solving': {'solvers': {'choices': 3837.0, 'conflicts': 180.0, 'conflicts_analyzed': 170.0, 'restarts': 0.0, 'restarts_last': 38.0, 'extra': {'domain_choices': 455.0, 'models': 2.0, 'models_level': 3217.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 155.0, 'distributed_sum_lbd': 354.0, 'integrated': 930.0, 'lemmas': 1346.0, 'lits_learnt': 29821.0, 'lemmas_binary': 158.0, 'lemmas_ternary': 124.0, 'cpu_time': 0.296875, 'integrated_imps': 410.0, 'integrated_jumps': 539.0, 'guiding_paths_lits': 8197.0, 'guiding_paths': 17.0, 'splits': 0.0, 'lemmas_conflict': 161.0, 'lemmas_loop': 350.0, 'lemmas_other': 835.0, 'lits_conflict': 4914.0, 'lits_loop': 3153.0, 'lits_other': 21754.0, 'jumps': {'jumps': 170.0, 'jumps_bounded': 41.0, 'levels': 6112.0, 'levels_bounded': 5752.0, 'max': 1172.0, 'max_executed': 1172.0, 'max_bounded': 1171.0}}}}, 'summary': {'call': 58.0, 'result': 1.0, 'signal': 0.0, 'exhausted': 1.0, 'costs': [69.0, 0.0], 'lower': [69.0, 0.0], 'concurrency': 8.0, 'winner': 2.0, 'times': {'total': 0.4992408752441406, 'cpu': 0.6875, 'solve': 0.10968208312988281, 'unsat': 0.033908843994140625, 'sat': 0.030893325805664062}, 'models': {'enumerated': 2.0, 'optimal': 1.0}}, 'accu': {'times': {'total': 23.946840286254883, 'cpu': 34.0, 'solve': 4.8557281494140625, 'unsat': 1.727396011352539, 'sat': 0.8192291259765625}, 'models': {'enumerated': 88.0, 'optimal': 30.0}, 'solving': {'solvers': {'choices': 110758.0, 'conflicts': 9792.0, 'conflicts_analyzed': 9261.0, 'restarts': 15.0, 'restarts_last': 343.0, 'extra': {'domain_choices': 10468.0, 'models': 88.0, 'models_level': 57877.0, 'hcc_tests': 0.0, 'hcc_partial': 0.0, 'lemmas_deleted': 0.0, 'distributed': 7796.0, 'distributed_sum_lbd': 19037.0, 'integrated': 42585.0, 'lemmas': 62756.0, 'lits_learnt': 5465934.0, 'lemmas_binary': 5121.0, 'lemmas_ternary': 2664.0, 'cpu_time': 15.1875, 'integrated_imps': 14100.0, 'integrated_jumps': 16751.0, 'guiding_paths_lits': 180881.0, 'guiding_paths': 701.0, 'splits': 0.0, 'lemmas_conflict': 9124.0, 'lemmas_loop': 14519.0, 'lemmas_other': 39113.0, 'lits_conflict': 1083697.0, 'lits_loop': 121115.0, 'lits_other': 4261122.0, 'jumps': {'jumps': 9261.0, 'jumps_bounded': 1488.0, 'levels': 285838.0, 'levels_bounded': 267164.0, 'max': 1672.0, 'max_executed': 1672.0, 'max_bounded': 1671.0}}}}}, 'user_step': {}, 'user_accu': {}}))

[13-11-2021_23-39-51] DEBUG :: ASH Planner Main #1 >> Current sequential yield steps:
{25: 47, 26: 50, 27: 52, 28: 55, 29: 56, 30: 58}

[13-11-2021_23-39-51] DEBUG :: ASH Planner Main #1 >> Goal at sequence index 31 achieved :: Progression >> total requested sgoals = 6, current total achieved sgoals = 7 (116.67% solved)

[13-11-2021_23-39-51] DEBUG :: ASH Planner Main #1 >> Terminating solving because last in problem sequence goal at index 30 was achieved successfully.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Exiting incremental run loop from caught generator exit.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.354841s, Solving = 0.014656s, Total = 0.369497s, Memory = (RSS = 212.695312Mb, VMS = 203.542969Mb)
2 : Statistics :: Grounding = 0.171898s, Solving = 0.011550s, Total = 0.183448s, Memory = (RSS = 214.488281Mb, VMS = 205.753906Mb)
3 : Statistics :: Grounding = 0.218843s, Solving = 0.011994s, Total = 0.230837s, Memory = (RSS = 216.796875Mb, VMS = 207.828125Mb)
4 : Statistics :: Grounding = 0.242261s, Solving = 0.007012s, Total = 0.249273s, Memory = (RSS = 218.238281Mb, VMS = 209.019531Mb)
5 : Statistics :: Grounding = 0.258064s, Solving = 0.012757s, Total = 0.270821s, Memory = (RSS = 223.519531Mb, VMS = 214.519531Mb)
6 : Statistics :: Grounding = 0.258460s, Solving = 0.015432s, Total = 0.273892s, Memory = (RSS = 228.601562Mb, VMS = 220.160156Mb)
7 : Statistics :: Grounding = 0.244636s, Solving = 0.027616s, Total = 0.272252s, Memory = (RSS = 236.832031Mb, VMS = 229.296875Mb)
8 : Statistics :: Grounding = 0.270229s, Solving = 0.019479s, Total = 0.289708s, Memory = (RSS = 242.281250Mb, VMS = 234.308594Mb)
9 : Statistics :: Grounding = 0.275772s, Solving = 0.026332s, Total = 0.302105s, Memory = (RSS = 250.570312Mb, VMS = 243.796875Mb)
10 : Statistics :: Grounding = 0.275814s, Solving = 0.033745s, Total = 0.309560s, Memory = (RSS = 254.960938Mb, VMS = 247.535156Mb)
11 : Statistics :: Grounding = 0.266745s, Solving = 0.054024s, Total = 0.320770s, Memory = (RSS = 259.937500Mb, VMS = 252.070312Mb)
12 : Statistics :: Grounding = 0.279657s, Solving = 0.065987s, Total = 0.345644s, Memory = (RSS = 270.566406Mb, VMS = 265.093750Mb)
13 : Statistics :: Grounding = 0.270707s, Solving = 0.111081s, Total = 0.381788s, Memory = (RSS = 273.394531Mb, VMS = 266.636719Mb)
14 : Statistics :: Grounding = 0.296313s, Solving = 0.037970s, Total = 0.334283s, Memory = (RSS = 278.074219Mb, VMS = 270.976562Mb)
15 : Statistics :: Grounding = 0.327567s, Solving = 0.322777s, Total = 0.650344s, Memory = (RSS = 294.429688Mb, VMS = 294.078125Mb)
16 : Statistics :: Grounding = 0.276918s, Solving = 0.193113s, Total = 0.470031s, Memory = (RSS = 305.027344Mb, VMS = 303.402344Mb)
17 : Statistics :: Grounding = 0.280480s, Solving = 0.069022s, Total = 0.349502s, Memory = (RSS = 312.875000Mb, VMS = 310.371094Mb)
18 : Statistics :: Grounding = 0.288519s, Solving = 0.268018s, Total = 0.556537s, Memory = (RSS = 326.050781Mb, VMS = 321.941406Mb)
19 : Statistics :: Grounding = 0.299374s, Solving = 0.080286s, Total = 0.379660s, Memory = (RSS = 335.382812Mb, VMS = 330.718750Mb)
20 : Statistics :: Grounding = 0.316110s, Solving = 0.032650s, Total = 0.348760s, Memory = (RSS = 340.617188Mb, VMS = 334.539062Mb)
21 : Statistics :: Grounding = 0.300881s, Solving = 0.169022s, Total = 0.469903s, Memory = (RSS = 352.699219Mb, VMS = 357.703125Mb)
22 : Statistics :: Grounding = 0.306098s, Solving = 0.453395s, Total = 0.759493s, Memory = (RSS = 365.527344Mb, VMS = 369.585938Mb)
23 : Statistics :: Grounding = 0.312556s, Solving = 0.308633s, Total = 0.621189s, Memory = (RSS = 384.101562Mb, VMS = 386.667969Mb)
24 : Statistics :: Grounding = 0.264452s, Solving = 0.027282s, Total = 0.291734s, Memory = (RSS = 386.421875Mb, VMS = 388.714844Mb)
25 : Statistics :: Grounding = 0.245595s, Solving = 0.058659s, Total = 0.304253s, Memory = (RSS = 390.332031Mb, VMS = 391.617188Mb)
26 : Statistics :: Grounding = 0.256532s, Solving = 0.036428s, Total = 0.292959s, Memory = (RSS = 394.734375Mb, VMS = 395.554688Mb)
27 : Statistics :: Grounding = 0.274301s, Solving = 0.045806s, Total = 0.320107s, Memory = (RSS = 397.609375Mb, VMS = 397.128906Mb)
28 : Statistics :: Grounding = 0.271366s, Solving = 0.106126s, Total = 0.377492s, Memory = (RSS = 404.292969Mb, VMS = 402.628906Mb)
29 : Statistics :: Grounding = 0.329346s, Solving = 0.310165s, Total = 0.639511s, Memory = (RSS = 418.316406Mb, VMS = 415.492188Mb)
30 : Statistics :: Grounding = 0.277014s, Solving = 0.035240s, Total = 0.312254s, Memory = (RSS = 421.738281Mb, VMS = 418.347656Mb)
31 : Statistics :: Grounding = 0.281154s, Solving = 0.084861s, Total = 0.366014s, Memory = (RSS = 427.890625Mb, VMS = 422.632812Mb)
32 : Statistics :: Grounding = 0.287695s, Solving = 0.112060s, Total = 0.399754s, Memory = (RSS = 436.804688Mb, VMS = 430.929688Mb)
33 : Statistics :: Grounding = 0.276968s, Solving = 0.054203s, Total = 0.331171s, Memory = (RSS = 446.699219Mb, VMS = 459.125000Mb)
34 : Statistics :: Grounding = 0.322576s, Solving = 0.348662s, Total = 0.671237s, Memory = (RSS = 460.824219Mb, VMS = 471.566406Mb)
35 : Statistics :: Grounding = 0.287235s, Solving = 0.136167s, Total = 0.423402s, Memory = (RSS = 475.968750Mb, VMS = 485.222656Mb)
36 : Statistics :: Grounding = 0.298932s, Solving = 0.055622s, Total = 0.354554s, Memory = (RSS = 444.945312Mb, VMS = 452.570312Mb)
37 : Statistics :: Grounding = 0.196085s, Solving = 0.089393s, Total = 0.285477s, Memory = (RSS = 453.613281Mb, VMS = 460.878906Mb)
38 : Statistics :: Grounding = 0.193223s, Solving = 0.088434s, Total = 0.281658s, Memory = (RSS = 458.750000Mb, VMS = 465.125000Mb)
39 : Statistics :: Grounding = 0.262832s, Solving = 0.073584s, Total = 0.336416s, Memory = (RSS = 466.332031Mb, VMS = 472.316406Mb)
40 : Statistics :: Grounding = 0.267634s, Solving = 0.099588s, Total = 0.367222s, Memory = (RSS = 475.867188Mb, VMS = 480.472656Mb)
41 : Statistics :: Grounding = 0.289562s, Solving = 0.039220s, Total = 0.328782s, Memory = (RSS = 479.109375Mb, VMS = 482.339844Mb)
42 : Statistics :: Grounding = 0.310618s, Solving = 0.122120s, Total = 0.432738s, Memory = (RSS = 490.343750Mb, VMS = 492.781250Mb)
43 : Statistics :: Grounding = 0.279074s, Solving = 0.046040s, Total = 0.325113s, Memory = (RSS = 492.800781Mb, VMS = 493.933594Mb)
44 : Statistics :: Grounding = 0.294740s, Solving = 0.097442s, Total = 0.392182s, Memory = (RSS = 495.035156Mb, VMS = 494.519531Mb)
45 : Statistics :: Grounding = 0.315378s, Solving = 0.450861s, Total = 0.766239s, Memory = (RSS = 505.777344Mb, VMS = 503.312500Mb)
46 : Statistics :: Grounding = 0.306908s, Solving = 0.124887s, Total = 0.431794s, Memory = (RSS = 514.296875Mb, VMS = 510.101562Mb)
47 : Statistics :: Grounding = 0.308872s, Solving = 0.124630s, Total = 0.433503s, Memory = (RSS = 532.378906Mb, VMS = 526.570312Mb)
48 : Statistics :: Grounding = 0.245912s, Solving = 0.055463s, Total = 0.301375s, Memory = (RSS = 535.445312Mb, VMS = 529.144531Mb)
49 : Statistics :: Grounding = 0.250527s, Solving = 0.052886s, Total = 0.303413s, Memory = (RSS = 538.238281Mb, VMS = 544.777344Mb)
50 : Statistics :: Grounding = 0.308813s, Solving = 0.145810s, Total = 0.454623s, Memory = (RSS = 549.078125Mb, VMS = 571.453125Mb)
51 : Statistics :: Grounding = 0.337438s, Solving = 0.065109s, Total = 0.402547s, Memory = (RSS = 554.265625Mb, VMS = 576.066406Mb)
52 : Statistics :: Grounding = 0.301233s, Solving = 0.171073s, Total = 0.472306s, Memory = (RSS = 573.109375Mb, VMS = 593.117188Mb)
53 : Statistics :: Grounding = 0.321005s, Solving = 0.051902s, Total = 0.372908s, Memory = (RSS = 572.261719Mb, VMS = 590.351562Mb)
54 : Statistics :: Grounding = 0.313517s, Solving = 0.070523s, Total = 0.384040s, Memory = (RSS = 577.359375Mb, VMS = 595.445312Mb)
55 : Statistics :: Grounding = 0.341143s, Solving = 0.497821s, Total = 0.838963s, Memory = (RSS = 587.347656Mb, VMS = 602.800781Mb)
56 : Statistics :: Grounding = 0.322526s, Solving = 0.122205s, Total = 0.444731s, Memory = (RSS = 599.613281Mb, VMS = 614.019531Mb)
57 : Statistics :: Grounding = 0.302396s, Solving = 0.054102s, Total = 0.356498s, Memory = (RSS = 602.695312Mb, VMS = 615.457031Mb)
58 : Statistics :: Grounding = 0.324562s, Solving = 0.164313s, Total = 0.488874s, Memory = (RSS = 613.304688Mb, VMS = 623.382812Mb)

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 23.025143s due to: External generator exit.

[13-11-2021_23-39-51] DEBUG :: ASH Planner Main #1 >> Deleting program grounding at level 1.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[13-11-2021_23-39-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[13-11-2021_23-39-52] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 32, 15: 33, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 46}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Current sub-goals: {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 3, 10: 3, 11: 3, 12: 3, 13: 3, 14: 3, 15: 4, 16: 5, 17: 6, 18: 7, 19: 8, 20: 8, 21: 9, 22: 9, 23: 10, 24: 11, 25: 11, 26: 12, 27: 12, 28: 12, 29: 13, 30: 13, 31: 14, 32: 14, 33: 15, 34: 16, 35: 17, 36: 18, 37: 18, 38: 19, 39: 20, 40: 21, 41: 22, 42: 22, 43: 23, 44: 23, 45: 23, 46: 24, 47: 24, 48: 25, 49: 25, 50: 26, 51: 27, 52: 27, 53: 28, 54: 28, 55: 28, 56: 29, 57: 29, 58: 30}
Sub-goal achievement steps: {1: 2, 2: 5, 3: 14, 4: 15, 5: 16, 6: 17, 7: 18, 8: 20, 9: 22, 10: 23, 11: 25, 12: 28, 13: 30, 14: 32, 15: 33, 16: 34, 17: 35, 18: 37, 19: 38, 20: 39, 21: 40, 22: 42, 23: 45, 24: 47, 25: 49, 26: 50, 27: 52, 28: 55, 29: 57, 30: 58}
Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 13: 4, 14: 4, 15: 5, 16: 6, 17: 7, 18: 8, 19: 9, 20: 10, 21: 11, 22: 11, 23: 11, 24: 12, 25: 12, 26: 13, 27: 13, 28: 13, 29: 14, 30: 14}
Sub-goal achievement steps: {1: 7, 2: 9, 3: 12, 4: 14, 5: 15, 6: 16, 7: 17, 8: 18, 9: 19, 10: 20, 11: 23, 12: 25, 13: 28, 14: 30}
Current sub-goals: {}
Sub-goal achievement steps: {}

[13-11-2021_23-39-53] INFO :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 30, Last requested goal index = 30 (100.0% solved):
Search finished as expected, the requested partial problem has been solved entirely.

[13-11-2021_23-39-53] INFO :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH EXHAUSTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 16.459905s, Solving = 6.565237s, Total = 23.025143s, Memory = (RSS = 613.304688Mb, VMS = 623.382812Mb)), Calls = 58
Model :: Total atoms = 33854, Cost = (69, 0), Optimality proven = False, Number = 2, Thread ID = 1, Model type = ModelType.StableModel

[13-11-2021_23-39-53] INFO :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,1))
Step 3:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 4:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 5:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))
        talos : configure(manipulator_limb_2,extended)
Step 6:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,puzzle_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_end_1,puzzle_room_door)
Step 8:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
        talos : release(manipulator_end_1,puzzle_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 10:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 11:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 12:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = puzzle_room_door_handle_outer
        [Index = 3] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 15:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_1,puzzle_room_door) -> configuration(puzzle_room_door) = open
        [Index = 4] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 16:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_1,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_1) = nothing
        [Index = 5] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 17:
    Current Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 6] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 6] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 18:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 19:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 20:
    Current Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 8] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 8] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 21:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 22:
    Current Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Achieved Sub-goals:
        [Index = 9] talos : grasp(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = (block,6)
        [Index = 9] talos : grasp(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
        talos : grasp(manipulator_end_2,(block,5))
Step 23:
    Current Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 10] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 10] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 24:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 25:
    Current Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 11] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 26:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 27:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 28:
    Current Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 12] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 29:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 30:
    Current Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 13] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 32:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 14] talos : put(manipulator_arm_1,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,6))
Step 33:
    Current Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 15] talos : release(manipulator_arm_1,(block,6)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 34:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
        [Index = 16] talos : put(manipulator_arm_2,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
        [Index = 17] talos : release(manipulator_arm_2,(block,5)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_left)
        talos : release(manipulator_end_2,(block,5))
Step 36:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,2)))
        talos : configure(manipulator_limb_2,extended)
        talos : release(manipulator_end_1,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : grasp(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = (block,2)
        [Index = 18] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
        talos : grasp(manipulator_end_2,(block,2))
Step 38:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
        [Index = 19] talos : put(manipulator_arm_2,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
        talos : put(manipulator_end_2,(block,2),(block,3))
Step 39:
    Current Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 20] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
        [Index = 20] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
        [Index = 20] talos : release(manipulator_arm_2,(block,2)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : lift(manipulator_end_1,(block,1))
        talos : release(manipulator_end_2,(block,2))
Step 40:
    Current Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
        [Index = 21] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
        [Index = 21] talos : lift(manipulator_arm_1,(block,1)) -> on((block,1)) = nothing
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
        talos : configure(manipulator_limb_2,retracted)
Step 41:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0))
Step 42:
    Current Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 22] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,2))
Step 43:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 44:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0))
Step 45:
    Current Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 23] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,1))
Step 46:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0))
Step 47:
    Current Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 24] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 48:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 49:
    Current Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 25] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 50:
    Current Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 26] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 51:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1))
Step 52:
    Current Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 27] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0))
Step 53:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1))
Step 54:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2))
Step 55:
    Current Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 28] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0))
Step 56:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1))
Step 57:
    Current Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 29] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
        [Index = 29] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
        talos : configure(manipulator_limb_2,extended)
Step 58:
    Current Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 30] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
        [Index = 30] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))
        talos : put(manipulator_end_2,(block,4),(block,5))

[13-11-2021_23-39-53] INFO :: ASH Planner Main #1 >> Online planning increment 4 finished.

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-53] INFO :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 58, Actions = 21

[13-11-2021_23-39-53] INFO :: ASH Planner Main #1 >>           ========================================          
                     Ground level plan                      
          ========================================          
                 Steps = 58 :: Actions = 75                 
                ----------------------------                

(1, [Action({'L': 1, 'R': 'talos', 'A': 'move((starting_room,1))', 'S': 1})])
(2, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 2})])
(3, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 3})])
(4, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 4})])
(5, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with(puzzle_room_door_handle_outer))', 'S': 5}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 5})])
(6, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 6})])
(7, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_1,puzzle_room_door)', 'S': 7})])
(8, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 8}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,puzzle_room_door_handle_outer)', 'S': 8})])
(9, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 9})])
(10, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 10})])
(11, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 11})])
(12, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 12})])
(13, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))', 'S': 13})])
(14, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,store_room_door_handle_outer)', 'S': 14})])
(15, [Action({'L': 1, 'R': 'talos', 'A': 'actuate(manipulator_end_2,store_room_door)', 'S': 15})])
(16, [Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,store_room_door_handle_outer)', 'S': 16})])
(17, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 17})])
(18, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 18})])
(19, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 19})])
(20, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 20}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 20})])
(21, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,6)))', 'S': 21}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,5)))', 'S': 21})])
(22, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,6))', 'S': 22}), Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,5))', 'S': 22})])
(23, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 23}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 23})])
(24, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 24})])
(25, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 25})])
(26, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 26})])
(27, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 27})])
(28, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 28})])
(29, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 29})])
(30, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 30})])
(31, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,6),puzzle_room_table_right)', 'S': 31})])
(32, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 32}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,6))', 'S': 32})])
(33, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,3)))', 'S': 33}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,5),(block,6))', 'S': 33})])
(34, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,3))', 'S': 34})])
(35, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,3),puzzle_room_table_left)', 'S': 35}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,5))', 'S': 35})])
(36, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,2)))', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 36}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_1,(block,3))', 'S': 36})])
(37, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_1,aligned_with((block,1)))', 'S': 37}), Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,2))', 'S': 37})])
(38, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_1,(block,1))', 'S': 38}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,2),(block,3))', 'S': 38})])
(39, [Action({'L': 1, 'R': 'talos', 'A': 'lift(manipulator_end_1,(block,1))', 'S': 39}), Action({'L': 1, 'R': 'talos', 'A': 'release(manipulator_end_2,(block,2))', 'S': 39})])
(40, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,retracted)', 'S': 40}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 40})])
(41, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 41})])
(42, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 42})])
(43, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 43})])
(44, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 44})])
(45, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 45})])
(46, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,0))', 'S': 46})])
(47, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 47})])
(48, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_end_2,aligned_with((block,4)))', 'S': 48})])
(49, [Action({'L': 1, 'R': 'talos', 'A': 'grasp(manipulator_end_2,(block,4))', 'S': 49})])
(50, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,retracted)', 'S': 50})])
(51, [Action({'L': 1, 'R': 'talos', 'A': 'move((store_room,1))', 'S': 51})])
(52, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,0))', 'S': 52})])
(53, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,1))', 'S': 53})])
(54, [Action({'L': 1, 'R': 'talos', 'A': 'move((hallway,2))', 'S': 54})])
(55, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,0))', 'S': 55})])
(56, [Action({'L': 1, 'R': 'talos', 'A': 'move((puzzle_room,1))', 'S': 56})])
(57, [Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_1,extended)', 'S': 57}), Action({'L': 1, 'R': 'talos', 'A': 'configure(manipulator_limb_2,extended)', 'S': 57})])
(58, [Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_1,(block,1),(block,2))', 'S': 58}), Action({'L': 1, 'R': 'talos', 'A': 'put(manipulator_end_2,(block,4),(block,5))', 'S': 58})])

Hierarchical planning summary: (Execution latency = 13.347396699999997, Overall total planning time = 31.45133040000002, Average partial plan yield time = 15.635383125000002)

     ====================================================================================================================================================================================     
 | Level =  3 (classic), Length =  14, Actions =  21 (Com = 0.67), Sgs = 21, Time =   1.870s (Gro =   1.541s, Sea =   0.328s), Expan (1.00, 1.00) (Dev = (0.00, 0.00), Bal = (0.00, 0.00)) |  
 | Level =  2 (com-ref), Length =  30, Actions =  49 (Com = 0.61), Sgs = 49, Time =   6.517s (Gro =   4.918s, Sea =   1.600s), Expan (2.14, 2.33) (Dev = (1.61, 2.92), Bal = (0.75, 1.25)) |  
  | Level =  1 (com-ref), Length =  58, Actions =  75 (Com = 0.77), Sgs = 0, Time =  23.065s (Gro =  16.493s, Sea =   6.572s), Expan (1.93, 1.53) (Dev = (1.51, 0.99), Bal = (0.78, 0.65)) |  
     ====================================================================================================================================================================================     

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=58, step_range=range(0, 59)

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=30, step_range=range(0, 31)

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=14, step_range=range(0, 15)

[13-11-2021_23-39-53] DEBUG :: ASH Planner Main #1 >> Current plan lengths: Level [1]: Length = 58, Actions = 75
Level [2]: Length = 30, Actions = 49
Level [3]: Length = 14, Actions = 21

[13-11-2021_23-39-53] INFO :: __main__ >> Saving generated plan to file: ./solutions/plans/ASH_Plan_2021-11-13_23-39-11.txt

[13-11-2021_23-39-53] INFO :: __main__ >> Saving generated refinement schema to file: ./solutions/schemas/ASH_Schema_2021-11-13_23-39-11.txt

[13-11-2021_23-39-53] ERROR :: __main__ >> Exception during main:

Traceback (most recent call last):
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 912, in <module>
    exit_code = __main()
  File "C:\Users\Ollie Kampo\OneDrive - University of Birmingham\Desktop\ASH - Planner\launch.py", line 476, in __main
    concat_length
NameError: name 'concat_length' is not defined
[13-11-2021_23-39-53] INFO :: __main__ >> Overall time: Real = 41.7876129, Process = 54.15625

[13-11-2021_23-39-53] INFO :: __main__ >> Exiting with code -1

